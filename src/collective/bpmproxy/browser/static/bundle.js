(function () {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var hat_1 = createCommonjsModule(function (module) {
    var hat = module.exports = function (bits, base) {
        if (!base) base = 16;
        if (bits === undefined) bits = 128;
        if (bits <= 0) return '0';
        
        var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
        for (var i = 2; digits === Infinity; i *= 2) {
            digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
        }
        
        var rem = digits - Math.floor(digits);
        
        var res = '';
        
        for (var i = 0; i < Math.floor(digits); i++) {
            var x = Math.floor(Math.random() * base).toString(base);
            res = x + res;
        }
        
        if (rem) {
            var b = Math.pow(base, rem);
            var x = Math.floor(Math.random() * b).toString(base);
            res = x + res;
        }
        
        var parsed = parseInt(res, base);
        if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
            return hat(bits, base)
        }
        else return res;
    };

    hat.rack = function (bits, base, expandBy) {
        var fn = function (data) {
            var iters = 0;
            do {
                if (iters ++ > 10) {
                    if (expandBy) bits += expandBy;
                    else throw new Error('too many ID collisions, use more bits')
                }
                
                var id = hat(bits, base);
            } while (Object.hasOwnProperty.call(hats, id));
            
            hats[id] = data;
            return id;
        };
        var hats = fn.hats = {};
        
        fn.get = function (id) {
            return fn.hats[id];
        };
        
        fn.set = function (id, value) {
            fn.hats[id] = value;
            return fn;
        };
        
        fn.bits = bits || 128;
        fn.base = base || 16;
        return fn;
    };
    });

    /**
     * Create a new id generator / cache instance.
     *
     * You may optionally provide a seed that is used internally.
     *
     * @param {Seed} seed
     */

    function Ids(seed) {
      if (!(this instanceof Ids)) {
        return new Ids(seed);
      }

      seed = seed || [128, 36, 1];
      this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;
    }
    /**
     * Generate a next id.
     *
     * @param {Object} [element] element to bind the id to
     *
     * @return {String} id
     */

    Ids.prototype.next = function (element) {
      return this._seed(element || true);
    };
    /**
     * Generate a next id with a given prefix.
     *
     * @param {Object} [element] element to bind the id to
     *
     * @return {String} id
     */


    Ids.prototype.nextPrefixed = function (prefix, element) {
      var id;

      do {
        id = prefix + this.next(true);
      } while (this.assigned(id)); // claim {prefix}{random}


      this.claim(id, element); // return

      return id;
    };
    /**
     * Manually claim an existing id.
     *
     * @param {String} id
     * @param {String} [element] element the id is claimed by
     */


    Ids.prototype.claim = function (id, element) {
      this._seed.set(id, element || true);
    };
    /**
     * Returns true if the given id has already been assigned.
     *
     * @param  {String} id
     * @return {Boolean}
     */


    Ids.prototype.assigned = function (id) {
      return this._seed.get(id) || false;
    };
    /**
     * Unclaim an id.
     *
     * @param  {String} id the id to unclaim
     */


    Ids.prototype.unclaim = function (id) {
      delete this._seed.hats[id];
    };
    /**
     * Clear all claimed ids.
     */


    Ids.prototype.clear = function () {
      var hats = this._seed.hats,
          id;

      for (id in hats) {
        this.unclaim(id);
      }
    };

    /**
     * Flatten array, one level deep.
     *
     * @template T
     *
     * @param {T[][]} arr
     *
     * @return {T[]}
     */
    function flatten$3(arr) {
      return Array.prototype.concat.apply([], arr);
    }

    const nativeToString$1 = Object.prototype.toString;
    const nativeHasOwnProperty$1 = Object.prototype.hasOwnProperty;

    function isUndefined$3(obj) {
      return obj === undefined;
    }

    function isDefined(obj) {
      return obj !== undefined;
    }

    function isNil(obj) {
      return obj == null;
    }

    function isArray$5(obj) {
      return nativeToString$1.call(obj) === '[object Array]';
    }

    function isObject(obj) {
      return nativeToString$1.call(obj) === '[object Object]';
    }

    function isNumber$3(obj) {
      return nativeToString$1.call(obj) === '[object Number]';
    }

    /**
     * @param {any} obj
     *
     * @return {boolean}
     */
    function isFunction(obj) {
      const tag = nativeToString$1.call(obj);

      return (
        tag === '[object Function]' ||
        tag === '[object AsyncFunction]' ||
        tag === '[object GeneratorFunction]' ||
        tag === '[object AsyncGeneratorFunction]' ||
        tag === '[object Proxy]'
      );
    }

    function isString$3(obj) {
      return nativeToString$1.call(obj) === '[object String]';
    }


    /**
     * Ensure collection is an array.
     *
     * @param {Object} obj
     */
    function ensureArray(obj) {

      if (isArray$5(obj)) {
        return;
      }

      throw new Error('must supply array');
    }

    /**
     * Return true, if target owns a property with the given key.
     *
     * @param {Object} target
     * @param {String} key
     *
     * @return {Boolean}
     */
    function has$1(target, key) {
      return nativeHasOwnProperty$1.call(target, key);
    }

    /**
     * @template T
     * @typedef { (
     *   ((e: T) => boolean) |
     *   ((e: T, idx: number) => boolean) |
     *   ((e: T, key: string) => boolean) |
     *   string |
     *   number
     * ) } Matcher
     */

    /**
     * @template T
     * @template U
     *
     * @typedef { (
     *   ((e: T) => U) | string | number
     * ) } Extractor
     */


    /**
     * @template T
     * @typedef { (val: T, key: any) => boolean } MatchFn
     */

    /**
     * @template T
     * @typedef { T[] } ArrayCollection
     */

    /**
     * @template T
     * @typedef { { [key: string]: T } } StringKeyValueCollection
     */

    /**
     * @template T
     * @typedef { { [key: number]: T } } NumberKeyValueCollection
     */

    /**
     * @template T
     * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection
     */

    /**
     * @template T
     * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection
     */

    /**
     * Find element in collection.
     *
     * @template T
     * @param {Collection<T>} collection
     * @param {Matcher<T>} matcher
     *
     * @return {Object}
     */
    function find$1(collection, matcher) {

      const matchFn = toMatcher(matcher);

      let match;

      forEach$1(collection, function(val, key) {
        if (matchFn(val, key)) {
          match = val;

          return false;
        }
      });

      return match;

    }


    /**
     * Find element index in collection.
     *
     * @template T
     * @param {Collection<T>} collection
     * @param {Matcher<T>} matcher
     *
     * @return {number}
     */
    function findIndex(collection, matcher) {

      const matchFn = toMatcher(matcher);

      let idx = isArray$5(collection) ? -1 : undefined;

      forEach$1(collection, function(val, key) {
        if (matchFn(val, key)) {
          idx = key;

          return false;
        }
      });

      return idx;
    }


    /**
     * Filter elements in collection.
     *
     * @template T
     * @param {Collection<T>} collection
     * @param {Matcher<T>} matcher
     *
     * @return {T[]} result
     */
    function filter(collection, matcher) {

      const matchFn = toMatcher(matcher);

      let result = [];

      forEach$1(collection, function(val, key) {
        if (matchFn(val, key)) {
          result.push(val);
        }
      });

      return result;
    }


    /**
     * Iterate over collection; returning something
     * (non-undefined) will stop iteration.
     *
     * @template T
     * @param {Collection<T>} collection
     * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator
     *
     * @return {T} return result that stopped the iteration
     */
    function forEach$1(collection, iterator) {

      let val,
          result;

      if (isUndefined$3(collection)) {
        return;
      }

      const convertKey = isArray$5(collection) ? toNum$1 : identity$1;

      for (let key in collection) {

        if (has$1(collection, key)) {
          val = collection[key];

          result = iterator(val, convertKey(key));

          if (result === false) {
            return val;
          }
        }
      }
    }

    /**
     * Return collection without element.
     *
     * @template T
     * @param {ArrayCollection<T>} arr
     * @param {Matcher<T>} matcher
     *
     * @return {T[]}
     */
    function without(arr, matcher) {

      if (isUndefined$3(arr)) {
        return [];
      }

      ensureArray(arr);

      const matchFn = toMatcher(matcher);

      return arr.filter(function(el, idx) {
        return !matchFn(el, idx);
      });

    }


    /**
     * Reduce collection, returning a single result.
     *
     * @template T
     * @template V
     *
     * @param {Collection<T>} collection
     * @param {(result: V, entry: T, index: any) => V} iterator
     * @param {V} result
     *
     * @return {V} result returned from last iterator
     */
    function reduce(collection, iterator, result) {

      forEach$1(collection, function(value, idx) {
        result = iterator(result, value, idx);
      });

      return result;
    }


    /**
     * Return true if every element in the collection
     * matches the criteria.
     *
     * @param  {Object|Array} collection
     * @param  {Function} matcher
     *
     * @return {Boolean}
     */
    function every(collection, matcher) {

      return !!reduce(collection, function(matches, val, key) {
        return matches && matcher(val, key);
      }, true);
    }


    /**
     * Return true if some elements in the collection
     * match the criteria.
     *
     * @param  {Object|Array} collection
     * @param  {Function} matcher
     *
     * @return {Boolean}
     */
    function some(collection, matcher) {

      return !!find$1(collection, matcher);
    }


    /**
     * Transform a collection into another collection
     * by piping each member through the given fn.
     *
     * @param  {Object|Array}   collection
     * @param  {Function} fn
     *
     * @return {Array} transformed collection
     */
    function map$1(collection, fn) {

      let result = [];

      forEach$1(collection, function(val, key) {
        result.push(fn(val, key));
      });

      return result;
    }


    /**
     * Get the collections keys.
     *
     * @param  {Object|Array} collection
     *
     * @return {Array}
     */
    function keys(collection) {
      return collection && Object.keys(collection) || [];
    }


    /**
     * Get the values in the collection.
     *
     * @param  {Object|Array} collection
     *
     * @return {Array}
     */
    function values(collection) {
      return map$1(collection, (val) => val);
    }


    /**
     * Group collection members by attribute.
     *
     * @param {Object|Array} collection
     * @param {Extractor} extractor
     *
     * @return {Object} map with { attrValue => [ a, b, c ] }
     */
    function groupBy(collection, extractor, grouped = {}) {

      extractor = toExtractor(extractor);

      forEach$1(collection, function(val) {
        let discriminator = extractor(val) || '_';

        let group = grouped[discriminator];

        if (!group) {
          group = grouped[discriminator] = [];
        }

        group.push(val);
      });

      return grouped;
    }


    function uniqueBy(extractor, ...collections) {

      extractor = toExtractor(extractor);

      let grouped = {};

      forEach$1(collections, (c) => groupBy(c, extractor, grouped));

      let result = map$1(grouped, function(val, key) {
        return val[0];
      });

      return result;
    }


    const unionBy = uniqueBy;



    /**
     * Sort collection by criteria.
     *
     * @template T
     *
     * @param {Collection<T>} collection
     * @param {Extractor<T, number | string>} extractor
     *
     * @return {Array}
     */
    function sortBy(collection, extractor) {

      extractor = toExtractor(extractor);

      let sorted = [];

      forEach$1(collection, function(value, key) {
        let disc = extractor(value, key);

        let entry = {
          d: disc,
          v: value
        };

        for (var idx = 0; idx < sorted.length; idx++) {
          let { d } = sorted[idx];

          if (disc < d) {
            sorted.splice(idx, 0, entry);
            return;
          }
        }

        // not inserted, append (!)
        sorted.push(entry);
      });

      return map$1(sorted, (e) => e.v);
    }


    /**
     * Create an object pattern matcher.
     *
     * @example
     *
     * ```javascript
     * const matcher = matchPattern({ id: 1 });
     *
     * let element = find(elements, matcher);
     * ```
     *
     * @template T
     *
     * @param {T} pattern
     *
     * @return { (el: any) =>  boolean } matcherFn
     */
    function matchPattern(pattern) {

      return function(el) {

        return every(pattern, function(val, key) {
          return el[key] === val;
        });

      };
    }


    /**
     * @param {string | ((e: any) => any) } extractor
     *
     * @return { (e: any) => any }
     */
    function toExtractor(extractor) {

      /**
       * @satisfies { (e: any) => any }
       */
      return isFunction(extractor) ? extractor : (e) => {

        // @ts-ignore: just works
        return e[extractor];
      };
    }


    /**
     * @template T
     * @param {Matcher<T>} matcher
     *
     * @return {MatchFn<T>}
     */
    function toMatcher(matcher) {
      return isFunction(matcher) ? matcher : (e) => {
        return e === matcher;
      };
    }


    function identity$1(arg) {
      return arg;
    }

    function toNum$1(arg) {
      return Number(arg);
    }

    /* global setTimeout clearTimeout */

    /**
     * @typedef { {
     *   (...args: any[]): any;
     *   flush: () => void;
     *   cancel: () => void;
     * } } DebouncedFunction
     */

    /**
     * Debounce fn, calling it only once if the given time
     * elapsed between calls.
     *
     * Lodash-style the function exposes methods to `#clear`
     * and `#flush` to control internal behavior.
     *
     * @param  {Function} fn
     * @param  {Number} timeout
     *
     * @return {DebouncedFunction} debounced function
     */
    function debounce$1(fn, timeout) {

      let timer;

      let lastArgs;
      let lastThis;

      let lastNow;

      function fire(force) {

        let now = Date.now();

        let scheduledDiff = force ? 0 : (lastNow + timeout) - now;

        if (scheduledDiff > 0) {
          return schedule(scheduledDiff);
        }

        fn.apply(lastThis, lastArgs);

        clear();
      }

      function schedule(timeout) {
        timer = setTimeout(fire, timeout);
      }

      function clear() {
        if (timer) {
          clearTimeout(timer);
        }

        timer = lastNow = lastArgs = lastThis = undefined;
      }

      function flush() {
        if (timer) {
          fire(true);
        }

        clear();
      }

      /**
       * @type { DebouncedFunction }
       */
      function callback(...args) {
        lastNow = Date.now();

        lastArgs = args;
        lastThis = this;

        // ensure an execution is scheduled
        if (!timer) {
          schedule(timeout);
        }
      }

      callback.flush = flush;
      callback.cancel = clear;

      return callback;
    }

    /**
     * Bind function against target <this>.
     *
     * @param  {Function} fn
     * @param  {Object}   target
     *
     * @return {Function} bound function
     */
    function bind$2(fn, target) {
      return fn.bind(target);
    }

    /**
     * Convenience wrapper for `Object.assign`.
     *
     * @param {Object} target
     * @param {...Object} others
     *
     * @return {Object} the target
     */
    function assign$1(target, ...others) {
      return Object.assign(target, ...others);
    }

    /**
     * Sets a nested property of a given object to the specified value.
     *
     * This mutates the object and returns it.
     *
     * @template T
     *
     * @param {T} target The target of the set operation.
     * @param {(string|number)[]} path The path to the nested value.
     * @param {any} value The value to set.
     *
     * @return {T}
     */
    function set$2(target, path, value) {

      let currentTarget = target;

      forEach$1(path, function(key, idx) {

        if (typeof key !== 'number' && typeof key !== 'string') {
          throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');
        }

        if (key === 'constructor') {
          throw new Error('illegal key: constructor');
        }

        if (key === '__proto__') {
          throw new Error('illegal key: __proto__');
        }

        let nextKey = path[idx + 1];
        let nextTarget = currentTarget[key];

        if (isDefined(nextKey) && isNil(nextTarget)) {
          nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];
        }

        if (isUndefined$3(nextKey)) {
          if (isUndefined$3(value)) {
            delete currentTarget[key];
          } else {
            currentTarget[key] = value;
          }
        } else {
          currentTarget = nextTarget;
        }
      });

      return target;
    }


    /**
     * Gets a nested property of a given object.
     *
     * @param {Object} target The target of the get operation.
     * @param {(string|number)[]} path The path to the nested value.
     * @param {any} [defaultValue] The value to return if no value exists.
     *
     * @return {any}
     */
    function get$1(target, path, defaultValue) {

      let currentTarget = target;

      forEach$1(path, function(key) {

        // accessing nil property yields <undefined>
        if (isNil(currentTarget)) {
          currentTarget = undefined;

          return false;
        }

        currentTarget = currentTarget[key];
      });

      return isUndefined$3(currentTarget) ? defaultValue : currentTarget;
    }

    /**
     * Pick properties from the given target.
     *
     * @template T
     * @template {any[]} V
     *
     * @param {T} target
     * @param {V} properties
     *
     * @return Pick<T, V>
     */
    function pick$1(target, properties) {

      let result = {};

      let obj = Object(target);

      forEach$1(properties, function(prop) {

        if (prop in obj) {
          result[prop] = target[prop];
        }
      });

      return result;
    }

    /**
     * Pick all target properties, excluding the given ones.
     *
     * @template T
     * @template {any[]} V
     *
     * @param {T} target
     * @param {V} properties
     *
     * @return {Omit<T, V>} target
     */
    function omit(target, properties) {

      let result = {};

      let obj = Object(target);

      forEach$1(obj, function(prop, key) {

        if (properties.indexOf(key) === -1) {
          result[key] = prop;
        }
      });

      return result;
    }

    // these aren't really private, but nor are they really useful to document

    /**
     * @private
     */
    class LuxonError extends Error {}

    /**
     * @private
     */
    class InvalidDateTimeError extends LuxonError {
      constructor(reason) {
        super(`Invalid DateTime: ${reason.toMessage()}`);
      }
    }

    /**
     * @private
     */
    class InvalidIntervalError extends LuxonError {
      constructor(reason) {
        super(`Invalid Interval: ${reason.toMessage()}`);
      }
    }

    /**
     * @private
     */
    class InvalidDurationError extends LuxonError {
      constructor(reason) {
        super(`Invalid Duration: ${reason.toMessage()}`);
      }
    }

    /**
     * @private
     */
    class ConflictingSpecificationError extends LuxonError {}

    /**
     * @private
     */
    class InvalidUnitError extends LuxonError {
      constructor(unit) {
        super(`Invalid unit ${unit}`);
      }
    }

    /**
     * @private
     */
    class InvalidArgumentError extends LuxonError {}

    /**
     * @private
     */
    class ZoneIsAbstractError extends LuxonError {
      constructor() {
        super("Zone is an abstract class");
      }
    }

    /**
     * @private
     */

    const n$2 = "numeric",
      s$2 = "short",
      l$3 = "long";

    const DATE_SHORT = {
      year: n$2,
      month: n$2,
      day: n$2,
    };

    const DATE_MED = {
      year: n$2,
      month: s$2,
      day: n$2,
    };

    const DATE_MED_WITH_WEEKDAY = {
      year: n$2,
      month: s$2,
      day: n$2,
      weekday: s$2,
    };

    const DATE_FULL = {
      year: n$2,
      month: l$3,
      day: n$2,
    };

    const DATE_HUGE = {
      year: n$2,
      month: l$3,
      day: n$2,
      weekday: l$3,
    };

    const TIME_SIMPLE = {
      hour: n$2,
      minute: n$2,
    };

    const TIME_WITH_SECONDS = {
      hour: n$2,
      minute: n$2,
      second: n$2,
    };

    const TIME_WITH_SHORT_OFFSET = {
      hour: n$2,
      minute: n$2,
      second: n$2,
      timeZoneName: s$2,
    };

    const TIME_WITH_LONG_OFFSET = {
      hour: n$2,
      minute: n$2,
      second: n$2,
      timeZoneName: l$3,
    };

    const TIME_24_SIMPLE = {
      hour: n$2,
      minute: n$2,
      hourCycle: "h23",
    };

    const TIME_24_WITH_SECONDS = {
      hour: n$2,
      minute: n$2,
      second: n$2,
      hourCycle: "h23",
    };

    const TIME_24_WITH_SHORT_OFFSET = {
      hour: n$2,
      minute: n$2,
      second: n$2,
      hourCycle: "h23",
      timeZoneName: s$2,
    };

    const TIME_24_WITH_LONG_OFFSET = {
      hour: n$2,
      minute: n$2,
      second: n$2,
      hourCycle: "h23",
      timeZoneName: l$3,
    };

    const DATETIME_SHORT = {
      year: n$2,
      month: n$2,
      day: n$2,
      hour: n$2,
      minute: n$2,
    };

    const DATETIME_SHORT_WITH_SECONDS = {
      year: n$2,
      month: n$2,
      day: n$2,
      hour: n$2,
      minute: n$2,
      second: n$2,
    };

    const DATETIME_MED = {
      year: n$2,
      month: s$2,
      day: n$2,
      hour: n$2,
      minute: n$2,
    };

    const DATETIME_MED_WITH_SECONDS = {
      year: n$2,
      month: s$2,
      day: n$2,
      hour: n$2,
      minute: n$2,
      second: n$2,
    };

    const DATETIME_MED_WITH_WEEKDAY = {
      year: n$2,
      month: s$2,
      day: n$2,
      weekday: s$2,
      hour: n$2,
      minute: n$2,
    };

    const DATETIME_FULL = {
      year: n$2,
      month: l$3,
      day: n$2,
      hour: n$2,
      minute: n$2,
      timeZoneName: s$2,
    };

    const DATETIME_FULL_WITH_SECONDS = {
      year: n$2,
      month: l$3,
      day: n$2,
      hour: n$2,
      minute: n$2,
      second: n$2,
      timeZoneName: s$2,
    };

    const DATETIME_HUGE = {
      year: n$2,
      month: l$3,
      day: n$2,
      weekday: l$3,
      hour: n$2,
      minute: n$2,
      timeZoneName: l$3,
    };

    const DATETIME_HUGE_WITH_SECONDS = {
      year: n$2,
      month: l$3,
      day: n$2,
      weekday: l$3,
      hour: n$2,
      minute: n$2,
      second: n$2,
      timeZoneName: l$3,
    };

    /**
     * @interface
     */
    class Zone {
      /**
       * The type of zone
       * @abstract
       * @type {string}
       */
      get type() {
        throw new ZoneIsAbstractError();
      }

      /**
       * The name of this zone.
       * @abstract
       * @type {string}
       */
      get name() {
        throw new ZoneIsAbstractError();
      }

      get ianaName() {
        return this.name;
      }

      /**
       * Returns whether the offset is known to be fixed for the whole year.
       * @abstract
       * @type {boolean}
       */
      get isUniversal() {
        throw new ZoneIsAbstractError();
      }

      /**
       * Returns the offset's common name (such as EST) at the specified timestamp
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the name
       * @param {Object} opts - Options to affect the format
       * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
       * @param {string} opts.locale - What locale to return the offset name in.
       * @return {string}
       */
      offsetName(ts, opts) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Returns the offset's value as a string
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the offset
       * @param {string} format - What style of offset to return.
       *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
       * @return {string}
       */
      formatOffset(ts, format) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Return the offset in minutes for this zone at the specified timestamp.
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to compute the offset
       * @return {number}
       */
      offset(ts) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Return whether this Zone is equal to another zone
       * @abstract
       * @param {Zone} otherZone - the zone to compare
       * @return {boolean}
       */
      equals(otherZone) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Return whether this Zone is valid.
       * @abstract
       * @type {boolean}
       */
      get isValid() {
        throw new ZoneIsAbstractError();
      }
    }

    let singleton$1 = null;

    /**
     * Represents the local zone for this JavaScript environment.
     * @implements {Zone}
     */
    class SystemZone extends Zone {
      /**
       * Get a singleton instance of the local zone
       * @return {SystemZone}
       */
      static get instance() {
        if (singleton$1 === null) {
          singleton$1 = new SystemZone();
        }
        return singleton$1;
      }

      /** @override **/
      get type() {
        return "system";
      }

      /** @override **/
      get name() {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
      }

      /** @override **/
      get isUniversal() {
        return false;
      }

      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale);
      }

      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }

      /** @override **/
      offset(ts) {
        return -new Date(ts).getTimezoneOffset();
      }

      /** @override **/
      equals(otherZone) {
        return otherZone.type === "system";
      }

      /** @override **/
      get isValid() {
        return true;
      }
    }

    let dtfCache = {};
    function makeDTF(zone) {
      if (!dtfCache[zone]) {
        dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
          hour12: false,
          timeZone: zone,
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
          era: "short",
        });
      }
      return dtfCache[zone];
    }

    const typeToPos = {
      year: 0,
      month: 1,
      day: 2,
      era: 3,
      hour: 4,
      minute: 5,
      second: 6,
    };

    function hackyOffset(dtf, date) {
      const formatted = dtf.format(date).replace(/\u200E/g, ""),
        parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted),
        [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
      return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
    }

    function partsOffset(dtf, date) {
      const formatted = dtf.formatToParts(date);
      const filled = [];
      for (let i = 0; i < formatted.length; i++) {
        const { type, value } = formatted[i];
        const pos = typeToPos[type];

        if (type === "era") {
          filled[pos] = value;
        } else if (!isUndefined$2(pos)) {
          filled[pos] = parseInt(value, 10);
        }
      }
      return filled;
    }

    let ianaZoneCache = {};
    /**
     * A zone identified by an IANA identifier, like America/New_York
     * @implements {Zone}
     */
    class IANAZone extends Zone {
      /**
       * @param {string} name - Zone name
       * @return {IANAZone}
       */
      static create(name) {
        if (!ianaZoneCache[name]) {
          ianaZoneCache[name] = new IANAZone(name);
        }
        return ianaZoneCache[name];
      }

      /**
       * Reset local caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCache() {
        ianaZoneCache = {};
        dtfCache = {};
      }

      /**
       * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
       * @param {string} s - The string to check validity on
       * @example IANAZone.isValidSpecifier("America/New_York") //=> true
       * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
       * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
       * @return {boolean}
       */
      static isValidSpecifier(s) {
        return this.isValidZone(s);
      }

      /**
       * Returns whether the provided string identifies a real zone
       * @param {string} zone - The string to check
       * @example IANAZone.isValidZone("America/New_York") //=> true
       * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
       * @example IANAZone.isValidZone("Sport~~blorp") //=> false
       * @return {boolean}
       */
      static isValidZone(zone) {
        if (!zone) {
          return false;
        }
        try {
          new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
          return true;
        } catch (e) {
          return false;
        }
      }

      constructor(name) {
        super();
        /** @private **/
        this.zoneName = name;
        /** @private **/
        this.valid = IANAZone.isValidZone(name);
      }

      /** @override **/
      get type() {
        return "iana";
      }

      /** @override **/
      get name() {
        return this.zoneName;
      }

      /** @override **/
      get isUniversal() {
        return false;
      }

      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale, this.name);
      }

      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }

      /** @override **/
      offset(ts) {
        const date = new Date(ts);

        if (isNaN(date)) return NaN;

        const dtf = makeDTF(this.name);
        let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts
          ? partsOffset(dtf, date)
          : hackyOffset(dtf, date);

        if (adOrBc === "BC") {
          year = -Math.abs(year) + 1;
        }

        // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
        const adjustedHour = hour === 24 ? 0 : hour;

        const asUTC = objToLocalTS({
          year,
          month,
          day,
          hour: adjustedHour,
          minute,
          second,
          millisecond: 0,
        });

        let asTS = +date;
        const over = asTS % 1000;
        asTS -= over >= 0 ? over : 1000 + over;
        return (asUTC - asTS) / (60 * 1000);
      }

      /** @override **/
      equals(otherZone) {
        return otherZone.type === "iana" && otherZone.name === this.name;
      }

      /** @override **/
      get isValid() {
        return this.valid;
      }
    }

    // todo - remap caching

    let intlLFCache = {};
    function getCachedLF(locString, opts = {}) {
      const key = JSON.stringify([locString, opts]);
      let dtf = intlLFCache[key];
      if (!dtf) {
        dtf = new Intl.ListFormat(locString, opts);
        intlLFCache[key] = dtf;
      }
      return dtf;
    }

    let intlDTCache = {};
    function getCachedDTF(locString, opts = {}) {
      const key = JSON.stringify([locString, opts]);
      let dtf = intlDTCache[key];
      if (!dtf) {
        dtf = new Intl.DateTimeFormat(locString, opts);
        intlDTCache[key] = dtf;
      }
      return dtf;
    }

    let intlNumCache = {};
    function getCachedINF(locString, opts = {}) {
      const key = JSON.stringify([locString, opts]);
      let inf = intlNumCache[key];
      if (!inf) {
        inf = new Intl.NumberFormat(locString, opts);
        intlNumCache[key] = inf;
      }
      return inf;
    }

    let intlRelCache = {};
    function getCachedRTF(locString, opts = {}) {
      const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
      const key = JSON.stringify([locString, cacheKeyOpts]);
      let inf = intlRelCache[key];
      if (!inf) {
        inf = new Intl.RelativeTimeFormat(locString, opts);
        intlRelCache[key] = inf;
      }
      return inf;
    }

    let sysLocaleCache = null;
    function systemLocale() {
      if (sysLocaleCache) {
        return sysLocaleCache;
      } else {
        sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
        return sysLocaleCache;
      }
    }

    function parseLocaleString(localeStr) {
      // I really want to avoid writing a BCP 47 parser
      // see, e.g. https://github.com/wooorm/bcp-47
      // Instead, we'll do this:

      // a) if the string has no -u extensions, just leave it alone
      // b) if it does, use Intl to resolve everything
      // c) if Intl fails, try again without the -u

      // private subtags and unicode subtags have ordering requirements,
      // and we're not properly parsing this, so just strip out the
      // private ones if they exist.
      const xIndex = localeStr.indexOf("-x-");
      if (xIndex !== -1) {
        localeStr = localeStr.substring(0, xIndex);
      }

      const uIndex = localeStr.indexOf("-u-");
      if (uIndex === -1) {
        return [localeStr];
      } else {
        let options;
        let selectedStr;
        try {
          options = getCachedDTF(localeStr).resolvedOptions();
          selectedStr = localeStr;
        } catch (e) {
          const smaller = localeStr.substring(0, uIndex);
          options = getCachedDTF(smaller).resolvedOptions();
          selectedStr = smaller;
        }

        const { numberingSystem, calendar } = options;
        return [selectedStr, numberingSystem, calendar];
      }
    }

    function intlConfigString(localeStr, numberingSystem, outputCalendar) {
      if (outputCalendar || numberingSystem) {
        if (!localeStr.includes("-u-")) {
          localeStr += "-u";
        }

        if (outputCalendar) {
          localeStr += `-ca-${outputCalendar}`;
        }

        if (numberingSystem) {
          localeStr += `-nu-${numberingSystem}`;
        }
        return localeStr;
      } else {
        return localeStr;
      }
    }

    function mapMonths(f) {
      const ms = [];
      for (let i = 1; i <= 12; i++) {
        const dt = DateTime.utc(2016, i, 1);
        ms.push(f(dt));
      }
      return ms;
    }

    function mapWeekdays(f) {
      const ms = [];
      for (let i = 1; i <= 7; i++) {
        const dt = DateTime.utc(2016, 11, 13 + i);
        ms.push(f(dt));
      }
      return ms;
    }

    function listStuff(loc, length, defaultOK, englishFn, intlFn) {
      const mode = loc.listingMode(defaultOK);

      if (mode === "error") {
        return null;
      } else if (mode === "en") {
        return englishFn(length);
      } else {
        return intlFn(length);
      }
    }

    function supportsFastNumbers(loc) {
      if (loc.numberingSystem && loc.numberingSystem !== "latn") {
        return false;
      } else {
        return (
          loc.numberingSystem === "latn" ||
          !loc.locale ||
          loc.locale.startsWith("en") ||
          new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn"
        );
      }
    }

    /**
     * @private
     */

    class PolyNumberFormatter {
      constructor(intl, forceSimple, opts) {
        this.padTo = opts.padTo || 0;
        this.floor = opts.floor || false;

        const { padTo, floor, ...otherOpts } = opts;

        if (!forceSimple || Object.keys(otherOpts).length > 0) {
          const intlOpts = { useGrouping: false, ...opts };
          if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
          this.inf = getCachedINF(intl, intlOpts);
        }
      }

      format(i) {
        if (this.inf) {
          const fixed = this.floor ? Math.floor(i) : i;
          return this.inf.format(fixed);
        } else {
          // to match the browser's numberformatter defaults
          const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
          return padStart(fixed, this.padTo);
        }
      }
    }

    /**
     * @private
     */

    class PolyDateFormatter {
      constructor(dt, intl, opts) {
        this.opts = opts;
        this.originalZone = undefined;

        let z = undefined;
        if (this.opts.timeZone) {
          // Don't apply any workarounds if a timeZone is explicitly provided in opts
          this.dt = dt;
        } else if (dt.zone.type === "fixed") {
          // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
          // That is why fixed-offset TZ is set to that unless it is:
          // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
          // 2. Unsupported by the browser:
          //    - some do not support Etc/
          //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
          const gmtOffset = -1 * (dt.offset / 60);
          const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
          if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
            z = offsetZ;
            this.dt = dt;
          } else {
            // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
            // we manually apply the offset and substitute the zone as needed.
            z = "UTC";
            this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
            this.originalZone = dt.zone;
          }
        } else if (dt.zone.type === "system") {
          this.dt = dt;
        } else if (dt.zone.type === "iana") {
          this.dt = dt;
          z = dt.zone.name;
        } else {
          // Custom zones can have any offset / offsetName so we just manually
          // apply the offset and substitute the zone as needed.
          z = "UTC";
          this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
          this.originalZone = dt.zone;
        }

        const intlOpts = { ...this.opts };
        intlOpts.timeZone = intlOpts.timeZone || z;
        this.dtf = getCachedDTF(intl, intlOpts);
      }

      format() {
        if (this.originalZone) {
          // If we have to substitute in the actual zone name, we have to use
          // formatToParts so that the timezone can be replaced.
          return this.formatToParts()
            .map(({ value }) => value)
            .join("");
        }
        return this.dtf.format(this.dt.toJSDate());
      }

      formatToParts() {
        const parts = this.dtf.formatToParts(this.dt.toJSDate());
        if (this.originalZone) {
          return parts.map((part) => {
            if (part.type === "timeZoneName") {
              const offsetName = this.originalZone.offsetName(this.dt.ts, {
                locale: this.dt.locale,
                format: this.opts.timeZoneName,
              });
              return {
                ...part,
                value: offsetName,
              };
            } else {
              return part;
            }
          });
        }
        return parts;
      }

      resolvedOptions() {
        return this.dtf.resolvedOptions();
      }
    }

    /**
     * @private
     */
    class PolyRelFormatter {
      constructor(intl, isEnglish, opts) {
        this.opts = { style: "long", ...opts };
        if (!isEnglish && hasRelative()) {
          this.rtf = getCachedRTF(intl, opts);
        }
      }

      format(count, unit) {
        if (this.rtf) {
          return this.rtf.format(count, unit);
        } else {
          return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
        }
      }

      formatToParts(count, unit) {
        if (this.rtf) {
          return this.rtf.formatToParts(count, unit);
        } else {
          return [];
        }
      }
    }

    /**
     * @private
     */

    class Locale {
      static fromOpts(opts) {
        return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
      }

      static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {
        const specifiedLocale = locale || Settings.defaultLocale;
        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
        const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
        const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
        const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
        return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
      }

      static resetCache() {
        sysLocaleCache = null;
        intlDTCache = {};
        intlNumCache = {};
        intlRelCache = {};
      }

      static fromObject({ locale, numberingSystem, outputCalendar } = {}) {
        return Locale.create(locale, numberingSystem, outputCalendar);
      }

      constructor(locale, numbering, outputCalendar, specifiedLocale) {
        const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

        this.locale = parsedLocale;
        this.numberingSystem = numbering || parsedNumberingSystem || null;
        this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
        this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

        this.weekdaysCache = { format: {}, standalone: {} };
        this.monthsCache = { format: {}, standalone: {} };
        this.meridiemCache = null;
        this.eraCache = {};

        this.specifiedLocale = specifiedLocale;
        this.fastNumbersCached = null;
      }

      get fastNumbers() {
        if (this.fastNumbersCached == null) {
          this.fastNumbersCached = supportsFastNumbers(this);
        }

        return this.fastNumbersCached;
      }

      listingMode() {
        const isActuallyEn = this.isEnglish();
        const hasNoWeirdness =
          (this.numberingSystem === null || this.numberingSystem === "latn") &&
          (this.outputCalendar === null || this.outputCalendar === "gregory");
        return isActuallyEn && hasNoWeirdness ? "en" : "intl";
      }

      clone(alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
          return this;
        } else {
          return Locale.create(
            alts.locale || this.specifiedLocale,
            alts.numberingSystem || this.numberingSystem,
            alts.outputCalendar || this.outputCalendar,
            alts.defaultToEN || false
          );
        }
      }

      redefaultToEN(alts = {}) {
        return this.clone({ ...alts, defaultToEN: true });
      }

      redefaultToSystem(alts = {}) {
        return this.clone({ ...alts, defaultToEN: false });
      }

      months(length, format = false, defaultOK = true) {
        return listStuff(this, length, defaultOK, months, () => {
          const intl = format ? { month: length, day: "numeric" } : { month: length },
            formatStr = format ? "format" : "standalone";
          if (!this.monthsCache[formatStr][length]) {
            this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
          }
          return this.monthsCache[formatStr][length];
        });
      }

      weekdays(length, format = false, defaultOK = true) {
        return listStuff(this, length, defaultOK, weekdays, () => {
          const intl = format
              ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
              : { weekday: length },
            formatStr = format ? "format" : "standalone";
          if (!this.weekdaysCache[formatStr][length]) {
            this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>
              this.extract(dt, intl, "weekday")
            );
          }
          return this.weekdaysCache[formatStr][length];
        });
      }

      meridiems(defaultOK = true) {
        return listStuff(
          this,
          undefined,
          defaultOK,
          () => meridiems,
          () => {
            // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
            // for AM and PM. This is probably wrong, but it's makes parsing way easier.
            if (!this.meridiemCache) {
              const intl = { hour: "numeric", hourCycle: "h12" };
              this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
                (dt) => this.extract(dt, intl, "dayperiod")
              );
            }

            return this.meridiemCache;
          }
        );
      }

      eras(length, defaultOK = true) {
        return listStuff(this, length, defaultOK, eras, () => {
          const intl = { era: length };

          // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
          // to definitely enumerate them.
          if (!this.eraCache[length]) {
            this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>
              this.extract(dt, intl, "era")
            );
          }

          return this.eraCache[length];
        });
      }

      extract(dt, intlOpts, field) {
        const df = this.dtFormatter(dt, intlOpts),
          results = df.formatToParts(),
          matching = results.find((m) => m.type.toLowerCase() === field);
        return matching ? matching.value : null;
      }

      numberFormatter(opts = {}) {
        // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
        // (in contrast, the rest of the condition is used heavily)
        return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
      }

      dtFormatter(dt, intlOpts = {}) {
        return new PolyDateFormatter(dt, this.intl, intlOpts);
      }

      relFormatter(opts = {}) {
        return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
      }

      listFormatter(opts = {}) {
        return getCachedLF(this.intl, opts);
      }

      isEnglish() {
        return (
          this.locale === "en" ||
          this.locale.toLowerCase() === "en-us" ||
          new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")
        );
      }

      equals(other) {
        return (
          this.locale === other.locale &&
          this.numberingSystem === other.numberingSystem &&
          this.outputCalendar === other.outputCalendar
        );
      }
    }

    let singleton = null;

    /**
     * A zone with a fixed offset (meaning no DST)
     * @implements {Zone}
     */
    class FixedOffsetZone extends Zone {
      /**
       * Get a singleton instance of UTC
       * @return {FixedOffsetZone}
       */
      static get utcInstance() {
        if (singleton === null) {
          singleton = new FixedOffsetZone(0);
        }
        return singleton;
      }

      /**
       * Get an instance with a specified offset
       * @param {number} offset - The offset in minutes
       * @return {FixedOffsetZone}
       */
      static instance(offset) {
        return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
      }

      /**
       * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
       * @param {string} s - The offset string to parse
       * @example FixedOffsetZone.parseSpecifier("UTC+6")
       * @example FixedOffsetZone.parseSpecifier("UTC+06")
       * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
       * @return {FixedOffsetZone}
       */
      static parseSpecifier(s) {
        if (s) {
          const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
          if (r) {
            return new FixedOffsetZone(signedOffset(r[1], r[2]));
          }
        }
        return null;
      }

      constructor(offset) {
        super();
        /** @private **/
        this.fixed = offset;
      }

      /** @override **/
      get type() {
        return "fixed";
      }

      /** @override **/
      get name() {
        return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
      }

      get ianaName() {
        if (this.fixed === 0) {
          return "Etc/UTC";
        } else {
          return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
        }
      }

      /** @override **/
      offsetName() {
        return this.name;
      }

      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.fixed, format);
      }

      /** @override **/
      get isUniversal() {
        return true;
      }

      /** @override **/
      offset() {
        return this.fixed;
      }

      /** @override **/
      equals(otherZone) {
        return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
      }

      /** @override **/
      get isValid() {
        return true;
      }
    }

    /**
     * A zone that failed to parse. You should never need to instantiate this.
     * @implements {Zone}
     */
    class InvalidZone extends Zone {
      constructor(zoneName) {
        super();
        /**  @private */
        this.zoneName = zoneName;
      }

      /** @override **/
      get type() {
        return "invalid";
      }

      /** @override **/
      get name() {
        return this.zoneName;
      }

      /** @override **/
      get isUniversal() {
        return false;
      }

      /** @override **/
      offsetName() {
        return null;
      }

      /** @override **/
      formatOffset() {
        return "";
      }

      /** @override **/
      offset() {
        return NaN;
      }

      /** @override **/
      equals() {
        return false;
      }

      /** @override **/
      get isValid() {
        return false;
      }
    }

    /**
     * @private
     */

    function normalizeZone(input, defaultZone) {
      if (isUndefined$2(input) || input === null) {
        return defaultZone;
      } else if (input instanceof Zone) {
        return input;
      } else if (isString$2(input)) {
        const lowered = input.toLowerCase();
        if (lowered === "default") return defaultZone;
        else if (lowered === "local" || lowered === "system") return SystemZone.instance;
        else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
        else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
      } else if (isNumber$2(input)) {
        return FixedOffsetZone.instance(input);
      } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
        // This is dumb, but the instanceof check above doesn't seem to really work
        // so we're duck checking it
        return input;
      } else {
        return new InvalidZone(input);
      }
    }

    let now = () => Date.now(),
      defaultZone = "system",
      defaultLocale = null,
      defaultNumberingSystem = null,
      defaultOutputCalendar = null,
      twoDigitCutoffYear = 60,
      throwOnInvalid;

    /**
     * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
     */
    class Settings {
      /**
       * Get the callback for returning the current timestamp.
       * @type {function}
       */
      static get now() {
        return now;
      }

      /**
       * Set the callback for returning the current timestamp.
       * The function should return a number, which will be interpreted as an Epoch millisecond count
       * @type {function}
       * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
       * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
       */
      static set now(n) {
        now = n;
      }

      /**
       * Set the default time zone to create DateTimes in. Does not affect existing instances.
       * Use the value "system" to reset this value to the system's time zone.
       * @type {string}
       */
      static set defaultZone(zone) {
        defaultZone = zone;
      }

      /**
       * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
       * The default value is the system's time zone (the one set on the machine that runs this code).
       * @type {Zone}
       */
      static get defaultZone() {
        return normalizeZone(defaultZone, SystemZone.instance);
      }

      /**
       * Get the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultLocale() {
        return defaultLocale;
      }

      /**
       * Set the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultLocale(locale) {
        defaultLocale = locale;
      }

      /**
       * Get the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultNumberingSystem() {
        return defaultNumberingSystem;
      }

      /**
       * Set the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultNumberingSystem(numberingSystem) {
        defaultNumberingSystem = numberingSystem;
      }

      /**
       * Get the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultOutputCalendar() {
        return defaultOutputCalendar;
      }

      /**
       * Set the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultOutputCalendar(outputCalendar) {
        defaultOutputCalendar = outputCalendar;
      }

      /**
       * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
       * @type {number}
       */
      static get twoDigitCutoffYear() {
        return twoDigitCutoffYear;
      }

      /**
       * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
       * @type {number}
       * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century
       * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
       * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50
       * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50
       */
      static set twoDigitCutoffYear(cutoffYear) {
        twoDigitCutoffYear = cutoffYear % 100;
      }

      /**
       * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static get throwOnInvalid() {
        return throwOnInvalid;
      }

      /**
       * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static set throwOnInvalid(t) {
        throwOnInvalid = t;
      }

      /**
       * Reset Luxon's global caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCaches() {
        Locale.resetCache();
        IANAZone.resetCache();
      }
    }

    /*
      This is just a junk drawer, containing anything used across multiple classes.
      Because Luxon is small(ish), this should stay small and we won't worry about splitting
      it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
    */

    /**
     * @private
     */

    // TYPES

    function isUndefined$2(o) {
      return typeof o === "undefined";
    }

    function isNumber$2(o) {
      return typeof o === "number";
    }

    function isInteger(o) {
      return typeof o === "number" && o % 1 === 0;
    }

    function isString$2(o) {
      return typeof o === "string";
    }

    function isDate(o) {
      return Object.prototype.toString.call(o) === "[object Date]";
    }

    // CAPABILITIES

    function hasRelative() {
      try {
        return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
      } catch (e) {
        return false;
      }
    }

    // OBJECTS AND ARRAYS

    function maybeArray(thing) {
      return Array.isArray(thing) ? thing : [thing];
    }

    function bestBy(arr, by, compare) {
      if (arr.length === 0) {
        return undefined;
      }
      return arr.reduce((best, next) => {
        const pair = [by(next), next];
        if (!best) {
          return pair;
        } else if (compare(best[0], pair[0]) === best[0]) {
          return best;
        } else {
          return pair;
        }
      }, null)[1];
    }

    function pick(obj, keys) {
      return keys.reduce((a, k) => {
        a[k] = obj[k];
        return a;
      }, {});
    }

    function hasOwnProperty$2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    // NUMBERS AND STRINGS

    function integerBetween(thing, bottom, top) {
      return isInteger(thing) && thing >= bottom && thing <= top;
    }

    // x % n but takes the sign of n instead of x
    function floorMod(x, n) {
      return x - n * Math.floor(x / n);
    }

    function padStart(input, n = 2) {
      const isNeg = input < 0;
      let padded;
      if (isNeg) {
        padded = "-" + ("" + -input).padStart(n, "0");
      } else {
        padded = ("" + input).padStart(n, "0");
      }
      return padded;
    }

    function parseInteger(string) {
      if (isUndefined$2(string) || string === null || string === "") {
        return undefined;
      } else {
        return parseInt(string, 10);
      }
    }

    function parseFloating(string) {
      if (isUndefined$2(string) || string === null || string === "") {
        return undefined;
      } else {
        return parseFloat(string);
      }
    }

    function parseMillis(fraction) {
      // Return undefined (instead of 0) in these cases, where fraction is not set
      if (isUndefined$2(fraction) || fraction === null || fraction === "") {
        return undefined;
      } else {
        const f = parseFloat("0." + fraction) * 1000;
        return Math.floor(f);
      }
    }

    function roundTo(number, digits, towardZero = false) {
      const factor = 10 ** digits,
        rounder = towardZero ? Math.trunc : Math.round;
      return rounder(number * factor) / factor;
    }

    // DATE BASICS

    function isLeapYear(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }

    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }

    function daysInMonth(year, month) {
      const modMonth = floorMod(month - 1, 12) + 1,
        modYear = year + (month - modMonth) / 12;

      if (modMonth === 2) {
        return isLeapYear(modYear) ? 29 : 28;
      } else {
        return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
      }
    }

    // covert a calendar object to a local timestamp (epoch, but with the offset baked in)
    function objToLocalTS(obj) {
      let d = Date.UTC(
        obj.year,
        obj.month - 1,
        obj.day,
        obj.hour,
        obj.minute,
        obj.second,
        obj.millisecond
      );

      // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
      if (obj.year < 100 && obj.year >= 0) {
        d = new Date(d);
        // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
        // so if obj.year is in 99, but obj.day makes it roll over into year 100,
        // the calculations done by Date.UTC are using year 2000 - which is incorrect
        d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
      }
      return +d;
    }

    function weeksInWeekYear(weekYear) {
      const p1 =
          (weekYear +
            Math.floor(weekYear / 4) -
            Math.floor(weekYear / 100) +
            Math.floor(weekYear / 400)) %
          7,
        last = weekYear - 1,
        p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
      return p1 === 4 || p2 === 3 ? 53 : 52;
    }

    function untruncateYear(year) {
      if (year > 99) {
        return year;
      } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
    }

    // PARSING

    function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
      const date = new Date(ts),
        intlOpts = {
          hourCycle: "h23",
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        };

      if (timeZone) {
        intlOpts.timeZone = timeZone;
      }

      const modified = { timeZoneName: offsetFormat, ...intlOpts };

      const parsed = new Intl.DateTimeFormat(locale, modified)
        .formatToParts(date)
        .find((m) => m.type.toLowerCase() === "timezonename");
      return parsed ? parsed.value : null;
    }

    // signedOffset('-5', '30') -> -330
    function signedOffset(offHourStr, offMinuteStr) {
      let offHour = parseInt(offHourStr, 10);

      // don't || this because we want to preserve -0
      if (Number.isNaN(offHour)) {
        offHour = 0;
      }

      const offMin = parseInt(offMinuteStr, 10) || 0,
        offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
      return offHour * 60 + offMinSigned;
    }

    // COERCION

    function asNumber(value) {
      const numericValue = Number(value);
      if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
        throw new InvalidArgumentError(`Invalid unit value ${value}`);
      return numericValue;
    }

    function normalizeObject(obj, normalizer) {
      const normalized = {};
      for (const u in obj) {
        if (hasOwnProperty$2(obj, u)) {
          const v = obj[u];
          if (v === undefined || v === null) continue;
          normalized[normalizer(u)] = asNumber(v);
        }
      }
      return normalized;
    }

    function formatOffset(offset, format) {
      const hours = Math.trunc(Math.abs(offset / 60)),
        minutes = Math.trunc(Math.abs(offset % 60)),
        sign = offset >= 0 ? "+" : "-";

      switch (format) {
        case "short":
          return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
        case "narrow":
          return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
        case "techie":
          return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
        default:
          throw new RangeError(`Value format ${format} is out of range for property format`);
      }
    }

    function timeObject(obj) {
      return pick(obj, ["hour", "minute", "second", "millisecond"]);
    }

    /**
     * @private
     */

    const monthsLong = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ];

    const monthsShort = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];

    const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

    function months(length) {
      switch (length) {
        case "narrow":
          return [...monthsNarrow];
        case "short":
          return [...monthsShort];
        case "long":
          return [...monthsLong];
        case "numeric":
          return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
        case "2-digit":
          return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
        default:
          return null;
      }
    }

    const weekdaysLong = [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
      "Sunday",
    ];

    const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

    const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

    function weekdays(length) {
      switch (length) {
        case "narrow":
          return [...weekdaysNarrow];
        case "short":
          return [...weekdaysShort];
        case "long":
          return [...weekdaysLong];
        case "numeric":
          return ["1", "2", "3", "4", "5", "6", "7"];
        default:
          return null;
      }
    }

    const meridiems = ["AM", "PM"];

    const erasLong = ["Before Christ", "Anno Domini"];

    const erasShort = ["BC", "AD"];

    const erasNarrow = ["B", "A"];

    function eras(length) {
      switch (length) {
        case "narrow":
          return [...erasNarrow];
        case "short":
          return [...erasShort];
        case "long":
          return [...erasLong];
        default:
          return null;
      }
    }

    function meridiemForDateTime(dt) {
      return meridiems[dt.hour < 12 ? 0 : 1];
    }

    function weekdayForDateTime(dt, length) {
      return weekdays(length)[dt.weekday - 1];
    }

    function monthForDateTime(dt, length) {
      return months(length)[dt.month - 1];
    }

    function eraForDateTime(dt, length) {
      return eras(length)[dt.year < 0 ? 0 : 1];
    }

    function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
      const units = {
        years: ["year", "yr."],
        quarters: ["quarter", "qtr."],
        months: ["month", "mo."],
        weeks: ["week", "wk."],
        days: ["day", "day", "days"],
        hours: ["hour", "hr."],
        minutes: ["minute", "min."],
        seconds: ["second", "sec."],
      };

      const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

      if (numeric === "auto" && lastable) {
        const isDay = unit === "days";
        switch (count) {
          case 1:
            return isDay ? "tomorrow" : `next ${units[unit][0]}`;
          case -1:
            return isDay ? "yesterday" : `last ${units[unit][0]}`;
          case 0:
            return isDay ? "today" : `this ${units[unit][0]}`;
        }
      }

      const isInPast = Object.is(count, -0) || count < 0,
        fmtValue = Math.abs(count),
        singular = fmtValue === 1,
        lilUnits = units[unit],
        fmtUnit = narrow
          ? singular
            ? lilUnits[1]
            : lilUnits[2] || lilUnits[1]
          : singular
          ? units[unit][0]
          : unit;
      return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
    }

    function stringifyTokens(splits, tokenToString) {
      let s = "";
      for (const token of splits) {
        if (token.literal) {
          s += token.val;
        } else {
          s += tokenToString(token.val);
        }
      }
      return s;
    }

    const macroTokenToFormatOpts = {
      D: DATE_SHORT,
      DD: DATE_MED,
      DDD: DATE_FULL,
      DDDD: DATE_HUGE,
      t: TIME_SIMPLE,
      tt: TIME_WITH_SECONDS,
      ttt: TIME_WITH_SHORT_OFFSET,
      tttt: TIME_WITH_LONG_OFFSET,
      T: TIME_24_SIMPLE,
      TT: TIME_24_WITH_SECONDS,
      TTT: TIME_24_WITH_SHORT_OFFSET,
      TTTT: TIME_24_WITH_LONG_OFFSET,
      f: DATETIME_SHORT,
      ff: DATETIME_MED,
      fff: DATETIME_FULL,
      ffff: DATETIME_HUGE,
      F: DATETIME_SHORT_WITH_SECONDS,
      FF: DATETIME_MED_WITH_SECONDS,
      FFF: DATETIME_FULL_WITH_SECONDS,
      FFFF: DATETIME_HUGE_WITH_SECONDS,
    };

    /**
     * @private
     */

    class Formatter {
      static create(locale, opts = {}) {
        return new Formatter(locale, opts);
      }

      static parseFormat(fmt) {
        // white-space is always considered a literal in user-provided formats
        // the " " token has a special meaning (see unitForToken)

        let current = null,
          currentFull = "",
          bracketed = false;
        const splits = [];
        for (let i = 0; i < fmt.length; i++) {
          const c = fmt.charAt(i);
          if (c === "'") {
            if (currentFull.length > 0) {
              splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
            }
            current = null;
            currentFull = "";
            bracketed = !bracketed;
          } else if (bracketed) {
            currentFull += c;
          } else if (c === current) {
            currentFull += c;
          } else {
            if (currentFull.length > 0) {
              splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
            }
            currentFull = c;
            current = c;
          }
        }

        if (currentFull.length > 0) {
          splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
        }

        return splits;
      }

      static macroTokenToFormatOpts(token) {
        return macroTokenToFormatOpts[token];
      }

      constructor(locale, formatOpts) {
        this.opts = formatOpts;
        this.loc = locale;
        this.systemLoc = null;
      }

      formatWithSystemDefault(dt, opts) {
        if (this.systemLoc === null) {
          this.systemLoc = this.loc.redefaultToSystem();
        }
        const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
        return df.format();
      }

      formatDateTime(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
        return df.format();
      }

      formatDateTimeParts(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
        return df.formatToParts();
      }

      formatInterval(interval, opts = {}) {
        const df = this.loc.dtFormatter(interval.start, { ...this.opts, ...opts });
        return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
      }

      resolvedOptions(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
        return df.resolvedOptions();
      }

      num(n, p = 0) {
        // we get some perf out of doing this here, annoyingly
        if (this.opts.forceSimple) {
          return padStart(n, p);
        }

        const opts = { ...this.opts };

        if (p > 0) {
          opts.padTo = p;
        }

        return this.loc.numberFormatter(opts).format(n);
      }

      formatDateTimeFromString(dt, fmt) {
        const knownEnglish = this.loc.listingMode() === "en",
          useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory",
          string = (opts, extract) => this.loc.extract(dt, opts, extract),
          formatOffset = (opts) => {
            if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
              return "Z";
            }

            return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
          },
          meridiem = () =>
            knownEnglish
              ? meridiemForDateTime(dt)
              : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"),
          month = (length, standalone) =>
            knownEnglish
              ? monthForDateTime(dt, length)
              : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
          weekday = (length, standalone) =>
            knownEnglish
              ? weekdayForDateTime(dt, length)
              : string(
                  standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
                  "weekday"
                ),
          maybeMacro = (token) => {
            const formatOpts = Formatter.macroTokenToFormatOpts(token);
            if (formatOpts) {
              return this.formatWithSystemDefault(dt, formatOpts);
            } else {
              return token;
            }
          },
          era = (length) =>
            knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
          tokenToString = (token) => {
            // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles
            switch (token) {
              // ms
              case "S":
                return this.num(dt.millisecond);
              case "u":
              // falls through
              case "SSS":
                return this.num(dt.millisecond, 3);
              // seconds
              case "s":
                return this.num(dt.second);
              case "ss":
                return this.num(dt.second, 2);
              // fractional seconds
              case "uu":
                return this.num(Math.floor(dt.millisecond / 10), 2);
              case "uuu":
                return this.num(Math.floor(dt.millisecond / 100));
              // minutes
              case "m":
                return this.num(dt.minute);
              case "mm":
                return this.num(dt.minute, 2);
              // hours
              case "h":
                return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
              case "hh":
                return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
              case "H":
                return this.num(dt.hour);
              case "HH":
                return this.num(dt.hour, 2);
              // offset
              case "Z":
                // like +6
                return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
              case "ZZ":
                // like +06:00
                return formatOffset({ format: "short", allowZ: this.opts.allowZ });
              case "ZZZ":
                // like +0600
                return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
              case "ZZZZ":
                // like EST
                return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
              case "ZZZZZ":
                // like Eastern Standard Time
                return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
              // zone
              case "z":
                // like America/New_York
                return dt.zoneName;
              // meridiems
              case "a":
                return meridiem();
              // dates
              case "d":
                return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
              case "dd":
                return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
              // weekdays - standalone
              case "c":
                // like 1
                return this.num(dt.weekday);
              case "ccc":
                // like 'Tues'
                return weekday("short", true);
              case "cccc":
                // like 'Tuesday'
                return weekday("long", true);
              case "ccccc":
                // like 'T'
                return weekday("narrow", true);
              // weekdays - format
              case "E":
                // like 1
                return this.num(dt.weekday);
              case "EEE":
                // like 'Tues'
                return weekday("short", false);
              case "EEEE":
                // like 'Tuesday'
                return weekday("long", false);
              case "EEEEE":
                // like 'T'
                return weekday("narrow", false);
              // months - standalone
              case "L":
                // like 1
                return useDateTimeFormatter
                  ? string({ month: "numeric", day: "numeric" }, "month")
                  : this.num(dt.month);
              case "LL":
                // like 01, doesn't seem to work
                return useDateTimeFormatter
                  ? string({ month: "2-digit", day: "numeric" }, "month")
                  : this.num(dt.month, 2);
              case "LLL":
                // like Jan
                return month("short", true);
              case "LLLL":
                // like January
                return month("long", true);
              case "LLLLL":
                // like J
                return month("narrow", true);
              // months - format
              case "M":
                // like 1
                return useDateTimeFormatter
                  ? string({ month: "numeric" }, "month")
                  : this.num(dt.month);
              case "MM":
                // like 01
                return useDateTimeFormatter
                  ? string({ month: "2-digit" }, "month")
                  : this.num(dt.month, 2);
              case "MMM":
                // like Jan
                return month("short", false);
              case "MMMM":
                // like January
                return month("long", false);
              case "MMMMM":
                // like J
                return month("narrow", false);
              // years
              case "y":
                // like 2014
                return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
              case "yy":
                // like 14
                return useDateTimeFormatter
                  ? string({ year: "2-digit" }, "year")
                  : this.num(dt.year.toString().slice(-2), 2);
              case "yyyy":
                // like 0012
                return useDateTimeFormatter
                  ? string({ year: "numeric" }, "year")
                  : this.num(dt.year, 4);
              case "yyyyyy":
                // like 000012
                return useDateTimeFormatter
                  ? string({ year: "numeric" }, "year")
                  : this.num(dt.year, 6);
              // eras
              case "G":
                // like AD
                return era("short");
              case "GG":
                // like Anno Domini
                return era("long");
              case "GGGGG":
                return era("narrow");
              case "kk":
                return this.num(dt.weekYear.toString().slice(-2), 2);
              case "kkkk":
                return this.num(dt.weekYear, 4);
              case "W":
                return this.num(dt.weekNumber);
              case "WW":
                return this.num(dt.weekNumber, 2);
              case "o":
                return this.num(dt.ordinal);
              case "ooo":
                return this.num(dt.ordinal, 3);
              case "q":
                // like 1
                return this.num(dt.quarter);
              case "qq":
                // like 01
                return this.num(dt.quarter, 2);
              case "X":
                return this.num(Math.floor(dt.ts / 1000));
              case "x":
                return this.num(dt.ts);
              default:
                return maybeMacro(token);
            }
          };

        return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
      }

      formatDurationFromString(dur, fmt) {
        const tokenToField = (token) => {
            switch (token[0]) {
              case "S":
                return "millisecond";
              case "s":
                return "second";
              case "m":
                return "minute";
              case "h":
                return "hour";
              case "d":
                return "day";
              case "w":
                return "week";
              case "M":
                return "month";
              case "y":
                return "year";
              default:
                return null;
            }
          },
          tokenToString = (lildur) => (token) => {
            const mapped = tokenToField(token);
            if (mapped) {
              return this.num(lildur.get(mapped), token.length);
            } else {
              return token;
            }
          },
          tokens = Formatter.parseFormat(fmt),
          realTokens = tokens.reduce(
            (found, { literal, val }) => (literal ? found : found.concat(val)),
            []
          ),
          collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
        return stringifyTokens(tokens, tokenToString(collapsed));
      }
    }

    class Invalid {
      constructor(reason, explanation) {
        this.reason = reason;
        this.explanation = explanation;
      }

      toMessage() {
        if (this.explanation) {
          return `${this.reason}: ${this.explanation}`;
        } else {
          return this.reason;
        }
      }
    }

    /*
     * This file handles parsing for well-specified formats. Here's how it works:
     * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
     * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
     * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
     * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
     * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
     * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
     */

    const ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;

    function combineRegexes(...regexes) {
      const full = regexes.reduce((f, r) => f + r.source, "");
      return RegExp(`^${full}$`);
    }

    function combineExtractors(...extractors) {
      return (m) =>
        extractors
          .reduce(
            ([mergedVals, mergedZone, cursor], ex) => {
              const [val, zone, next] = ex(m, cursor);
              return [{ ...mergedVals, ...val }, zone || mergedZone, next];
            },
            [{}, null, 1]
          )
          .slice(0, 2);
    }

    function parse$3(s, ...patterns) {
      if (s == null) {
        return [null, null];
      }

      for (const [regex, extractor] of patterns) {
        const m = regex.exec(s);
        if (m) {
          return extractor(m);
        }
      }
      return [null, null];
    }

    function simpleParse(...keys) {
      return (match, cursor) => {
        const ret = {};
        let i;

        for (i = 0; i < keys.length; i++) {
          ret[keys[i]] = parseInteger(match[cursor + i]);
        }
        return [ret, null, cursor + i];
      };
    }

    // ISO and SQL parsing
    const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
    const isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
    const isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
    const isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
    const isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
    const isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
    const isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
    const isoOrdinalRegex = /(\d{4})-?(\d{3})/;
    const extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
    const extractISOOrdinalData = simpleParse("year", "ordinal");
    const sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
    const sqlTimeRegex = RegExp(
      `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
    );
    const sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

    function int$1(match, pos, fallback) {
      const m = match[pos];
      return isUndefined$2(m) ? fallback : parseInteger(m);
    }

    function extractISOYmd(match, cursor) {
      const item = {
        year: int$1(match, cursor),
        month: int$1(match, cursor + 1, 1),
        day: int$1(match, cursor + 2, 1),
      };

      return [item, null, cursor + 3];
    }

    function extractISOTime(match, cursor) {
      const item = {
        hours: int$1(match, cursor, 0),
        minutes: int$1(match, cursor + 1, 0),
        seconds: int$1(match, cursor + 2, 0),
        milliseconds: parseMillis(match[cursor + 3]),
      };

      return [item, null, cursor + 4];
    }

    function extractISOOffset(match, cursor) {
      const local = !match[cursor] && !match[cursor + 1],
        fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
        zone = local ? null : FixedOffsetZone.instance(fullOffset);
      return [{}, zone, cursor + 3];
    }

    function extractIANAZone(match, cursor) {
      const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
      return [{}, zone, cursor + 1];
    }

    // ISO time parsing

    const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);

    // ISO duration parsing

    const isoDuration =
      /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;

    function extractISODuration(match) {
      const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] =
        match;

      const hasNegativePrefix = s[0] === "-";
      const negativeSeconds = secondStr && secondStr[0] === "-";

      const maybeNegate = (num, force = false) =>
        num !== undefined && (force || (num && hasNegativePrefix)) ? -num : num;

      return [
        {
          years: maybeNegate(parseFloating(yearStr)),
          months: maybeNegate(parseFloating(monthStr)),
          weeks: maybeNegate(parseFloating(weekStr)),
          days: maybeNegate(parseFloating(dayStr)),
          hours: maybeNegate(parseFloating(hourStr)),
          minutes: maybeNegate(parseFloating(minuteStr)),
          seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
          milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds),
        },
      ];
    }

    // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
    // and not just that we're in -240 *right now*. But since I don't think these are used that often
    // I'm just going to ignore that
    const obsOffsets = {
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60,
    };

    function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      const result = {
        year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
        month: monthsShort.indexOf(monthStr) + 1,
        day: parseInteger(dayStr),
        hour: parseInteger(hourStr),
        minute: parseInteger(minuteStr),
      };

      if (secondStr) result.second = parseInteger(secondStr);
      if (weekdayStr) {
        result.weekday =
          weekdayStr.length > 3
            ? weekdaysLong.indexOf(weekdayStr) + 1
            : weekdaysShort.indexOf(weekdayStr) + 1;
      }

      return result;
    }

    // RFC 2822/5322
    const rfc2822 =
      /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

    function extractRFC2822(match) {
      const [
          ,
          weekdayStr,
          dayStr,
          monthStr,
          yearStr,
          hourStr,
          minuteStr,
          secondStr,
          obsOffset,
          milOffset,
          offHourStr,
          offMinuteStr,
        ] = match,
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

      let offset;
      if (obsOffset) {
        offset = obsOffsets[obsOffset];
      } else if (milOffset) {
        offset = 0;
      } else {
        offset = signedOffset(offHourStr, offMinuteStr);
      }

      return [result, new FixedOffsetZone(offset)];
    }

    function preprocessRFC2822(s) {
      // Remove comments and folding whitespace and replace multiple-spaces with a single space
      return s
        .replace(/\([^()]*\)|[\n\t]/g, " ")
        .replace(/(\s\s+)/g, " ")
        .trim();
    }

    // http date

    const rfc1123 =
        /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
      rfc850 =
        /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
      ascii =
        /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

    function extractRFC1123Or850(match) {
      const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
      return [result, FixedOffsetZone.utcInstance];
    }

    function extractASCII(match) {
      const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
      return [result, FixedOffsetZone.utcInstance];
    }

    const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
    const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
    const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
    const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

    const extractISOYmdTimeAndOffset = combineExtractors(
      extractISOYmd,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    const extractISOWeekTimeAndOffset = combineExtractors(
      extractISOWeekData,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    const extractISOOrdinalDateAndTime = combineExtractors(
      extractISOOrdinalData,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    const extractISOTimeAndOffset = combineExtractors(
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );

    /*
     * @private
     */

    function parseISODate(s) {
      return parse$3(
        s,
        [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
        [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
        [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
        [isoTimeCombinedRegex, extractISOTimeAndOffset]
      );
    }

    function parseRFC2822Date(s) {
      return parse$3(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
    }

    function parseHTTPDate(s) {
      return parse$3(
        s,
        [rfc1123, extractRFC1123Or850],
        [rfc850, extractRFC1123Or850],
        [ascii, extractASCII]
      );
    }

    function parseISODuration(s) {
      return parse$3(s, [isoDuration, extractISODuration]);
    }

    const extractISOTimeOnly = combineExtractors(extractISOTime);

    function parseISOTimeOnly(s) {
      return parse$3(s, [isoTimeOnly, extractISOTimeOnly]);
    }

    const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
    const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

    const extractISOTimeOffsetAndIANAZone = combineExtractors(
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );

    function parseSQL(s) {
      return parse$3(
        s,
        [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
        [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
      );
    }

    const INVALID$3 = "Invalid Duration";

    // unit conversion constants
    const lowOrderMatrix = {
        weeks: {
          days: 7,
          hours: 7 * 24,
          minutes: 7 * 24 * 60,
          seconds: 7 * 24 * 60 * 60,
          milliseconds: 7 * 24 * 60 * 60 * 1000,
        },
        days: {
          hours: 24,
          minutes: 24 * 60,
          seconds: 24 * 60 * 60,
          milliseconds: 24 * 60 * 60 * 1000,
        },
        hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
        minutes: { seconds: 60, milliseconds: 60 * 1000 },
        seconds: { milliseconds: 1000 },
      },
      casualMatrix = {
        years: {
          quarters: 4,
          months: 12,
          weeks: 52,
          days: 365,
          hours: 365 * 24,
          minutes: 365 * 24 * 60,
          seconds: 365 * 24 * 60 * 60,
          milliseconds: 365 * 24 * 60 * 60 * 1000,
        },
        quarters: {
          months: 3,
          weeks: 13,
          days: 91,
          hours: 91 * 24,
          minutes: 91 * 24 * 60,
          seconds: 91 * 24 * 60 * 60,
          milliseconds: 91 * 24 * 60 * 60 * 1000,
        },
        months: {
          weeks: 4,
          days: 30,
          hours: 30 * 24,
          minutes: 30 * 24 * 60,
          seconds: 30 * 24 * 60 * 60,
          milliseconds: 30 * 24 * 60 * 60 * 1000,
        },

        ...lowOrderMatrix,
      },
      daysInYearAccurate = 146097.0 / 400,
      daysInMonthAccurate = 146097.0 / 4800,
      accurateMatrix = {
        years: {
          quarters: 4,
          months: 12,
          weeks: daysInYearAccurate / 7,
          days: daysInYearAccurate,
          hours: daysInYearAccurate * 24,
          minutes: daysInYearAccurate * 24 * 60,
          seconds: daysInYearAccurate * 24 * 60 * 60,
          milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000,
        },
        quarters: {
          months: 3,
          weeks: daysInYearAccurate / 28,
          days: daysInYearAccurate / 4,
          hours: (daysInYearAccurate * 24) / 4,
          minutes: (daysInYearAccurate * 24 * 60) / 4,
          seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
          milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4,
        },
        months: {
          weeks: daysInMonthAccurate / 7,
          days: daysInMonthAccurate,
          hours: daysInMonthAccurate * 24,
          minutes: daysInMonthAccurate * 24 * 60,
          seconds: daysInMonthAccurate * 24 * 60 * 60,
          milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000,
        },
        ...lowOrderMatrix,
      };

    // units ordered by size
    const orderedUnits$1 = [
      "years",
      "quarters",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds",
      "milliseconds",
    ];

    const reverseUnits = orderedUnits$1.slice(0).reverse();

    // clone really means "create another instance just like this one, but with these changes"
    function clone$4(dur, alts, clear = false) {
      // deep merge for vals
      const conf = {
        values: clear ? alts.values : { ...dur.values, ...(alts.values || {}) },
        loc: dur.loc.clone(alts.loc),
        conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
        matrix: alts.matrix || dur.matrix,
      };
      return new Duration(conf);
    }

    function antiTrunc(n) {
      return n < 0 ? Math.floor(n) : Math.ceil(n);
    }

    // NB: mutates parameters
    function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
      const conv = matrix[toUnit][fromUnit],
        raw = fromMap[fromUnit] / conv,
        sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
        // ok, so this is wild, but see the matrix in the tests
        added =
          !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
      toMap[toUnit] += added;
      fromMap[fromUnit] -= added * conv;
    }

    // NB: mutates parameters
    function normalizeValues(matrix, vals) {
      reverseUnits.reduce((previous, current) => {
        if (!isUndefined$2(vals[current])) {
          if (previous) {
            convert(matrix, vals, previous, vals, current);
          }
          return current;
        } else {
          return previous;
        }
      }, null);
    }

    // Remove all properties with a value of 0 from an object
    function removeZeroes(vals) {
      const newVals = {};
      for (const [key, value] of Object.entries(vals)) {
        if (value !== 0) {
          newVals[key] = value;
        }
      }
      return newVals;
    }

    /**
     * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
     *
     * Here is a brief overview of commonly used methods and getters in Duration:
     *
     * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
     * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
     * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
     * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
     * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
     *
     * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
     */
    class Duration {
      /**
       * @private
       */
      constructor(config) {
        const accurate = config.conversionAccuracy === "longterm" || false;
        let matrix = accurate ? accurateMatrix : casualMatrix;

        if (config.matrix) {
          matrix = config.matrix;
        }

        /**
         * @access private
         */
        this.values = config.values;
        /**
         * @access private
         */
        this.loc = config.loc || Locale.create();
        /**
         * @access private
         */
        this.conversionAccuracy = accurate ? "longterm" : "casual";
        /**
         * @access private
         */
        this.invalid = config.invalid || null;
        /**
         * @access private
         */
        this.matrix = matrix;
        /**
         * @access private
         */
        this.isLuxonDuration = true;
      }

      /**
       * Create Duration from a number of milliseconds.
       * @param {number} count of milliseconds
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      static fromMillis(count, opts) {
        return Duration.fromObject({ milliseconds: count }, opts);
      }

      /**
       * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
       * If this object is empty then a zero milliseconds duration is returned.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.years
       * @param {number} obj.quarters
       * @param {number} obj.months
       * @param {number} obj.weeks
       * @param {number} obj.days
       * @param {number} obj.hours
       * @param {number} obj.minutes
       * @param {number} obj.seconds
       * @param {number} obj.milliseconds
       * @param {Object} [opts=[]] - options for creating this Duration
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the custom conversion system to use
       * @return {Duration}
       */
      static fromObject(obj, opts = {}) {
        if (obj == null || typeof obj !== "object") {
          throw new InvalidArgumentError(
            `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
          );
        }

        return new Duration({
          values: normalizeObject(obj, Duration.normalizeUnit),
          loc: Locale.fromObject(opts),
          conversionAccuracy: opts.conversionAccuracy,
          matrix: opts.matrix,
        });
      }

      /**
       * Create a Duration from DurationLike.
       *
       * @param {Object | number | Duration} durationLike
       * One of:
       * - object with keys like 'years' and 'hours'.
       * - number representing milliseconds
       * - Duration instance
       * @return {Duration}
       */
      static fromDurationLike(durationLike) {
        if (isNumber$2(durationLike)) {
          return Duration.fromMillis(durationLike);
        } else if (Duration.isDuration(durationLike)) {
          return durationLike;
        } else if (typeof durationLike === "object") {
          return Duration.fromObject(durationLike);
        } else {
          throw new InvalidArgumentError(
            `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
          );
        }
      }

      /**
       * Create a Duration from an ISO 8601 duration string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the preset conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
       * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
       * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
       * @return {Duration}
       */
      static fromISO(text, opts) {
        const [parsed] = parseISODuration(text);
        if (parsed) {
          return Duration.fromObject(parsed, opts);
        } else {
          return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
      }

      /**
       * Create a Duration from an ISO 8601 time string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
       * @param {string} [opts.matrix=Object] - the conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Times
       * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
       * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
       * @return {Duration}
       */
      static fromISOTime(text, opts) {
        const [parsed] = parseISOTimeOnly(text);
        if (parsed) {
          return Duration.fromObject(parsed, opts);
        } else {
          return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
      }

      /**
       * Create an invalid Duration.
       * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Duration}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
        }

        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidDurationError(invalid);
        } else {
          return new Duration({ invalid });
        }
      }

      /**
       * @private
       */
      static normalizeUnit(unit) {
        const normalized = {
          year: "years",
          years: "years",
          quarter: "quarters",
          quarters: "quarters",
          month: "months",
          months: "months",
          week: "weeks",
          weeks: "weeks",
          day: "days",
          days: "days",
          hour: "hours",
          hours: "hours",
          minute: "minutes",
          minutes: "minutes",
          second: "seconds",
          seconds: "seconds",
          millisecond: "milliseconds",
          milliseconds: "milliseconds",
        }[unit ? unit.toLowerCase() : unit];

        if (!normalized) throw new InvalidUnitError(unit);

        return normalized;
      }

      /**
       * Check if an object is a Duration. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDuration(o) {
        return (o && o.isLuxonDuration) || false;
      }

      /**
       * Get  the locale of a Duration, such 'en-GB'
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }

      /**
       * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }

      /**
       * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
       * * `S` for milliseconds
       * * `s` for seconds
       * * `m` for minutes
       * * `h` for hours
       * * `d` for days
       * * `w` for weeks
       * * `M` for months
       * * `y` for years
       * Notes:
       * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
       * * Tokens can be escaped by wrapping with single quotes.
       * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
       * @param {string} fmt - the format string
       * @param {Object} opts - options
       * @param {boolean} [opts.floor=true] - floor numerical values
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        // reverse-compat since 1.2; we always round down now, never up, and we do it by default
        const fmtOpts = {
          ...opts,
          floor: opts.round !== false && opts.floor !== false,
        };
        return this.isValid
          ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
          : INVALID$3;
      }

      /**
       * Returns a string representation of a Duration with all units included.
       * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
       * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.
       * @example
       * ```js
       * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
       * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
       * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
       * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
       * ```
       */
      toHuman(opts = {}) {
        const l = orderedUnits$1
          .map((unit) => {
            const val = this.values[unit];
            if (isUndefined$2(val)) {
              return null;
            }
            return this.loc
              .numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) })
              .format(val);
          })
          .filter((n) => n);

        return this.loc
          .listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts })
          .format(l);
      }

      /**
       * Returns a JavaScript object with this Duration's values.
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
       * @return {Object}
       */
      toObject() {
        if (!this.isValid) return {};
        return { ...this.values };
      }

      /**
       * Returns an ISO 8601-compliant string representation of this Duration.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
       * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
       * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
       * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
       * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
       * @return {string}
       */
      toISO() {
        // we could use the formatter, but this is an easier way to get the minimum string
        if (!this.isValid) return null;

        let s = "P";
        if (this.years !== 0) s += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0) s += this.weeks + "W";
        if (this.days !== 0) s += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
          s += "T";
        if (this.hours !== 0) s += this.hours + "H";
        if (this.minutes !== 0) s += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0)
          // this will handle "floating point madness" by removing extra decimal places
          // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
          s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
        if (s === "P") s += "T0S";
        return s;
      }

      /**
       * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
       * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Times
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
       * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
       * @return {string}
       */
      toISOTime(opts = {}) {
        if (!this.isValid) return null;

        const millis = this.toMillis();
        if (millis < 0 || millis >= 86400000) return null;

        opts = {
          suppressMilliseconds: false,
          suppressSeconds: false,
          includePrefix: false,
          format: "extended",
          ...opts,
        };

        const value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");

        let fmt = opts.format === "basic" ? "hhmm" : "hh:mm";

        if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
          fmt += opts.format === "basic" ? "ss" : ":ss";
          if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
            fmt += ".SSS";
          }
        }

        let str = value.toFormat(fmt);

        if (opts.includePrefix) {
          str = "T" + str;
        }

        return str;
      }

      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }

      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
       * @return {string}
       */
      toString() {
        return this.toISO();
      }

      /**
       * Returns an milliseconds value of this Duration.
       * @return {number}
       */
      toMillis() {
        return this.as("milliseconds");
      }

      /**
       * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
       * @return {number}
       */
      valueOf() {
        return this.toMillis();
      }

      /**
       * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      plus(duration) {
        if (!this.isValid) return this;

        const dur = Duration.fromDurationLike(duration),
          result = {};

        for (const k of orderedUnits$1) {
          if (hasOwnProperty$2(dur.values, k) || hasOwnProperty$2(this.values, k)) {
            result[k] = dur.get(k) + this.get(k);
          }
        }

        return clone$4(this, { values: result }, true);
      }

      /**
       * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      minus(duration) {
        if (!this.isValid) return this;

        const dur = Duration.fromDurationLike(duration);
        return this.plus(dur.negate());
      }

      /**
       * Scale this Duration by the specified amount. Return a newly-constructed Duration.
       * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
       * @return {Duration}
       */
      mapUnits(fn) {
        if (!this.isValid) return this;
        const result = {};
        for (const k of Object.keys(this.values)) {
          result[k] = asNumber(fn(this.values[k], k));
        }
        return clone$4(this, { values: result }, true);
      }

      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
       * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
       * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
       * @return {number}
       */
      get(unit) {
        return this[Duration.normalizeUnit(unit)];
      }

      /**
       * "Set" the values of specified units. Return a newly-constructed Duration.
       * @param {Object} values - a mapping of units to numbers
       * @example dur.set({ years: 2017 })
       * @example dur.set({ hours: 8, minutes: 30 })
       * @return {Duration}
       */
      set(values) {
        if (!this.isValid) return this;

        const mixed = { ...this.values, ...normalizeObject(values, Duration.normalizeUnit) };
        return clone$4(this, { values: mixed });
      }

      /**
       * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
       * @example dur.reconfigure({ locale: 'en-GB' })
       * @return {Duration}
       */
      reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem });
        const opts = { loc, matrix, conversionAccuracy };
        return clone$4(this, opts);
      }

      /**
       * Return the length of the duration in the specified unit.
       * @param {string} unit - a unit such as 'minutes' or 'days'
       * @example Duration.fromObject({years: 1}).as('days') //=> 365
       * @example Duration.fromObject({years: 1}).as('months') //=> 12
       * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
       * @return {number}
       */
      as(unit) {
        return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
      }

      /**
       * Reduce this Duration to its canonical representation in its current units.
       * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
       * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
       * @return {Duration}
       */
      normalize() {
        if (!this.isValid) return this;
        const vals = this.toObject();
        normalizeValues(this.matrix, vals);
        return clone$4(this, { values: vals }, true);
      }

      /**
       * Rescale units to its largest representation
       * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
       * @return {Duration}
       */
      rescale() {
        if (!this.isValid) return this;
        const vals = removeZeroes(this.normalize().shiftToAll().toObject());
        return clone$4(this, { values: vals }, true);
      }

      /**
       * Convert this Duration into its representation in a different set of units.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
       * @return {Duration}
       */
      shiftTo(...units) {
        if (!this.isValid) return this;

        if (units.length === 0) {
          return this;
        }

        units = units.map((u) => Duration.normalizeUnit(u));

        const built = {},
          accumulated = {},
          vals = this.toObject();
        let lastUnit;

        for (const k of orderedUnits$1) {
          if (units.indexOf(k) >= 0) {
            lastUnit = k;

            let own = 0;

            // anything we haven't boiled down yet should get boiled to this unit
            for (const ak in accumulated) {
              own += this.matrix[ak][k] * accumulated[ak];
              accumulated[ak] = 0;
            }

            // plus anything that's already in this unit
            if (isNumber$2(vals[k])) {
              own += vals[k];
            }

            const i = Math.trunc(own);
            built[k] = i;
            accumulated[k] = (own * 1000 - i * 1000) / 1000;

            // plus anything further down the chain that should be rolled up in to this
            for (const down in vals) {
              if (orderedUnits$1.indexOf(down) > orderedUnits$1.indexOf(k)) {
                convert(this.matrix, vals, down, built, k);
              }
            }
            // otherwise, keep it in the wings to boil it later
          } else if (isNumber$2(vals[k])) {
            accumulated[k] = vals[k];
          }
        }

        // anything leftover becomes the decimal for the last unit
        // lastUnit must be defined since units is not empty
        for (const key in accumulated) {
          if (accumulated[key] !== 0) {
            built[lastUnit] +=
              key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
          }
        }

        return clone$4(this, { values: built }, true).normalize();
      }

      /**
       * Shift this Duration to all available units.
       * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
       * @return {Duration}
       */
      shiftToAll() {
        if (!this.isValid) return this;
        return this.shiftTo(
          "years",
          "months",
          "weeks",
          "days",
          "hours",
          "minutes",
          "seconds",
          "milliseconds"
        );
      }

      /**
       * Return the negative of this Duration.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
       * @return {Duration}
       */
      negate() {
        if (!this.isValid) return this;
        const negated = {};
        for (const k of Object.keys(this.values)) {
          negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
        }
        return clone$4(this, { values: negated }, true);
      }

      /**
       * Get the years.
       * @type {number}
       */
      get years() {
        return this.isValid ? this.values.years || 0 : NaN;
      }

      /**
       * Get the quarters.
       * @type {number}
       */
      get quarters() {
        return this.isValid ? this.values.quarters || 0 : NaN;
      }

      /**
       * Get the months.
       * @type {number}
       */
      get months() {
        return this.isValid ? this.values.months || 0 : NaN;
      }

      /**
       * Get the weeks
       * @type {number}
       */
      get weeks() {
        return this.isValid ? this.values.weeks || 0 : NaN;
      }

      /**
       * Get the days.
       * @type {number}
       */
      get days() {
        return this.isValid ? this.values.days || 0 : NaN;
      }

      /**
       * Get the hours.
       * @type {number}
       */
      get hours() {
        return this.isValid ? this.values.hours || 0 : NaN;
      }

      /**
       * Get the minutes.
       * @type {number}
       */
      get minutes() {
        return this.isValid ? this.values.minutes || 0 : NaN;
      }

      /**
       * Get the seconds.
       * @return {number}
       */
      get seconds() {
        return this.isValid ? this.values.seconds || 0 : NaN;
      }

      /**
       * Get the milliseconds.
       * @return {number}
       */
      get milliseconds() {
        return this.isValid ? this.values.milliseconds || 0 : NaN;
      }

      /**
       * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
       * on invalid DateTimes or Intervals.
       * @return {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }

      /**
       * Returns an error code if this Duration became invalid, or null if the Duration is valid
       * @return {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }

      /**
       * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }

      /**
       * Equality check
       * Two Durations are equal iff they have the same units and the same values for each unit.
       * @param {Duration} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }

        if (!this.loc.equals(other.loc)) {
          return false;
        }

        function eq(v1, v2) {
          // Consider 0 and undefined as equal
          if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
          return v1 === v2;
        }

        for (const u of orderedUnits$1) {
          if (!eq(this.values[u], other.values[u])) {
            return false;
          }
        }
        return true;
      }
    }

    const INVALID$2 = "Invalid Interval";

    // checks if the start is equal to or before the end
    function validateStartEnd(start, end) {
      if (!start || !start.isValid) {
        return Interval.invalid("missing or invalid start");
      } else if (!end || !end.isValid) {
        return Interval.invalid("missing or invalid end");
      } else if (end < start) {
        return Interval.invalid(
          "end before start",
          `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
        );
      } else {
        return null;
      }
    }

    /**
     * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
     *
     * Here is a brief overview of the most commonly used methods and getters in Interval:
     *
     * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
     * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
     * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
     * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
     * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
     * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
     */
    class Interval {
      /**
       * @private
       */
      constructor(config) {
        /**
         * @access private
         */
        this.s = config.start;
        /**
         * @access private
         */
        this.e = config.end;
        /**
         * @access private
         */
        this.invalid = config.invalid || null;
        /**
         * @access private
         */
        this.isLuxonInterval = true;
      }

      /**
       * Create an invalid Interval.
       * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Interval}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
        }

        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidIntervalError(invalid);
        } else {
          return new Interval({ invalid });
        }
      }

      /**
       * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
       * @param {DateTime|Date|Object} start
       * @param {DateTime|Date|Object} end
       * @return {Interval}
       */
      static fromDateTimes(start, end) {
        const builtStart = friendlyDateTime(start),
          builtEnd = friendlyDateTime(end);

        const validateError = validateStartEnd(builtStart, builtEnd);

        if (validateError == null) {
          return new Interval({
            start: builtStart,
            end: builtEnd,
          });
        } else {
          return validateError;
        }
      }

      /**
       * Create an Interval from a start DateTime and a Duration to extend to.
       * @param {DateTime|Date|Object} start
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static after(start, duration) {
        const dur = Duration.fromDurationLike(duration),
          dt = friendlyDateTime(start);
        return Interval.fromDateTimes(dt, dt.plus(dur));
      }

      /**
       * Create an Interval from an end DateTime and a Duration to extend backwards to.
       * @param {DateTime|Date|Object} end
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static before(end, duration) {
        const dur = Duration.fromDurationLike(duration),
          dt = friendlyDateTime(end);
        return Interval.fromDateTimes(dt.minus(dur), dt);
      }

      /**
       * Create an Interval from an ISO 8601 string.
       * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
       * @param {string} text - the ISO string to parse
       * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {Interval}
       */
      static fromISO(text, opts) {
        const [s, e] = (text || "").split("/", 2);
        if (s && e) {
          let start, startIsValid;
          try {
            start = DateTime.fromISO(s, opts);
            startIsValid = start.isValid;
          } catch (e) {
            startIsValid = false;
          }

          let end, endIsValid;
          try {
            end = DateTime.fromISO(e, opts);
            endIsValid = end.isValid;
          } catch (e) {
            endIsValid = false;
          }

          if (startIsValid && endIsValid) {
            return Interval.fromDateTimes(start, end);
          }

          if (startIsValid) {
            const dur = Duration.fromISO(e, opts);
            if (dur.isValid) {
              return Interval.after(start, dur);
            }
          } else if (endIsValid) {
            const dur = Duration.fromISO(s, opts);
            if (dur.isValid) {
              return Interval.before(end, dur);
            }
          }
        }
        return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }

      /**
       * Check if an object is an Interval. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isInterval(o) {
        return (o && o.isLuxonInterval) || false;
      }

      /**
       * Returns the start of the Interval
       * @type {DateTime}
       */
      get start() {
        return this.isValid ? this.s : null;
      }

      /**
       * Returns the end of the Interval
       * @type {DateTime}
       */
      get end() {
        return this.isValid ? this.e : null;
      }

      /**
       * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
       * @type {boolean}
       */
      get isValid() {
        return this.invalidReason === null;
      }

      /**
       * Returns an error code if this Interval is invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }

      /**
       * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }

      /**
       * Returns the length of the Interval in the specified unit.
       * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
       * @return {number}
       */
      length(unit = "milliseconds") {
        return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
      }

      /**
       * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
       * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
       * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
       * @param {string} [unit='milliseconds'] - the unit of time to count.
       * @return {number}
       */
      count(unit = "milliseconds") {
        if (!this.isValid) return NaN;
        const start = this.start.startOf(unit),
          end = this.end.startOf(unit);
        return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
      }

      /**
       * Returns whether this Interval's start and end are both in the same unit of time
       * @param {string} unit - the unit of time to check sameness on
       * @return {boolean}
       */
      hasSame(unit) {
        return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
      }

      /**
       * Return whether this Interval has the same start and end DateTimes.
       * @return {boolean}
       */
      isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
      }

      /**
       * Return whether this Interval's start is after the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isAfter(dateTime) {
        if (!this.isValid) return false;
        return this.s > dateTime;
      }

      /**
       * Return whether this Interval's end is before the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isBefore(dateTime) {
        if (!this.isValid) return false;
        return this.e <= dateTime;
      }

      /**
       * Return whether this Interval contains the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      contains(dateTime) {
        if (!this.isValid) return false;
        return this.s <= dateTime && this.e > dateTime;
      }

      /**
       * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
       * @param {Object} values - the values to set
       * @param {DateTime} values.start - the starting DateTime
       * @param {DateTime} values.end - the ending DateTime
       * @return {Interval}
       */
      set({ start, end } = {}) {
        if (!this.isValid) return this;
        return Interval.fromDateTimes(start || this.s, end || this.e);
      }

      /**
       * Split this Interval at each of the specified DateTimes
       * @param {...DateTime} dateTimes - the unit of time to count.
       * @return {Array}
       */
      splitAt(...dateTimes) {
        if (!this.isValid) return [];
        const sorted = dateTimes
            .map(friendlyDateTime)
            .filter((d) => this.contains(d))
            .sort(),
          results = [];
        let { s } = this,
          i = 0;

        while (s < this.e) {
          const added = sorted[i] || this.e,
            next = +added > +this.e ? this.e : added;
          results.push(Interval.fromDateTimes(s, next));
          s = next;
          i += 1;
        }

        return results;
      }

      /**
       * Split this Interval into smaller Intervals, each of the specified length.
       * Left over time is grouped into a smaller interval
       * @param {Duration|Object|number} duration - The length of each resulting interval.
       * @return {Array}
       */
      splitBy(duration) {
        const dur = Duration.fromDurationLike(duration);

        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
          return [];
        }

        let { s } = this,
          idx = 1,
          next;

        const results = [];
        while (s < this.e) {
          const added = this.start.plus(dur.mapUnits((x) => x * idx));
          next = +added > +this.e ? this.e : added;
          results.push(Interval.fromDateTimes(s, next));
          s = next;
          idx += 1;
        }

        return results;
      }

      /**
       * Split this Interval into the specified number of smaller intervals.
       * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
       * @return {Array}
       */
      divideEqually(numberOfParts) {
        if (!this.isValid) return [];
        return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
      }

      /**
       * Return whether this Interval overlaps with the specified Interval
       * @param {Interval} other
       * @return {boolean}
       */
      overlaps(other) {
        return this.e > other.s && this.s < other.e;
      }

      /**
       * Return whether this Interval's end is adjacent to the specified Interval's start.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsStart(other) {
        if (!this.isValid) return false;
        return +this.e === +other.s;
      }

      /**
       * Return whether this Interval's start is adjacent to the specified Interval's end.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsEnd(other) {
        if (!this.isValid) return false;
        return +other.e === +this.s;
      }

      /**
       * Return whether this Interval engulfs the start and end of the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      engulfs(other) {
        if (!this.isValid) return false;
        return this.s <= other.s && this.e >= other.e;
      }

      /**
       * Return whether this Interval has the same start and end as the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }

        return this.s.equals(other.s) && this.e.equals(other.e);
      }

      /**
       * Return an Interval representing the intersection of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
       * Returns null if the intersection is empty, meaning, the intervals don't intersect.
       * @param {Interval} other
       * @return {Interval}
       */
      intersection(other) {
        if (!this.isValid) return this;
        const s = this.s > other.s ? this.s : other.s,
          e = this.e < other.e ? this.e : other.e;

        if (s >= e) {
          return null;
        } else {
          return Interval.fromDateTimes(s, e);
        }
      }

      /**
       * Return an Interval representing the union of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
       * @param {Interval} other
       * @return {Interval}
       */
      union(other) {
        if (!this.isValid) return this;
        const s = this.s < other.s ? this.s : other.s,
          e = this.e > other.e ? this.e : other.e;
        return Interval.fromDateTimes(s, e);
      }

      /**
       * Merge an array of Intervals into a equivalent minimal set of Intervals.
       * Combines overlapping and adjacent Intervals.
       * @param {Array} intervals
       * @return {Array}
       */
      static merge(intervals) {
        const [found, final] = intervals
          .sort((a, b) => a.s - b.s)
          .reduce(
            ([sofar, current], item) => {
              if (!current) {
                return [sofar, item];
              } else if (current.overlaps(item) || current.abutsStart(item)) {
                return [sofar, current.union(item)];
              } else {
                return [sofar.concat([current]), item];
              }
            },
            [[], null]
          );
        if (final) {
          found.push(final);
        }
        return found;
      }

      /**
       * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
       * @param {Array} intervals
       * @return {Array}
       */
      static xor(intervals) {
        let start = null,
          currentCount = 0;
        const results = [],
          ends = intervals.map((i) => [
            { time: i.s, type: "s" },
            { time: i.e, type: "e" },
          ]),
          flattened = Array.prototype.concat(...ends),
          arr = flattened.sort((a, b) => a.time - b.time);

        for (const i of arr) {
          currentCount += i.type === "s" ? 1 : -1;

          if (currentCount === 1) {
            start = i.time;
          } else {
            if (start && +start !== +i.time) {
              results.push(Interval.fromDateTimes(start, i.time));
            }

            start = null;
          }
        }

        return Interval.merge(results);
      }

      /**
       * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
       * @param {...Interval} intervals
       * @return {Array}
       */
      difference(...intervals) {
        return Interval.xor([this].concat(intervals))
          .map((i) => this.intersection(i))
          .filter((i) => i && !i.isEmpty());
      }

      /**
       * Returns a string representation of this Interval appropriate for debugging.
       * @return {string}
       */
      toString() {
        if (!this.isValid) return INVALID$2;
        return `[${this.s.toISO()} – ${this.e.toISO()})`;
      }

      /**
       * Returns a localized string representing this Interval. Accepts the same options as the
       * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
       * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
       * is browser-specific, but in general it will return an appropriate representation of the
       * Interval in the assigned locale. Defaults to the system's locale if no locale has been
       * specified.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
       * Intl.DateTimeFormat constructor options.
       * @param {Object} opts - Options to override the configuration of the start DateTime.
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
       * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
       * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
       * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
       * @return {string}
       */
      toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
        return this.isValid
          ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this)
          : INVALID$2;
      }

      /**
       * Returns an ISO 8601-compliant string representation of this Interval.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime#toISO}
       * @return {string}
       */
      toISO(opts) {
        if (!this.isValid) return INVALID$2;
        return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
      }

      /**
       * Returns an ISO 8601-compliant string representation of date of this Interval.
       * The time components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {string}
       */
      toISODate() {
        if (!this.isValid) return INVALID$2;
        return `${this.s.toISODate()}/${this.e.toISODate()}`;
      }

      /**
       * Returns an ISO 8601-compliant string representation of time of this Interval.
       * The date components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime#toISO}
       * @return {string}
       */
      toISOTime(opts) {
        if (!this.isValid) return INVALID$2;
        return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
      }

      /**
       * Returns a string representation of this Interval formatted according to the specified format
       * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
       * formatting tool.
       * @param {string} dateFormat - The format string. This string formats the start and end time.
       * See {@link DateTime#toFormat} for details.
       * @param {Object} opts - Options.
       * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
       * representations.
       * @return {string}
       */
      toFormat(dateFormat, { separator = " – " } = {}) {
        if (!this.isValid) return INVALID$2;
        return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
      }

      /**
       * Return a Duration representing the time spanned by this interval.
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
       * @return {Duration}
       */
      toDuration(unit, opts) {
        if (!this.isValid) {
          return Duration.invalid(this.invalidReason);
        }
        return this.e.diff(this.s, unit, opts);
      }

      /**
       * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
       * @param {function} mapFn
       * @return {Interval}
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
       */
      mapEndpoints(mapFn) {
        return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
      }
    }

    /**
     * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
     */
    class Info {
      /**
       * Return whether the specified zone contains a DST.
       * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
       * @return {boolean}
       */
      static hasDST(zone = Settings.defaultZone) {
        const proto = DateTime.now().setZone(zone).set({ month: 12 });

        return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
      }

      /**
       * Return whether the specified zone is a valid IANA specifier.
       * @param {string} zone - Zone to check
       * @return {boolean}
       */
      static isValidIANAZone(zone) {
        return IANAZone.isValidZone(zone);
      }

      /**
       * Converts the input into a {@link Zone} instance.
       *
       * * If `input` is already a Zone instance, it is returned unchanged.
       * * If `input` is a string containing a valid time zone name, a Zone instance
       *   with that name is returned.
       * * If `input` is a string that doesn't refer to a known time zone, a Zone
       *   instance with {@link Zone#isValid} == false is returned.
       * * If `input is a number, a Zone instance with the specified fixed offset
       *   in minutes is returned.
       * * If `input` is `null` or `undefined`, the default zone is returned.
       * @param {string|Zone|number} [input] - the value to be converted
       * @return {Zone}
       */
      static normalizeZone(input) {
        return normalizeZone(input, Settings.defaultZone);
      }

      /**
       * Return an array of standalone month names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @example Info.months()[0] //=> 'January'
       * @example Info.months('short')[0] //=> 'Jan'
       * @example Info.months('numeric')[0] //=> '1'
       * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
       * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
       * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
       * @return {Array}
       */
      static months(
        length = "long",
        { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
      ) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
      }

      /**
       * Return an array of format month names.
       * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
       * changes the string.
       * See {@link Info#months}
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @return {Array}
       */
      static monthsFormat(
        length = "long",
        { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}
      ) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
      }

      /**
       * Return an array of standalone week names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @example Info.weekdays()[0] //=> 'Monday'
       * @example Info.weekdays('short')[0] //=> 'Mon'
       * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
       * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
       * @return {Array}
       */
      static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
      }

      /**
       * Return an array of format week names.
       * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
       * changes the string.
       * See {@link Info#weekdays}
       * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale=null] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.locObj=null] - an existing locale object to use
       * @return {Array}
       */
      static weekdaysFormat(
        length = "long",
        { locale = null, numberingSystem = null, locObj = null } = {}
      ) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
      }

      /**
       * Return an array of meridiems.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.meridiems() //=> [ 'AM', 'PM' ]
       * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
       * @return {Array}
       */
      static meridiems({ locale = null } = {}) {
        return Locale.create(locale).meridiems();
      }

      /**
       * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
       * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.eras() //=> [ 'BC', 'AD' ]
       * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
       * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
       * @return {Array}
       */
      static eras(length = "short", { locale = null } = {}) {
        return Locale.create(locale, null, "gregory").eras(length);
      }

      /**
       * Return the set of available features in this environment.
       * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
       * Keys:
       * * `relative`: whether this environment supports relative time formatting
       * @example Info.features() //=> { relative: false }
       * @return {Object}
       */
      static features() {
        return { relative: hasRelative() };
      }
    }

    function dayDiff(earlier, later) {
      const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(),
        ms = utcDayStart(later) - utcDayStart(earlier);
      return Math.floor(Duration.fromMillis(ms).as("days"));
    }

    function highOrderDiffs(cursor, later, units) {
      const differs = [
        ["years", (a, b) => b.year - a.year],
        ["quarters", (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4],
        ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
        [
          "weeks",
          (a, b) => {
            const days = dayDiff(a, b);
            return (days - (days % 7)) / 7;
          },
        ],
        ["days", dayDiff],
      ];

      const results = {};
      const earlier = cursor;
      let lowestOrder, highWater;

      for (const [unit, differ] of differs) {
        if (units.indexOf(unit) >= 0) {
          lowestOrder = unit;

          results[unit] = differ(cursor, later);
          highWater = earlier.plus(results);

          if (highWater > later) {
            results[unit]--;
            cursor = earlier.plus(results);
          } else {
            cursor = highWater;
          }
        }
      }

      return [cursor, results, highWater, lowestOrder];
    }

    function diff (earlier, later, units, opts) {
      let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

      const remainingMillis = later - cursor;

      const lowerOrderUnits = units.filter(
        (u) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
      );

      if (lowerOrderUnits.length === 0) {
        if (highWater < later) {
          highWater = cursor.plus({ [lowestOrder]: 1 });
        }

        if (highWater !== cursor) {
          results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
        }
      }

      const duration = Duration.fromObject(results, opts);

      if (lowerOrderUnits.length > 0) {
        return Duration.fromMillis(remainingMillis, opts)
          .shiftTo(...lowerOrderUnits)
          .plus(duration);
      } else {
        return duration;
      }
    }

    const numberingSystems = {
      arab: "[\u0660-\u0669]",
      arabext: "[\u06F0-\u06F9]",
      bali: "[\u1B50-\u1B59]",
      beng: "[\u09E6-\u09EF]",
      deva: "[\u0966-\u096F]",
      fullwide: "[\uFF10-\uFF19]",
      gujr: "[\u0AE6-\u0AEF]",
      hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
      khmr: "[\u17E0-\u17E9]",
      knda: "[\u0CE6-\u0CEF]",
      laoo: "[\u0ED0-\u0ED9]",
      limb: "[\u1946-\u194F]",
      mlym: "[\u0D66-\u0D6F]",
      mong: "[\u1810-\u1819]",
      mymr: "[\u1040-\u1049]",
      orya: "[\u0B66-\u0B6F]",
      tamldec: "[\u0BE6-\u0BEF]",
      telu: "[\u0C66-\u0C6F]",
      thai: "[\u0E50-\u0E59]",
      tibt: "[\u0F20-\u0F29]",
      latn: "\\d",
    };

    const numberingSystemsUTF16 = {
      arab: [1632, 1641],
      arabext: [1776, 1785],
      bali: [6992, 7001],
      beng: [2534, 2543],
      deva: [2406, 2415],
      fullwide: [65296, 65303],
      gujr: [2790, 2799],
      khmr: [6112, 6121],
      knda: [3302, 3311],
      laoo: [3792, 3801],
      limb: [6470, 6479],
      mlym: [3430, 3439],
      mong: [6160, 6169],
      mymr: [4160, 4169],
      orya: [2918, 2927],
      tamldec: [3046, 3055],
      telu: [3174, 3183],
      thai: [3664, 3673],
      tibt: [3872, 3881],
    };

    const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

    function parseDigits(str) {
      let value = parseInt(str, 10);
      if (isNaN(value)) {
        value = "";
        for (let i = 0; i < str.length; i++) {
          const code = str.charCodeAt(i);

          if (str[i].search(numberingSystems.hanidec) !== -1) {
            value += hanidecChars.indexOf(str[i]);
          } else {
            for (const key in numberingSystemsUTF16) {
              const [min, max] = numberingSystemsUTF16[key];
              if (code >= min && code <= max) {
                value += code - min;
              }
            }
          }
        }
        return parseInt(value, 10);
      } else {
        return value;
      }
    }

    function digitRegex({ numberingSystem }, append = "") {
      return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
    }

    const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

    function intUnit(regex, post = (i) => i) {
      return { regex, deser: ([s]) => post(parseDigits(s)) };
    }

    const NBSP = String.fromCharCode(160);
    const spaceOrNBSP = `[ ${NBSP}]`;
    const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");

    function fixListRegex(s) {
      // make dots optional and also make them literal
      // make space and non breakable space characters interchangeable
      return s.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
    }

    function stripInsensitivities(s) {
      return s
        .replace(/\./g, "") // ignore dots that were made optional
        .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
        .toLowerCase();
    }

    function oneOf(strings, startIndex) {
      if (strings === null) {
        return null;
      } else {
        return {
          regex: RegExp(strings.map(fixListRegex).join("|")),
          deser: ([s]) =>
            strings.findIndex((i) => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex,
        };
      }
    }

    function offset(regex, groups) {
      return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
    }

    function simple$1(regex) {
      return { regex, deser: ([s]) => s };
    }

    function escapeToken(value) {
      return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    }

    function unitForToken(token, loc) {
      const one = digitRegex(loc),
        two = digitRegex(loc, "{2}"),
        three = digitRegex(loc, "{3}"),
        four = digitRegex(loc, "{4}"),
        six = digitRegex(loc, "{6}"),
        oneOrTwo = digitRegex(loc, "{1,2}"),
        oneToThree = digitRegex(loc, "{1,3}"),
        oneToSix = digitRegex(loc, "{1,6}"),
        oneToNine = digitRegex(loc, "{1,9}"),
        twoToFour = digitRegex(loc, "{2,4}"),
        fourToSix = digitRegex(loc, "{4,6}"),
        literal = (t) => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
        unitate = (t) => {
          if (token.literal) {
            return literal(t);
          }
          switch (t.val) {
            // era
            case "G":
              return oneOf(loc.eras("short", false), 0);
            case "GG":
              return oneOf(loc.eras("long", false), 0);
            // years
            case "y":
              return intUnit(oneToSix);
            case "yy":
              return intUnit(twoToFour, untruncateYear);
            case "yyyy":
              return intUnit(four);
            case "yyyyy":
              return intUnit(fourToSix);
            case "yyyyyy":
              return intUnit(six);
            // months
            case "M":
              return intUnit(oneOrTwo);
            case "MM":
              return intUnit(two);
            case "MMM":
              return oneOf(loc.months("short", true, false), 1);
            case "MMMM":
              return oneOf(loc.months("long", true, false), 1);
            case "L":
              return intUnit(oneOrTwo);
            case "LL":
              return intUnit(two);
            case "LLL":
              return oneOf(loc.months("short", false, false), 1);
            case "LLLL":
              return oneOf(loc.months("long", false, false), 1);
            // dates
            case "d":
              return intUnit(oneOrTwo);
            case "dd":
              return intUnit(two);
            // ordinals
            case "o":
              return intUnit(oneToThree);
            case "ooo":
              return intUnit(three);
            // time
            case "HH":
              return intUnit(two);
            case "H":
              return intUnit(oneOrTwo);
            case "hh":
              return intUnit(two);
            case "h":
              return intUnit(oneOrTwo);
            case "mm":
              return intUnit(two);
            case "m":
              return intUnit(oneOrTwo);
            case "q":
              return intUnit(oneOrTwo);
            case "qq":
              return intUnit(two);
            case "s":
              return intUnit(oneOrTwo);
            case "ss":
              return intUnit(two);
            case "S":
              return intUnit(oneToThree);
            case "SSS":
              return intUnit(three);
            case "u":
              return simple$1(oneToNine);
            case "uu":
              return simple$1(oneOrTwo);
            case "uuu":
              return intUnit(one);
            // meridiem
            case "a":
              return oneOf(loc.meridiems(), 0);
            // weekYear (k)
            case "kkkk":
              return intUnit(four);
            case "kk":
              return intUnit(twoToFour, untruncateYear);
            // weekNumber (W)
            case "W":
              return intUnit(oneOrTwo);
            case "WW":
              return intUnit(two);
            // weekdays
            case "E":
            case "c":
              return intUnit(one);
            case "EEE":
              return oneOf(loc.weekdays("short", false, false), 1);
            case "EEEE":
              return oneOf(loc.weekdays("long", false, false), 1);
            case "ccc":
              return oneOf(loc.weekdays("short", true, false), 1);
            case "cccc":
              return oneOf(loc.weekdays("long", true, false), 1);
            // offset/zone
            case "Z":
            case "ZZ":
              return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
            case "ZZZ":
              return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
            // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
            // because we don't have any way to figure out what they are
            case "z":
              return simple$1(/[a-z_+-/]{1,256}?/i);
            // this special-case "token" represents a place where a macro-token expanded into a white-space literal
            // in this case we accept any non-newline white-space
            case " ":
              return simple$1(/[^\S\n\r]/);
            default:
              return literal(t);
          }
        };

      const unit = unitate(token) || {
        invalidReason: MISSING_FTP,
      };

      unit.token = token;

      return unit;
    }

    const partTypeStyleToTokenVal = {
      year: {
        "2-digit": "yy",
        numeric: "yyyyy",
      },
      month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM",
      },
      day: {
        numeric: "d",
        "2-digit": "dd",
      },
      weekday: {
        short: "EEE",
        long: "EEEE",
      },
      dayperiod: "a",
      dayPeriod: "a",
      hour: {
        numeric: "h",
        "2-digit": "hh",
      },
      minute: {
        numeric: "m",
        "2-digit": "mm",
      },
      second: {
        numeric: "s",
        "2-digit": "ss",
      },
      timeZoneName: {
        long: "ZZZZZ",
        short: "ZZZ",
      },
    };

    function tokenForPart(part, formatOpts) {
      const { type, value } = part;

      if (type === "literal") {
        const isSpace = /^\s+$/.test(value);
        return {
          literal: !isSpace,
          val: isSpace ? " " : value,
        };
      }

      const style = formatOpts[type];

      let val = partTypeStyleToTokenVal[type];
      if (typeof val === "object") {
        val = val[style];
      }

      if (val) {
        return {
          literal: false,
          val,
        };
      }

      return undefined;
    }

    function buildRegex(units) {
      const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
      return [`^${re}$`, units];
    }

    function match(input, regex, handlers) {
      const matches = input.match(regex);

      if (matches) {
        const all = {};
        let matchIndex = 1;
        for (const i in handlers) {
          if (hasOwnProperty$2(handlers, i)) {
            const h = handlers[i],
              groups = h.groups ? h.groups + 1 : 1;
            if (!h.literal && h.token) {
              all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
            }
            matchIndex += groups;
          }
        }
        return [matches, all];
      } else {
        return [matches, {}];
      }
    }

    function dateTimeFromMatches(matches) {
      const toField = (token) => {
        switch (token) {
          case "S":
            return "millisecond";
          case "s":
            return "second";
          case "m":
            return "minute";
          case "h":
          case "H":
            return "hour";
          case "d":
            return "day";
          case "o":
            return "ordinal";
          case "L":
          case "M":
            return "month";
          case "y":
            return "year";
          case "E":
          case "c":
            return "weekday";
          case "W":
            return "weekNumber";
          case "k":
            return "weekYear";
          case "q":
            return "quarter";
          default:
            return null;
        }
      };

      let zone = null;
      let specificOffset;
      if (!isUndefined$2(matches.z)) {
        zone = IANAZone.create(matches.z);
      }

      if (!isUndefined$2(matches.Z)) {
        if (!zone) {
          zone = new FixedOffsetZone(matches.Z);
        }
        specificOffset = matches.Z;
      }

      if (!isUndefined$2(matches.q)) {
        matches.M = (matches.q - 1) * 3 + 1;
      }

      if (!isUndefined$2(matches.h)) {
        if (matches.h < 12 && matches.a === 1) {
          matches.h += 12;
        } else if (matches.h === 12 && matches.a === 0) {
          matches.h = 0;
        }
      }

      if (matches.G === 0 && matches.y) {
        matches.y = -matches.y;
      }

      if (!isUndefined$2(matches.u)) {
        matches.S = parseMillis(matches.u);
      }

      const vals = Object.keys(matches).reduce((r, k) => {
        const f = toField(k);
        if (f) {
          r[f] = matches[k];
        }

        return r;
      }, {});

      return [vals, zone, specificOffset];
    }

    let dummyDateTimeCache = null;

    function getDummyDateTime() {
      if (!dummyDateTimeCache) {
        dummyDateTimeCache = DateTime.fromMillis(1555555555555);
      }

      return dummyDateTimeCache;
    }

    function maybeExpandMacroToken(token, locale) {
      if (token.literal) {
        return token;
      }

      const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
      const tokens = formatOptsToTokens(formatOpts, locale);

      if (tokens == null || tokens.includes(undefined)) {
        return token;
      }

      return tokens;
    }

    function expandMacroTokens(tokens, locale) {
      return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
    }

    /**
     * @private
     */

    function explainFromTokens(locale, input, format) {
      const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
        units = tokens.map((t) => unitForToken(t, locale)),
        disqualifyingUnit = units.find((t) => t.invalidReason);

      if (disqualifyingUnit) {
        return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
      } else {
        const [regexString, handlers] = buildRegex(units),
          regex = RegExp(regexString, "i"),
          [rawMatches, matches] = match(input, regex, handlers),
          [result, zone, specificOffset] = matches
            ? dateTimeFromMatches(matches)
            : [null, null, undefined];
        if (hasOwnProperty$2(matches, "a") && hasOwnProperty$2(matches, "H")) {
          throw new ConflictingSpecificationError(
            "Can't include meridiem when specifying 24-hour format"
          );
        }
        return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };
      }
    }

    function parseFromTokens(locale, input, format) {
      const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
      return [result, zone, specificOffset, invalidReason];
    }

    function formatOptsToTokens(formatOpts, locale) {
      if (!formatOpts) {
        return null;
      }

      const formatter = Formatter.create(locale, formatOpts);
      const parts = formatter.formatDateTimeParts(getDummyDateTime());
      return parts.map((p) => tokenForPart(p, formatOpts));
    }

    const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
      leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

    function unitOutOfRange(unit, value) {
      return new Invalid(
        "unit out of range",
        `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
      );
    }

    function dayOfWeek(year, month, day) {
      const d = new Date(Date.UTC(year, month - 1, day));

      if (year < 100 && year >= 0) {
        d.setUTCFullYear(d.getUTCFullYear() - 1900);
      }

      const js = d.getUTCDay();

      return js === 0 ? 7 : js;
    }

    function computeOrdinal(year, month, day) {
      return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
    }

    function uncomputeOrdinal(year, ordinal) {
      const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
        month0 = table.findIndex((i) => i < ordinal),
        day = ordinal - table[month0];
      return { month: month0 + 1, day };
    }

    /**
     * @private
     */

    function gregorianToWeek(gregObj) {
      const { year, month, day } = gregObj,
        ordinal = computeOrdinal(year, month, day),
        weekday = dayOfWeek(year, month, day);

      let weekNumber = Math.floor((ordinal - weekday + 10) / 7),
        weekYear;

      if (weekNumber < 1) {
        weekYear = year - 1;
        weekNumber = weeksInWeekYear(weekYear);
      } else if (weekNumber > weeksInWeekYear(year)) {
        weekYear = year + 1;
        weekNumber = 1;
      } else {
        weekYear = year;
      }

      return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
    }

    function weekToGregorian(weekData) {
      const { weekYear, weekNumber, weekday } = weekData,
        weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
        yearInDays = daysInYear(weekYear);

      let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
        year;

      if (ordinal < 1) {
        year = weekYear - 1;
        ordinal += daysInYear(year);
      } else if (ordinal > yearInDays) {
        year = weekYear + 1;
        ordinal -= daysInYear(weekYear);
      } else {
        year = weekYear;
      }

      const { month, day } = uncomputeOrdinal(year, ordinal);
      return { year, month, day, ...timeObject(weekData) };
    }

    function gregorianToOrdinal(gregData) {
      const { year, month, day } = gregData;
      const ordinal = computeOrdinal(year, month, day);
      return { year, ordinal, ...timeObject(gregData) };
    }

    function ordinalToGregorian(ordinalData) {
      const { year, ordinal } = ordinalData;
      const { month, day } = uncomputeOrdinal(year, ordinal);
      return { year, month, day, ...timeObject(ordinalData) };
    }

    function hasInvalidWeekData(obj) {
      const validYear = isInteger(obj.weekYear),
        validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
        validWeekday = integerBetween(obj.weekday, 1, 7);

      if (!validYear) {
        return unitOutOfRange("weekYear", obj.weekYear);
      } else if (!validWeek) {
        return unitOutOfRange("week", obj.week);
      } else if (!validWeekday) {
        return unitOutOfRange("weekday", obj.weekday);
      } else return false;
    }

    function hasInvalidOrdinalData(obj) {
      const validYear = isInteger(obj.year),
        validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

      if (!validYear) {
        return unitOutOfRange("year", obj.year);
      } else if (!validOrdinal) {
        return unitOutOfRange("ordinal", obj.ordinal);
      } else return false;
    }

    function hasInvalidGregorianData(obj) {
      const validYear = isInteger(obj.year),
        validMonth = integerBetween(obj.month, 1, 12),
        validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

      if (!validYear) {
        return unitOutOfRange("year", obj.year);
      } else if (!validMonth) {
        return unitOutOfRange("month", obj.month);
      } else if (!validDay) {
        return unitOutOfRange("day", obj.day);
      } else return false;
    }

    function hasInvalidTimeData(obj) {
      const { hour, minute, second, millisecond } = obj;
      const validHour =
          integerBetween(hour, 0, 23) ||
          (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
        validMinute = integerBetween(minute, 0, 59),
        validSecond = integerBetween(second, 0, 59),
        validMillisecond = integerBetween(millisecond, 0, 999);

      if (!validHour) {
        return unitOutOfRange("hour", hour);
      } else if (!validMinute) {
        return unitOutOfRange("minute", minute);
      } else if (!validSecond) {
        return unitOutOfRange("second", second);
      } else if (!validMillisecond) {
        return unitOutOfRange("millisecond", millisecond);
      } else return false;
    }

    const INVALID$1 = "Invalid DateTime";
    const MAX_DATE = 8.64e15;

    function unsupportedZone(zone) {
      return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
    }

    // we cache week data on the DT object and this intermediates the cache
    function possiblyCachedWeekData(dt) {
      if (dt.weekData === null) {
        dt.weekData = gregorianToWeek(dt.c);
      }
      return dt.weekData;
    }

    // clone really means, "make a new object with these modifications". all "setters" really use this
    // to create a new object while only changing some of the properties
    function clone$3(inst, alts) {
      const current = {
        ts: inst.ts,
        zone: inst.zone,
        c: inst.c,
        o: inst.o,
        loc: inst.loc,
        invalid: inst.invalid,
      };
      return new DateTime({ ...current, ...alts, old: current });
    }

    // find the right offset a given local time. The o input is our guess, which determines which
    // offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
    function fixOffset(localTS, o, tz) {
      // Our UTC time is just a guess because our offset is just a guess
      let utcGuess = localTS - o * 60 * 1000;

      // Test whether the zone matches the offset for this ts
      const o2 = tz.offset(utcGuess);

      // If so, offset didn't change and we're done
      if (o === o2) {
        return [utcGuess, o];
      }

      // If not, change the ts by the difference in the offset
      utcGuess -= (o2 - o) * 60 * 1000;

      // If that gives us the local time we want, we're done
      const o3 = tz.offset(utcGuess);
      if (o2 === o3) {
        return [utcGuess, o2];
      }

      // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
      return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
    }

    // convert an epoch timestamp into a calendar object with the given offset
    function tsToObj(ts, offset) {
      ts += offset * 60 * 1000;

      const d = new Date(ts);

      return {
        year: d.getUTCFullYear(),
        month: d.getUTCMonth() + 1,
        day: d.getUTCDate(),
        hour: d.getUTCHours(),
        minute: d.getUTCMinutes(),
        second: d.getUTCSeconds(),
        millisecond: d.getUTCMilliseconds(),
      };
    }

    // convert a calendar object to a epoch timestamp
    function objToTS(obj, offset, zone) {
      return fixOffset(objToLocalTS(obj), offset, zone);
    }

    // create a new DT instance by adding a duration, adjusting for DSTs
    function adjustTime(inst, dur) {
      const oPre = inst.o,
        year = inst.c.year + Math.trunc(dur.years),
        month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3,
        c = {
          ...inst.c,
          year,
          month,
          day:
            Math.min(inst.c.day, daysInMonth(year, month)) +
            Math.trunc(dur.days) +
            Math.trunc(dur.weeks) * 7,
        },
        millisToAdd = Duration.fromObject({
          years: dur.years - Math.trunc(dur.years),
          quarters: dur.quarters - Math.trunc(dur.quarters),
          months: dur.months - Math.trunc(dur.months),
          weeks: dur.weeks - Math.trunc(dur.weeks),
          days: dur.days - Math.trunc(dur.days),
          hours: dur.hours,
          minutes: dur.minutes,
          seconds: dur.seconds,
          milliseconds: dur.milliseconds,
        }).as("milliseconds"),
        localTS = objToLocalTS(c);

      let [ts, o] = fixOffset(localTS, oPre, inst.zone);

      if (millisToAdd !== 0) {
        ts += millisToAdd;
        // that could have changed the offset by going over a DST, but we want to keep the ts the same
        o = inst.zone.offset(ts);
      }

      return { ts, o };
    }

    // helper useful in turning the results of parsing into real dates
    // by handling the zone options
    function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
      const { setZone, zone } = opts;
      if ((parsed && Object.keys(parsed).length !== 0) || parsedZone) {
        const interpretationZone = parsedZone || zone,
          inst = DateTime.fromObject(parsed, {
            ...opts,
            zone: interpretationZone,
            specificOffset,
          });
        return setZone ? inst : inst.setZone(zone);
      } else {
        return DateTime.invalid(
          new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
        );
      }
    }

    // if you want to output a technical format (e.g. RFC 2822), this helper
    // helps handle the details
    function toTechFormat(dt, format, allowZ = true) {
      return dt.isValid
        ? Formatter.create(Locale.create("en-US"), {
            allowZ,
            forceSimple: true,
          }).formatDateTimeFromString(dt, format)
        : null;
    }

    function toISODate(o, extended) {
      const longFormat = o.c.year > 9999 || o.c.year < 0;
      let c = "";
      if (longFormat && o.c.year >= 0) c += "+";
      c += padStart(o.c.year, longFormat ? 6 : 4);

      if (extended) {
        c += "-";
        c += padStart(o.c.month);
        c += "-";
        c += padStart(o.c.day);
      } else {
        c += padStart(o.c.month);
        c += padStart(o.c.day);
      }
      return c;
    }

    function toISOTime(
      o,
      extended,
      suppressSeconds,
      suppressMilliseconds,
      includeOffset,
      extendedZone
    ) {
      let c = padStart(o.c.hour);
      if (extended) {
        c += ":";
        c += padStart(o.c.minute);
        if (o.c.second !== 0 || !suppressSeconds) {
          c += ":";
        }
      } else {
        c += padStart(o.c.minute);
      }

      if (o.c.second !== 0 || !suppressSeconds) {
        c += padStart(o.c.second);

        if (o.c.millisecond !== 0 || !suppressMilliseconds) {
          c += ".";
          c += padStart(o.c.millisecond, 3);
        }
      }

      if (includeOffset) {
        if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
          c += "Z";
        } else if (o.o < 0) {
          c += "-";
          c += padStart(Math.trunc(-o.o / 60));
          c += ":";
          c += padStart(Math.trunc(-o.o % 60));
        } else {
          c += "+";
          c += padStart(Math.trunc(o.o / 60));
          c += ":";
          c += padStart(Math.trunc(o.o % 60));
        }
      }

      if (extendedZone) {
        c += "[" + o.zone.ianaName + "]";
      }
      return c;
    }

    // defaults for unspecified units in the supported calendars
    const defaultUnitValues = {
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
      },
      defaultWeekUnitValues = {
        weekNumber: 1,
        weekday: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
      },
      defaultOrdinalUnitValues = {
        ordinal: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
      };

    // Units in the supported calendars, sorted by bigness
    const orderedUnits = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
      orderedWeekUnits = [
        "weekYear",
        "weekNumber",
        "weekday",
        "hour",
        "minute",
        "second",
        "millisecond",
      ],
      orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

    // standardize case and plurality in units
    function normalizeUnit(unit) {
      const normalized = {
        year: "year",
        years: "year",
        month: "month",
        months: "month",
        day: "day",
        days: "day",
        hour: "hour",
        hours: "hour",
        minute: "minute",
        minutes: "minute",
        quarter: "quarter",
        quarters: "quarter",
        second: "second",
        seconds: "second",
        millisecond: "millisecond",
        milliseconds: "millisecond",
        weekday: "weekday",
        weekdays: "weekday",
        weeknumber: "weekNumber",
        weeksnumber: "weekNumber",
        weeknumbers: "weekNumber",
        weekyear: "weekYear",
        weekyears: "weekYear",
        ordinal: "ordinal",
      }[unit.toLowerCase()];

      if (!normalized) throw new InvalidUnitError(unit);

      return normalized;
    }

    // this is a dumbed down version of fromObject() that runs about 60% faster
    // but doesn't do any validation, makes a bunch of assumptions about what units
    // are present, and so on.
    function quickDT(obj, opts) {
      const zone = normalizeZone(opts.zone, Settings.defaultZone),
        loc = Locale.fromObject(opts),
        tsNow = Settings.now();

      let ts, o;

      // assume we have the higher-order units
      if (!isUndefined$2(obj.year)) {
        for (const u of orderedUnits) {
          if (isUndefined$2(obj[u])) {
            obj[u] = defaultUnitValues[u];
          }
        }

        const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
        if (invalid) {
          return DateTime.invalid(invalid);
        }

        const offsetProvis = zone.offset(tsNow);
        [ts, o] = objToTS(obj, offsetProvis, zone);
      } else {
        ts = tsNow;
      }

      return new DateTime({ ts, zone, loc, o });
    }

    function diffRelative(start, end, opts) {
      const round = isUndefined$2(opts.round) ? true : opts.round,
        format = (c, unit) => {
          c = roundTo(c, round || opts.calendary ? 0 : 2, true);
          const formatter = end.loc.clone(opts).relFormatter(opts);
          return formatter.format(c, unit);
        },
        differ = (unit) => {
          if (opts.calendary) {
            if (!end.hasSame(start, unit)) {
              return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
            } else return 0;
          } else {
            return end.diff(start, unit).get(unit);
          }
        };

      if (opts.unit) {
        return format(differ(opts.unit), opts.unit);
      }

      for (const unit of opts.units) {
        const count = differ(unit);
        if (Math.abs(count) >= 1) {
          return format(count, unit);
        }
      }
      return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
    }

    function lastOpts(argList) {
      let opts = {},
        args;
      if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
        opts = argList[argList.length - 1];
        args = Array.from(argList).slice(0, argList.length - 1);
      } else {
        args = Array.from(argList);
      }
      return [opts, args];
    }

    /**
     * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
     *
     * A DateTime comprises of:
     * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
     * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
     * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
     *
     * Here is a brief overview of the most commonly used functionality it provides:
     *
     * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
     * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
     * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
     * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
     * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
     * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
     * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
     *
     * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
     */
    class DateTime {
      /**
       * @access private
       */
      constructor(config) {
        const zone = config.zone || Settings.defaultZone;

        let invalid =
          config.invalid ||
          (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
          (!zone.isValid ? unsupportedZone(zone) : null);
        /**
         * @access private
         */
        this.ts = isUndefined$2(config.ts) ? Settings.now() : config.ts;

        let c = null,
          o = null;
        if (!invalid) {
          const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

          if (unchanged) {
            [c, o] = [config.old.c, config.old.o];
          } else {
            const ot = zone.offset(this.ts);
            c = tsToObj(this.ts, ot);
            invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
            c = invalid ? null : c;
            o = invalid ? null : ot;
          }
        }

        /**
         * @access private
         */
        this._zone = zone;
        /**
         * @access private
         */
        this.loc = config.loc || Locale.create();
        /**
         * @access private
         */
        this.invalid = invalid;
        /**
         * @access private
         */
        this.weekData = null;
        /**
         * @access private
         */
        this.c = c;
        /**
         * @access private
         */
        this.o = o;
        /**
         * @access private
         */
        this.isLuxonDateTime = true;
      }

      // CONSTRUCT

      /**
       * Create a DateTime for the current instant, in the system's time zone.
       *
       * Use Settings to override these default values if needed.
       * @example DateTime.now().toISO() //~> now in the ISO format
       * @return {DateTime}
       */
      static now() {
        return new DateTime({});
      }

      /**
       * Create a local DateTime
       * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month, 1-indexed
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @example DateTime.local()                                  //~> now
       * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
       * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
       * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
       * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
       * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
       * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
       * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
       * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
       * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
       * @return {DateTime}
       */
      static local() {
        const [opts, args] = lastOpts(arguments),
          [year, month, day, hour, minute, second, millisecond] = args;
        return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
      }

      /**
       * Create a DateTime in UTC
       * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @param {Object} options - configuration options for the DateTime
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
       * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
       * @example DateTime.utc()                                              //~> now
       * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
       * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
       * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
       * @return {DateTime}
       */
      static utc() {
        const [opts, args] = lastOpts(arguments),
          [year, month, day, hour, minute, second, millisecond] = args;

        opts.zone = FixedOffsetZone.utcInstance;
        return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
      }

      /**
       * Create a DateTime from a JavaScript Date object. Uses the default zone.
       * @param {Date} date - a JavaScript Date object
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @return {DateTime}
       */
      static fromJSDate(date, options = {}) {
        const ts = isDate(date) ? date.valueOf() : NaN;
        if (Number.isNaN(ts)) {
          return DateTime.invalid("invalid input");
        }

        const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return DateTime.invalid(unsupportedZone(zoneToUse));
        }

        return new DateTime({
          ts: ts,
          zone: zoneToUse,
          loc: Locale.fromObject(options),
        });
      }

      /**
       * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} milliseconds - a number of milliseconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromMillis(milliseconds, options = {}) {
        if (!isNumber$2(milliseconds)) {
          throw new InvalidArgumentError(
            `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
          );
        } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
          // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
          return DateTime.invalid("Timestamp out of range");
        } else {
          return new DateTime({
            ts: milliseconds,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options),
          });
        }
      }

      /**
       * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} seconds - a number of seconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromSeconds(seconds, options = {}) {
        if (!isNumber$2(seconds)) {
          throw new InvalidArgumentError("fromSeconds requires a numerical input");
        } else {
          return new DateTime({
            ts: seconds * 1000,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options),
          });
        }
      }

      /**
       * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.year - a year, such as 1987
       * @param {number} obj.month - a month, 1-12
       * @param {number} obj.day - a day of the month, 1-31, depending on the month
       * @param {number} obj.ordinal - day of the year, 1-365 or 366
       * @param {number} obj.weekYear - an ISO week year
       * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
       * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
       * @param {number} obj.hour - hour of the day, 0-23
       * @param {number} obj.minute - minute of the hour, 0-59
       * @param {number} obj.second - second of the minute, 0-59
       * @param {number} obj.millisecond - millisecond of the second, 0-999
       * @param {Object} opts - options for creating this DateTime
       * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
       * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
       * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
       * @return {DateTime}
       */
      static fromObject(obj, opts = {}) {
        obj = obj || {};
        const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return DateTime.invalid(unsupportedZone(zoneToUse));
        }

        const tsNow = Settings.now(),
          offsetProvis = !isUndefined$2(opts.specificOffset)
            ? opts.specificOffset
            : zoneToUse.offset(tsNow),
          normalized = normalizeObject(obj, normalizeUnit),
          containsOrdinal = !isUndefined$2(normalized.ordinal),
          containsGregorYear = !isUndefined$2(normalized.year),
          containsGregorMD = !isUndefined$2(normalized.month) || !isUndefined$2(normalized.day),
          containsGregor = containsGregorYear || containsGregorMD,
          definiteWeekDef = normalized.weekYear || normalized.weekNumber,
          loc = Locale.fromObject(opts);

        // cases:
        // just a weekday -> this week's instance of that weekday, no worries
        // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
        // (gregorian month or day) + ordinal -> error
        // otherwise just use weeks or ordinals or gregorian, depending on what's specified

        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError(
            "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
          );
        }

        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }

        const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

        // configure ourselves to deal with gregorian dates or week stuff
        let units,
          defaultValues,
          objNow = tsToObj(tsNow, offsetProvis);
        if (useWeekData) {
          units = orderedWeekUnits;
          defaultValues = defaultWeekUnitValues;
          objNow = gregorianToWeek(objNow);
        } else if (containsOrdinal) {
          units = orderedOrdinalUnits;
          defaultValues = defaultOrdinalUnitValues;
          objNow = gregorianToOrdinal(objNow);
        } else {
          units = orderedUnits;
          defaultValues = defaultUnitValues;
        }

        // set default values for missing stuff
        let foundFirst = false;
        for (const u of units) {
          const v = normalized[u];
          if (!isUndefined$2(v)) {
            foundFirst = true;
          } else if (foundFirst) {
            normalized[u] = defaultValues[u];
          } else {
            normalized[u] = objNow[u];
          }
        }

        // make sure the values we have are in range
        const higherOrderInvalid = useWeekData
            ? hasInvalidWeekData(normalized)
            : containsOrdinal
            ? hasInvalidOrdinalData(normalized)
            : hasInvalidGregorianData(normalized),
          invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

        if (invalid) {
          return DateTime.invalid(invalid);
        }

        // compute the actual time
        const gregorian = useWeekData
            ? weekToGregorian(normalized)
            : containsOrdinal
            ? ordinalToGregorian(normalized)
            : normalized,
          [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
          inst = new DateTime({
            ts: tsFinal,
            zone: zoneToUse,
            o: offsetFinal,
            loc,
          });

        // gregorian data + weekday serves only to validate
        if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
          return DateTime.invalid(
            "mismatched weekday",
            `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
          );
        }

        return inst;
      }

      /**
       * Create a DateTime from an ISO 8601 string
       * @param {string} text - the ISO string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
       * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromISO('2016-05-25T09:08:34.123')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
       * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
       * @example DateTime.fromISO('2016-W05-4')
       * @return {DateTime}
       */
      static fromISO(text, opts = {}) {
        const [vals, parsedZone] = parseISODate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
      }

      /**
       * Create a DateTime from an RFC 2822 string
       * @param {string} text - the RFC 2822 string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
       * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
       * @return {DateTime}
       */
      static fromRFC2822(text, opts = {}) {
        const [vals, parsedZone] = parseRFC2822Date(text);
        return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
      }

      /**
       * Create a DateTime from an HTTP header date
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @param {string} text - the HTTP header date
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
       * @return {DateTime}
       */
      static fromHTTP(text, opts = {}) {
        const [vals, parsedZone] = parseHTTPDate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
      }

      /**
       * Create a DateTime from an input string and format string.
       * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromFormat(text, fmt, opts = {}) {
        if (isUndefined$2(text) || isUndefined$2(fmt)) {
          throw new InvalidArgumentError("fromFormat requires an input string and a format");
        }

        const { locale = null, numberingSystem = null } = opts,
          localeToUse = Locale.fromOpts({
            locale,
            numberingSystem,
            defaultToEN: true,
          }),
          [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
        if (invalid) {
          return DateTime.invalid(invalid);
        } else {
          return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
        }
      }

      /**
       * @deprecated use fromFormat instead
       */
      static fromString(text, fmt, opts = {}) {
        return DateTime.fromFormat(text, fmt, opts);
      }

      /**
       * Create a DateTime from a SQL date, time, or datetime
       * Defaults to en-US if no locale has been specified, regardless of the system's locale
       * @param {string} text - the string to parse
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @example DateTime.fromSQL('2017-05-15')
       * @example DateTime.fromSQL('2017-05-15 09:12:34')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
       * @example DateTime.fromSQL('09:12:34.342')
       * @return {DateTime}
       */
      static fromSQL(text, opts = {}) {
        const [vals, parsedZone] = parseSQL(text);
        return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
      }

      /**
       * Create an invalid DateTime.
       * @param {DateTime} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {DateTime}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }

        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidDateTimeError(invalid);
        } else {
          return new DateTime({ invalid });
        }
      }

      /**
       * Check if an object is an instance of DateTime. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDateTime(o) {
        return (o && o.isLuxonDateTime) || false;
      }

      /**
       * Produce the format string for a set of options
       * @param formatOpts
       * @param localeOpts
       * @returns {string}
       */
      static parseFormatForOpts(formatOpts, localeOpts = {}) {
        const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
        return !tokenList ? null : tokenList.map((t) => (t ? t.val : null)).join("");
      }

      /**
       * Produce the the fully expanded format token for the locale
       * Does NOT quote characters, so quoted tokens will not round trip correctly
       * @param fmt
       * @param localeOpts
       * @returns {string}
       */
      static expandFormat(fmt, localeOpts = {}) {
        const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
        return expanded.map((t) => t.val).join("");
      }

      // INFO

      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
       * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
       * @return {number}
       */
      get(unit) {
        return this[unit];
      }

      /**
       * Returns whether the DateTime is valid. Invalid DateTimes occur when:
       * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
       * * The DateTime was created by an operation on another invalid date
       * @type {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }

      /**
       * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }

      /**
       * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }

      /**
       * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
       *
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }

      /**
       * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }

      /**
       * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
       *
       * @type {string}
       */
      get outputCalendar() {
        return this.isValid ? this.loc.outputCalendar : null;
      }

      /**
       * Get the time zone associated with this DateTime.
       * @type {Zone}
       */
      get zone() {
        return this._zone;
      }

      /**
       * Get the name of the time zone.
       * @type {string}
       */
      get zoneName() {
        return this.isValid ? this.zone.name : null;
      }

      /**
       * Get the year
       * @example DateTime.local(2017, 5, 25).year //=> 2017
       * @type {number}
       */
      get year() {
        return this.isValid ? this.c.year : NaN;
      }

      /**
       * Get the quarter
       * @example DateTime.local(2017, 5, 25).quarter //=> 2
       * @type {number}
       */
      get quarter() {
        return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
      }

      /**
       * Get the month (1-12).
       * @example DateTime.local(2017, 5, 25).month //=> 5
       * @type {number}
       */
      get month() {
        return this.isValid ? this.c.month : NaN;
      }

      /**
       * Get the day of the month (1-30ish).
       * @example DateTime.local(2017, 5, 25).day //=> 25
       * @type {number}
       */
      get day() {
        return this.isValid ? this.c.day : NaN;
      }

      /**
       * Get the hour of the day (0-23).
       * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
       * @type {number}
       */
      get hour() {
        return this.isValid ? this.c.hour : NaN;
      }

      /**
       * Get the minute of the hour (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
       * @type {number}
       */
      get minute() {
        return this.isValid ? this.c.minute : NaN;
      }

      /**
       * Get the second of the minute (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
       * @type {number}
       */
      get second() {
        return this.isValid ? this.c.second : NaN;
      }

      /**
       * Get the millisecond of the second (0-999).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
       * @type {number}
       */
      get millisecond() {
        return this.isValid ? this.c.millisecond : NaN;
      }

      /**
       * Get the week year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
       * @type {number}
       */
      get weekYear() {
        return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
      }

      /**
       * Get the week number of the week year (1-52ish).
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
       * @type {number}
       */
      get weekNumber() {
        return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
      }

      /**
       * Get the day of the week.
       * 1 is Monday and 7 is Sunday
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 11, 31).weekday //=> 4
       * @type {number}
       */
      get weekday() {
        return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
      }

      /**
       * Get the ordinal (meaning the day of the year)
       * @example DateTime.local(2017, 5, 25).ordinal //=> 145
       * @type {number|DateTime}
       */
      get ordinal() {
        return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
      }

      /**
       * Get the human readable short month name, such as 'Oct'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
       * @type {string}
       */
      get monthShort() {
        return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
      }

      /**
       * Get the human readable long month name, such as 'October'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthLong //=> October
       * @type {string}
       */
      get monthLong() {
        return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
      }

      /**
       * Get the human readable short weekday, such as 'Mon'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
       * @type {string}
       */
      get weekdayShort() {
        return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
      }

      /**
       * Get the human readable long weekday, such as 'Monday'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
       * @type {string}
       */
      get weekdayLong() {
        return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
      }

      /**
       * Get the UTC offset of this DateTime in minutes
       * @example DateTime.now().offset //=> -240
       * @example DateTime.utc().offset //=> 0
       * @type {number}
       */
      get offset() {
        return this.isValid ? +this.o : NaN;
      }

      /**
       * Get the short human name for the zone's current offset, for example "EST" or "EDT".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameShort() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "short",
            locale: this.locale,
          });
        } else {
          return null;
        }
      }

      /**
       * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameLong() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "long",
            locale: this.locale,
          });
        } else {
          return null;
        }
      }

      /**
       * Get whether this zone's offset ever changes, as in a DST.
       * @type {boolean}
       */
      get isOffsetFixed() {
        return this.isValid ? this.zone.isUniversal : null;
      }

      /**
       * Get whether the DateTime is in a DST.
       * @type {boolean}
       */
      get isInDST() {
        if (this.isOffsetFixed) {
          return false;
        } else {
          return (
            this.offset > this.set({ month: 1, day: 1 }).offset ||
            this.offset > this.set({ month: 5 }).offset
          );
        }
      }

      /**
       * Returns true if this DateTime is in a leap year, false otherwise
       * @example DateTime.local(2016).isInLeapYear //=> true
       * @example DateTime.local(2013).isInLeapYear //=> false
       * @type {boolean}
       */
      get isInLeapYear() {
        return isLeapYear(this.year);
      }

      /**
       * Returns the number of days in this DateTime's month
       * @example DateTime.local(2016, 2).daysInMonth //=> 29
       * @example DateTime.local(2016, 3).daysInMonth //=> 31
       * @type {number}
       */
      get daysInMonth() {
        return daysInMonth(this.year, this.month);
      }

      /**
       * Returns the number of days in this DateTime's year
       * @example DateTime.local(2016).daysInYear //=> 366
       * @example DateTime.local(2013).daysInYear //=> 365
       * @type {number}
       */
      get daysInYear() {
        return this.isValid ? daysInYear(this.year) : NaN;
      }

      /**
       * Returns the number of weeks in this DateTime's year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2004).weeksInWeekYear //=> 53
       * @example DateTime.local(2013).weeksInWeekYear //=> 52
       * @type {number}
       */
      get weeksInWeekYear() {
        return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
      }

      /**
       * Returns the resolved Intl options for this DateTime.
       * This is useful in understanding the behavior of formatting methods
       * @param {Object} opts - the same options as toLocaleString
       * @return {Object}
       */
      resolvedLocaleOptions(opts = {}) {
        const { locale, numberingSystem, calendar } = Formatter.create(
          this.loc.clone(opts),
          opts
        ).resolvedOptions(this);
        return { locale, numberingSystem, outputCalendar: calendar };
      }

      // TRANSFORM

      /**
       * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
       *
       * Equivalent to {@link DateTime#setZone}('utc')
       * @param {number} [offset=0] - optionally, an offset from UTC in minutes
       * @param {Object} [opts={}] - options to pass to `setZone()`
       * @return {DateTime}
       */
      toUTC(offset = 0, opts = {}) {
        return this.setZone(FixedOffsetZone.instance(offset), opts);
      }

      /**
       * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
       *
       * Equivalent to `setZone('local')`
       * @return {DateTime}
       */
      toLocal() {
        return this.setZone(Settings.defaultZone);
      }

      /**
       * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
       *
       * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
       * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
       * @param {Object} opts - options
       * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
       * @return {DateTime}
       */
      setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
        zone = normalizeZone(zone, Settings.defaultZone);
        if (zone.equals(this.zone)) {
          return this;
        } else if (!zone.isValid) {
          return DateTime.invalid(unsupportedZone(zone));
        } else {
          let newTS = this.ts;
          if (keepLocalTime || keepCalendarTime) {
            const offsetGuess = zone.offset(this.ts);
            const asObj = this.toObject();
            [newTS] = objToTS(asObj, offsetGuess, zone);
          }
          return clone$3(this, { ts: newTS, zone });
        }
      }

      /**
       * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
       * @param {Object} properties - the properties to set
       * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
       * @return {DateTime}
       */
      reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
        return clone$3(this, { loc });
      }

      /**
       * "Set" the locale. Returns a newly-constructed DateTime.
       * Just a convenient alias for reconfigure({ locale })
       * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
       * @return {DateTime}
       */
      setLocale(locale) {
        return this.reconfigure({ locale });
      }

      /**
       * "Set" the values of specified units. Returns a newly-constructed DateTime.
       * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
       * @param {Object} values - a mapping of units to numbers
       * @example dt.set({ year: 2017 })
       * @example dt.set({ hour: 8, minute: 30 })
       * @example dt.set({ weekday: 5 })
       * @example dt.set({ year: 2005, ordinal: 234 })
       * @return {DateTime}
       */
      set(values) {
        if (!this.isValid) return this;

        const normalized = normalizeObject(values, normalizeUnit),
          settingWeekStuff =
            !isUndefined$2(normalized.weekYear) ||
            !isUndefined$2(normalized.weekNumber) ||
            !isUndefined$2(normalized.weekday),
          containsOrdinal = !isUndefined$2(normalized.ordinal),
          containsGregorYear = !isUndefined$2(normalized.year),
          containsGregorMD = !isUndefined$2(normalized.month) || !isUndefined$2(normalized.day),
          containsGregor = containsGregorYear || containsGregorMD,
          definiteWeekDef = normalized.weekYear || normalized.weekNumber;

        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError(
            "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
          );
        }

        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }

        let mixed;
        if (settingWeekStuff) {
          mixed = weekToGregorian({ ...gregorianToWeek(this.c), ...normalized });
        } else if (!isUndefined$2(normalized.ordinal)) {
          mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
        } else {
          mixed = { ...this.toObject(), ...normalized };

          // if we didn't set the day but we ended up on an overflow date,
          // use the last day of the right month
          if (isUndefined$2(normalized.day)) {
            mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
          }
        }

        const [ts, o] = objToTS(mixed, this.o, this.zone);
        return clone$3(this, { ts, o });
      }

      /**
       * Add a period of time to this DateTime and return the resulting DateTime
       *
       * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @example DateTime.now().plus(123) //~> in 123 milliseconds
       * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
       * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
       * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
       * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
       * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
       * @return {DateTime}
       */
      plus(duration) {
        if (!this.isValid) return this;
        const dur = Duration.fromDurationLike(duration);
        return clone$3(this, adjustTime(this, dur));
      }

      /**
       * Subtract a period of time to this DateTime and return the resulting DateTime
       * See {@link DateTime#plus}
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       @return {DateTime}
       */
      minus(duration) {
        if (!this.isValid) return this;
        const dur = Duration.fromDurationLike(duration).negate();
        return clone$3(this, adjustTime(this, dur));
      }

      /**
       * "Set" this DateTime to the beginning of a unit of time.
       * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
       * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
       * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
       * @return {DateTime}
       */
      startOf(unit) {
        if (!this.isValid) return this;
        const o = {},
          normalizedUnit = Duration.normalizeUnit(unit);
        switch (normalizedUnit) {
          case "years":
            o.month = 1;
          // falls through
          case "quarters":
          case "months":
            o.day = 1;
          // falls through
          case "weeks":
          case "days":
            o.hour = 0;
          // falls through
          case "hours":
            o.minute = 0;
          // falls through
          case "minutes":
            o.second = 0;
          // falls through
          case "seconds":
            o.millisecond = 0;
            break;
          // no default, invalid units throw in normalizeUnit()
        }

        if (normalizedUnit === "weeks") {
          o.weekday = 1;
        }

        if (normalizedUnit === "quarters") {
          const q = Math.ceil(this.month / 3);
          o.month = (q - 1) * 3 + 1;
        }

        return this.set(o);
      }

      /**
       * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
       * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
       * @return {DateTime}
       */
      endOf(unit) {
        return this.isValid
          ? this.plus({ [unit]: 1 })
              .startOf(unit)
              .minus(1)
          : this;
      }

      // OUTPUT

      /**
       * Returns a string representation of this DateTime formatted according to the specified format string.
       * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
       * Defaults to en-US if no locale has been specified, regardless of the system's locale.
       * @param {string} fmt - the format string
       * @param {Object} opts - opts to override the configuration options on this DateTime
       * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
       * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
       * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
       * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        return this.isValid
          ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
          : INVALID$1;
      }

      /**
       * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
       * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
       * of the DateTime in the assigned locale.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
       * @param {Object} opts - opts to override the configuration options on this DateTime
       * @example DateTime.now().toLocaleString(); //=> 4/20/2017
       * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
       * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
       * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
       * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
       * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
       * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
       * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
       * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
       * @return {string}
       */
      toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
        return this.isValid
          ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this)
          : INVALID$1;
      }

      /**
       * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
       * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
       * @example DateTime.now().toLocaleParts(); //=> [
       *                                   //=>   { type: 'day', value: '25' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'month', value: '05' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'year', value: '1982' }
       *                                   //=> ]
       */
      toLocaleParts(opts = {}) {
        return this.isValid
          ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
          : [];
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
       * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
       * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
       * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
       * @return {string}
       */
      toISO({
        format = "extended",
        suppressSeconds = false,
        suppressMilliseconds = false,
        includeOffset = true,
        extendedZone = false,
      } = {}) {
        if (!this.isValid) {
          return null;
        }

        const ext = format === "extended";

        let c = toISODate(this, ext);
        c += "T";
        c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
        return c;
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's date component
       * @param {Object} opts - options
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
       * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
       * @return {string}
       */
      toISODate({ format = "extended" } = {}) {
        if (!this.isValid) {
          return null;
        }

        return toISODate(this, format === "extended");
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's week date
       * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
       * @return {string}
       */
      toISOWeekDate() {
        return toTechFormat(this, "kkkk-'W'WW-c");
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's time component
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
       * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
       * @return {string}
       */
      toISOTime({
        suppressMilliseconds = false,
        suppressSeconds = false,
        includeOffset = true,
        includePrefix = false,
        extendedZone = false,
        format = "extended",
      } = {}) {
        if (!this.isValid) {
          return null;
        }

        let c = includePrefix ? "T" : "";
        return (
          c +
          toISOTime(
            this,
            format === "extended",
            suppressSeconds,
            suppressMilliseconds,
            includeOffset,
            extendedZone
          )
        );
      }

      /**
       * Returns an RFC 2822-compatible string representation of this DateTime
       * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
       * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
       * @return {string}
       */
      toRFC2822() {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
       * Specifically, the string conforms to RFC 1123.
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
       * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
       * @return {string}
       */
      toHTTP() {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Date
       * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
       * @return {string}
       */
      toSQLDate() {
        if (!this.isValid) {
          return null;
        }
        return toISODate(this, true);
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Time
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
       * @example DateTime.utc().toSQL() //=> '05:15:16.345'
       * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
       * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
       * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
       * @return {string}
       */
      toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
        let fmt = "HH:mm:ss.SSS";

        if (includeZone || includeOffset) {
          if (includeOffsetSpace) {
            fmt += " ";
          }
          if (includeZone) {
            fmt += "z";
          } else if (includeOffset) {
            fmt += "ZZ";
          }
        }

        return toTechFormat(this, fmt, true);
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in SQL DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
       * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
       * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
       * @return {string}
       */
      toSQL(opts = {}) {
        if (!this.isValid) {
          return null;
        }

        return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
      }

      /**
       * Returns a string representation of this DateTime appropriate for debugging
       * @return {string}
       */
      toString() {
        return this.isValid ? this.toISO() : INVALID$1;
      }

      /**
       * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
       * @return {number}
       */
      valueOf() {
        return this.toMillis();
      }

      /**
       * Returns the epoch milliseconds of this DateTime.
       * @return {number}
       */
      toMillis() {
        return this.isValid ? this.ts : NaN;
      }

      /**
       * Returns the epoch seconds of this DateTime.
       * @return {number}
       */
      toSeconds() {
        return this.isValid ? this.ts / 1000 : NaN;
      }

      /**
       * Returns the epoch seconds (as a whole number) of this DateTime.
       * @return {number}
       */
      toUnixInteger() {
        return this.isValid ? Math.floor(this.ts / 1000) : NaN;
      }

      /**
       * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }

      /**
       * Returns a BSON serializable equivalent to this DateTime.
       * @return {Date}
       */
      toBSON() {
        return this.toJSDate();
      }

      /**
       * Returns a JavaScript object with this DateTime's year, month, day, and so on.
       * @param opts - options for generating the object
       * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
       * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
       * @return {Object}
       */
      toObject(opts = {}) {
        if (!this.isValid) return {};

        const base = { ...this.c };

        if (opts.includeConfig) {
          base.outputCalendar = this.outputCalendar;
          base.numberingSystem = this.loc.numberingSystem;
          base.locale = this.loc.locale;
        }
        return base;
      }

      /**
       * Returns a JavaScript Date equivalent to this DateTime.
       * @return {Date}
       */
      toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
      }

      // COMPARE

      /**
       * Return the difference between two DateTimes as a Duration.
       * @param {DateTime} otherDateTime - the DateTime to compare this one to
       * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example
       * var i1 = DateTime.fromISO('1982-05-25T09:45'),
       *     i2 = DateTime.fromISO('1983-10-14T10:30');
       * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
       * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
       * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
       * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
       * @return {Duration}
       */
      diff(otherDateTime, unit = "milliseconds", opts = {}) {
        if (!this.isValid || !otherDateTime.isValid) {
          return Duration.invalid("created by diffing an invalid DateTime");
        }

        const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };

        const units = maybeArray(unit).map(Duration.normalizeUnit),
          otherIsLater = otherDateTime.valueOf() > this.valueOf(),
          earlier = otherIsLater ? this : otherDateTime,
          later = otherIsLater ? otherDateTime : this,
          diffed = diff(earlier, later, units, durOpts);

        return otherIsLater ? diffed.negate() : diffed;
      }

      /**
       * Return the difference between this DateTime and right now.
       * See {@link DateTime#diff}
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      diffNow(unit = "milliseconds", opts = {}) {
        return this.diff(DateTime.now(), unit, opts);
      }

      /**
       * Return an Interval spanning between this DateTime and another DateTime
       * @param {DateTime} otherDateTime - the other end point of the Interval
       * @return {Interval}
       */
      until(otherDateTime) {
        return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
      }

      /**
       * Return whether this DateTime is in the same unit of time as another DateTime.
       * Higher-order units must also be identical for this function to return `true`.
       * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
       * @param {DateTime} otherDateTime - the other DateTime
       * @param {string} unit - the unit of time to check sameness on
       * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
       * @return {boolean}
       */
      hasSame(otherDateTime, unit) {
        if (!this.isValid) return false;

        const inputMs = otherDateTime.valueOf();
        const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
        return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
      }

      /**
       * Equality check
       * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
       * To compare just the millisecond values, use `+dt1 === +dt2`.
       * @param {DateTime} other - the other DateTime
       * @return {boolean}
       */
      equals(other) {
        return (
          this.isValid &&
          other.isValid &&
          this.valueOf() === other.valueOf() &&
          this.zone.equals(other.zone) &&
          this.loc.equals(other.loc)
        );
      }

      /**
       * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
       * platform supports Intl.RelativeTimeFormat. Rounds down by default.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
       * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
       * @param {boolean} [options.round=true] - whether to round the numbers in the output.
       * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
       * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
       * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
       * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
       * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
       * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
       */
      toRelative(options = {}) {
        if (!this.isValid) return null;
        const base = options.base || DateTime.fromObject({}, { zone: this.zone }),
          padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
        let units = ["years", "months", "days", "hours", "minutes", "seconds"];
        let unit = options.unit;
        if (Array.isArray(options.unit)) {
          units = options.unit;
          unit = undefined;
        }
        return diffRelative(base, this.plus(padding), {
          ...options,
          numeric: "always",
          units,
          unit,
        });
      }

      /**
       * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
       * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
       * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
       * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
       * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
       */
      toRelativeCalendar(options = {}) {
        if (!this.isValid) return null;

        return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {
          ...options,
          numeric: "auto",
          units: ["years", "months", "days"],
          calendary: true,
        });
      }

      /**
       * Return the min of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
       * @return {DateTime} the min DateTime, or undefined if called with no argument
       */
      static min(...dateTimes) {
        if (!dateTimes.every(DateTime.isDateTime)) {
          throw new InvalidArgumentError("min requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
      }

      /**
       * Return the max of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
       * @return {DateTime} the max DateTime, or undefined if called with no argument
       */
      static max(...dateTimes) {
        if (!dateTimes.every(DateTime.isDateTime)) {
          throw new InvalidArgumentError("max requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
      }

      // MISC

      /**
       * Explain how a string would be parsed by fromFormat()
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see description)
       * @param {Object} options - options taken by fromFormat()
       * @return {Object}
       */
      static fromFormatExplain(text, fmt, options = {}) {
        const { locale = null, numberingSystem = null } = options,
          localeToUse = Locale.fromOpts({
            locale,
            numberingSystem,
            defaultToEN: true,
          });
        return explainFromTokens(localeToUse, text, fmt);
      }

      /**
       * @deprecated use fromFormatExplain instead
       */
      static fromStringExplain(text, fmt, options = {}) {
        return DateTime.fromFormatExplain(text, fmt, options);
      }

      // FORMAT PRESETS

      /**
       * {@link DateTime#toLocaleString} format like 10/14/1983
       * @type {Object}
       */
      static get DATE_SHORT() {
        return DATE_SHORT;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
       * @type {Object}
       */
      static get DATE_MED() {
        return DATE_MED;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
       * @type {Object}
       */
      static get DATE_MED_WITH_WEEKDAY() {
        return DATE_MED_WITH_WEEKDAY;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983'
       * @type {Object}
       */
      static get DATE_FULL() {
        return DATE_FULL;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
       * @type {Object}
       */
      static get DATE_HUGE() {
        return DATE_HUGE;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_SIMPLE() {
        return TIME_SIMPLE;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SECONDS() {
        return TIME_WITH_SECONDS;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SHORT_OFFSET() {
        return TIME_WITH_SHORT_OFFSET;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_LONG_OFFSET() {
        return TIME_WITH_LONG_OFFSET;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_SIMPLE() {
        return TIME_24_SIMPLE;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SECONDS() {
        return TIME_24_WITH_SECONDS;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SHORT_OFFSET() {
        return TIME_24_WITH_SHORT_OFFSET;
      }

      /**
       * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_LONG_OFFSET() {
        return TIME_24_WITH_LONG_OFFSET;
      }

      /**
       * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT() {
        return DATETIME_SHORT;
      }

      /**
       * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT_WITH_SECONDS() {
        return DATETIME_SHORT_WITH_SECONDS;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED() {
        return DATETIME_MED;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_SECONDS() {
        return DATETIME_MED_WITH_SECONDS;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_WEEKDAY() {
        return DATETIME_MED_WITH_WEEKDAY;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL() {
        return DATETIME_FULL;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL_WITH_SECONDS() {
        return DATETIME_FULL_WITH_SECONDS;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE() {
        return DATETIME_HUGE;
      }

      /**
       * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE_WITH_SECONDS() {
        return DATETIME_HUGE_WITH_SECONDS;
      }
    }

    /**
     * @private
     */
    function friendlyDateTime(dateTimeish) {
      if (DateTime.isDateTime(dateTimeish)) {
        return dateTimeish;
      } else if (dateTimeish && dateTimeish.valueOf && isNumber$2(dateTimeish.valueOf())) {
        return DateTime.fromJSDate(dateTimeish);
      } else if (dateTimeish && typeof dateTimeish === "object") {
        return DateTime.fromObject(dateTimeish);
      } else {
        throw new InvalidArgumentError(
          `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
        );
      }
    }

    // FIXME profile adding a per-Tree TreeNode cache, validating it by
    // parent pointer
    /// The default maximum length of a `TreeBuffer` node.
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    let Range$3 = class Range {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    };
    /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
    /// can have metadata associated with it in props. Instances of this
    /// class represent prop names.
    class NodeProp {
        /// Create a new node prop type.
        constructor(config = {}) {
            this.id = nextPropID++;
            this.perNode = !!config.perNode;
            this.deserialize = config.deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /// This is meant to be used with
        /// [`NodeSet.extend`](#common.NodeSet.extend) or
        /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
        /// prop values for each node type in the set. Takes a [match
        /// object](#common.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        add(match) {
            if (this.perNode)
                throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /// Prop that is used to describe matching delimiters. For opening
    /// delimiters, this holds an array of node names (written as a
    /// space-separated string when declaring this prop in a grammar)
    /// for the node types of closing delimiters that match it.
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
    /// attached to closing delimiters, holding an array of node names
    /// of types of matching opening delimiters.
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /// Used to assign node types to groups (for example, all node
    /// types that represent an expression could be tagged with an
    /// `"Expression"` group).
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    /// The hash of the [context](#lr.ContextTracker.constructor)
    /// that the node was parsed in, if any. Used to limit reuse of
    /// contextual nodes.
    NodeProp.contextHash = new NodeProp({ perNode: true });
    /// The distance beyond the end of the node that the tokenizer
    /// looked ahead for any of the tokens inside the node. (The LR
    /// parser only stores this when it is larger than 25, for
    /// efficiency reasons.)
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    /// This per-node prop is used to replace a given node, or part of a
    /// node, with another tree. This is useful to include trees from
    /// different languages in mixed-language parsers.
    NodeProp.mounted = new NodeProp({ perNode: true });
    const noProps = Object.create(null);
    /// Each node in a syntax tree has a node type associated with it.
    class NodeType {
        /// @internal
        constructor(
        /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node set should play the same semantic
        /// role.
        name, 
        /// @internal
        props, 
        /// The id of this node in its set. Corresponds to the term ids
        /// used in the parser.
        id, 
        /// @internal
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /// Define a node type.
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
                (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src) {
                        if (src[0].perNode)
                            throw new RangeError("Can't store a per-node prop on a node type");
                        props[src[0].id] = src[1];
                    }
                }
            return type;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        prop(prop) { return this.props[prop.id]; }
        /// True when this is the top node of a grammar.
        get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
        /// True when this node is produced by a skip rule.
        get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
        /// Indicates whether this is an error node.
        get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
        /// When true, this node type doesn't correspond to a user-declared
        /// named node, for example because it is used to cache repetition.
        get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
        /// Returns true when this node's name or one of its
        /// [groups](#common.NodeProp^group) matches the given string.
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#common.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /// An empty dummy node type to use when no actual type is available.
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
    /// A node set holds a collection of node types. It is used to
    /// compactly represent trees by storing their type ids, rather than a
    /// full pointer to the type object, in a numeric array. Each parser
    /// [has](#lr.LRParser.nodeSet) a node set, and [tree
    /// buffers](#common.TreeBuffer) can only store collections of nodes
    /// from the same set. A set can have a maximum of 2**16 (65536) node
    /// types in it, so that the ids fit into 16-bit typed array slots.
    class NodeSet {
        /// Create a set with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        constructor(
        /// The node types in this set, by id.
        types) {
            this.types = types;
            for (let i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /// Create a copy of this set with some node properties added. The
        /// arguments to this method can be created with
        /// [`NodeProp.add`](#common.NodeProp.add).
        extend(...props) {
            let newTypes = [];
            for (let type of this.types) {
                let newProps = null;
                for (let source of props) {
                    let add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        newProps[add[0].id] = add[1];
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeSet(newTypes);
        }
    }
    const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
    /// Options that control iteration. Can be combined with the `|`
    /// operator to enable multiple ones.
    var IterMode;
    (function (IterMode) {
        /// When enabled, iteration will only visit [`Tree`](#common.Tree)
        /// objects, not nodes packed into
        /// [`TreeBuffer`](#common.TreeBuffer)s.
        IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
        /// Enable this to make iteration include anonymous nodes (such as
        /// the nodes that wrap repeated grammar constructs into a balanced
        /// tree).
        IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
        /// By default, regular [mounted](#common.NodeProp^mounted) nodes
        /// replace their base node in iteration. Enable this to ignore them
        /// instead.
        IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
        /// This option only applies in
        /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
        /// library to not enter mounted overlays if one covers the given
        /// position.
        IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    /// A piece of syntax tree. There are two ways to approach these
    /// trees: the way they are actually stored in memory, and the
    /// convenient way.
    ///
    /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    /// objects. By packing detail information into `TreeBuffer` leaf
    /// nodes, the representation is made a lot more memory-efficient.
    ///
    /// However, when you want to actually work with tree nodes, this
    /// representation is very awkward, so most client code will want to
    /// use the [`TreeCursor`](#common.TreeCursor) or
    /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
    /// a view on some part of this data structure, and can be used to
    /// move around to adjacent nodes.
    class Tree {
        /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        constructor(
        /// The type of the top node.
        type, 
        /// This node's child nodes.
        children, 
        /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, 
        /// The total length of this tree
        length, 
        /// Per-node [node props](#common.NodeProp) to associate with this node.
        props) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
            /// @internal
            this.props = null;
            if (props && props.length) {
                this.props = Object.create(null);
                for (let [prop, value] of props)
                    this.props[typeof prop == "number" ? prop : prop.id] = value;
            }
        }
        /// @internal
        toString() {
            let mounted = this.prop(NodeProp.mounted);
            if (mounted && !mounted.overlay)
                return mounted.tree.toString();
            let children = "";
            for (let ch of this.children) {
                let str = ch.toString();
                if (str) {
                    if (children)
                        children += ",";
                    children += str;
                }
            }
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
        /// the tree. Mode can be used to [control](#common.IterMode) which
        /// nodes the cursor visits.
        cursor(mode = 0) {
            return new TreeCursor(this.topNode, mode);
        }
        /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
        /// at the given position and side (see
        /// [`moveTo`](#common.TreeCursor.moveTo).
        cursorAt(pos, side = 0, mode = 0) {
            let scope = CachedNode.get(this) || this.topNode;
            let cursor = new TreeCursor(scope);
            cursor.moveTo(pos, side);
            CachedNode.set(this, cursor._tree);
            return cursor;
        }
        /// Get a [syntax node](#common.SyntaxNode) object for the top of the
        /// tree.
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /// Get the [syntax node](#common.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        ///
        /// Note that this will not enter
        /// [overlays](#common.MountedTree.overlay), and you often want
        /// [`resolveInner`](#common.Tree.resolveInner) instead.
        resolve(pos, side = 0) {
            let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
            CachedNode.set(this, node);
            return node;
        }
        /// Like [`resolve`](#common.Tree.resolve), but will enter
        /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        /// pointing into the innermost overlaid tree at the given position
        /// (with parent links going through all parent structure, including
        /// the host trees).
        resolveInner(pos, side = 0) {
            let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
            CachedInnerNode.set(this, node);
            return node;
        }
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, that node will
        /// not have its children iterated over (or `leave` called).
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {
                let entered = false;
                if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {
                    if (c.firstChild())
                        continue;
                    entered = true;
                }
                for (;;) {
                    if (entered && leave && !c.type.isAnonymous)
                        leave(c);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    entered = true;
                }
            }
        }
        /// Get the value of the given [node prop](#common.NodeProp) for this
        /// node. Works with both per-node and per-type props.
        prop(prop) {
            return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
        }
        /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
        /// format that can be passed to the [`Tree`](#common.Tree)
        /// constructor.
        get propValues() {
            let result = [];
            if (this.props)
                for (let id in this.props)
                    result.push([+id, this.props[id]]);
            return result;
        }
        /// Balance the direct children of this tree, producing a copy of
        /// which may have children grouped into subtrees with type
        /// [`NodeType.none`](#common.NodeType^none).
        balance(config = {}) {
            return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
                balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        static build(data) { return buildTree(data); }
    }
    /// The empty tree
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    /// Tree buffers contain (type, start, end, endIndex) quads for each
    /// node. In such a buffer, nodes are stored in prefix order (parents
    /// before children, with the endIndex of the parent indicating which
    /// children belong to it).
    class TreeBuffer {
        /// Create a tree buffer.
        constructor(
        /// The buffer's content.
        buffer, 
        /// The total length of the group of nodes in the buffer.
        length, 
        /// The node set used in this buffer.
        set) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
        }
        /// @internal
        get type() { return NodeType.none; }
        /// @internal
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /// @internal
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /// @internal
        findChild(startIndex, endIndex, dir, pos, side) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
        /// @internal
        slice(startI, endI, from) {
            let b = this.buffer;
            let copy = new Uint16Array(endI - startI), len = 0;
            for (let i = startI, j = 0; i < endI;) {
                copy[j++] = b[i++];
                copy[j++] = b[i++] - from;
                let to = copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - startI;
                len = Math.max(len, to);
            }
            return new TreeBuffer(copy, len, this.set);
        }
    }
    function checkSide(side, pos, from, to) {
        switch (side) {
            case -2 /* Side.Before */: return from < pos;
            case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
            case 0 /* Side.Around */: return from < pos && to > pos;
            case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
            case 2 /* Side.After */: return to > pos;
            case 4 /* Side.DontCare */: return true;
        }
    }
    function enterUnfinishedNodesBefore(node, pos) {
        let scan = node.childBefore(pos);
        while (scan) {
            let last = scan.lastChild;
            if (!last || last.to != scan.to)
                break;
            if (last.type.isError && last.from == last.to) {
                node = scan;
                scan = last.prevSibling;
            }
            else {
                scan = last;
            }
        }
        return node;
    }
    function resolveNode(node, pos, side, overlays) {
        var _a;
        // Move up to a node that actually holds the position, if possible
        while (node.from == node.to ||
            (side < 1 ? node.from >= pos : node.from > pos) ||
            (side > -1 ? node.to <= pos : node.to < pos)) {
            let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
            if (!parent)
                return node;
            node = parent;
        }
        let mode = overlays ? 0 : IterMode.IgnoreOverlays;
        // Must go up out of overlays when those do not overlap with pos
        if (overlays)
            for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
                if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                    node = parent;
            }
        for (;;) {
            let inner = node.enter(pos, side, mode);
            if (!inner)
                return node;
            node = inner;
        }
    }
    class TreeNode {
        constructor(_tree, from, 
        // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
            this._tree = _tree;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this._tree.type; }
        get name() { return this._tree.type.name; }
        get to() { return this.from + this._tree.length; }
        nextChild(i, dir, pos, side, mode = 0) {
            for (let parent = this;;) {
                for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent.from;
                    if (!checkSide(side, pos, start, start + next.length))
                        continue;
                    if (next instanceof TreeBuffer) {
                        if (mode & IterMode.ExcludeBuffers)
                            continue;
                        let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                        let mounted;
                        if (!(mode & IterMode.IgnoreMounts) &&
                            next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                            return new TreeNode(mounted.tree, start, i, parent);
                        let inner = new TreeNode(next, start, i, parent);
                        return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                            : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                    }
                }
                if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                    return null;
                if (parent.index >= 0)
                    i = parent.index + dir;
                else
                    i = dir < 0 ? -1 : parent._parent._tree.children.length;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            let mounted;
            if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
                let rPos = pos - this.from;
                for (let { from, to } of mounted.overlay) {
                    if ((side > 0 ? from <= rPos : from < rPos) &&
                        (side < 0 ? to >= rPos : to > rPos))
                        return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
            }
            return this.nextChild(0, 1, pos, side, mode);
        }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
        }
        get prevSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return this._tree; }
        toTree() { return this._tree; }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        getChild(type, before = null, after = null) {
            let r = getChildren$1(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren$1(this, type, before, after);
        }
        /// @internal
        toString() { return this._tree.toString(); }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    function getChildren$1(node, type, before, after) {
        let cur = node.cursor(), result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    function matchNodeContext(node, context, i = context.length - 1) {
        for (let p = node.parent; i >= 0; p = p.parent) {
            if (!p)
                return false;
            if (!p.type.isAnonymous) {
                if (context[i] && context[i] != p.name)
                    return false;
                i--;
            }
        }
        return true;
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode {
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        constructor(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        child(dir, pos, side) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            if (mode & IterMode.ExcludeBuffers)
                return null;
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return null; }
        toTree() {
            let children = [], positions = [];
            let { buffer } = this.context;
            let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
            if (endI > startI) {
                let from = buffer.buffer[this.index + 1];
                children.push(buffer.slice(startI, endI, from));
                positions.push(0);
            }
            return new Tree(this.type, children, positions, this.to - this.from);
        }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        /// @internal
        toString() { return this.context.buffer.childString(this.index); }
        getChild(type, before = null, after = null) {
            let r = getChildren$1(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren$1(this, type, before, after);
        }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    /// A tree cursor object focuses on a given node in a syntax tree, and
    /// allows you to move to adjacent nodes.
    class TreeCursor {
        /// Shorthand for `.type.name`.
        get name() { return this.type.name; }
        /// @internal
        constructor(node, 
        /// @internal
        mode = 0) {
            this.mode = mode;
            /// @internal
            this.buffer = null;
            this.stack = [];
            /// @internal
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /// @internal
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /// @internal
        enterChild(dir, pos, side) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
        /// Move the cursor to this node's last child.
        lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
        /// Move the cursor to the first child that ends after `pos`.
        childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
        /// Move to the last child that starts before `pos`.
        childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
        /// Move the cursor to the child around `pos`. If side is -1 the
        /// child may end at that position, when 1 it may start there. This
        /// will also enter [overlaid](#common.MountedTree.overlay)
        /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        /// set to false.
        enter(pos, side, mode = this.mode) {
            if (!this.buffer)
                return this.yield(this._tree.enter(pos, side, mode));
            return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
        }
        /// Move to the node's parent node, if this isn't the top node.
        parent() {
            if (!this.buffer)
                return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /// @internal
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree.index < 0 ? null
                        : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
        }
        /// Move to this node's next sibling, if any.
        nextSibling() { return this.sibling(1); }
        /// Move to this node's previous sibling, if any.
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                if (index > -1)
                    for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                        let child = parent._tree.children[i];
                        if ((this.mode & IterMode.IncludeAnonymous) ||
                            child instanceof TreeBuffer ||
                            !child.type.isAnonymous ||
                            hasChild(child))
                            return false;
                    }
            }
            return true;
        }
        move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
        /// traversal, going from a node to its first child or, if the
        /// current node is empty or `enter` is false, its next sibling or
        /// the next sibling of the first parent node that has one.
        next(enter = true) { return this.move(1, enter); }
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by its last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        prev(enter = true) { return this.move(-1, enter); }
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            while (this.enterChild(1, pos, side)) { }
            return this;
        }
        /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
        /// position.
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /// Get the [tree](#common.Tree) that represents the current node, if
        /// any. Will return null when the node is in a [tree
        /// buffer](#common.TreeBuffer).
        get tree() {
            return this.buffer ? null : this._tree._tree;
        }
        /// Iterate over the current node and all its descendants, calling
        /// `enter` when entering a node and `leave`, if given, when leaving
        /// one. When `enter` returns `false`, any children of that node are
        /// skipped, and `leave` isn't called for it.
        iterate(enter, leave) {
            for (let depth = 0;;) {
                let mustLeave = false;
                if (this.type.isAnonymous || enter(this) !== false) {
                    if (this.firstChild()) {
                        depth++;
                        continue;
                    }
                    if (!this.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(this);
                    mustLeave = this.type.isAnonymous;
                    if (this.nextSibling())
                        break;
                    if (!depth)
                        return;
                    this.parent();
                    depth--;
                    mustLeave = true;
                }
            }
        }
        /// Test whether the current node matches a given context—a sequence
        /// of direct parent node names. Empty strings in the context array
        /// are treated as wildcards.
        matchContext(context) {
            if (!this.buffer)
                return matchNodeContext(this.node, context);
            let { buffer } = this.buffer, { types } = buffer.set;
            for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
                if (d < 0)
                    return matchNodeContext(this.node, context, i);
                let type = types[buffer.buffer[this.stack[d]]];
                if (!type.isAnonymous) {
                    if (context[i] && context[i] != type.name)
                        return false;
                    i--;
                }
            }
            return true;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
    }
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            let { id, start, end, size } = cursor;
            let lookAheadAtStart = lookAhead;
            while (size < 0) {
                cursor.next();
                if (size == -1 /* SpecialRecord.Reuse */) {
                    let node = reused[id];
                    children.push(node);
                    positions.push(start - parentStart);
                    return;
                }
                else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                    contextHash = id;
                    return;
                }
                else if (size == -4 /* SpecialRecord.LookAhead */) {
                    lookAhead = id;
                    return;
                }
                else {
                    throw new RangeError(`Unrecognized record size: ${size}`);
                }
            }
            let type = types[id], node, buffer;
            let startPos = start - parentStart;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index);
                node = new TreeBuffer(data, end - buffer.start, nodeSet);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                let lastGroup = 0, lastEnd = end;
                while (cursor.pos > endPos) {
                    if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                        if (cursor.end <= lastEnd - maxBufferLength) {
                            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                            lastGroup = localChildren.length;
                            lastEnd = cursor.end;
                        }
                        cursor.next();
                    }
                    else {
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                    }
                }
                if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && lastGroup > 0) {
                    let make = makeBalanced(type);
                    node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
                }
                else {
                    node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
                }
            }
            children.push(node);
            positions.push(startPos);
        }
        function makeBalanced(type) {
            return (children, positions, length) => {
                let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
                if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                    if (!lastI && last.type == type && last.length == length)
                        return last;
                    if (lookAheadProp = last.prop(NodeProp.lookAhead))
                        lookAhead = positions[lastI] + last.length + lookAheadProp;
                }
                return makeTree(type, children, positions, length, lookAhead);
            };
        }
        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
            let localChildren = [], localPositions = [];
            while (children.length > i) {
                localChildren.push(children.pop());
                localPositions.push(positions.pop() + base - from);
            }
            children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
            positions.push(from - base);
        }
        function makeTree(type, children, positions, length, lookAhead = 0, props) {
            if (contextHash) {
                let pair = [NodeProp.contextHash, contextHash];
                props = props ? [pair].concat(props) : [pair];
            }
            if (lookAhead > 25) {
                let pair = [NodeProp.lookAhead, lookAhead];
                props = props ? [pair].concat(props) : [pair];
            }
            return new Tree(type, children, positions, length, props);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                let nodeSize = fork.size;
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat && nodeSize >= 0) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0) {
                        if (fork.size == -3 /* SpecialRecord.ContextChange */)
                            localSkipped += 4;
                        else
                            break scan;
                    }
                    else if (fork.id >= minRepeatType) {
                        localSkipped += 4;
                    }
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (size >= 0 && id < minRepeatType) {
                let startIndex = index;
                if (size > 4) {
                    let endPos = cursor.pos - (size - 4);
                    while (cursor.pos > endPos)
                        index = copyToBuffer(bufferStart, buffer, index);
                }
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            else if (size == -3 /* SpecialRecord.ContextChange */) {
                contextHash = id;
            }
            else if (size == -4 /* SpecialRecord.LookAhead */) {
                lookAhead = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = new WeakMap;
    function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
            return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
            size = 1;
            for (let child of node.children) {
                if (child.type != balanceType || !(child instanceof Tree)) {
                    size = 1;
                    break;
                }
                size += nodeSize(balanceType, child);
            }
            nodeSizeCache.set(node, size);
        }
        return size;
    }
    function balanceRange(
    // The type the balanced tree's inner nodes.
    balanceType, 
    // The direct children and their positions
    children, positions, 
    // The index range in children/positions to use
    from, to, 
    // The start position of the nodes, relative to their parent.
    start, 
    // Length of the outer node
    length, 
    // Function to build the top node of the balanced tree
    mkTop, 
    // Function to build internal nodes for the balanced tree
    mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
            total += nodeSize(balanceType, children[i]);
        let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
        let localChildren = [], localPositions = [];
        function divide(children, positions, from, to, offset) {
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
                i++;
                for (; i < to; i++) {
                    let nextSize = nodeSize(balanceType, children[i]);
                    if (groupSize + nextSize >= maxChild)
                        break;
                    groupSize += nextSize;
                }
                if (i == groupFrom + 1) {
                    if (groupSize > maxChild) {
                        let only = children[groupFrom]; // Only trees can have a size > 1
                        divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                        continue;
                    }
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let length = positions[i - 1] + children[i - 1].length - groupStart;
                    localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
                }
                localPositions.push(groupStart + offset - start);
            }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
    }

    /// Tree fragments are used during [incremental
    /// parsing](#common.Parser.startParse) to track parts of old trees
    /// that can be reused in a new parse. An array of fragments is used
    /// to track regions of an old tree whose nodes might be reused in new
    /// parses. Use the static
    /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
    /// update fragments for document changes.
    class TreeFragment {
        /// Construct a tree fragment. You'll usually want to use
        /// [`addTree`](#common.TreeFragment^addTree) and
        /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
        /// calling this directly.
        constructor(
        /// The start of the unchanged range pointed to by this fragment.
        /// This refers to an offset in the _updated_ document (as opposed
        /// to the original tree).
        from, 
        /// The end of the unchanged range.
        to, 
        /// The tree that this fragment is based on.
        tree, 
        /// The offset between the fragment's tree and the document that
        /// this fragment can be used against. Add this when going from
        /// document to tree positions, subtract it to go from tree to
        /// document positions.
        offset, openStart = false, openEnd = false) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
        }
        /// Whether the start of the fragment represents the start of a
        /// parse, or the end of a change. (In the second case, it may not
        /// be safe to reuse some nodes at the start, depending on the
        /// parsing algorithm.)
        get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
        /// Whether the end of the fragment represents the end of a
        /// full-document parse, or the start of a change.
        get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
        /// Create a set of fragments from a freshly parsed tree, or update
        /// an existing set of fragments by replacing the ones that overlap
        /// with a tree with content from the new tree. When `partial` is
        /// true, the parse is treated as incomplete, and the resulting
        /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        /// true.
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
        /// Apply a set of edits to an array of fragments, removing or
        /// splitting fragments as necessary to remove edited ranges, and
        /// adjusting offsets for fragments that moved.
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            for (let cI = 0, pos = 0, off = 0;; cI++) {
                let nextC = cI < changes.length ? changes[cI] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
    }
    /// A superclass that parsers should extend.
    let Parser$1 = class Parser {
        /// Start a parse, returning a [partial parse](#common.PartialParse)
        /// object. [`fragments`](#common.TreeFragment) can be passed in to
        /// make the parse incremental.
        ///
        /// By default, the entire input is parsed. You can pass `ranges`,
        /// which should be a sorted array of non-empty, non-overlapping
        /// ranges, to parse only those ranges. The tree returned in that
        /// case will start at `ranges[0].from`.
        startParse(input, fragments, ranges) {
            if (typeof input == "string")
                input = new StringInput(input);
            ranges = !ranges ? [new Range$3(0, input.length)] : ranges.length ? ranges.map(r => new Range$3(r.from, r.to)) : [new Range$3(0, 0)];
            return this.createParse(input, fragments || [], ranges);
        }
        /// Run a full parse, returning the resulting tree.
        parse(input, fragments, ranges) {
            let parse = this.startParse(input, fragments, ranges);
            for (;;) {
                let done = parse.advance();
                if (done)
                    return done;
            }
        }
    };
    class StringInput {
        constructor(string) {
            this.string = string;
        }
        get length() { return this.string.length; }
        chunk(from) { return this.string.slice(from); }
        get lineChunks() { return false; }
        read(from, to) { return this.string.slice(from, to); }
    }
    new NodeProp({ perNode: true });

    /// A parse stack. These are used internally by the parser to track
    /// parsing progress. They also provide some properties and methods
    /// that external code such as a tokenizer can use to get information
    /// about the parse state.
    class Stack {
        /// @internal
        constructor(
        /// The parse that this stack is part of @internal
        p, 
        /// Holds state, input pos, buffer index triplets for all but the
        /// top state @internal
        stack, 
        /// The current parse state @internal
        state, 
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, 
        /// The input position up to which this stack has parsed.
        pos, 
        /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, 
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, 
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, 
        /// @internal
        curContext, 
        /// @internal
        lookAhead = 0, 
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /// @internal
        parent) {
            this.p = p;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.curContext = curContext;
            this.lookAhead = lookAhead;
            this.parent = parent;
        }
        /// @internal
        toString() {
            return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /// @internal
        static start(p, state, pos = 0) {
            let cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
        }
        /// The stack's current [context](#lr.ContextTracker) value, if
        /// any. Its type will depend on the context tracker's type
        /// parameter, or it will be `null` if there is no context
        /// tracker.
        get context() { return this.curContext ? this.curContext.context : null; }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        }
        // Apply a reduce action
        /// @internal
        reduce(action) {
            var _a;
            let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
            let { parser } = this.p;
            let dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                this.reduceContext(type, this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
            let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
            // This is a kludge to try and detect overly deep left-associative
            // trees, which will not increase the parse stack depth and thus
            // won't be caught by the regular stack-depth limit check.
            if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
                if (start == this.p.lastBigReductionStart) {
                    this.p.bigReductionCount++;
                    this.p.lastBigReductionSize = size;
                }
                else if (this.p.lastBigReductionSize < size) {
                    this.p.bigReductionCount = 1;
                    this.p.lastBigReductionStart = start;
                    this.p.lastBigReductionSize = size;
                }
            }
            let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
                let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* Action.StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                let baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
            this.reduceContext(type, start);
        }
        // Shift a value into the buffer
        /// @internal
        storeNode(term, start, end, size = 4, isReduce = false) {
            if (term == 0 /* Term.Err */ &&
                (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
                // Try to omit/merge adjacent error nodes
                let cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!isReduce || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                let index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)
                    while (index > 0 && this.buffer[index - 2] > end) {
                        // Move this record forward
                        this.buffer[index] = this.buffer[index - 4];
                        this.buffer[index + 1] = this.buffer[index - 3];
                        this.buffer[index + 2] = this.buffer[index - 2];
                        this.buffer[index + 3] = this.buffer[index - 1];
                        index -= 4;
                        if (size > 4)
                            size -= 4;
                    }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        }
        // Apply a shift action
        /// @internal
        shift(action, next, nextEnd) {
            let start = this.pos;
            if (action & 131072 /* Action.GotoFlag */) {
                this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
            }
            else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
                let nextState = action, { parser } = this.p;
                if (nextEnd > this.pos || next <= parser.maxNode) {
                    this.pos = nextEnd;
                    if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                        this.reducePos = nextEnd;
                }
                this.pushState(nextState, start);
                this.shiftContext(next, start);
                if (next <= parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                this.pos = nextEnd;
                this.shiftContext(next, start);
                if (next <= this.p.parser.maxNode)
                    this.buffer.push(next, start, nextEnd, 4);
            }
        }
        // Apply an action
        /// @internal
        apply(action, next, nextEnd) {
            if (action & 65536 /* Action.ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextEnd);
        }
        // Add a prebuilt (reused) node into the buffer.
        /// @internal
        useNode(value, next) {
            let index = this.p.reused.length - 1;
            if (index < 0 || this.p.reused[index] != value) {
                this.p.reused.push(value);
                index++;
            }
            let start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        split() {
            let parent = this;
            let off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        recoverByDelete(next, nextEnd) {
            let isNode = next <= this.p.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd, 4);
            this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 190 /* Recover.Delete */;
        }
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        canShift(term) {
            for (let sim = new SimulatedStack(this);;) {
                let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
                if (action == 0)
                    return false;
                if ((action & 65536 /* Action.ReduceFlag */) == 0)
                    return true;
                sim.reduce(action);
            }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        recoverByInsert(next) {
            if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
                return [];
            let nextStates = this.p.parser.nextStates(this.state);
            if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
                let best = [];
                for (let i = 0, s; i < nextStates.length; i += 2) {
                    if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                        best.push(nextStates[i], s);
                }
                if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                    for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                        let s = nextStates[i + 1];
                        if (!best.some((v, i) => (i & 1) && v == s))
                            best.push(nextStates[i], s);
                    }
                nextStates = best;
            }
            let result = [];
            for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
                let s = nextStates[i + 1];
                if (s == this.state)
                    continue;
                let stack = this.split();
                stack.pushState(s, this.pos);
                stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
                stack.shiftContext(nextStates[i], this.pos);
                stack.score -= 200 /* Recover.Insert */;
                result.push(stack);
            }
            return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        forceReduce() {
            let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
            if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
                return false;
            let { parser } = this.p;
            if (!parser.validAction(this.state, reduce)) {
                let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
                let target = this.stack.length - depth * 3;
                if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)
                    return false;
                this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);
                this.score -= 100 /* Recover.Reduce */;
            }
            this.reducePos = this.pos;
            this.reduce(reduce);
            return true;
        }
        /// @internal
        forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
                if (!this.forceReduce()) {
                    this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                    break;
                }
            }
            return this;
        }
        /// Check whether this state has no further actions (assumed to be a direct descendant of the
        /// top state, since any other states must be able to continue
        /// somehow). @internal
        get deadEnd() {
            if (this.stack.length != 3)
                return false;
            let { parser } = this.p;
            return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
                !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
        }
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        restart() {
            this.state = this.stack[0];
            this.stack.length = 0;
        }
        /// @internal
        sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (let i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        }
        /// Get the parser used by this stack.
        get parser() { return this.p.parser; }
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
        shiftContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        reduceContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        /// @internal
        emitContext() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -3)
                this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
        }
        /// @internal
        emitLookAhead() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -4)
                this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
        }
        updateContext(context) {
            if (context != this.curContext.context) {
                let newCx = new StackContext(this.curContext.tracker, context);
                if (newCx.hash != this.curContext.hash)
                    this.emitContext();
                this.curContext = newCx;
            }
        }
        /// @internal
        setLookAhead(lookAhead) {
            if (lookAhead > this.lookAhead) {
                this.emitLookAhead();
                this.lookAhead = lookAhead;
            }
        }
        /// @internal
        close() {
            if (this.curContext && this.curContext.tracker.strict)
                this.emitContext();
            if (this.lookAhead > 0)
                this.emitLookAhead();
        }
    }
    class StackContext {
        constructor(tracker, context) {
            this.tracker = tracker;
            this.context = context;
            this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
    }
    var Recover;
    (function (Recover) {
        Recover[Recover["Insert"] = 200] = "Insert";
        Recover[Recover["Delete"] = 190] = "Delete";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
        Recover[Recover["MinBigReduction"] = 2000] = "MinBigReduction";
    })(Recover || (Recover = {}));
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    class SimulatedStack {
        constructor(start) {
            this.start = start;
            this.state = start.state;
            this.stack = start.stack;
            this.base = this.stack.length;
        }
        reduce(action) {
            let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
            if (depth == 0) {
                if (this.stack == this.start.stack)
                    this.stack = this.stack.slice();
                this.stack.push(this.state, 0, 0);
                this.base += 3;
            }
            else {
                this.base -= (depth - 1) * 3;
            }
            let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
            this.state = goto;
        }
    }
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    class StackBufferCursor {
        constructor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
            return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
            let next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        }
        fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
            return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length;) {
            let value = 0;
            for (;;) {
                let next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* Encode.BigValCode */) {
                    value = 65535 /* Encode.BigVal */;
                    break;
                }
                if (next >= 92 /* Encode.Gap2 */)
                    next--;
                if (next >= 34 /* Encode.Gap1 */)
                    next--;
                let digit = next - 32 /* Encode.Start */;
                if (digit >= 46 /* Encode.Base */) {
                    digit -= 46 /* Encode.Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Encode.Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    class CachedToken {
        constructor() {
            this.start = -1;
            this.value = -1;
            this.end = -1;
            this.extended = -1;
            this.lookAhead = 0;
            this.mask = 0;
            this.context = 0;
        }
    }
    const nullToken = new CachedToken;
    /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
    /// through this interface. It presents the input as a stream of
    /// characters, tracking lookahead and hiding the complexity of
    /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
    class InputStream {
        /// @internal
        constructor(
        /// @internal
        input, 
        /// @internal
        ranges) {
            this.input = input;
            this.ranges = ranges;
            /// @internal
            this.chunk = "";
            /// @internal
            this.chunkOff = 0;
            /// Backup chunk
            this.chunk2 = "";
            this.chunk2Pos = 0;
            /// The character code of the next code unit in the input, or -1
            /// when the stream is at the end of the input.
            this.next = -1;
            /// @internal
            this.token = nullToken;
            this.rangeIndex = 0;
            this.pos = this.chunkPos = ranges[0].from;
            this.range = ranges[0];
            this.end = ranges[ranges.length - 1].to;
            this.readNext();
        }
        /// @internal
        resolveOffset(offset, assoc) {
            let range = this.range, index = this.rangeIndex;
            let pos = this.pos + offset;
            while (pos < range.from) {
                if (!index)
                    return null;
                let next = this.ranges[--index];
                pos -= range.from - next.to;
                range = next;
            }
            while (assoc < 0 ? pos > range.to : pos >= range.to) {
                if (index == this.ranges.length - 1)
                    return null;
                let next = this.ranges[++index];
                pos += next.from - range.to;
                range = next;
            }
            return pos;
        }
        /// @internal
        clipPos(pos) {
            if (pos >= this.range.from && pos < this.range.to)
                return pos;
            for (let range of this.ranges)
                if (range.to > pos)
                    return Math.max(pos, range.from);
            return this.end;
        }
        /// Look at a code unit near the stream position. `.peek(0)` equals
        /// `.next`, `.peek(-1)` gives you the previous character, and so
        /// on.
        ///
        /// Note that looking around during tokenizing creates dependencies
        /// on potentially far-away content, which may reduce the
        /// effectiveness incremental parsing—when looking forward—or even
        /// cause invalid reparses when looking backward more than 25 code
        /// units, since the library does not track lookbehind.
        peek(offset) {
            let idx = this.chunkOff + offset, pos, result;
            if (idx >= 0 && idx < this.chunk.length) {
                pos = this.pos + offset;
                result = this.chunk.charCodeAt(idx);
            }
            else {
                let resolved = this.resolveOffset(offset, 1);
                if (resolved == null)
                    return -1;
                pos = resolved;
                if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                    result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
                }
                else {
                    let i = this.rangeIndex, range = this.range;
                    while (range.to <= pos)
                        range = this.ranges[++i];
                    this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                    if (pos + this.chunk2.length > range.to)
                        this.chunk2 = this.chunk2.slice(0, range.to - pos);
                    result = this.chunk2.charCodeAt(0);
                }
            }
            if (pos >= this.token.lookAhead)
                this.token.lookAhead = pos + 1;
            return result;
        }
        /// Accept a token. By default, the end of the token is set to the
        /// current stream position, but you can pass an offset (relative to
        /// the stream position) to change that.
        acceptToken(token, endOffset = 0) {
            let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
            if (end == null || end < this.token.start)
                throw new RangeError("Token end out of bounds");
            this.token.value = token;
            this.token.end = end;
        }
        getChunk() {
            if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
                let { chunk, chunkPos } = this;
                this.chunk = this.chunk2;
                this.chunkPos = this.chunk2Pos;
                this.chunk2 = chunk;
                this.chunk2Pos = chunkPos;
                this.chunkOff = this.pos - this.chunkPos;
            }
            else {
                this.chunk2 = this.chunk;
                this.chunk2Pos = this.chunkPos;
                let nextChunk = this.input.chunk(this.pos);
                let end = this.pos + nextChunk.length;
                this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
                this.chunkPos = this.pos;
                this.chunkOff = 0;
            }
        }
        readNext() {
            if (this.chunkOff >= this.chunk.length) {
                this.getChunk();
                if (this.chunkOff == this.chunk.length)
                    return this.next = -1;
            }
            return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        /// Move the stream forward N (defaults to 1) code units. Returns
        /// the new value of [`next`](#lr.InputStream.next).
        advance(n = 1) {
            this.chunkOff += n;
            while (this.pos + n >= this.range.to) {
                if (this.rangeIndex == this.ranges.length - 1)
                    return this.setDone();
                n -= this.range.to - this.pos;
                this.range = this.ranges[++this.rangeIndex];
                this.pos = this.range.from;
            }
            this.pos += n;
            if (this.pos >= this.token.lookAhead)
                this.token.lookAhead = this.pos + 1;
            return this.readNext();
        }
        setDone() {
            this.pos = this.chunkPos = this.end;
            this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
            this.chunk = "";
            return this.next = -1;
        }
        /// @internal
        reset(pos, token) {
            if (token) {
                this.token = token;
                token.start = pos;
                token.lookAhead = pos + 1;
                token.value = token.extended = -1;
            }
            else {
                this.token = nullToken;
            }
            if (this.pos != pos) {
                this.pos = pos;
                if (pos == this.end) {
                    this.setDone();
                    return this;
                }
                while (pos < this.range.from)
                    this.range = this.ranges[--this.rangeIndex];
                while (pos >= this.range.to)
                    this.range = this.ranges[++this.rangeIndex];
                if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                    this.chunkOff = pos - this.chunkPos;
                }
                else {
                    this.chunk = "";
                    this.chunkOff = 0;
                }
                this.readNext();
            }
            return this;
        }
        /// @internal
        read(from, to) {
            if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
                return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
            if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
                return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
            if (from >= this.range.from && to <= this.range.to)
                return this.input.read(from, to);
            let result = "";
            for (let r of this.ranges) {
                if (r.from >= to)
                    break;
                if (r.to > from)
                    result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
            }
            return result;
        }
    }
    /// @internal
    class TokenGroup {
        constructor(data, id) {
            this.data = data;
            this.id = id;
        }
        token(input, stack) {
            let { parser } = stack.p;
            readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
        }
    }
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /// `@external tokens` declarations in the grammar should resolve to
    /// an instance of this class.
    class ExternalTokenizer {
        /// Create a tokenizer. The first argument is the function that,
        /// given an input stream, scans for the types of tokens it
        /// recognizes at the stream's position, and calls
        /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
        /// one.
        constructor(
        /// @internal
        token, options = {}) {
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
    }
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `input.token` when it matches a token.
    function readToken(data, input, stack, group, precTable, precOffset) {
        let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
        scan: for (;;) {
            if ((groupMask & data[state]) == 0)
                break;
            let accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (let i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    let term = data[i];
                    if (dialect.allows(term) &&
                        (input.token.value == -1 || input.token.value == term ||
                            overrides(term, input.token.value, precTable, precOffset))) {
                        input.acceptToken(term);
                        break;
                    }
                }
            let next = input.next, low = 0, high = data[state + 2];
            // Special case for EOF
            if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
                state = data[accEnd + high * 3 - 1];
                continue scan;
            }
            // Do a binary search on the state's edges
            for (; low < high;) {
                let mid = (low + high) >> 1;
                let index = accEnd + mid + (mid << 1);
                let from = data[index], to = data[index + 1] || 0x10000;
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    input.advance();
                    continue scan;
                }
            }
            break;
        }
    }
    function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function overrides(token, prev, tableData, tableOffset) {
        let iPrev = findOffset(tableData, tableOffset, prev);
        return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
    }

    // Environment variable used to control console output
    const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
    let stackIDs = null;
    var Safety;
    (function (Safety) {
        Safety[Safety["Margin"] = 25] = "Margin";
    })(Safety || (Safety = {}));
    function cutAt(tree, pos, side) {
        let cursor = tree.cursor(IterMode.IncludeAnonymous);
        cursor.moveTo(pos);
        for (;;) {
            if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                for (;;) {
                    if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))
                            : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));
                    if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                        break;
                    if (!cursor.parent())
                        return side < 0 ? 0 : tree.length;
                }
        }
    }
    let FragmentCursor$1 = class FragmentCursor {
        constructor(fragments, nodeSet) {
            this.fragments = fragments;
            this.nodeSet = nodeSet;
            this.i = 0;
            this.fragment = null;
            this.safeFrom = -1;
            this.safeTo = -1;
            this.trees = [];
            this.start = [];
            this.index = [];
            this.nextFragment();
        }
        nextFragment() {
            let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
            if (fr) {
                this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                while (this.trees.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                }
                this.trees.push(fr.tree);
                this.start.push(-fr.offset);
                this.index.push(0);
                this.nextStart = this.safeFrom;
            }
            else {
                this.nextStart = 1e9;
            }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
            if (pos < this.nextStart)
                return null;
            while (this.fragment && this.safeTo <= pos)
                this.nextFragment();
            if (!this.fragment)
                return null;
            for (;;) {
                let last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextFragment();
                    return null;
                }
                let top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                let next = top.children[index];
                let start = this.start[last] + top.positions[index];
                if (start > pos) {
                    this.nextStart = start;
                    return null;
                }
                if (next instanceof Tree) {
                    if (start == pos) {
                        if (start < this.safeFrom)
                            return null;
                        let end = start + next.length;
                        if (end <= this.safeTo) {
                            let lookAhead = next.prop(NodeProp.lookAhead);
                            if (!lookAhead || end + lookAhead < this.fragment.to)
                                return next;
                        }
                    }
                    this.index[last]++;
                    if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
                else {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
            }
        }
    };
    class TokenCache {
        constructor(parser, stream) {
            this.stream = stream;
            this.tokens = [];
            this.mainToken = null;
            this.actions = [];
            this.tokens = parser.tokenizers.map(_ => new CachedToken);
        }
        getActions(stack) {
            let actionIndex = 0;
            let main = null;
            let { parser } = stack.p, { tokenizers } = parser;
            let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
            let context = stack.curContext ? stack.curContext.hash : 0;
            let lookAhead = 0;
            for (let i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                let tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                    this.updateCachedToken(token, tokenizer, stack);
                    token.mask = mask;
                    token.context = context;
                }
                if (token.lookAhead > token.end + 25 /* Safety.Margin */)
                    lookAhead = Math.max(token.lookAhead, lookAhead);
                if (token.value != 0 /* Term.Err */) {
                    let startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (lookAhead)
                stack.setLookAhead(lookAhead);
            if (!main && stack.pos == this.stream.end) {
                main = new CachedToken;
                main.value = stack.p.parser.eofTerm;
                main.start = main.end = stack.pos;
                actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
            }
            this.mainToken = main;
            return this.actions;
        }
        getMainToken(stack) {
            if (this.mainToken)
                return this.mainToken;
            let main = new CachedToken, { pos, p } = stack;
            main.start = pos;
            main.end = Math.min(pos + 1, p.stream.end);
            main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
            return main;
        }
        updateCachedToken(token, tokenizer, stack) {
            let start = this.stream.clipPos(stack.pos);
            tokenizer.token(this.stream.reset(start, token), stack);
            if (token.value > -1) {
                let { parser } = stack.p;
                for (let i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize.Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else {
                token.value = 0 /* Term.Err */;
                token.end = this.stream.clipPos(start + 1);
            }
        }
        putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (let i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        }
        addActions(stack, token, end, index) {
            let { state } = stack, { parser } = stack.p, { data } = parser;
            for (let set = 0; set < 2; set++) {
                for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                    if (data[i] == 65535 /* Seq.End */) {
                        if (data[i + 1] == 1 /* Seq.Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                                index = this.putAction(pair(data, i + 2), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        }
    }
    var Rec;
    (function (Rec) {
        Rec[Rec["Distance"] = 5] = "Distance";
        Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        // When two stacks have been running independently long enough to
        // add this many elements to their buffers, prune one.
        Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
        Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
        // Once a stack reaches this depth (in .stack.length) force-reduce
        // it back to CutTo to avoid creating trees that overflow the stack
        // on recursive traversal.
        Rec[Rec["CutDepth"] = 15000] = "CutDepth";
        Rec[Rec["CutTo"] = 9000] = "CutTo";
        Rec[Rec["MaxLeftAssociativeReductionCount"] = 300] = "MaxLeftAssociativeReductionCount";
        // The maximum number of non-recovering stacks to explore (to avoid
        // getting bogged down with exponentially multiplying stacks in
        // ambiguous content)
        Rec[Rec["MaxStackCount"] = 12] = "MaxStackCount";
    })(Rec || (Rec = {}));
    class Parse {
        constructor(parser, input, fragments, ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.recovering = 0;
            this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
            this.minStackPos = 0;
            this.reused = [];
            this.stoppedAt = null;
            this.lastBigReductionStart = -1;
            this.lastBigReductionSize = 0;
            this.bigReductionCount = 0;
            this.stream = new InputStream(input, ranges);
            this.tokens = new TokenCache(parser, this.stream);
            this.topTerm = parser.top[1];
            let { from } = ranges[0];
            this.stacks = [Stack.start(this, parser.top[0], from)];
            this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
                ? new FragmentCursor$1(fragments, parser.nodeSet) : null;
        }
        get parsedPos() {
            return this.minStackPos;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
            let stacks = this.stacks, pos = this.minStackPos;
            // This will hold stacks beyond `pos`.
            let newStacks = this.stacks = [];
            let stopped, stoppedTokens;
            // If a large amount of reductions happened with the same start
            // position, force the stack out of that production in order to
            // avoid creating a tree too deep to recurse through.
            // (This is an ugly kludge, because unfortunately there is no
            // straightforward, cheap way to check for this happening, due to
            // the history of reductions only being available in an
            // expensive-to-access format in the stack buffers.)
            if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
                let [s] = stacks;
                while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
                this.bigReductionCount = this.lastBigReductionSize = 0;
            }
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i];
                for (;;) {
                    this.tokens.mainToken = null;
                    if (stack.pos > pos) {
                        newStacks.push(stack);
                    }
                    else if (this.advanceStack(stack, newStacks, stacks)) {
                        continue;
                    }
                    else {
                        if (!stopped) {
                            stopped = [];
                            stoppedTokens = [];
                        }
                        stopped.push(stack);
                        let tok = this.tokens.getMainToken(stack);
                        stoppedTokens.push(tok.value, tok.end);
                    }
                    break;
                }
            }
            if (!newStacks.length) {
                let finished = stopped && findFinished(stopped);
                if (finished)
                    return this.stackToTree(finished);
                if (this.parser.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = 5 /* Rec.Distance */;
            }
            if (this.recovering && stopped) {
                let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                    : this.runRecovery(stopped, stoppedTokens, newStacks);
                if (finished)
                    return this.stackToTree(finished.forceAll());
            }
            if (this.recovering) {
                let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
                if (newStacks.length > maxRemaining) {
                    newStacks.sort((a, b) => b.score - a.score);
                    while (newStacks.length > maxRemaining)
                        newStacks.pop();
                }
                if (newStacks.some(s => s.reducePos > pos))
                    this.recovering--;
            }
            else if (newStacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (let i = 0; i < newStacks.length - 1; i++) {
                    let stack = newStacks[i];
                    for (let j = i + 1; j < newStacks.length; j++) {
                        let other = newStacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                newStacks.splice(j--, 1);
                            }
                            else {
                                newStacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
                if (newStacks.length > 12 /* Rec.MaxStackCount */)
                    newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
            }
            this.minStackPos = newStacks[0].pos;
            for (let i = 1; i < newStacks.length; i++)
                if (newStacks[i].pos < this.minStackPos)
                    this.minStackPos = newStacks[i].pos;
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
            let start = stack.pos, { parser } = this;
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.stoppedAt != null && start > this.stoppedAt)
                return stack.forceReduce() ? stack : null;
            if (this.fragments) {
                let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                for (let cached = this.fragments.nodeAt(start); cached;) {
                    let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                        return true;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    let inner = cached.children[0];
                    if (inner instanceof Tree && cached.positions[0] == 0)
                        cached = inner;
                    else
                        break;
                }
            }
            let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
                return true;
            }
            if (stack.stack.length >= 15000 /* Rec.CutDepth */) {
                while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }
            }
            let actions = this.tokens.getActions(stack);
            for (let i = 0; i < actions.length;) {
                let action = actions[i++], term = actions[i++], end = actions[i++];
                let last = i == actions.length || !split;
                let localStack = last ? stack : stack.split();
                localStack.apply(action, term, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
                if (last)
                    return true;
                else if (localStack.pos > start)
                    stacks.push(localStack);
                else
                    split.push(localStack);
            }
            return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
            let pos = stack.pos;
            for (;;) {
                if (!this.advanceStack(stack, null, null))
                    return false;
                if (stack.pos > pos) {
                    pushStackDedup(stack, newStacks);
                    return true;
                }
            }
        }
        runRecovery(stacks, tokens, newStacks) {
            let finished = null, restarted = false;
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                let base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    let done = this.advanceFully(stack, newStacks);
                    if (done)
                        continue;
                }
                let force = stack.split(), forceBase = base;
                for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    let done = this.advanceFully(force, newStacks);
                    if (done)
                        break;
                    if (verbose)
                        forceBase = this.stackID(force) + " -> ";
                }
                for (let insert of stack.recoverByInsert(token)) {
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert, newStacks);
                }
                if (this.stream.end > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Term.Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                    pushStackDedup(stack, newStacks);
                }
                else if (!finished || finished.score < stack.score) {
                    finished = stack;
                }
            }
            return finished;
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack) {
            stack.close();
            return Tree.build({ buffer: StackBufferCursor.create(stack),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.ranges[0].from,
                length: stack.pos - this.ranges[0].from,
                minRepeatType: this.parser.minRepeatTerm });
        }
        stackID(stack) {
            let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        }
    }
    function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
            let other = newStacks[i];
            if (other.pos == stack.pos && other.sameState(stack)) {
                if (newStacks[i].score < stack.score)
                    newStacks[i] = stack;
                return;
            }
        }
        newStacks.push(stack);
    }
    class Dialect {
        constructor(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        allows(term) { return !this.disabled || this.disabled[term] == 0; }
    }
    const id = x => x;
    /// Context trackers are used to track stateful context (such as
    /// indentation in the Python grammar, or parent elements in the XML
    /// grammar) needed by external tokenizers. You declare them in a
    /// grammar file as `@context exportName from "module"`.
    ///
    /// Context values should be immutable, and can be updated (replaced)
    /// on shift or reduce actions.
    ///
    /// The export used in a `@context` declaration should be of this
    /// type.
    class ContextTracker {
        /// Define a context tracker.
        constructor(spec) {
            this.start = spec.start;
            this.shift = spec.shift || id;
            this.reduce = spec.reduce || id;
            this.reuse = spec.reuse || id;
            this.hash = spec.hash || (() => 0);
            this.strict = spec.strict !== false;
        }
    }
    /// Holds the parse tables for a given grammar, as generated by
    /// `lezer-generator`, and provides [methods](#common.Parser) to parse
    /// content with.
    class LRParser extends Parser$1 {
        /// @internal
        constructor(spec) {
            super();
            /// @internal
            this.wrappers = [];
            if (spec.version != 14 /* File.Version */)
                throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
            let nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (let i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
            let nodeProps = [];
            for (let i = 0; i < nodeNames.length; i++)
                nodeProps.push([]);
            function setProp(nodeID, prop, value) {
                nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
            }
            if (spec.nodeProps)
                for (let propSpec of spec.nodeProps) {
                    let prop = propSpec[0];
                    if (typeof prop == "string")
                        prop = NodeProp[prop];
                    for (let i = 1; i < propSpec.length;) {
                        let next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            let value = propSpec[i + -next];
                            for (let j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
                name: i >= this.minRepeatTerm ? undefined : name,
                id: i,
                props: nodeProps[i],
                top: topTerms.indexOf(i) > -1,
                error: i == 0,
                skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            })));
            if (spec.propSources)
                this.nodeSet = this.nodeSet.extend(...spec.propSources);
            this.strict = false;
            this.bufferLength = DefaultBufferLength;
            let tokenArray = decodeArray(spec.tokenData);
            this.context = spec.context;
            this.specializerSpecs = spec.specialized || [];
            this.specialized = new Uint16Array(this.specializerSpecs.length);
            for (let i = 0; i < this.specializerSpecs.length; i++)
                this.specialized[i] = this.specializerSpecs[i].term;
            this.specializers = this.specializerSpecs.map(getSpecializer);
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
            this.topRules = spec.topRules;
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.nodeSet.types.length - 1;
            this.dialect = this.parseDialect();
            this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
            let parse = new Parse(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /// Get a goto table entry @internal
        getGoto(state, term, loose = false) {
            let table = this.goto;
            if (term >= table[0])
                return -1;
            for (let pos = table[term + 1];;) {
                let groupTag = table[pos++], last = groupTag & 1;
                let target = table[pos++];
                if (last && loose)
                    return target;
                for (let end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        }
        /// Check if this state has an action for a given terminal @internal
        hasAction(state, terminal) {
            let data = this.data;
            for (let set = 0; set < 2; set++) {
                for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                    if ((next = data[i]) == 65535 /* Seq.End */) {
                        if (data[i + 1] == 1 /* Seq.Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Seq.Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Term.Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        }
        /// @internal
        stateSlot(state, slot) {
            return this.states[(state * 6 /* ParseState.Size */) + slot];
        }
        /// @internal
        stateFlag(state, flag) {
            return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
        }
        /// @internal
        validAction(state, action) {
            if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */))
                return true;
            for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
                if (this.data[i] == 65535 /* Seq.End */) {
                    if (this.data[i + 1] == 1 /* Seq.Next */)
                        i = pair(this.data, i + 2);
                    else
                        return false;
                }
                if (action == pair(this.data, i + 1))
                    return true;
            }
        }
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        nextStates(state) {
            let result = [];
            for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
                if (this.data[i] == 65535 /* Seq.End */) {
                    if (this.data[i + 1] == 1 /* Seq.Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                    let value = this.data[i + 1];
                    if (!result.some((v, i) => (i & 1) && v == value))
                        result.push(this.data[i], value);
                }
            }
            return result;
        }
        /// Configure the parser. Returns a new parser instance that has the
        /// given settings modified. Settings not provided in `config` are
        /// kept from the original parser.
        configure(config) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            let copy = Object.assign(Object.create(LRParser.prototype), this);
            if (config.props)
                copy.nodeSet = this.nodeSet.extend(...config.props);
            if (config.top) {
                let info = this.topRules[config.top];
                if (!info)
                    throw new RangeError(`Invalid top rule name ${config.top}`);
                copy.top = info;
            }
            if (config.tokenizers)
                copy.tokenizers = this.tokenizers.map(t => {
                    let found = config.tokenizers.find(r => r.from == t);
                    return found ? found.to : t;
                });
            if (config.specializers) {
                copy.specializers = this.specializers.slice();
                copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                    let found = config.specializers.find(r => r.from == s.external);
                    if (!found)
                        return s;
                    let spec = Object.assign(Object.assign({}, s), { external: found.to });
                    copy.specializers[i] = getSpecializer(spec);
                    return spec;
                });
            }
            if (config.contextTracker)
                copy.context = config.contextTracker;
            if (config.dialect)
                copy.dialect = this.parseDialect(config.dialect);
            if (config.strict != null)
                copy.strict = config.strict;
            if (config.wrap)
                copy.wrappers = copy.wrappers.concat(config.wrap);
            if (config.bufferLength != null)
                copy.bufferLength = config.bufferLength;
            return copy;
        }
        /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
        /// are registered for this parser.
        hasWrappers() {
            return this.wrappers.length > 0;
        }
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /// The eof term id is always allocated directly after the node
        /// types. @internal
        get eofTerm() { return this.maxNode + 1; }
        /// The type of top node produced by the parser.
        get topNode() { return this.nodeSet.types[this.top[1]]; }
        /// @internal
        dynamicPrecedence(term) {
            let prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        }
        /// @internal
        parseDialect(dialect) {
            let values = Object.keys(this.dialects), flags = values.map(() => false);
            if (dialect)
                for (let part of dialect.split(" ")) {
                    let id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            let disabled = null;
            for (let i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return new Dialect(dialect, flags, disabled);
        }
        /// Used by the output of the parser generator. Not available to
        /// user code. @hide
        static deserialize(spec) {
            return new LRParser(spec);
        }
    }
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
            let stopped = stack.p.stoppedAt;
            if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
                stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }
    function getSpecializer(spec) {
        if (spec.external) {
            let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
            return (value, stack) => (spec.external(value, stack) << 1) | mask;
        }
        return spec.get;
    }

    let nextTagID = 0;
    /**
    Highlighting tags are markers that denote a highlighting category.
    They are [associated](#highlight.styleTags) with parts of a syntax
    tree by a language mode, and then mapped to an actual CSS style by
    a [highlighter](#highlight.Highlighter).

    Because syntax tree node types and highlight styles have to be
    able to talk the same language, CodeMirror uses a mostly _closed_
    [vocabulary](#highlight.tags) of syntax tags (as opposed to
    traditional open string-based systems, which make it hard for
    highlighting themes to cover all the tokens produced by the
    various languages).

    It _is_ possible to [define](#highlight.Tag^define) your own
    highlighting tags for system-internal use (where you control both
    the language package and the highlighter), but such tags will not
    be picked up by regular highlighters (though you can derive them
    from standard tags to allow highlighters to fall back to those).
    */
    class Tag {
        /**
        @internal
        */
        constructor(
        /**
        The set of this tag and all its parent tags, starting with
        this one itself and sorted in order of decreasing specificity.
        */
        set, 
        /**
        The base unmodified tag that this one is based on, if it's
        modified @internal
        */
        base, 
        /**
        The modifiers applied to this.base @internal
        */
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /**
            @internal
            */
            this.id = nextTagID++;
        }
        /**
        Define a new tag. If `parent` is given, the tag is treated as a
        sub-tag of that parent, and
        [highlighters](#highlight.tagHighlighter) that don't mention
        this tag will try to fall back to the parent tag (or grandparent
        tag, etc).
        */
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /**
        Define a tag _modifier_, which is a function that, given a tag,
        will return a tag that is a subtag of the original. Applying the
        same modifier to a twice tag will return the same value (`m1(t1)
        == m1(t1)`) and applying multiple modifiers will, regardless or
        order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        
        When multiple modifiers are applied to a given base tag, each
        smaller set of modifiers is registered as a parent, so that for
        example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        `m1(m3(t1)`, and so on.
        */
        static defineModifier() {
            let mod = new Modifier;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor() {
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray$1(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = powerSet(mods);
            for (let parent of base.set)
                if (!parent.modified.length)
                    for (let config of configs)
                        set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray$1(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function powerSet(array) {
        let sets = [[]];
        for (let i = 0; i < array.length; i++) {
            for (let j = 0, e = sets.length; j < e; j++) {
                sets.push(sets[j].concat(array[i]));
            }
        }
        return sets.sort((a, b) => b.length - a.length);
    }
    /**
    This function is used to add a set of tags to a language syntax
    via [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.LRParser.configure).

    The argument object maps node selectors to [highlighting
    tags](#highlight.Tag) or arrays of tags.

    Node selectors may hold one or more (space-separated) node paths.
    Such a path can be a [node name](#common.NodeType.name), or
    multiple node names (or `*` wildcards) separated by slash
    characters, as in `"Block/Declaration/VariableName"`. Such a path
    matches the final node but only if its direct parent nodes are the
    other nodes mentioned. A `*` in such a path matches any parent,
    but only a single level—wildcards that match multiple parents
    aren't supported, both for efficiency reasons and because Lezer
    trees make it rather hard to reason about what they would match.)

    A path can be ended with `/...` to indicate that the tag assigned
    to the node should also apply to all child nodes, even if they
    match their own style (by default, only the innermost style is
    used).

    When a path ends in `!`, as in `Attribute!`, no further matching
    happens for the node's child nodes, and the entire node gets the
    given style.

    In this notation, node names that contain `/`, `!`, `*`, or `...`
    must be quoted as JSON strings.

    For example:

    ```javascript
    parser.withProps(
      styleTags({
        // Style Number and BigNumber nodes
        "Number BigNumber": tags.number,
        // Style Escape nodes whose parent is String
        "String/Escape": tags.escape,
        // Style anything inside Attributes nodes
        "Attributes!": tags.meta,
        // Add a style to all content inside Italic nodes
        "Italic/...": tags.emphasis,
        // Style InvalidString nodes as both `string` and `invalid`
        "InvalidString": [tags.string, tags.invalid],
        // Style the node named "/" as punctuation
        '"/"': tags.punctuation
      })
    )
    ```
    */
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        get opaque() { return this.mode == 0 /* Opaque */; }
        get inherit() { return this.mode == 1 /* Inherit */; }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    Rule.empty = new Rule([], 2 /* Normal */, null);
    /**
    Define a [highlighter](#highlight.Highlighter) from an array of
    tag/class pairs. Classes associated with more specific tags will
    take precedence.
    */
    function tagHighlighter(tags, options) {
        let map = Object.create(null);
        for (let style of tags) {
            if (!Array.isArray(style.tag))
                map[style.tag.id] = style.class;
            else
                for (let tag of style.tag)
                    map[tag.id] = style.class;
        }
        let { scope, all = null } = options || {};
        return {
            style: (tags) => {
                let cls = all;
                for (let tag of tags) {
                    for (let sub of tag.set) {
                        let tagClass = map[sub.id];
                        if (tagClass) {
                            cls = cls ? cls + " " + tagClass : tagClass;
                            break;
                        }
                    }
                }
                return cls;
            },
            scope
        };
    }
    function highlightTags(highlighters, tags) {
        let result = null;
        for (let highlighter of highlighters) {
            let value = highlighter.style(tags);
            if (value)
                result = result ? result + " " + value : value;
        }
        return result;
    }
    /**
    Highlight the given [tree](#common.Tree) with the given
    [highlighter](#highlight.Highlighter).
    */
    function highlightTree(tree, highlighter, 
    /**
    Assign styling to a region of the text. Will be called, in order
    of position, for any ranges where more than zero classes apply.
    `classes` is a space separated string of CSS classes.
    */
    putStyle, 
    /**
    The start of the range to highlight.
    */
    from = 0, 
    /**
    The end of the range.
    */
    to = tree.length) {
        let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
        builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
        builder.flush(to);
    }
    class HighlightBuilder {
        constructor(at, highlighters, span) {
            this.at = at;
            this.highlighters = highlighters;
            this.span = span;
            this.class = "";
        }
        startSpan(at, cls) {
            if (cls != this.class) {
                this.flush(at);
                if (at > this.at)
                    this.at = at;
                this.class = cls;
            }
        }
        flush(to) {
            if (to > this.at && this.class)
                this.span(this.at, to, this.class);
        }
        highlightRange(cursor, from, to, inheritedClass, highlighters) {
            let { type, from: start, to: end } = cursor;
            if (start >= to || end <= from)
                return;
            if (type.isTop)
                highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
            let cls = inheritedClass;
            let rule = getStyleTags(cursor) || Rule.empty;
            let tagCls = highlightTags(highlighters, rule.tags);
            if (tagCls) {
                if (cls)
                    cls += " ";
                cls += tagCls;
                if (rule.mode == 1 /* Inherit */)
                    inheritedClass += (inheritedClass ? " " : "") + tagCls;
            }
            this.startSpan(cursor.from, cls);
            if (rule.opaque)
                return;
            let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
            if (mounted && mounted.overlay) {
                let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
                let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
                let hasChild = cursor.firstChild();
                for (let i = 0, pos = start;; i++) {
                    let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                    let nextPos = next ? next.from + start : end;
                    let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                    if (rangeFrom < rangeTo && hasChild) {
                        while (cursor.from < rangeTo) {
                            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                            this.startSpan(Math.min(rangeTo, cursor.to), cls);
                            if (cursor.to >= nextPos || !cursor.nextSibling())
                                break;
                        }
                    }
                    if (!next || nextPos > to)
                        break;
                    pos = next.to + start;
                    if (pos > from) {
                        this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);
                        this.startSpan(pos, cls);
                    }
                }
                if (hasChild)
                    cursor.parent();
            }
            else if (cursor.firstChild()) {
                do {
                    if (cursor.to <= from)
                        continue;
                    if (cursor.from >= to)
                        break;
                    this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                    this.startSpan(Math.min(to, cursor.to), cls);
                } while (cursor.nextSibling());
                cursor.parent();
            }
        }
    }
    /**
    Match a syntax node's [highlight rules](#highlight.styleTags). If
    there's a match, return its set of tags, and whether it is
    opaque (uses a `!`) or applies to all child nodes (`/...`).
    */
    function getStyleTags(node) {
        let rule = node.type.prop(ruleNodeProp);
        while (rule && rule.context && !node.matchContext(rule.context))
            rule = rule.next;
        return rule || null;
    }
    const t$2 = Tag.define;
    const comment = t$2(), name$6 = t$2(), typeName = t$2(name$6), propertyName = t$2(name$6), literal = t$2(), string = t$2(literal), number = t$2(literal), content = t$2(), heading = t$2(content), keyword = t$2(), operator = t$2(), punctuation = t$2(), bracket = t$2(punctuation), meta = t$2();
    /**
    The default set of highlighting [tags](#highlight.Tag).

    This collection is heavily biased towards programming languages,
    and necessarily incomplete. A full ontology of syntactic
    constructs would fill a stack of books, and be impractical to
    write themes for. So try to make do with this set. If all else
    fails, [open an
    issue](https://github.com/codemirror/codemirror.next) to propose a
    new tag, or [define](#highlight.Tag^define) a local custom tag for
    your use case.

    Note that it is not obligatory to always attach the most specific
    tag possible to an element—if your grammar can't easily
    distinguish a certain type of element (such as a local variable),
    it is okay to style it as its more general variant (a variable).

    For tags that extend some parent tag, the documentation links to
    the parent.
    */
    const tags = {
        /**
        A comment.
        */
        comment,
        /**
        A line [comment](#highlight.tags.comment).
        */
        lineComment: t$2(comment),
        /**
        A block [comment](#highlight.tags.comment).
        */
        blockComment: t$2(comment),
        /**
        A documentation [comment](#highlight.tags.comment).
        */
        docComment: t$2(comment),
        /**
        Any kind of identifier.
        */
        name: name$6,
        /**
        The [name](#highlight.tags.name) of a variable.
        */
        variableName: t$2(name$6),
        /**
        A type [name](#highlight.tags.name).
        */
        typeName: typeName,
        /**
        A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        */
        tagName: t$2(typeName),
        /**
        A property or field [name](#highlight.tags.name).
        */
        propertyName: propertyName,
        /**
        An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
        */
        attributeName: t$2(propertyName),
        /**
        The [name](#highlight.tags.name) of a class.
        */
        className: t$2(name$6),
        /**
        A label [name](#highlight.tags.name).
        */
        labelName: t$2(name$6),
        /**
        A namespace [name](#highlight.tags.name).
        */
        namespace: t$2(name$6),
        /**
        The [name](#highlight.tags.name) of a macro.
        */
        macroName: t$2(name$6),
        /**
        A literal value.
        */
        literal,
        /**
        A string [literal](#highlight.tags.literal).
        */
        string,
        /**
        A documentation [string](#highlight.tags.string).
        */
        docString: t$2(string),
        /**
        A character literal (subtag of [string](#highlight.tags.string)).
        */
        character: t$2(string),
        /**
        An attribute value (subtag of [string](#highlight.tags.string)).
        */
        attributeValue: t$2(string),
        /**
        A number [literal](#highlight.tags.literal).
        */
        number,
        /**
        An integer [number](#highlight.tags.number) literal.
        */
        integer: t$2(number),
        /**
        A floating-point [number](#highlight.tags.number) literal.
        */
        float: t$2(number),
        /**
        A boolean [literal](#highlight.tags.literal).
        */
        bool: t$2(literal),
        /**
        Regular expression [literal](#highlight.tags.literal).
        */
        regexp: t$2(literal),
        /**
        An escape [literal](#highlight.tags.literal), for example a
        backslash escape in a string.
        */
        escape: t$2(literal),
        /**
        A color [literal](#highlight.tags.literal).
        */
        color: t$2(literal),
        /**
        A URL [literal](#highlight.tags.literal).
        */
        url: t$2(literal),
        /**
        A language keyword.
        */
        keyword,
        /**
        The [keyword](#highlight.tags.keyword) for the self or this
        object.
        */
        self: t$2(keyword),
        /**
        The [keyword](#highlight.tags.keyword) for null.
        */
        null: t$2(keyword),
        /**
        A [keyword](#highlight.tags.keyword) denoting some atomic value.
        */
        atom: t$2(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that represents a unit.
        */
        unit: t$2(keyword),
        /**
        A modifier [keyword](#highlight.tags.keyword).
        */
        modifier: t$2(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that acts as an operator.
        */
        operatorKeyword: t$2(keyword),
        /**
        A control-flow related [keyword](#highlight.tags.keyword).
        */
        controlKeyword: t$2(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that defines something.
        */
        definitionKeyword: t$2(keyword),
        /**
        A [keyword](#highlight.tags.keyword) related to defining or
        interfacing with modules.
        */
        moduleKeyword: t$2(keyword),
        /**
        An operator.
        */
        operator,
        /**
        An [operator](#highlight.tags.operator) that dereferences something.
        */
        derefOperator: t$2(operator),
        /**
        Arithmetic-related [operator](#highlight.tags.operator).
        */
        arithmeticOperator: t$2(operator),
        /**
        Logical [operator](#highlight.tags.operator).
        */
        logicOperator: t$2(operator),
        /**
        Bit [operator](#highlight.tags.operator).
        */
        bitwiseOperator: t$2(operator),
        /**
        Comparison [operator](#highlight.tags.operator).
        */
        compareOperator: t$2(operator),
        /**
        [Operator](#highlight.tags.operator) that updates its operand.
        */
        updateOperator: t$2(operator),
        /**
        [Operator](#highlight.tags.operator) that defines something.
        */
        definitionOperator: t$2(operator),
        /**
        Type-related [operator](#highlight.tags.operator).
        */
        typeOperator: t$2(operator),
        /**
        Control-flow [operator](#highlight.tags.operator).
        */
        controlOperator: t$2(operator),
        /**
        Program or markup punctuation.
        */
        punctuation,
        /**
        [Punctuation](#highlight.tags.punctuation) that separates
        things.
        */
        separator: t$2(punctuation),
        /**
        Bracket-style [punctuation](#highlight.tags.punctuation).
        */
        bracket,
        /**
        Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        tokens).
        */
        angleBracket: t$2(bracket),
        /**
        Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        tokens).
        */
        squareBracket: t$2(bracket),
        /**
        Parentheses (usually `(` and `)` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        paren: t$2(bracket),
        /**
        Braces (usually `{` and `}` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        brace: t$2(bracket),
        /**
        Content, for example plain text in XML or markup documents.
        */
        content,
        /**
        [Content](#highlight.tags.content) that represents a heading.
        */
        heading,
        /**
        A level 1 [heading](#highlight.tags.heading).
        */
        heading1: t$2(heading),
        /**
        A level 2 [heading](#highlight.tags.heading).
        */
        heading2: t$2(heading),
        /**
        A level 3 [heading](#highlight.tags.heading).
        */
        heading3: t$2(heading),
        /**
        A level 4 [heading](#highlight.tags.heading).
        */
        heading4: t$2(heading),
        /**
        A level 5 [heading](#highlight.tags.heading).
        */
        heading5: t$2(heading),
        /**
        A level 6 [heading](#highlight.tags.heading).
        */
        heading6: t$2(heading),
        /**
        A prose separator (such as a horizontal rule).
        */
        contentSeparator: t$2(content),
        /**
        [Content](#highlight.tags.content) that represents a list.
        */
        list: t$2(content),
        /**
        [Content](#highlight.tags.content) that represents a quote.
        */
        quote: t$2(content),
        /**
        [Content](#highlight.tags.content) that is emphasized.
        */
        emphasis: t$2(content),
        /**
        [Content](#highlight.tags.content) that is styled strong.
        */
        strong: t$2(content),
        /**
        [Content](#highlight.tags.content) that is part of a link.
        */
        link: t$2(content),
        /**
        [Content](#highlight.tags.content) that is styled as code or
        monospace.
        */
        monospace: t$2(content),
        /**
        [Content](#highlight.tags.content) that has a strike-through
        style.
        */
        strikethrough: t$2(content),
        /**
        Inserted text in a change-tracking format.
        */
        inserted: t$2(),
        /**
        Deleted text.
        */
        deleted: t$2(),
        /**
        Changed text.
        */
        changed: t$2(),
        /**
        An invalid or unsyntactic element.
        */
        invalid: t$2(),
        /**
        Metadata or meta-instruction.
        */
        meta,
        /**
        [Metadata](#highlight.tags.meta) that applies to the entire
        document.
        */
        documentMeta: t$2(meta),
        /**
        [Metadata](#highlight.tags.meta) that annotates or adds
        attributes to a given syntactic element.
        */
        annotation: t$2(meta),
        /**
        Processing instruction or preprocessor directive. Subtag of
        [meta](#highlight.tags.meta).
        */
        processingInstruction: t$2(meta),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that a
        given element is being defined. Expected to be used with the
        various [name](#highlight.tags.name) tags.
        */
        definition: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that
        something is constant. Mostly expected to be used with
        [variable names](#highlight.tags.variableName).
        */
        constant: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) used to indicate that
        a [variable](#highlight.tags.variableName) or [property
        name](#highlight.tags.propertyName) is being called or defined
        as a function.
        */
        function: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that can be applied to
        [names](#highlight.tags.name) to indicate that they belong to
        the language's standard environment.
        */
        standard: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates a given
        [names](#highlight.tags.name) is local to some scope.
        */
        local: Tag.defineModifier(),
        /**
        A generic variant [modifier](#highlight.Tag^defineModifier) that
        can be used to tag language-specific alternative variants of
        some common tag. It is recommended for themes to define special
        forms of at least the [string](#highlight.tags.string) and
        [variable name](#highlight.tags.variableName) tags, since those
        come up a lot.
        */
        special: Tag.defineModifier()
    };
    /**
    This is a highlighter that adds stable, predictable classes to
    tokens, for styling with external CSS.

    The following tags are mapped to their name prefixed with `"tok-"`
    (for example `"tok-comment"`):

    * [`link`](#highlight.tags.link)
    * [`heading`](#highlight.tags.heading)
    * [`emphasis`](#highlight.tags.emphasis)
    * [`strong`](#highlight.tags.strong)
    * [`keyword`](#highlight.tags.keyword)
    * [`atom`](#highlight.tags.atom)
    * [`bool`](#highlight.tags.bool)
    * [`url`](#highlight.tags.url)
    * [`labelName`](#highlight.tags.labelName)
    * [`inserted`](#highlight.tags.inserted)
    * [`deleted`](#highlight.tags.deleted)
    * [`literal`](#highlight.tags.literal)
    * [`string`](#highlight.tags.string)
    * [`number`](#highlight.tags.number)
    * [`variableName`](#highlight.tags.variableName)
    * [`typeName`](#highlight.tags.typeName)
    * [`namespace`](#highlight.tags.namespace)
    * [`className`](#highlight.tags.className)
    * [`macroName`](#highlight.tags.macroName)
    * [`propertyName`](#highlight.tags.propertyName)
    * [`operator`](#highlight.tags.operator)
    * [`comment`](#highlight.tags.comment)
    * [`meta`](#highlight.tags.meta)
    * [`punctuation`](#highlight.tags.punctuation)
    * [`invalid`](#highlight.tags.invalid)

    In addition, these mappings are provided:

    * [`regexp`](#highlight.tags.regexp),
      [`escape`](#highlight.tags.escape), and
      [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
      are mapped to `"tok-string2"`
    * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName2"`
    * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-local"`
    * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-definition"`
    * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
      to `"tok-propertyName tok-definition"`
    */
    tagHighlighter([
        { tag: tags.link, class: "tok-link" },
        { tag: tags.heading, class: "tok-heading" },
        { tag: tags.emphasis, class: "tok-emphasis" },
        { tag: tags.strong, class: "tok-strong" },
        { tag: tags.keyword, class: "tok-keyword" },
        { tag: tags.atom, class: "tok-atom" },
        { tag: tags.bool, class: "tok-bool" },
        { tag: tags.url, class: "tok-url" },
        { tag: tags.labelName, class: "tok-labelName" },
        { tag: tags.inserted, class: "tok-inserted" },
        { tag: tags.deleted, class: "tok-deleted" },
        { tag: tags.literal, class: "tok-literal" },
        { tag: tags.string, class: "tok-string" },
        { tag: tags.number, class: "tok-number" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
        { tag: tags.variableName, class: "tok-variableName" },
        { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
        { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
        { tag: tags.special(tags.variableName), class: "tok-variableName2" },
        { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
        { tag: tags.typeName, class: "tok-typeName" },
        { tag: tags.namespace, class: "tok-namespace" },
        { tag: tags.className, class: "tok-className" },
        { tag: tags.macroName, class: "tok-macroName" },
        { tag: tags.propertyName, class: "tok-propertyName" },
        { tag: tags.operator, class: "tok-operator" },
        { tag: tags.comment, class: "tok-comment" },
        { tag: tags.meta, class: "tok-meta" },
        { tag: tags.invalid, class: "tok-invalid" },
        { tag: tags.punctuation, class: "tok-punctuation" }
    ]);

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const propertyIdentifier$1 = 147,
      identifier$1 = 148,
      nameIdentifier$1 = 149,
      insertSemi$1 = 150,
      expression0$1 = 154,
      ForExpression$1 = 4,
      forExpressionStart$1 = 157,
      ForInExpression$1 = 7,
      Name$1 = 8,
      Identifier$1 = 9,
      AdditionalIdentifier$1 = 10,
      forExpressionBodyStart$1 = 165,
      IfExpression$1 = 18,
      ifExpressionStart$1 = 166,
      QuantifiedExpression$1 = 22,
      quantifiedExpressionStart$1 = 167,
      QuantifiedInExpression$1 = 26,
      PositiveUnaryTest$1 = 36,
      ArithmeticExpression$1 = 40,
      arithmeticPlusStart$1 = 171,
      arithmeticTimesStart$1 = 172,
      arithmeticExpStart$1 = 173,
      arithmeticUnaryStart$1 = 174,
      VariableName$1 = 47,
      PathExpression$1 = 67,
      pathExpressionStart$1 = 179,
      FilterExpression$1 = 69,
      filterExpressionStart$1 = 180,
      FunctionInvocation$1 = 71,
      functionInvocationStart$1 = 181,
      ParameterName$1 = 103,
      nil$1 = 186,
      NumericLiteral$1 = 106,
      StringLiteral$1 = 107,
      BooleanLiteral$1 = 108,
      FunctionDefinition$1 = 117,
      functionDefinitionStart$1 = 194,
      Context$2 = 124,
      contextStart$1 = 196,
      ContextEntry$1 = 125,
      PropertyName$1 = 127,
      PropertyIdentifier$1 = 128;

    const LOG_PARSE$1 = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);
    const LOG_PARSE_DEBUG$1 = typeof process != 'undefined' && process.env && /\fparse:dbg\b/.test(process.env.LOG);
    const LOG_VARS$1 = typeof process != 'undefined' && process.env && /\bcontext?\b/.test(process.env.LOG);

    const spaceChars$1 = [
      9, 11, 12, 32, 133, 160,
      5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198,
      8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288
    ];

    const newlineChars$1 = chars$3('\n\r');

    const additionalNameChars$1 = chars$3("'./-+*");

    /**
     * @param { string } str
     * @return { number[] }
     */
    function chars$3(str) {
      return Array.from(str).map(s => s.charCodeAt(0));
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isStartChar$1(ch) {
      return (
        ch === 63 // ?
      ) || (
        ch === 95 // _
      ) || (
        ch >= 65 && ch <= 90 // A-Z
      ) || (
        ch >= 97 && ch <= 122 // a-z
      ) || (
        ch >= 161 && !isPartChar$1(ch) && !isSpace$1(ch)
      );
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isAdditional$1(ch) {
      return additionalNameChars$1.includes(ch);
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isPartChar$1(ch) {
      return (
        ch >= 48 && ch <= 57 // 0-9
      ) || (
        ch === 0xB7
      ) || (
        ch >= 0x0300 && ch <= 0x036F
      ) || (
        ch >= 0x203F && ch <= 0x2040
      );
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isSpace$1(ch) {
      return spaceChars$1.includes(ch);
    }

    // eslint-disable-next-line
    function indent$1(str, spaces) {
      return spaces.concat(
        str.split(/\n/g).join('\n' + spaces)
      );
    }

    /**
     * @param { import('@lezer/lr').InputStream } input
     * @param  { number } [offset]
     * @param { boolean } [includeOperators]
     *
     * @return { { token: string, offset: number } | null }
     */
    function parseAdditionalSymbol$1(input, offset = 0) {

      const next = input.peek(offset);

      if (isAdditional$1(next)) {
        return {
          offset: 1,
          token: String.fromCharCode(next)
        };
      }

      return null;
    }

    /**
     * @param { import('@lezer/lr').InputStream } input
     * @param { number } [offset]
     * @param { boolean } [namePart]
     *
     * @return { { token: string, offset: number } | null }
     */
    function parseIdentifier$1(input, offset = 0, namePart = false) {
      for (let inside = false, chars = [], i = 0;; i++) {
        const next = input.peek(offset + i);

        if (isStartChar$1(next) || ((inside || namePart) && isPartChar$1(next))) {
          if (!inside) {
            inside = true;
          }

          chars.push(next);
        } else {

          if (chars.length) {
            return {
              token: String.fromCharCode(...chars),
              offset: i
            };
          }

          return null;
        }
      }
    }

    /**
     * @param { import('@lezer/lr').InputStream } input
     * @param  { number } offset
     *
     * @return { { token: string, offset: number } | null }
     */
    function parseSpaces$1(input, offset) {

      for (let inside = false, i = 0;; i++) {
        let next = input.peek(offset + i);

        if (isSpace$1(next)) {
          if (!inside) {
            inside = true;
          }
        } else {
          if (inside) {
            return {
              token: ' ',
              offset: i
            };
          }

          return null;
        }
      }
    }

    /**
     * Parse a name from the input and return the first match, if any.
     *
     * @param { import('@lezer/lr').InputStream } input
     * @param { Variables } variables
     *
     * @return { { token: string, offset: number, term: number } | null }
     */
    function parseName$2(input, variables) {
      const contextKeys = variables.contextKeys();

      const start = variables.tokens;

      for (let i = 0, tokens = [], nextMatch = null;;) {

        const namePart = (start.length + tokens.length) > 0;
        const maybeSpace = tokens.length > 0;

        const match = (
          parseIdentifier$1(input, i, namePart) ||
          namePart && parseAdditionalSymbol$1(input, i) ||
          maybeSpace && parseSpaces$1(input, i)
        );

        // match is required
        if (!match) {
          return nextMatch;
        }

        const {
          token,
          offset
        } = match;

        i += offset;

        if (token === ' ') {
          continue;
        }

        tokens = [ ...tokens, token ];

        const name = [ ...start, ...tokens ].join(' ');

        if (contextKeys.some(el => el === name)) {
          const token = tokens[0];

          nextMatch = {
            token,
            offset: token.length,
            term: nameIdentifier$1
          };
        }

        if (dateTimeIdentifiers$1.some(el => el === name)) {
          const token = tokens[0];

          // parse date time identifiers as normal
          // identifiers to allow specialization to kick in
          //
          // cf. https://github.com/nikku/lezer-feel/issues/8
          nextMatch = {
            token,
            offset: token.length,
            term: identifier$1
          };
        }

        if (
          !contextKeys.some(el => el.startsWith(name)) &&
          !dateTimeIdentifiers$1.some(el => el.startsWith(name))
        ) {
          return nextMatch;
        }
      }

    }

    const identifiersMap$1 = {
      [ identifier$1 ]: 'identifier',
      [ nameIdentifier$1 ]: 'nameIdentifier'
    };

    const identifiers$1 = new ExternalTokenizer((input, stack) => {

      LOG_PARSE_DEBUG$1 && console.log('%s: T <identifier | nameIdentifier>', input.pos);

      const nameMatch = parseName$2(input, stack.context);

      const start = stack.context.tokens;

      const match = nameMatch || parseIdentifier$1(input, 0, start.length > 0);

      if (match) {
        input.advance(match.offset);
        input.acceptToken(nameMatch ? nameMatch.term : identifier$1);

        LOG_PARSE$1 && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap$1[nameMatch.term] : 'identifier', match.token);
      }
    }, { contextual: true });


    const propertyIdentifiers$1 = new ExternalTokenizer((input, stack) => {

      LOG_PARSE_DEBUG$1 && console.log('%s: T <propertyIdentifier>', input.pos);

      const start = stack.context.tokens;

      const match = parseIdentifier$1(input, 0, start.length > 0);

      if (match) {
        input.advance(match.offset);
        input.acceptToken(propertyIdentifier$1);

        LOG_PARSE$1 && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
      }
    });


    const insertSemicolon$1 = new ExternalTokenizer((input, stack) => {

      LOG_PARSE_DEBUG$1 && console.log('%s: T <insertSemi>', input.pos);

      let offset;
      let insert = false;

      for (offset = 0;; offset++) {
        const char = input.peek(offset);

        if (spaceChars$1.includes(char)) {
          continue;
        }

        if (newlineChars$1.includes(char)) {
          insert = true;
        }

        break;
      }

      if (insert) {

        const identifier = parseIdentifier$1(input, offset + 1);
        const spaces = parseSpaces$1(input, offset + 1);

        if (spaces || identifier && /^(then|else|return|satisfies)$/.test(identifier.token)) {
          return;
        }

        LOG_PARSE$1 && console.log('%s: MATCH <insertSemi>', input.pos);
        input.acceptToken(insertSemi$1);
      }
    });

    const prefixedContextStarts$1 = {
      [ functionInvocationStart$1 ]: 'FunctionInvocation',
      [ filterExpressionStart$1 ]: 'FilterExpression',
      [ pathExpressionStart$1 ]: 'PathExpression'
    };

    const contextStarts$1 = {
      [ contextStart$1 ]: 'Context',
      [ functionDefinitionStart$1 ]: 'FunctionDefinition',
      [ forExpressionStart$1 ]: 'ForExpression',
      [ ifExpressionStart$1 ]: 'IfExpression',
      [ quantifiedExpressionStart$1 ]: 'QuantifiedExpression'
    };

    const contextEnds$1 = {
      [ Context$2 ]: 'Context',
      [ FunctionDefinition$1 ]: 'FunctionDefinition',
      [ ForExpression$1 ]: 'ForExpression',
      [ IfExpression$1 ]: 'IfExpression',
      [ QuantifiedExpression$1 ]: 'QuantifiedExpression',
      [ PathExpression$1 ]: 'PathExpression',
      [ FunctionInvocation$1 ]: 'FunctionInvocation',
      [ FilterExpression$1 ]: 'FilterExpression',
      [ ArithmeticExpression$1 ]: 'ArithmeticExpression'
    };

    let ValueProducer$1 = class ValueProducer {

      /**
       * @param { Function } fn
       */
      constructor(fn) {
        this.fn = fn;
      }

      get(variables) {
        return this.fn(variables);
      }

      /**
       * @param { Function }
       *
       * @return { ValueProducer }
       */
      static of(fn) {
        return new ValueProducer(fn);
      }

    };

    const dateTimeLiterals$1 = {
      'date and time': 1,
      'date': 1,
      'time': 1,
      'duration': 1
    };

    const dateTimeIdentifiers$1 = Object.keys(dateTimeLiterals$1);

    let Variables$1 = class Variables {

      constructor({
        name = 'Expressions',
        tokens = [],
        children = [],
        parent = null,
        context = { },
        value,
        raw
      } = {}) {
        this.name = name;
        this.tokens = tokens;
        this.children = children;
        this.parent = parent;
        this.context = context;
        this.value = value;
        this.raw = raw;
      }

      enterScope(name) {

        const childScope = this.of({
          name,
          parent: this
        });

        LOG_VARS$1 && console.log('[%s] enter', childScope.path, childScope.context);

        return childScope;
      }

      exitScope(str) {

        if (!this.parent) {
          LOG_VARS$1 && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent$1(str, '  '));

          return this;
        }

        LOG_VARS$1 && console.log('[%s] exit %o\n%s', this.path, this.context, indent$1(str, '  '));

        return this.parent.pushChild(this);
      }

      token(part) {

        LOG_VARS$1 && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);

        return this.assign({
          tokens: [ ...this.tokens, part ]
        });
      }

      literal(value) {

        LOG_VARS$1 && console.log('[%s] literal %o', this.path, value);

        return this.pushChild(this.of({
          name: 'Literal',
          value
        }));
      }

      /**
       * Return computed scope value
       *
       * @return {any}
       */
      computedValue() {
        for (let scope = this;;scope = scope.children.slice(-1)[0]) {

          if (!scope) {
            return null;
          }

          if (scope.value) {
            return scope.value;
          }
        }
      }

      contextKeys() {
        return Object.keys(this.context).map(normalizeContextKey$1);
      }

      get path() {
        return this.parent?.path?.concat(' > ', this.name) || this.name;
      }

      /**
       * Return value of variable.
       *
       * @param { string } variable
       * @return { any } value
       */
      get(variable) {

        const names = [ variable, variable && normalizeContextKey$1(variable) ];

        const contextKey = Object.keys(this.context).find(
          key => names.includes(normalizeContextKey$1(key))
        );

        if (typeof contextKey === 'undefined') {
          return undefined;
        }

        const val = this.context[contextKey];

        if (val instanceof ValueProducer$1) {
          return val.get(this);
        } else {
          return val;
        }
      }

      resolveName() {

        const variable = this.tokens.join(' ');
        const tokens = [];

        const parentScope = this.assign({
          tokens
        });

        const variableScope = this.of({
          name: 'VariableName',
          parent: parentScope,
          value: this.get(variable),
          raw: variable
        });

        LOG_VARS$1 && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));

        return parentScope.pushChild(variableScope);
      }

      pushChild(child) {

        if (!child) {
          return this;
        }

        const parent = this.assign({
          children: [ ...this.children, child ]
        });

        child.parent = parent;

        return parent;
      }

      pushChildren(children) {

        let parent = this;

        for (const child of children) {
          parent = parent.pushChild(child);
        }

        return parent;
      }

      declareName() {

        if (this.tokens.length === 0) {
          throw Error('no tokens to declare name');
        }

        const variableName = this.tokens.join(' ');

        LOG_VARS$1 && console.log('[%s] declareName <%s>', this.path, variableName);

        return this.assign({
          tokens: []
        }).pushChild(
          this.of({
            name: 'Name',
            value: variableName
          })
        );
      }

      define(name, value) {

        if (typeof name !== 'string') {
          LOG_VARS$1 && console.log('[%s] no define <%s=%s>', this.path, name, value);

          return this;
        }

        LOG_VARS$1 && console.log('[%s] define <%s=%s>', this.path, name, value);

        const context = {
          ...this.context,
          [name]: value
        };

        return this.assign({
          context
        });
      }

      /**
       * @param { Record<string, any> } [options]
       *
       * @return { Variables }
       */
      assign(options = {}) {

        return Variables.of({
          ...this,
          ...options
        });
      }

      /**
       * @param { Record<string, any> } [options]
       *
       * @return { Variables }
       */
      of(options = {}) {

        const defaultOptions = {
          context: this.context,
          parent: this.parent
        };

        return Variables.of({
          ...defaultOptions,
          ...options
        });
      }

      static of(options) {
        const {
          name,
          tokens = [],
          children = [],
          parent = null,
          context = {},
          value,
          raw
        } = options;

        return new Variables({
          name,
          tokens: [ ...tokens ],
          children: [ ...children ],
          context: {
            ...context
          },
          parent,
          value,
          raw
        });
      }

    };

    /**
     * @param { string } name
     *
     * @return { string } normalizedName
     */
    function normalizeContextKey$1(name) {
      return name.replace(/\s*([./\-'+*])\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
    }

    /**
     * Wrap children of variables under the given named child.
     *
     * @param { Variables } variables
     * @param { string } name
     * @param { string } code
     * @return { Variables }
     */
    function wrap$1(variables, scopeName, code) {

      const parts = variables.children.filter(c => c.name !== scopeName);
      const children = variables.children.filter(c => c.name === scopeName);

      const namePart = parts[0];
      const valuePart = parts[Math.max(1, parts.length - 1)];

      const name = namePart.computedValue();
      const value = valuePart?.computedValue() || null;

      return variables
        .assign({
          children
        })
        .enterScope(scopeName)
        .pushChildren(parts)
        .exitScope(code)
        .define(name, value);
    }

    /**
     * @param { any } context
     *
     * @return { ContextTracker<Variables> }
     */
    function trackVariables$1(context = {}) {

      const start = Variables$1.of({
        context
      });

      return new ContextTracker({
        start,
        reduce(variables, term, stack, input) {

          if (term === Context$2) {
            variables = variables.assign({
              value: variables.context
            });
          }

          if (term === IfExpression$1) {
            const [ thenPart, elsePart ] = variables.children.slice(-2);

            variables = variables.assign({
              value: {
                ...thenPart?.computedValue(),
                ...elsePart?.computedValue()
              }
            });
          }

          if (term === FilterExpression$1) {
            const [ sourcePart, _ ] = variables.children.slice(-2);

            variables = variables.assign({
              value: sourcePart?.computedValue()
            });
          }

          if (term === FunctionInvocation$1) {

            const [
              name,
              ...args
            ] = variables.children;

            // preserve type information through `get value(context, key)` utility
            if (name?.raw === 'get value') {
              variables = getContextValue$1(variables, args);
            }
          }

          const start = contextStarts$1[term];

          if (start) {
            return variables.enterScope(start);
          }

          const prefixedStart = prefixedContextStarts$1[term];

          // pull <expression> into new <prefixedStart> context
          if (prefixedStart) {

            const children = variables.children.slice(0, -1);
            const lastChild = variables.children.slice(-1)[0];

            return variables.assign({
              children
            }).enterScope(prefixedStart).pushChild(lastChild).assign({
              context: {
                ...variables.context,
                ...lastChild?.computedValue()
              }
            });
          }

          const code = input.read(input.pos, stack.pos);

          const end = contextEnds$1[term];

          if (end) {
            return variables.exitScope(code);
          }

          if (term === ContextEntry$1) {
            return wrap$1(variables, 'ContextEntry', code);
          }

          if (
            term === ForInExpression$1 ||
            term === QuantifiedInExpression$1
          ) {
            return wrap$1(variables, 'InExpression', code);
          }

          // define <partial> within ForExpression body
          if (term === forExpressionBodyStart$1) {

            return variables.define(
              'partial',
              ValueProducer$1.of(variables => {
                return variables.children[variables.children.length - 1]?.computedValue();
              })
            );
          }

          if (
            term === ParameterName$1
          ) {
            const [ left ] = variables.children.slice(-1);

            const name = left.computedValue();

            // TODO: attach type information
            return variables.define(name, 1);
          }

          // pull <expression> into ArithmeticExpression child
          if (
            term === arithmeticPlusStart$1 ||
            term === arithmeticTimesStart$1 ||
            term === arithmeticExpStart$1
          ) {
            const children = variables.children.slice(0, -1);
            const lastChild = variables.children.slice(-1)[0];

            return variables.assign({
              children
            }).enterScope('ArithmeticExpression').pushChild(lastChild);
          }

          if (term === arithmeticUnaryStart$1) {
            return variables.enterScope('ArithmeticExpression');
          }

          if (
            term === Identifier$1 ||
            term === AdditionalIdentifier$1 ||
            term === PropertyIdentifier$1
          ) {
            return variables.token(code);
          }

          if (
            term === StringLiteral$1
          ) {
            return variables.literal(code.replace(/^"|"$/g, ''));
          }

          if (term === BooleanLiteral$1) {
            return variables.literal(code === 'true' ? true : false);
          }

          if (term === NumericLiteral$1) {
            return variables.literal(parseFloat(code));
          }

          if (term === nil$1) {
            return variables.literal(null);
          }

          if (
            term === VariableName$1
          ) {
            return variables.resolveName();
          }

          if (
            term === Name$1 ||
            term === PropertyName$1
          ) {
            return variables.declareName();
          }

          if (
            term === expression0$1 ||
            term === PositiveUnaryTest$1
          ) {
            if (variables.tokens.length > 0) {
              throw new Error('uncleared name');
            }
          }

          if (term === expression0$1) {

            let parent = variables;

            while (parent.parent) {
              parent = parent.exitScope(code);
            }

            return parent;
          }

          return variables;
        }
      });
    }

    const variableTracker$1 = trackVariables$1({});


    // helpers //////////////

    function getContextValue$1(variables, args) {

      if (!args.length) {
        return variables.assign({
          value: null
        });
      }

      if (args[0].name === 'Name') {
        args = extractNamedArgs$1(args, [ 'm', 'key' ]);
      }

      if (args.length !== 2) {
        return variables.assign({
          value: null
        });
      }

      const [
        context,
        key
      ] = args;

      const keyValue = key?.computedValue();
      const contextValue = context?.computedValue();

      if (
        (!contextValue || typeof contextValue !== 'object') || typeof keyValue !== 'string'
      ) {
        return variables.assign({
          value: null
        });
      }

      return variables.assign({
        value: [ normalizeContextKey$1(keyValue), keyValue ].reduce((value, keyValue) => {
          if (keyValue in contextValue) {
            return contextValue[keyValue];
          }

          return value;
        }, null)
      });
    }

    function extractNamedArgs$1(args, argNames) {

      const context = {};

      for (let i = 0; i < args.length; i += 2) {
        const [ name, value ] = args.slice(i, i + 2);

        context[name.value] = value;
      }

      return argNames.map(name => context[name]);
    }

    const feelHighlighting$1 = styleTags({
      'StringLiteral': tags.string,
      'NumericLiteral': tags.number,
      'BooleanLiteral': tags.bool,
      'Name QualifiedName': tags.name,
      'CompareOp': tags.compareOperator,
      'ArithOp': tags.arithmeticOperator,
      'PropertyName PathExpression/Name Key': tags.propertyName,
      'for if then else some every satisfies between': tags.controlKeyword,
      'in return instance of and or': tags.operatorKeyword,
      'function': tags.definitionKeyword,
      'FormalParameter/Type!': tags.typeName,
      'as': tags.keyword,
      'Wildcard': tags.special,
      'null': tags.null,
      ',': tags.separator,
      '[ ]': tags.squareBracket,
      '{ }': tags.brace,
      '( )': tags.paren,
      'LineComment': tags.lineComment,
      'BlockComment': tags.blockComment,
      'ParameterName VariableName ?': tags.variableName,
      'DateTimeConstructor! SpecialFunctionName BuiltInFunctionName': tags.function(tags.special(tags.variableName)),
      'FunctionInvocation/VariableName': tags.function(tags.variableName),
      'List Interval': tags.list,
      'BuiltInType ListType ContextType FunctionType': tags.function(tags.typeName),
      'Context': tags.definition(tags.literal),
      'ContextEntry/Key': tags.variableName,
      'InExpression/Name': tags.local(tags.variableName),
      'ParameterName/Name': tags.local(tags.variableName),
      'IterationContext/".." Interval/".." "."': tags.punctuation
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$1 = {__proto__:null,for:10, in:30, return:34, if:38, then:40, else:42, some:46, every:48, satisfies:55, or:58, and:62, between:70, instance:86, of:89, days:99, time:101, duration:103, years:105, months:107, date:109, list:115, context:121, function:128, string:147, length:149, upper:151, case:153, lower:155, substring:157, before:159, after:161, starts:163, with:165, ends:167, contains:169, insert:171, index:173, distinct:175, values:177, met:179, by:181, overlaps:183, finished:185, started:187, day:189, year:191, week:193, month:195, get:197, value:199, entries:201, null:210, true:380, false:380, "?":224, external:240, not:263};
    const parser$2 = LRParser.deserialize({
      version: 14,
      states: "!&nO`QYOOO&wQYOOOOQU'#Ce'#CeO'RQYO'#C`O([Q^O'#FlOOQQ'#GQ'#GQO*|QYO'#GQO`QYO'#DUOOQU'#FZ'#FZO-rQ^O'#D]OOQO'#GX'#GXO1yQWO'#DuOOQU'#Ej'#EjOOQU'#Ek'#EkOOQU'#El'#ElO2OOWO'#EoO1yQWO'#EmOOQU'#Em'#EmOOQU'#G_'#G_OOQU'#G]'#G]O2TQYO'#ErO`QYO'#EsO2uQYO'#EtO2TQYO'#EqOOQU'#Eq'#EqOOQU'#Fn'#FnO4ZQ^O'#FnO6uQWO'#EuOOQP'#Gh'#GhO6zQXO'#E|OOQU'#Ge'#GeOOQU'#Fm'#FmOOQQ'#FU'#FUQ`QYOOOOQQ'#Fo'#FoOOQQ'#Fx'#FxO`QYO'#CnOOQQ'#Fy'#FyO'RQYO'#CrO7VQYO'#DvO7[QYO'#DvO7aQYO'#DvO7fQYO'#DvO7nQYO'#DvO7sQYO'#DvO7xQYO'#DvO7}QYO'#DvO8SQYO'#DvO8XQYO'#DvO8^QYO'#DvO8cQYO'#DvO8hQYO'#DvOOQU'#G^'#G^O8pQYO'#EnOOQO'#En'#EnOOQO'#Gf'#GfO:SQYO'#DQO:jQWO'#F|OOQO'#DS'#DSO:uQYO'#GQQOQWOOO:|QWOOO;pQYO'#CdO;}QYO'#FqOOQQ'#Cc'#CcO<SQYO'#FpOOQQ'#Cb'#CbO<[QYO,58zO`QYO,59hOOQQ'#F}'#F}OOQQ'#GO'#GOOOQQ'#GP'#GPO`QYO,59pO`QYO,59pO`QYO,59pOOQQ'#GV'#GVO'RQYO,5:]OOQQ'#GW'#GWO`QYO,5:_OOQQ,5<W,5<WO`QYO,59dO`QYO,59fO`QYO,59hO<aQYO,59hO?VQYO,59rOOQU,5;U,5;UO?[Q^O,59pOOQU-E9X-E9XOCcQYO'#GYOOQU,5:a,5:aOOQU,5;Z,5;ZOOQU,5;X,5;XOCjQ^O'#D[OGqQWO'#EjOOQU'#Gd'#GdOGvQWO,5;^OG{QYO,5;_OJZQ^O'#D[OJeQYO'#G]OLsQYO'#G[OMQQWO,5;`OOQU,5;],5;]OOQU,5<Y,5<YOMVQYO,5;aOOQP'#FQ'#FQOMyQXO'#FPOOQO'#FO'#FOONQQWO'#E}ONVQWO'#GiON_QWO,5;hOOQQ-E9S-E9SONdQYO,59YO;}QYO'#F{OOQQ'#Cv'#CvONkQYO'#FzOOQQ'#Cu'#CuONsQYO,59^ONxQYO,5:bOOQO,5:b,5:bON}QYO,5:bO! VQYO,5:bO! [QYO,5;YO`QYO'#FYO! aQWO,5<hO`QYOOOOQR'#Cf'#CfOOQQ'#FV'#FVO!!WQYO,59OO`QYO,5<]OOQQ'#Ft'#FtO'RQYO'#FWO!!hQYO,5<[O`QYO1G.fOOQQ'#Fw'#FwO!!pQ^O1G/SO!&_Q^O1G/[O!)|Q^O1G/[O!1YQ^O1G/[OOQU1G/w1G/wO!1vQYO1G/yO!5]Q^O1G/OO!9RQ^O1G/QO!:aQYO1G/SO`QYO1G/SOOQU1G/S1G/SO!:hQYO1G/^O!;SQ^O'#CdOOQO'#Eg'#EgO!<fQWO'#EfO!<kQWO'#GZOOQO'#Ee'#EeOOQO'#Eh'#EhO!<sQWO,5<tO'RQYO'#F[O!<xQ^O,59vO2TQYO1G0xOOQU1G0y1G0yO`QYO'#F`O!APQWO,5<vOOQU1G0z1G0zO!A[QWO'#EwO!AgQWO'#GgOOQO'#Ev'#EvO!AoQWO1G0{OOQP'#Fb'#FbO!AtQXO,5;kO`QYO,5;iO!A{QXO'#FcO!BTQWO,5=TOOQU1G1S1G1SO`QYO1G.tO`QYO,5<gO'RQYO'#FXO!B]QYO,5<fO`QYO1G.xO!BeQYO1G/|OOQO1G/|1G/|OOQO1G0t1G0tOOQO,5;t,5;tOOQO-E9W-E9WO!BjQWOOOOQQ-E9T-E9TO!BoQYO'#ClOOQQ1G1w1G1wOOQQ,5;r,5;rOOQQ-E9U-E9UO!B|Q^O7+$QOOQU7+%e7+%eO`QYO7+$nO!EnQYO,5;_O!EuQWO7+$nOOQU'#DZ'#DZO!EzQYO'#D^O!FPQYO'#D^O!FUQYO'#D^O!FZQ`O'#DfO!F`Q`O'#DiO!FeQ`O'#DmOOQU7+$x7+$xO`QYO,5;QO'RQYO'#F_O!FjQWO,5<uOOQU1G2`1G2`OOQU,5;v,5;vOOQU-E9Y-E9YO!FrQWO7+&dO!F}QYO,5;zOOQO-E9^-E9^O!:hQYO,5;cO'RQYO'#FaO!G[QWO,5=RO!GdQYO7+&gOOQP-E9`-E9`O!GkQYO1G1TOOQO,5;},5;}OOQO-E9a-E9aO!KdQ^O7+$`O!KkQYO1G2ROOQQ,5;s,5;sOOQQ-E9V-E9VO!KuQ^O7+$dOOQO7+%h7+%hO`QYO,59WO!NgQ^O<<HYOOQU<<HY<<HYO#$UQYO,59xO#$ZQYO,59xO#$`QYO,59xO#$eQYO,5:QO'RQYO,5:TO#%PQbO,5:XO#%WQYO1G0lOOQO,5;y,5;yOOQO-E9]-E9]OOQU<<JO<<JOOOQO1G0}1G0}OOQO,5;{,5;{OOQO-E9_-E9_O#%bQ^O'#EyOOQU<<JR<<JRO`QYO<<JRO`QYO<<GzO#(SQYO1G.rO#(^QYO1G/dOOQU1G/d1G/dO#(cQbO'#D]O#(tQ`O'#D[O#)PQ`O1G/lO#)UQWO'#DlO#)ZQ`O'#GROOQO'#Dk'#DkO#)cQ`O1G/oOOQO'#Dp'#DpO#)hQ`O'#GTOOQO'#Do'#DoO#)pQ`O1G/sOOQUAN?mAN?mO#)uQ^OAN=fOOQU7+%O7+%OO#,gQ`O,59vOOQU7+%W7+%WO#$eQYO,5:WO'RQYO'#F]O#,rQ`O,5<mOOQU7+%Z7+%ZO#$eQYO'#F^O#,zQ`O,5<oO#-SQ`O7+%_OOQO1G/r1G/rOOQO,5;w,5;wOOQO-E9Z-E9ZOOQO,5;x,5;xOOQO-E9[-E9[O!:hQYO<<HyOOQUAN>eAN>eO#-XQ^O'#FnO`QYO,59hO`QYO,59pO`QYO,59pO`QYO,59pO`QYO,59dO`QYO,59fO<aQYO,59hO`QYO1G.fO#-rQYO1G/SO#/`QYO1G/[O#0|QYO1G/[O#3wQYO1G/OO#5lQYO1G/QO'RQYO'#F[O`QYO1G.tO`QYO1G.xO#5|QYO7+$QO`QYO7+$nO#6mQYO7+&gO#8bQYO7+$`O#8iQYO7+$`O#8pQ^O7+$`O#8wQYO7+$dO#9hQYO<<HYO#;UQYO'#EyO`QYO<<JRO`QYO<<GzO#;uQYOAN=fO#$eQYO<<HyO`QYO'#DUO#<fQ^O'#DQO<[QYO,58zO#?WQYO,59YO#?_QYO,59^O#?dQYO1G/SO#?kQWO1G0{O`QYO1G.tO#?pQ`O7+%_O`QYO1G.tO'RQYO'#C`O`QYO'#CnO'RQYO'#CrO`QYO,59hOMVQYO,5;aO#?uQYO,59YO#?|Q`O1G/sO#@RQYO,59YO#@YQWO'#EuO`QYO'#CnO`QYO,59hO`QYO,59pO`QYO,59pO`QYO,59pO`QYO,59dO`QYO,59fO<aQYO,59hO`QYO1G.fO#@_Q^O1G/SO#@fQ^O1G/[O#@mQ^O1G/[O#@tQ^O1G/OO#A[Q^O1G/QO`QYO1G.xO#BpQ^O7+$QO`QYO7+$nO#EeQYO7+&gO#ElQ^O7+$dO#HaQ^O<<HYO#%PQbO,5:XO#HhQ^O'#EyO`QYO<<JRP`QYO<<GzP#K]Q^OAN=fO#L`Q^O'#DQO`QYO'#CnO`QYO'#DUO<[QYO,58zO$ TQYO,59^O$ YQYO1G/SO$ aQWO1G0{O$ fQ`O'#DmO`QYO,59hO`QYO,59pO`QYO,59pO`QYO,59pO`QYO,59dO`QYO,59fO<aQYO,59hO`QYO1G.fO$ kQYO1G/SO$ rQYO1G/[O$ yQYO1G/[O$!QQYO1G/OO$!hQYO1G/QO`QYO1G.xO$#|QYO7+$QO`QYO7+$nO$$pQYO7+&gO$$wQYO7+$dO$%kQYO<<HYO$%rQYO'#EyO`QYO<<JRP`QYO<<GzP$&fQYOAN=fO`QYO'#DUO<[QYO,58zO$'iQYO,59^O$'nQYO1G/SO$'uQWO1G0{O'RQYO'#C`O'RQYO'#CrO`QYO,59hOMVQYO,5;aO$'zQWO'#EuO'RQYO'#C`O'RQYO'#CrO$(PQYO'#DQO`QYO,59hOMVQYO,5;aO$(jQWO'#Eu",
      stateData: "$(o~O$^OS$_OSPOSQOS~OTrOZUO[TOcsOguOhuOrgOueO!S!WO!T!WO!UwO!W!VO!Z|O!b!XO!fdO!hfO!kxO!myO!oyO!pzO!s{O!u{O!w}O!x!OO!y!PO!{!QO!}zO#O!QO#P!QO#Q!RO#S!SO#T!SO#U!TO#]!UO#diO#olO$YQO$ZQO%S[O%T]O%U^O%V_O~OTrO[TOcsOguOhuOrgOueO!S!WO!T!WO!UwO!W!VO!Z|O!b!XO!fdO!hfO!kxO!myO!oyO!pzO!s{O!u{O!w}O!x!OO!y!PO!{!QO!}zO#O!QO#P!QO#Q!RO#S!SO#T!SO#U!TO#]!UO#diO#olO$YQO$ZQO%S[O%T]O%U^O%V_O~OZ!]O#w!_O~P$UO$YQO$ZQO~OZ!gO[!gO]!hO^!hO_!uOm!rOo!sOq!fOr!fOs!tOy!iO{!vO!h!oO$f!mOu${X~O$[!qO%^!qOT$`Xc$`Xg$`Xh$`X!S$`X!T$`X!U$`X!W$`X!Z$`X!b$`X!f$`X!k$`X!m$`X!o$`X!p$`X!s$`X!u$`X!w$`X!x$`X!y$`X!{$`X!}$`X#O$`X#P$`X#Q$`X#S$`X#T$`X#U$`X#]$`X#d$`X#o$`X$W$`X$Y$`X$Z$`X%S$`X%T$`X%U$`X%V$`X~P'ZO%S!wOT$tXZ$tX[$tXc$tXg$tXh$tXr$tXu$tX!S$tX!T$tX!U$tX!W$tX!Z$tX!b$tX!f$tX!h$tX!k$tX!m$tX!o$tX!p$tX!s$tX!u$tX!w$tX!x$tX!y$tX!{$tX!}$tX#O$tX#P$tX#Q$tX#S$tX#T$tX#U$tX#]$tX#d$tX#o$tX$Y$tX$Z$tX%T$tX%U$tX%V$tX~O$YQO$ZQOT!PXZ!PX[!PX]!PX^!PX_!PXc!PXg!PXh!PXm!PXo!PXq!PXr!PXs!PXu!PXy!PX{!PX!S!PX!T!PX!U!PX!W!PX!Z!PX!b!PX!f!PX!h!PX!k!PX!m!PX!o!PX!p!PX!s!PX!u!PX!w!PX!x!PX!y!PX!{!PX!}!PX#O!PX#P!PX#Q!PX#S!PX#T!PX#U!PX#]!PX#d!PX#o!PX$W!PX$[!PX$f!PX%S!PX%T!PX%U!PX%V!PX%^!PX$j!PX$i!PXw!PXd!PXa!PX#n!PXe!PXk!PX~Ou!zO~O%T]O~OZ#PO!S!WO!T!WO!W!VO$YQO$ZQO%S[O%T]O%U^O%V_O~O!f%OP~P`O$[#YOZ$bX[$bX]$bX^$bX_$bXm$bXo$bXq$bXr$bXs$bXu$bXy$bX{$bX!f$bX!h$bX$W$bX$f$bXe$bX~OT$bXc$bXg$bXh$bX!S$bX!T$bX!U$bX!W$bX!Z$bX!b$bX!k$bX!m$bX!o$bX!p$bX!s$bX!u$bX!w$bX!x$bX!y$bX!{$bX!}$bX#O$bX#P$bX#Q$bX#S$bX#T$bX#U$bX#]$bX#d$bX#o$bX$Y$bX$Z$bX$[$bX%S$bX%T$bX%U$bX%V$bX%^$bX~P2|Ou#ZO~O$X#[O%T]O#n%]P~Oo#iO~O!l#jO~O!n#jO~O!q#jO!r#jO~O!t#jO~O!v#jO~O!q#jO~O|#jO~O!z#jO~O!|#jO~O|#kO~O|#lO~O#V#jO#W#jO~Oo#mOu#bX~OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOu${X$WtX$jtXwtX!ftXdtXatX$itX#ntXktX~O_'UOm'SOo'TOq'OOr'OOs'zO~P8xO$j#nO$W$pXw$pX~O$W#vX~P*|Ou#pO~OZ#qO[#qO]#qO^#qO$YQO$ZQO$f#qO$g#qO$vWX~O_WXwWX$jWX~P;RO_#uO~O$j#vOa$dX~Oa#yO~OTrOZUO[TOcsOguOhuOrgOu$TO!S!WO!T!WO!UwO!W!VO!Z|O!b!XO!fdO!hfO!kxO!myO!oyO!pzO!s{O!u{O!w}O!x!OO!y!PO!{!QO!}zO#O!QO#P!QO#Q!RO#S!SO#T!SO#U!TO#]!UO#diO#olO$YQO$ZQO%S[O%T]O%U^O%V_O~O|$VO~O{!vO!h!oO$f!mOTxaZxa[xa]xa^xa_xacxagxahxamxaoxaqxarxasxau${Xyxa!Sxa!Txa!Uxa!Wxa!Zxa!bxa!fxa!kxa!mxa!oxa!pxa!sxa!uxa!wxa!xxa!yxa!{xa!}xa#Oxa#Pxa#Qxa#Sxa#Txa#Uxa#]xa#dxa#oxa$Wxa$Yxa$Zxa$[xa%Sxa%Txa%Uxa%Vxa%^xa$jxawxadxaaxa$ixa#nxaexakxa~Ow%OP~P`O$f$_O$i!OXT!OXZ!OX[!OX]!OX^!OX_!OXc!OXg!OXh!OXm!OXo!OXq!OXr!OXs!OXu!OXy!OX{!OX!S!OX!T!OX!U!OX!W!OX!Z!OX!b!OX!f!OX!h!OX!k!OX!m!OX!o!OX!p!OX!s!OX!u!OX!w!OX!x!OX!y!OX!{!OX!}!OX#O!OX#P!OX#Q!OX#S!OX#T!OX#U!OX#]!OX#d!OX#o!OX$W!OX$Y!OX$Z!OX$[!OX%S!OX%T!OX%U!OX%V!OX%^!OX$j!OXw!OXd!OXa!OX#n!OXe!OXk!OX~O%S!wO~O$i$aO~OZ!gO[!gO]!hO^!hO_'UOm'SOo'TOq'OOr'OOs'zOw$bOy!iO{!vO!h!oO$f!mOu${X~O$[#YOZ$bX[$bX]$bX^$bX_$bXm$bXo$bXq$bXr$bXs$bXu$bXw$bXy$bX{$bX!h$bX!f$bX$j$bX~O$f$_O$i!OX~PIPOZ%PX[%PX]%PX^%PX_%PXm%PXo%PXq%PXr%PXs%PXu%PXw%PXy%PX{%PX!h%PX$f%PX$i%WX!f%PX$j%PX~OZ!gO[!gO]!hO^!hO_'UOm'SOo'TOq'OOr'OOs'zOy!iO{!vO!h!oO$f!mOu${X~O$j$cO!f%OXw%OX~PKrO!f$eO~O$YQO$ZQOw%ZP~OZ#qO[#qO]#qO^#qO$X#[O$f#qO$g#qO~O$v#sX~PMbO$v$lO~O$j$mO#n%]X~O#n$oO~Od$pO~PKrO$j$rOk$nX~Ok$tO~O!V$uO~O#R$vO#S$vO~O#R$vO~O!S$wO~O$j#nO$W$paw$pa~OZ#qO[#qO]#qO^#qO$YQO$ZQO$f#qO$g#qO~O_Wa$vWawWa$jWa~P! lO$j#vOa$da~OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTpi_picpigpihpimpiopiqpirpispiu${X!Spi!Tpi!Upi!Wpi!Zpi!bpi!fpi!kpi!mpi!opi!ppi!spi!upi!wpi!xpi!ypi!{pi!}pi#Opi#Ppi#Qpi#Spi#Tpi#Upi#]pi#dpi#opi$Wpi$Ypi$Zpi$[pi%Spi%Tpi%Upi%Vpi%^pi~O]!hO^!hOy!iO{!vO!h!oO$f!mOTxiZxi[xi_xicxigxihximxioxiqxirxisxiu${X!Sxi!Txi!Uxi!Wxi!Zxi!bxi!fxi!kxi!mxi!oxi!pxi!sxi!uxi!wxi!xxi!yxi!{xi!}xi#Oxi#Pxi#Qxi#Sxi#Txi#Uxi#]xi#dxi#oxi$Wxi$Yxi$Zxi$[xi%Sxi%Txi%Uxi%Vxi%^xi~Oy!iO{!vO!h!oO$f!mOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu${X!Sxi!Txi!Uxi!Wxi!Zxi!bxi!fxi!kxi!mxi!oxi!pxi!sxi!uxi!wxi!xxi!yxi!{xi!}xi#Oxi#Pxi#Qxi#Sxi#Txi#Uxi#]xi#dxi#oxi$Wxi$Yxi$Zxi$[xi%Sxi%Txi%Uxi%Vxi%^xi~O{!vO!h!oO$f!mOTxiZxi[xi]xi^xi_xicxigxihximxioxiqxirxisxiu${X!Sxi!Txi!Uxi!Wxi!Zxi!bxi!fxi!kxi!mxi!oxi!pxi!sxi!uxi!wxi!xxi!yxi!{xi!}xi#Oxi#Pxi#Qxi#Sxi#Txi#Uxi#]xi#dxi#oxi$Wxi$Yxi$Zxi$[xi%Sxi%Txi%Uxi%Vxi%^xiexi~Oyxi$jxiwxidxiaxi$ixi#nxikxi~P!-kO!f%RO~PKrOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTlicliglihlimliu${X!Sli!Tli!Uli!Wli!Zli!bli!fli!kli!mli!oli!pli!sli!uli!wli!xli!yli!{li!}li#Oli#Pli#Qli#Sli#Tli#Uli#]li#dli#oli$Wli$Yli$Zli$[li%Sli%Tli%Uli%Vli%^li~O_!uOo!sOq!fOr!fOs!tO~P!1}OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTnicnignihnimnioniu${X!Sni!Tni!Uni!Wni!Zni!bni!fni!kni!mni!oni!pni!sni!uni!wni!xni!yni!{ni!}ni#Oni#Pni#Qni#Sni#Tni#Uni#]ni#dni#oni$Wni$Yni$Zni$[ni%Sni%Tni%Uni%Vni%^ni~O_!uOq!fOr!fOs!tO~P!5pOZ!gO[!gO]!hO^!hO_'UOm'SOq'OOr'OOs'zOy!iO{!vO!h!oO$f!mOu${X~Oo%SO~P!9cO!R%WO!U%XO!W%YO!Z%ZO!^%[O!b%]O$YQO$ZQO~OZ#}X[#}X]#}X^#}X_#}Xm#}Xo#}Xq#}Xr#}Xs#}Xu#}Xw#}Xy#}X{#}X!h#}X$Y#}X$Z#}X$[#}X$f#}X$j#}X~P;RO$v%_O~O$j%`Ow$}X~Ow%bO~O$f$_O$i!OaT!OaZ!Oa[!Oa]!Oa^!Oa_!Oac!Oag!Oah!Oam!Oao!Oaq!Oar!Oas!Oau!Oay!Oa{!Oa!S!Oa!T!Oa!U!Oa!W!Oa!Z!Oa!b!Oa!f!Oa!h!Oa!k!Oa!m!Oa!o!Oa!p!Oa!s!Oa!u!Oa!w!Oa!x!Oa!y!Oa!{!Oa!}!Oa#O!Oa#P!Oa#Q!Oa#S!Oa#T!Oa#U!Oa#]!Oa#d!Oa#o!Oa$W!Oa$Y!Oa$Z!Oa$[!Oa%S!Oa%T!Oa%U!Oa%V!Oa%^!Oa$j!Oaw!Oad!Oaa!Oa#n!Oae!Oak!Oa~O$j$cO!f%Oaw%Oa~O$v%hOw#kX$j#kX~O$j%iOw%ZX~Ow%kO~O$v#sa~PMbO$X#[O%T]O~O$j$mO#n%]a~O$j$rOk$na~O!T%uO~Ow!^O~O$i%vOa`X$j`X~PKrOTSqcSqgSqhSq!SSq!TSq!USq!WSq!ZSq!bSq!fSq!kSq!mSq!oSq!pSq!sSq!uSq!wSq!xSq!ySq!{Sq!}Sq#OSq#PSq#QSq#SSq#TSq#USq#]Sq#dSq#oSq$WSq$YSq$ZSq$[Sq%SSq%TSq%USq%VSq%^Sq~P'ZO$jtX~PG{Ow%xO~Oo%yO~Oo%zO~Oo%{O~O![%|O~O![%}O~O![&OO~O$j%`Ow$}a~Ow&SO!f&SO!h&SO~O!f$Sa$j$Saw$Sa~PKrO$j%iOw%Za~O#l&YO~P`O#n#qi$j#qi~PKrOZ!gO[!gO]!hO^!hO_(XOm(VOo(WOq(ROr(ROs)iOy!iO{!vO!h!oO$f!mOTbqcbqgbqhbqu${X!Sbq!Tbq!Ubq!Wbq!Zbq!bbq!fbq!kbq!mbq!obq!pbq!sbq!ubq!wbq!xbq!ybq!{bq!}bq#Obq#Pbq#Qbq#Sbq#Tbq#Ubq#]bq#dbq#obq$Wbq$Ybq$Zbq$[bq%Sbq%Tbq%Ubq%Vbq%^bq~Oe&ZO~P!GuOk$oi$j$oi~PKrOTfqcfqgfqhfq!Sfq!Tfq!Ufq!Wfq!Zfq!bfq!ffq!kfq!mfq!ofq!pfq!sfq!ufq!wfq!xfq!yfq!{fq!}fq#Ofq#Pfq#Qfq#Sfq#Tfq#Ufq#]fq#dfq#ofq$Wfq$Yfq$Zfq$[fq%Sfq%Tfq%Ufq%Vfq%^fq~P'ZOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOTpy_pycpygpyhpympyopyqpyrpyspyu${X!Spy!Tpy!Upy!Wpy!Zpy!bpy!fpy!kpy!mpy!opy!ppy!spy!upy!wpy!xpy!ypy!{py!}py#Opy#Ppy#Qpy#Spy#Tpy#Upy#]py#dpy#opy$Wpy$Ypy$Zpy$[py%Spy%Tpy%Upy%Vpy%^py~O!S&]O~O!V&]O~O!S&^O~O!R%WO!U%XO!W%YO!Z%ZO!^%[O!b(rO$YQO$ZQO~O!X$wP~P#$eOw#Yi$j#Yi~PKrOT#mXc#mXg#mXh#mX!S#mX!T#mX!U#mX!W#mX!Z#mX!b#mX!f#mX!k#mX!m#mX!o#mX!p#mX!s#mX!u#mX!w#mX!x#mX!y#mX!{#mX!}#mX#O#mX#P#mX#Q#mX#S#mX#T#mX#U#mX#]#mX#d#mX#o#mX$W#mX$Y#mX$Z#mX$[#mX%S#mX%T#mX%U#mX%V#mX%^#mX~P'ZOa`i$j`i~PKrO!T&lO~O$YQO$ZQO!X!PX$f!PX$j!PX~O$f']O!X!OX$j!OX~O!X&nO~O$v&oO~O$j&pO!X$uX~O!X&rO~O$j&sO!X$wX~O!X&uO~OTb!Rcb!Rgb!Rhb!R!Sb!R!Tb!R!Ub!R!Wb!R!Zb!R!bb!R!fb!R!kb!R!mb!R!ob!R!pb!R!sb!R!ub!R!wb!R!xb!R!yb!R!{b!R!}b!R#Ob!R#Pb!R#Qb!R#Sb!R#Tb!R#Ub!R#]b!R#db!R#ob!R$Wb!R$Yb!R$Zb!R$[b!R%Sb!R%Tb!R%Ub!R%Vb!R%^b!R~P'ZO$f']O!X!Oa$j!Oa~O$j&pO!X$ua~O$j&sO!X$wa~O$x&{O~O$j$bXd$bXw$bXa$bX$i$bX#n$bXk$bX~P2|OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mO_pimpiopiqpirpispiu${X$Wpi$jpiwpi!fpidpiapi$ipi#npikpi~O]!hO^!hOy!iO{!vO!h!oO$f!mOZxi[xi_ximxioxiqxirxisxiu${X$Wxi$jxiwxi!fxidxiaxi$ixi#nxikxi~Oy!iO{!vO!h!oO$f!mOZxi[xi]xi^xi_ximxioxiqxirxisxiu${X$Wxi$jxiwxi!fxidxiaxi$ixi#nxikxi~OZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOmliu${X$Wli$jliwli!flidliali$ili#nlikli~O_'UOo'TOq'OOr'OOs'zO~P#2jOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mOmnioniu${X$Wni$jniwni!fnidniani$ini#nnikni~O_'UOq'OOr'OOs'zO~P#4[O$WSq$jSqwSq!fSqdSqaSq$iSq#nSqkSq~PKrO#l'iO~P`OZ!gO[!gO]!hO^!hO_(yOm(wOo(xOq(sOr(sOs)cOy!iO{!vO!h!oO$f!mOu${X$Wbq$jbqwbq!fbqdbqabq$ibq#nbqkbq~Oe'jO~P#6tOebq~P#6tOebq~P!GuO$Wfq$jfqwfq!ffqdfqafq$ifq#nfqkfq~PKrOZ!gO[!gO]!hO^!hOy!iO{!vO!h!oO$f!mO_pympyopyqpyrpyspyu${X$Wpy$jpywpy!fpydpyapy$ipy#npykpy~O$W#mX$j#mXw#mX!f#mXd#mXa#mX$i#mX#n#mXk#mX~PKrO$Wb!R$jb!Rwb!R!fb!Rdb!Rab!R$ib!R#nb!Rkb!R~PKrOTtXctXgtXhtX!StX!TtX!UtX!WtX!ZtX!btX!ftX!ktX!mtX!otX!ptX!stX!utX!wtX!xtX!ytX!{tX!}tX#OtX#PtX#QtX#StX#TtX#UtX#]tX#dtX#otX$WtX$YtX$ZtX$[tX%StX%TtX%UtX%VtX%^tX~P'ZOd'^O~PKrOk'_O~Oo'aO~P!9cOw'bO~O$x'lO~Od'tO~PKrO!X'uO~Od'vO~PKrOu'{O~Oepi~P!!pOexi~P!&_Oexi~P!)|O_(XOo(WOq(ROr(ROs)iOeli~P!1}O_(XOq(ROr(ROs)iOeni~P!5pOZ!gO[!gO]!hO^!hO_(XOm(VOo(WOq(ROr(ROs)iOy!iO{!vO!h!oO$f!mOu${X~OTSqcSqeSqgSqhSq!SSq!TSq!USq!WSq!ZSq!bSq!fSq!kSq!mSq!oSq!pSq!sSq!uSq!wSq!xSq!ySq!{Sq!}Sq#OSq#PSq#QSq#SSq#TSq#USq#]Sq#dSq#oSq$WSq$YSq$ZSq$[Sq%SSq%TSq%USq%VSq%^Sq~P#AoO#l(hO~P`OTfqcfqefqgfqhfq!Sfq!Tfq!Ufq!Wfq!Zfq!bfq!ffq!kfq!mfq!ofq!pfq!sfq!ufq!wfq!xfq!yfq!{fq!}fq#Ofq#Pfq#Qfq#Sfq#Tfq#Ufq#]fq#dfq#ofq$Wfq$Yfq$Zfq$[fq%Sfq%Tfq%Ufq%Vfq%^fq~P#AoOepy~P!NgOT#mXc#mXe#mXg#mXh#mX!S#mX!T#mX!U#mX!W#mX!Z#mX!b#mX!f#mX!k#mX!m#mX!o#mX!p#mX!s#mX!u#mX!w#mX!x#mX!y#mX!{#mX!}#mX#O#mX#P#mX#Q#mX#S#mX#T#mX#U#mX#]#mX#d#mX#o#mX$W#mX$Y#mX$Z#mX$[#mX%S#mX%T#mX%U#mX%V#mX%^#mX~P#AoOZ!gO[!gO]!hO^!hO_(XOm(VOo(WOq(ROr(ROs)iOy!iO{!vO!h!oO$f!mOu${X~Qb!RTtXctXetXgtXhtX!StX!TtX!UtX!WtX!ZtX!btX!ftX!ktX!mtX!otX!ptX!stX!utX!wtX!xtX!ytX!{tX!}tX#OtX#PtX#QtX#StX#TtX#UtX#]tX#dtX#otX$WtX$YtX$ZtX$[tX%StX%TtX%UtX%VtX%^tX~P#AoOk(`O~Oo(bO~P!9cOw(cO~O![(fO~Oepi~P#-rOexi~P#/`Oexi~P#0|O_(yOo(xOq(sOr(sOs)cOeli~P#2jO_(yOq(sOr(sOs)cOeni~P#4[OZ!gO[!gO]!hO^!hO_(yOm(wOo(xOq(sOr(sOs)cOy!iO{!vO!h!oO$f!mOu${X~OeSq$WSq$jSqwSq!fSqdSqaSq$iSq#nSqkSq~P$!{O#l)XO~P`Oefq$Wfq$jfqwfq!ffqdfqafq$ifq#nfqkfq~P$!{Oepy~P#9hOe#mX$W#mX$j#mXw#mX!f#mXd#mXa#mX$i#mX#n#mXk#mX~P$!{OZ!gO[!gO]!hO^!hO_(yOm(wOo(xOq(sOr(sOs)cOy!iO{!vO!h!oO$f!mOu${X~Qb!Rk)QO~Oo)SO~P!9cOw)TO~Ou)dO~O_(yOm(wOo(xOq(sOr(sOs)cOetX~P8xOu)jO~O",
      goto: "!7f%^PPPP%_P'X'e'n(Z+RPPPPP+[P%_PPP%_PP+_+kP%_P%_P%_PPP+tP,SP%_P%_PP,],r-V,zPPPPPPP,zPP,zP/l/o,zP/u/{%_P%_P%_0SPPPPPPPPPPPPPPPPPPPPPPPPPPPP1|2P2V1|P2b4_2b2b6c8`P%_:]%_<V<V>P>]P>fPP<V>r>x6_>|P?UP?X?_?f?l?r?xBXBdBjBpBvB|CSCYPPPPPPPPC`CdH[JULUL[PPLcPPLiLuNu!!u!!{!#S!#X!$n!&X!'v!)vP!)yP!)}!+h!-R!.{!/R!/U%_!/[!1UPPPP!3VH[!3c!5c!5i!7c$oiOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ!eRQ'o'wQ(n)fR)])aW!cR'w)a)fR%O#vY!aR#v'w)a)fY#dv$r'y)b)g^$X!z#Z%`%i'{)d)jT&b%}&p%`WOPVXdefgqt!f!j!k!l!n!p!r!s!t!u#n#p#t#x$T$V$_$a$c$l$p$q$t%S%_%h%k%v%|&O&Y&Z&_&o&s&{'O'P'Q'R'S'T'U'V']'^'_'a'b'i'j'l'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(f(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)it!`Rv#Z#v$r%`%i%}&p'w'y'{)a)b)d)f)g)jU#r!`#s$WR$W!zU#r!`#s$WT$j#]$kR$}#tQ#hvQ'q'yQ(o)gR)^)bW#fv'y)b)gR%r$rU!ZP#p$TW$U!u'U(X(yR$x#nQ!^PQ$z#pR%U$TQ%^$VQ&T%hQ&a%|U&f&O&s(fQ&v&oT&|&{'l[#Qdefg$T$ac%V$V%h%|&O&o&s&{'l(f!bjOVq!f!j!k!l!r!s!u#x$p$t%S%k&Y&Z't(R(S(T(U(V(W(X(Y(`(b(c(h(i(m[#Odg$V$a%h&{U#Tef$TQ$O!nS%c$_'][&`%|&O&o&s'l(f#V&}Pt!p!t!z#n#p#t$c$l$q%_%v'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm'v'x'z(Q(l(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iR&e%}Q&c%}R&w&pQ&i&OR'}(fS&g&O(fR&y&s$oYOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iR$^!zQ$Z!zR&Q%`S$Y!z%`Z$f#Z%i'{)d)j$ubOPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$tbOPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ!|_T#^m$m$u`OPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$uaOPVdefgqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$a$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$ohOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$onOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ$i#ZQ's'{Q(q)jR)`)dW$g#Z'{)d)jR&U%iW&X%k'b(c)TX&j&Y'i(h)XQ#`mR%n$mT#_m$mS#]m$mT$j#]$kR!^PQqOR#bqS#s!`$WR${#sQ#w!cR%P#wQ$s#fR%s$sQ#o!ZR$y#o%OXOPVdefgqt!f!j!k!l!n!p!r!s!t!u!z#n#p#t#x$T$V$_$a$c$l$p$q$t%S%_%h%k%v&Y&Z&{'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iS!yX&__&_%|&O&o&s']'l(fS$`#O#TS%d$`&mR&m&`Q&q&cR&x&qQ&t&gR&z&tQ%a$ZR&R%aQ$d#VR%g$dQ%j$gR&V%jQ$k#]R%l$kQ$n#`R%o$nTpOqSSOqW!YP#n#p'UW!xV'm(m)[Q#SeS#Vf!zQ#ctQ#z!fQ#{!jQ#|!kW#}!l'R(U(vQ$P!pQ$Q!rQ$R!sQ$S!tQ$|#tQ%Q#xQ%T$TQ%f$cQ%m$lQ%p$pQ%q$qQ%t$tQ%w%SQ&P%_S&W%k&YQ&[%vQ&k&ZQ'W'OQ'X'PQ'Y'QQ'Z'SQ'['TQ'`'VQ'c'^Q'd'vQ'e'tQ'f'_Q'g'aS'h'b'iQ'k'jQ'n!uQ'p'xQ'r'zQ'|(QQ(O(lQ(Z(RQ([(SQ(](TQ(^(VQ(_(WQ(a(YQ(d(`Q(e(bS(g(c(hQ(j(iQ(k(XQ(p)iQ({(sQ(|(tQ(}(uQ)O(wQ)P(xQ)R(zQ)U)QQ)V)SS)W)T)XQ)Z)YQ)_)cR)h(y$ooOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)ipROVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'wPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip)a'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[q)f$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mX!dR'w)a)fZ!bR#v'w)a)fQ#t!aR$q#dQ#x!eQ'V'oQ(Y(nR(z)]ptOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'xPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip(Q$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mq(l'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[pvOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'yPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip)b'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[q)g$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mX#gv'y)b)gZ#ev$r'y)b)gV![P#p$Td!jS#z$Q$R%Q%t%w&W&k'n!W'P!Y#S#V#c$P$S$|%T%f%m%q&P&['W'Z'['`'f'g'h'k'p'r'|(O(p)_f(S%p'e(Z(^(_(a(d(e(g(j(kg(t'c'd({)O)P)R)U)V)W)Z)hf!kS#z#{$Q$R%Q%t%w&W&k'n!Y'Q!Y#S#V#c$P$S$|%T%f%m%q&P&['W'X'Z'['`'f'g'h'k'p'r'|(O(p)_h(T%p'e(Z([(^(_(a(d(e(g(j(ki(u'c'd({(|)O)P)R)U)V)W)Z)hh!lS#z#{#|$Q$R%Q%t%w&W&k'n!['R!Y#S#V#c$P$S$|%T%f%m%q&P&['W'X'Y'Z'['`'f'g'h'k'p'r'|(O(p)_j(U%p'e(Z([(](^(_(a(d(e(g(j(kk(v'c'd({(|(})O)P)R)U)V)W)Z)hpVOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j'mPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip(m$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mq)['^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[R&d%}T&h&O(f$P!nS!Y!x#S#V#c#z#{#|#}$P$Q$R$S$|%Q%T%f%m%p%q%t%w&P&W&[&k'W'X'Y'Z'['`'c'd'e'f'g'h'k'n'p'r'|(O(Z([(](^(_(a(d(e(g(j(k(p({(|(})O)P)R)U)V)W)Z)_)h$P!pS!Y!x#S#V#c#z#{#|#}$P$Q$R$S$|%Q%T%f%m%p%q%t%w&P&W&[&k'W'X'Y'Z'['`'c'd'e'f'g'h'k'n'p'r'|(O(Z([(](^(_(a(d(e(g(j(k(p({(|(})O)P)R)U)V)W)Z)_)h$oZOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iQ!{ZR!}`R$[!zQ#WfR$]!z$ocOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)i$hcOPVqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iU#Qdg$aV#Uef$TW#Rdef$TQ#XgR%e$apkOVq!f!j!k!l!r!s!u#x$t%S%k&Y&Z!j(PPeft!p!t!z#n#p#t$T$c$l$q%_%v'O'P'Q'R'S'T'U'V'_'a'b'i'j'm'x'z(Q(l)c)ip)e'^'v(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[q)k$p't(R(S(T(U(V(W(X(Y(`(b(c(h(i(mX$h#Z'{)d)j$omOPVefqt!f!j!k!l!p!r!s!t!u!z#n#p#t#x$T$c$l$p$q$t%S%_%k%v&Y&Z'O'P'Q'R'S'T'U'V'^'_'a'b'i'j'm't'v'x'z(Q(R(S(T(U(V(W(X(Y(`(b(c(h(i(l(m(s(t(u(v(w(x(y(z)Q)S)T)X)Y)[)c)iR#am",
      nodeNames: "⚠ LineComment BlockComment Expressions ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression ArithOp InstanceOfExpression instance of Type QualifiedName VariableName SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName string length upper case lower substring before after starts with ends contains insert index distinct values met by overlaps finished started day year week month get value entries NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier UnaryTests Wildcard not",
      maxTerm: 198,
      context: variableTracker$1,
      nodeProps: [
        ["group", -17,4,18,22,28,30,32,40,42,67,69,71,112,113,115,116,117,124,"Expression",47,"Expression Expression",-5,105,106,107,108,109,"Expression Literal"],
        ["closedBy", 37,")",70,"]",123,"}"],
        ["openedBy", 39,"(",68,"[",122,"{"]
      ],
      propSources: [feelHighlighting$1],
      skippedNodes: [0,1,2],
      repeatNodeCount: 14,
      tokenData: ")x~RuXY#fYZ$ZZ[#f]^$Zpq#fqr$`rs$kwx%_xy%dyz%iz{%n{|%{|}&Q}!O&V!O!P&d!P!Q&|!Q![(X![!](j!]!^(o!^!_(t!_!`$f!`!a)T!b!c)_!}#O)d#P#Q)i#Q#R%v#o#p)n#q#r)s$f$g#f#BY#BZ#f$IS$I_#f$I|$I}$Z$I}$JO$Z$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~#kY$^~XY#fZ[#fpq#f$f$g#f#BY#BZ#f$IS$I_#f$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~$`O$_~~$cP!_!`$f~$kOq~~$pU%T~OY$kZr$krs%Ss#O$k#O#P%X#P~$k~%XO%T~~%[PO~$k~%dO$g~~%iOu~~%nOw~~%sP^~z{%v~%{Oy~~&QO[~~&VO$j~R&[PZP!`!a&_Q&dO$xQ~&iQ$f~!O!P&o!Q![&t~&tO$i~~&yP%S~!Q![&t~'RQ]~z{'X!P!Q'|~'[ROz'Xz{'e{~'X~'hTOz'Xz{'e{!P'X!P!Q'w!Q~'X~'|OQ~~(RQP~OY'|Z~'|~(^Q%S~!O!P(d!Q![(X~(gP!Q![&t~(oO$v~~(tO%^~R({P![QrP!_!`)OP)TOrPR)[P!XQrP!_!`)O~)dO%V~~)iO!h~~)nO!f~~)sO#o~~)xO#n~",
      tokenizers: [propertyIdentifiers$1, identifiers$1, insertSemicolon$1, 0, 1],
      topRules: {"Expressions":[0,3],"UnaryTests":[1,129]},
      dynamicPrecedences: {"30":-1,"71":-1,"101":-1,"154":-1},
      specialized: [{term: 148, get: value => spec_identifier$1[value] || -1}],
      tokenPrec: 0
    });

    function parseParameterNames$1(fn) {
        if (Array.isArray(fn.$args)) {
            return fn.$args;
        }
        const code = fn.toString();
        const match = /^(?:[^(]*\s*)?\(([^)]+)?\)/.exec(code);
        if (!match) {
            throw new Error('failed to parse params: ' + code);
        }
        const [_, params] = match;
        if (!params) {
            return [];
        }
        return params.split(',').map(p => p.trim());
    }
    function notImplemented$1(thing) {
        return new Error(`not implemented: ${thing}`);
    }
    /**
     * @param {string} name
     * @param {Record<string, any>} context
     *
     * @return {any}
     */
    function getFromContext$1(name, context) {
        if (['nil', 'boolean', 'number', 'string'].includes(getType$2(context))) {
            return null;
        }
        if (name in context) {
            return context[name];
        }
        const normalizedName = normalizeContextKey$1(name);
        if (normalizedName in context) {
            return context[normalizedName];
        }
        const entry = Object.entries(context).find(([key]) => normalizedName === normalizeContextKey$1(key));
        if (entry) {
            return entry[1];
        }
        return null;
    }

    function isDateTime$1(obj) {
        return DateTime.isDateTime(obj);
    }
    function isDuration$1(obj) {
        return Duration.isDuration(obj);
    }
    function duration$2(opts) {
        if (typeof opts === 'number') {
            return Duration.fromMillis(opts);
        }
        return Duration.fromISO(opts);
    }
    function date$1(str = null, time = null, zone = null) {
        if (time) {
            if (str) {
                throw new Error('<str> and <time> provided');
            }
            return date$1(`1900-01-01T${time}`);
        }
        if (typeof str === 'string') {
            if (str.startsWith('-')) {
                throw notImplemented$1('negative date');
            }
            if (!str.includes('T')) {
                // raw dates are in UTC time zone
                return date$1(str + 'T00:00:00.000Z');
            }
            if (str.includes('@')) {
                if (zone) {
                    throw new Error('<zone> already provided');
                }
                const [datePart, zonePart] = str.split('@');
                return date$1(datePart, null, Info.normalizeZone(zonePart));
            }
            return DateTime.fromISO(str.toUpperCase(), {
                setZone: true,
                zone
            });
        }
        return DateTime.now();
    }

    function isContext$1(e) {
        return Object.getPrototypeOf(e) === Object.prototype;
    }
    function isArray$4(e) {
        return Array.isArray(e);
    }
    function isBoolean$1(e) {
        return typeof e === 'boolean';
    }
    function getType$2(e) {
        if (e === null || e === undefined) {
            return 'nil';
        }
        if (isBoolean$1(e)) {
            return 'boolean';
        }
        if (isNumber$1(e)) {
            return 'number';
        }
        if (isString$1(e)) {
            return 'string';
        }
        if (isContext$1(e)) {
            return 'context';
        }
        if (isArray$4(e)) {
            return 'list';
        }
        if (isDuration$1(e)) {
            return 'duration';
        }
        if (isDateTime$1(e)) {
            if (e.year === 1900 &&
                e.month === 1 &&
                e.day === 1) {
                return 'time';
            }
            if (e.hour === 0 &&
                e.minute === 0 &&
                e.second === 0 &&
                e.millisecond === 0 &&
                e.zone === FixedOffsetZone.utcInstance) {
                return 'date';
            }
            return 'date time';
        }
        if (e instanceof Range$2) {
            return 'range';
        }
        if (e instanceof FunctionWrapper$1) {
            return 'function';
        }
        return 'literal';
    }
    function isType$1(el, type) {
        return getType$2(el) === type;
    }
    function typeCast$1(obj, type) {
        if (isDateTime$1(obj)) {
            if (type === 'time') {
                return obj.set({
                    year: 1900,
                    month: 1,
                    day: 1
                });
            }
            if (type === 'date') {
                return obj.setZone('utc', { keepLocalTime: true }).startOf('day');
            }
            if (type === 'date time') {
                return obj;
            }
        }
        return null;
    }
    let Range$2 = class Range {
        constructor(props) {
            Object.assign(this, props);
        }
    };
    function isNumber$1(obj) {
        return typeof obj === 'number';
    }
    function isString$1(obj) {
        return typeof obj === 'string';
    }
    function equals$1(a, b) {
        if (a === null && b !== null ||
            a !== null && b === null) {
            return false;
        }
        if (isArray$4(a) && a.length < 2) {
            a = a[0];
        }
        if (isArray$4(b) && b.length < 2) {
            b = b[0];
        }
        const aType = getType$2(a);
        const bType = getType$2(b);
        if (aType !== bType) {
            return null;
        }
        if (aType === 'nil') {
            return true;
        }
        if (aType === 'list') {
            if (a.length !== b.length) {
                return false;
            }
            return a.every((element, idx) => equals$1(element, b[idx]));
        }
        if (aType === 'date time' || aType === 'time' || aType === 'date') {
            return (a.toUTC().valueOf() === b.toUTC().valueOf());
        }
        if (aType === 'duration') {
            // years and months duration -> months
            if (Math.abs(a.as('days')) > 180) {
                return Math.trunc(a.minus(b).as('months')) === 0;
            }
            // days and time duration -> seconds
            else {
                return Math.trunc(a.minus(b).as('seconds')) === 0;
            }
        }
        if (aType === 'context') {
            const aEntries = Object.entries(a);
            const bEntries = Object.entries(b);
            if (aEntries.length !== bEntries.length) {
                return false;
            }
            return aEntries.every(([key, value]) => key in b && equals$1(value, b[key]));
        }
        if (aType === 'range') {
            return [
                [a.start, b.start],
                [a.end, b.end],
                [a['start included'], b['start included']],
                [a['end included'], b['end included']]
            ].every(([a, b]) => a === b);
        }
        if (a == b) {
            return true;
        }
        return aType === bType ? false : null;
    }
    let FunctionWrapper$1 = class FunctionWrapper {
        constructor(fn, parameterNames) {
            this.fn = fn;
            this.parameterNames = parameterNames;
        }
        invoke(contextOrArgs) {
            let params;
            if (isArray$4(contextOrArgs)) {
                params = contextOrArgs;
            }
            else {
                params = this.parameterNames.map(n => contextOrArgs[n]);
            }
            return this.fn.call(null, ...params);
        }
    };

    // 10.3.4 Built-in functions
    const builtins$1 = {
        // 10.3.4.1 Conversion functions
        'number': function () {
            throw notImplemented$1('number');
        },
        'string': fn$2(function (from) {
            if (arguments.length !== 1) {
                return null;
            }
            return toString$3(from);
        }, ['any']),
        // date(from) => date string
        // date(from) => date and time
        // date(year, month, day)
        'date': fn$2(function (year, month, day, from) {
            if (!from && !isNumber$1(year)) {
                from = year;
                year = null;
            }
            let d;
            if (isString$1(from)) {
                d = date$1(from);
            }
            if (isDateTime$1(from)) {
                d = from;
            }
            if (year) {
                d = date$1().setZone('utc').set({
                    year,
                    month,
                    day
                });
            }
            return d && ifValid$1(d.setZone('utc').startOf('day')) || null;
        }, ['any?', 'number?', 'number?', 'any?']),
        // date and time(from) => date time string
        // date and time(date, time)
        'date and time': fn$2(function (d, time, from) {
            let dt;
            if (isDateTime$1(d) && isDateTime$1(time)) {
                dt = time.set({
                    year: d.year,
                    month: d.month,
                    day: d.day
                });
            }
            if (isString$1(d)) {
                from = d;
                d = null;
            }
            if (isString$1(from)) {
                dt = date$1(from);
            }
            return dt && ifValid$1(dt) || null;
        }, ['any?', 'time?', 'string?'], ['date', 'time', 'from']),
        // time(from) => time string
        // time(from) => time, date and time
        // time(hour, minute, second, offset?) => ...
        'time': fn$2(function (hour, minute, second, offset, from) {
            let t;
            if (offset) {
                throw notImplemented$1('time(..., offset)');
            }
            if (isString$1(hour) || isDateTime$1(hour)) {
                from = hour;
                hour = null;
            }
            if (isString$1(from)) {
                t = date$1(null, from);
            }
            if (isDateTime$1(from)) {
                t = from.set({
                    year: 1900,
                    month: 1,
                    day: 1
                });
            }
            if (isNumber$1(hour)) {
                // TODO: support offset = days and time duration
                t = date$1().set({
                    hour,
                    minute,
                    second
                }).set({
                    year: 1900,
                    month: 1,
                    day: 1,
                    millisecond: 0
                });
            }
            return t && ifValid$1(t) || null;
        }, ['any?', 'number?', 'number?', 'any?', 'any?']),
        'duration': fn$2(function (from) {
            return ifValid$1(duration$2(from));
        }, ['string']),
        'years and months duration': fn$2(function (from, to) {
            return ifValid$1(to.diff(from, ['years', 'months']));
        }, ['date', 'date']),
        '@': fn$2(function (string) {
            let t;
            if (/^-?P/.test(string)) {
                t = duration$2(string);
            }
            else if (/^[\d]{1,2}:[\d]{1,2}:[\d]{1,2}/.test(string)) {
                t = date$1(null, string);
            }
            else {
                t = date$1(string);
            }
            return t && ifValid$1(t) || null;
        }, ['string']),
        'now': fn$2(function () {
            return date$1();
        }, []),
        'today': fn$2(function () {
            return date$1().startOf('day');
        }, []),
        // 10.3.4.2 Boolean function
        'not': fn$2(function (bool) {
            return isType$1(bool, 'boolean') ? !bool : null;
        }, ['any']),
        // 10.3.4.3 String functions
        'substring': fn$2(function (string, start, length) {
            const _start = (start < 0 ? string.length + start : start - 1);
            const arr = Array.from(string);
            return (typeof length !== 'undefined'
                ? arr.slice(_start, _start + length)
                : arr.slice(_start)).join('');
        }, ['string', 'number', 'number?'], ['string', 'start position', 'length']),
        'string length': fn$2(function (string) {
            return countSymbols$1(string);
        }, ['string']),
        'upper case': fn$2(function (string) {
            return string.toUpperCase();
        }, ['string']),
        'lower case': fn$2(function (string) {
            return string.toLowerCase();
        }, ['string']),
        'substring before': fn$2(function (string, match) {
            const index = string.indexOf(match);
            if (index === -1) {
                return '';
            }
            return string.substring(0, index);
        }, ['string', 'string']),
        'substring after': fn$2(function (string, match) {
            const index = string.indexOf(match);
            if (index === -1) {
                return '';
            }
            return string.substring(index + match.length);
        }, ['string', 'string']),
        'replace': fn$2(function (input, pattern, replacement, flags) {
            return input.replace(new RegExp(pattern, 'ug' + (flags || '').replace(/[x]/g, '')), replacement.replace(/\$0/g, '$$&'));
        }, ['string', 'string', 'string', 'string?']),
        'contains': fn$2(function (string, match) {
            return string.includes(match);
        }, ['string', 'string']),
        'starts with': fn$2(function (string, match) {
            return string.startsWith(match);
        }, ['string', 'string']),
        'ends with': fn$2(function (string, match) {
            return string.endsWith(match);
        }, ['string', 'string']),
        'split': fn$2(function (string, delimiter) {
            return string.split(new RegExp(delimiter, 'u'));
        }, ['string', 'string']),
        // 10.3.4.4 List functions
        'list contains': fn$2(function (list, element) {
            return list.some(el => matches$2(el, element));
        }, ['list', 'any?']),
        'count': fn$2(function (list) {
            return list.length;
        }, ['list']),
        'min': listFn$1(function (list) {
            return list.reduce((min, el) => min === null ? el : Math.min(min, el), null);
        }, 'number'),
        'max': listFn$1(function (list) {
            return list.reduce((max, el) => max === null ? el : Math.max(max, el), null);
        }, 'number'),
        'sum': listFn$1(function (list) {
            return sum$1(list);
        }, 'number'),
        'mean': listFn$1(function (list) {
            const s = sum$1(list);
            return s === null ? s : s / list.length;
        }, 'number'),
        'all': listFn$1(function (list) {
            let nonBool = false;
            for (const o of list) {
                if (o === false) {
                    return false;
                }
                if (typeof o !== 'boolean') {
                    nonBool = true;
                }
            }
            return nonBool ? null : true;
        }, 'any?'),
        'any': listFn$1(function (list) {
            let nonBool = false;
            for (const o of list) {
                if (o === true) {
                    return true;
                }
                if (typeof o !== 'boolean') {
                    nonBool = true;
                }
            }
            return nonBool ? null : false;
        }, 'any?'),
        'sublist': fn$2(function (list, start, length) {
            const _start = (start < 0 ? list.length + start : start - 1);
            return (typeof length !== 'undefined'
                ? list.slice(_start, _start + length)
                : list.slice(_start));
        }, ['list', 'number', 'number?']),
        'append': fn$2(function (list, ...items) {
            return list.concat(items);
        }, ['list', 'any?']),
        'concatenate': fn$2(function (...args) {
            return args.reduce((result, arg) => {
                return result.concat(arg);
            }, []);
        }, ['any']),
        'insert before': fn$2(function (list, position, newItem) {
            return list.slice(0, position - 1).concat([newItem], list.slice(position - 1));
        }, ['list', 'number', 'any?']),
        'remove': fn$2(function (list, position) {
            return list.slice(0, position - 1).concat(list.slice(position));
        }, ['list', 'number']),
        'reverse': fn$2(function (list) {
            return list.slice().reverse();
        }, ['list']),
        'index of': fn$2(function (list, match) {
            return list.reduce(function (result, element, index) {
                if (matches$2(element, match)) {
                    result.push(index + 1);
                }
                return result;
            }, []);
        }, ['list', 'any']),
        'union': fn$2(function (..._lists) {
            throw notImplemented$1('union');
        }, ['list']),
        'distinct values': fn$2(function (_list) {
            throw notImplemented$1('distinct values');
        }, ['list']),
        'flatten': fn$2(function (list) {
            return flatten$2(list);
        }, ['list']),
        'product': listFn$1(function (list) {
            if (list.length === 0) {
                return null;
            }
            return list.reduce((result, n) => {
                return result * n;
            }, 1);
        }, 'number'),
        'median': listFn$1(function (list) {
            if (list.length === 0) {
                return null;
            }
            return median$1(list);
        }, 'number'),
        'stddev': listFn$1(function (list) {
            if (list.length < 2) {
                return null;
            }
            return stddev$1(list);
        }, 'number'),
        'mode': listFn$1(function (list) {
            return mode$1(list);
        }, 'number'),
        // 10.3.4.5 Numeric functions
        'decimal': fn$2(function (n, scale) {
            if (!scale) {
                return round$a(n);
            }
            const offset = Math.pow(10, scale);
            return round$a(n * offset) / (offset);
        }, ['number', 'number']),
        'floor': fn$2(function (n) {
            return Math.floor(n);
        }, ['number']),
        'ceiling': fn$2(function (n) {
            return Math.ceil(n) + 0;
        }, ['number']),
        'abs': fn$2(function (n) {
            if (typeof n !== 'number') {
                return null;
            }
            return Math.abs(n);
        }, ['number']),
        'modulo': fn$2(function (dividend, divisor) {
            if (!divisor) {
                return null;
            }
            const adjust = 1000000000;
            // cf. https://dustinpfister.github.io/2017/09/02/js-whats-wrong-with-modulo/
            //
            // need to round here as using this custom modulo
            // variant is prone to rounding errors
            return Math.round((dividend % divisor + divisor) % divisor * adjust) / adjust;
        }, ['number', 'number']),
        'sqrt': fn$2(function (number) {
            if (number < 0) {
                return null;
            }
            return Math.sqrt(number);
        }, ['number']),
        'log': fn$2(function (number) {
            if (number <= 0) {
                return null;
            }
            return Math.log(number);
        }, ['number']),
        'exp': fn$2(function (number) {
            return Math.exp(number);
        }, ['number']),
        'odd': fn$2(function (number) {
            return Math.abs(number) % 2 === 1;
        }, ['number']),
        'even': fn$2(function (number) {
            return Math.abs(number) % 2 === 0;
        }, ['number']),
        // 10.3.4.6 Date and time functions
        'is': fn$2(function (value1, value2) {
            if (typeof value1 === 'undefined' || typeof value2 === 'undefined') {
                return false;
            }
            return equals$1(value1, value2);
        }, ['any?', 'any?']),
        // 10.3.4.7 Range Functions
        'before': fn$2(function (a, b) {
            return before$1(a, b);
        }, ['any', 'any']),
        'after': fn$2(function (a, b) {
            return before$1(b, a);
        }, ['any', 'any']),
        'meets': fn$2(function (a, b) {
            return meets$1(a, b);
        }, ['range', 'range']),
        'met by': fn$2(function (a, b) {
            return meets$1(b, a);
        }, ['range', 'range']),
        'overlaps': fn$2(function () {
            throw notImplemented$1('overlaps');
        }, ['any?']),
        'overlaps before': fn$2(function () {
            throw notImplemented$1('overlaps before');
        }, ['any?']),
        'overlaps after': fn$2(function () {
            throw notImplemented$1('overlaps after');
        }, ['any?']),
        'finishes': fn$2(function () {
            throw notImplemented$1('finishes');
        }, ['any?']),
        'finished by': fn$2(function () {
            throw notImplemented$1('finished by');
        }, ['any?']),
        'includes': fn$2(function () {
            throw notImplemented$1('includes');
        }, ['any?']),
        'during': fn$2(function () {
            throw notImplemented$1('during');
        }, ['any?']),
        'starts': fn$2(function () {
            throw notImplemented$1('starts');
        }, ['any?']),
        'started by': fn$2(function () {
            throw notImplemented$1('started by');
        }, ['any?']),
        'coincides': fn$2(function () {
            throw notImplemented$1('coincides');
        }, ['any?']),
        // 10.3.4.8 Temporal built-in functions
        'day of year': fn$2(function () {
            throw notImplemented$1('day of year');
        }, ['any?']),
        'day of week': fn$2(function () {
            throw notImplemented$1('day of week');
        }, ['any?']),
        'month of year': fn$2(function () {
            throw notImplemented$1('month of year');
        }, ['any?']),
        'week of year': fn$2(function () {
            throw notImplemented$1('week of year');
        }, ['any?']),
        // 10.3.4.9 Sort
        'sort': function () {
            throw notImplemented$1('sort');
        },
        // 10.3.4.10 Context function
        'get value': fn$2(function (m, key) {
            return getFromContext$1(key, m);
        }, ['context', 'string']),
        'get entries': fn$2(function (m) {
            if (arguments.length !== 1) {
                return null;
            }
            if (Array.isArray(m)) {
                return null;
            }
            return Object.entries(m).map(([key, value]) => ({ key, value }));
        }, ['context']),
        'context': listFn$1(function (_contexts) {
            throw notImplemented$1('context');
        }, 'context'),
        'context merge': listFn$1(function (_contexts) {
            throw notImplemented$1('context merge');
        }, 'context'),
        'context put': fn$2(function (_context, _keys, _value) {
            throw notImplemented$1('context put');
        }, ['context', 'list', 'any'])
    };
    function matches$2(a, b) {
        return a === b;
    }
    const FALSE$1 = {};
    function createArgTester$1(arg) {
        const optional = arg.endsWith('?');
        const type = optional ? arg.substring(0, arg.length - 1) : arg;
        return function (obj) {
            const arr = Array.isArray(obj);
            if (type === 'list') {
                if (arr || optional && typeof obj === 'undefined') {
                    return obj;
                }
                else {
                    // implicit conversion obj => [ obj ]
                    return [obj];
                }
            }
            if (type !== 'any' && arr && obj.length === 1) {
                // implicit conversion [ obj ] => obj
                obj = obj[0];
            }
            if (type === 'range') {
                return obj instanceof Range$2 ? obj : FALSE$1;
            }
            const objType = getType$2(obj);
            if (objType === 'nil') {
                return (optional ? obj : FALSE$1);
            }
            if (type === 'any' || type === objType) {
                return obj;
            }
            return typeCast$1(obj, type) || FALSE$1;
        };
    }
    function createArgsValidator$1(argDefinitions) {
        const tests = argDefinitions.map(createArgTester$1);
        return function (args) {
            while (args.length < argDefinitions.length) {
                args.push(undefined);
            }
            return args.reduce((result, arg, index) => {
                if (result === false) {
                    return result;
                }
                const test = tests[index];
                const conversion = test ? test(arg) : arg;
                if (conversion === FALSE$1) {
                    return false;
                }
                result.push(conversion);
                return result;
            }, []);
        };
    }
    /**
     * @param {Function} fnDefinition
     * @param {string} type
     * @param {string[]} [parameterNames]
     *
     * @return {Function}
     */
    function listFn$1(fnDefinition, type, parameterNames = null) {
        const tester = createArgTester$1(type);
        const wrappedFn = function (...args) {
            if (args.length === 0) {
                return null;
            }
            // unwrap first arg
            if (Array.isArray(args[0]) && args.length === 1) {
                args = args[0];
            }
            if (!args.every(arg => tester(arg) !== FALSE$1)) {
                return null;
            }
            return fnDefinition(args);
        };
        wrappedFn.$args = parameterNames || parseParameterNames$1(fnDefinition);
        return wrappedFn;
    }
    /**
     * @param {Function} fnDefinition
     * @param {string[]} argDefinitions
     * @param {string[]} [parameterNames]
     *
     * @return {Function}
     */
    function fn$2(fnDefinition, argDefinitions, parameterNames = null) {
        const checkArgs = createArgsValidator$1(argDefinitions);
        parameterNames = parameterNames || parseParameterNames$1(fnDefinition);
        const wrappedFn = function (...args) {
            const convertedArgs = checkArgs(args);
            if (!convertedArgs) {
                return null;
            }
            return fnDefinition(...convertedArgs);
        };
        wrappedFn.$args = parameterNames;
        return wrappedFn;
    }
    function meets$1(a, b) {
        return [
            (a.end === b.start),
            (a['end included'] === true),
            (b['start included'] === true)
        ].every(v => v);
    }
    function before$1(a, b) {
        if (a instanceof Range$2 && b instanceof Range$2) {
            return (a.end < b.start || (!a['end included'] || !b['start included']) && a.end == b.start);
        }
        if (a instanceof Range$2) {
            return (a.end < b || (!a['end included'] && a.end === b));
        }
        if (b instanceof Range$2) {
            return (b.start > a || (!b['start included'] && b.start === a));
        }
        return a < b;
    }
    function sum$1(list) {
        return list.reduce((sum, el) => sum === null ? el : sum + el, null);
    }
    function flatten$2([x, ...xs]) {
        return (x !== undefined
            ? [...Array.isArray(x) ? flatten$2(x) : [x], ...flatten$2(xs)]
            : []);
    }
    function toKeyString$1(key) {
        if (typeof key === 'string' && /\W/.test(key)) {
            return toString$3(key, true);
        }
        return key;
    }
    function toDeepString$1(obj) {
        return toString$3(obj, true);
    }
    function escapeStr$1(str) {
        return str.replace(/("|\\)/g, '\\$1');
    }
    function toString$3(obj, wrap = false) {
        var _a, _b, _c, _d;
        const type = getType$2(obj);
        if (type === 'nil') {
            return 'null';
        }
        if (type === 'string') {
            return wrap ? `"${escapeStr$1(obj)}"` : obj;
        }
        if (type === 'boolean' || type === 'number') {
            return String(obj);
        }
        if (type === 'list') {
            return '[' + obj.map(toDeepString$1).join(', ') + ']';
        }
        if (type === 'context') {
            return '{' + Object.entries(obj).map(([key, value]) => {
                return toKeyString$1(key) + ': ' + toDeepString$1(value);
            }).join(', ') + '}';
        }
        if (type === 'duration') {
            return obj.shiftTo('years', 'months', 'days', 'hours', 'minutes', 'seconds').normalize().toISO();
        }
        if (type === 'date time') {
            if ((_a = obj.zone) === null || _a === void 0 ? void 0 : _a.zoneName) {
                return obj.toISO({ suppressMilliseconds: true, includeOffset: false }) + '@' + ((_b = obj.zone) === null || _b === void 0 ? void 0 : _b.zoneName);
            }
            return obj.toISO({ suppressMilliseconds: true });
        }
        if (type === 'date') {
            return obj.toISODate();
        }
        if (type === 'range') {
            return '<range>';
        }
        if (type === 'time') {
            if ((_c = obj.zone) === null || _c === void 0 ? void 0 : _c.zoneName) {
                return obj.toISOTime({ suppressMilliseconds: true, includeOffset: false }) + '@' + ((_d = obj.zone) === null || _d === void 0 ? void 0 : _d.zoneName);
            }
            return obj.toISOTime({ suppressMilliseconds: true });
        }
        if (type === 'function') {
            return '<function>';
        }
        throw notImplemented$1('string(' + type + ')');
    }
    function countSymbols$1(str) {
        // cf. https://mathiasbynens.be/notes/javascript-unicode
        return str.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '_').length;
    }
    function round$a(n) {
        const integral = Math.trunc(n);
        if (n - integral > .5) {
            return integral + 1;
        }
        else {
            return integral;
        }
    }
    // adapted from https://stackoverflow.com/a/53577159
    function stddev$1(array) {
        const n = array.length;
        const mean = array.reduce((a, b) => a + b) / n;
        return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / (n - 1));
    }
    function median$1(array) {
        const n = array.length;
        const sorted = array.slice().sort();
        const mid = n / 2 - 1;
        const index = Math.ceil(mid);
        // even
        if (mid === index) {
            return (sorted[index] + sorted[index + 1]) / 2;
        }
        // uneven
        return sorted[index];
    }
    function mode$1(array) {
        if (array.length < 2) {
            return array;
        }
        const buckets = {};
        for (const n of array) {
            buckets[n] = (buckets[n] || 0) + 1;
        }
        const sorted = Object.entries(buckets).sort((a, b) => b[1] - a[1]);
        return sorted.filter(s => s[1] === sorted[0][1]).map(e => +e[0]);
    }
    function ifValid$1(o) {
        return o.isValid ? o : null;
    }

    function parseExpressions$1(expression, context = {}) {
        return parser$2.configure({
            top: 'Expressions',
            contextTracker: trackVariables$1(context)
        }).parse(expression);
    }
    function parseUnaryTests$1(expression, context = {}) {
        return parser$2.configure({
            top: 'UnaryTests',
            contextTracker: trackVariables$1(context)
        }).parse(expression);
    }

    let Interpreter$1 = class Interpreter {
        _buildExecutionTree(tree, input) {
            const root = { args: [], nodeInput: input };
            const stack = [root];
            tree.iterate({
                enter(nodeRef) {
                    const { isError, isSkipped } = nodeRef.type;
                    const { from, to } = nodeRef;
                    if (isError) {
                        throw new Error(`Statement unparseable at [${from}, ${to}]`);
                    }
                    if (isSkipped) {
                        return false;
                    }
                    const nodeInput = input.slice(from, to);
                    stack.push({
                        nodeInput,
                        args: []
                    });
                },
                leave(nodeRef) {
                    if (nodeRef.type.isSkipped) {
                        return;
                    }
                    const { nodeInput, args } = stack.pop();
                    const parent = stack[stack.length - 1];
                    const expr = evalNode$1(nodeRef, nodeInput, args);
                    parent.args.push(expr);
                }
            });
            return root.args[root.args.length - 1];
        }
        evaluate(expression, context = {}) {
            const parseTree = parseExpressions$1(expression, context);
            const root = this._buildExecutionTree(parseTree, expression);
            return {
                parseTree,
                root
            };
        }
        unaryTest(expression, context = {}) {
            const parseTree = parseUnaryTests$1(expression, context);
            const root = this._buildExecutionTree(parseTree, expression);
            return {
                parseTree,
                root
            };
        }
    };
    const interpreter$1 = new Interpreter$1();
    function unaryTest(expression, context = {}) {
        const value = context['?'] || null;
        const { root } = interpreter$1.unaryTest(expression, context);
        // root = fn(ctx) => test(val)
        const test = root(context);
        return test(value);
    }
    function evaluate$2(expression, context = {}) {
        const { root } = interpreter$1.evaluate(expression, context);
        // root = [ fn(ctx) ]
        const results = root(context);
        if (results.length === 1) {
            return results[0];
        }
        else {
            return results;
        }
    }
    function evalNode$1(node, input, args) {
        switch (node.name) {
            case 'ArithOp': return (context) => {
                const nullable = (op, types = ['number']) => (a, b) => {
                    const left = a(context);
                    const right = b(context);
                    if (isArray$4(left)) {
                        return null;
                    }
                    if (isArray$4(right)) {
                        return null;
                    }
                    const leftType = getType$2(left);
                    const rightType = getType$2(right);
                    if (leftType !== rightType ||
                        !types.includes(leftType)) {
                        return null;
                    }
                    return op(left, right);
                };
                switch (input) {
                    case '+': return nullable((a, b) => a + b, ['string', 'number']);
                    case '-': return nullable((a, b) => a - b);
                    case '*': return nullable((a, b) => a * b);
                    case '/': return nullable((a, b) => !b ? null : a / b);
                    case '**':
                    case '^': return nullable((a, b) => Math.pow(a, b));
                }
            };
            case 'CompareOp': return tag$1(() => {
                switch (input) {
                    case '>': return (b) => createRange$1(b, null, false, false);
                    case '>=': return (b) => createRange$1(b, null, true, false);
                    case '<': return (b) => createRange$1(null, b, false, false);
                    case '<=': return (b) => createRange$1(null, b, false, true);
                    case '=': return (b) => (a) => equals$1(a, b);
                    case '!=': return (b) => (a) => !equals$1(a, b);
                }
            }, Test$1('boolean'));
            case 'Wildcard': return (_context) => true;
            case 'null': return (_context) => {
                return null;
            };
            case 'Disjunction': return tag$1((context) => {
                const left = args[0](context);
                const right = args[2](context);
                const matrix = [
                    [true, true, true],
                    [true, false, true],
                    [true, null, true],
                    [false, true, true],
                    [false, false, false],
                    [false, null, null],
                    [null, true, true],
                    [null, false, null],
                    [null, null, null],
                ];
                const a = typeof left === 'boolean' ? left : null;
                const b = typeof right === 'boolean' ? right : null;
                return matrix.find(el => el[0] === a && el[1] === b)[2];
            }, Test$1('boolean'));
            case 'Conjunction': return tag$1((context) => {
                const left = args[0](context);
                const right = args[2](context);
                const matrix = [
                    [true, true, true],
                    [true, false, false],
                    [true, null, null],
                    [false, true, false],
                    [false, false, false],
                    [false, null, false],
                    [null, true, null],
                    [null, false, false],
                    [null, null, null],
                ];
                const a = typeof left === 'boolean' ? left : null;
                const b = typeof right === 'boolean' ? right : null;
                return matrix.find(el => el[0] === a && el[1] === b)[2];
            }, Test$1('boolean'));
            case 'Context': return (context) => {
                return args.slice(1, -1).reduce((obj, arg) => {
                    const [key, value] = arg(Object.assign(Object.assign({}, context), obj));
                    return Object.assign(Object.assign({}, obj), { [key]: value });
                }, {});
            };
            case 'FunctionBody': return args[0];
            case 'FormalParameters': return args;
            case 'FormalParameter': return args[0];
            case 'ParameterName': return args.join(' ');
            case 'FunctionDefinition': return (context) => {
                const parameterNames = args[2];
                const fnBody = args[4];
                return wrapFunction$1((...args) => {
                    const fnContext = parameterNames.reduce((context, name, idx) => {
                        // support positional parameters
                        context[name] = args[idx];
                        return context;
                    }, Object.assign({}, context));
                    return fnBody(fnContext);
                }, parameterNames);
            };
            case 'ContextEntry': return (context) => {
                const key = typeof args[0] === 'function' ? args[0](context) : args[0];
                const value = args[1](context);
                return [key, value];
            };
            case 'Key': return args[0];
            case 'Identifier': return input;
            case 'SpecialFunctionName': return (context) => getBuiltin$1(input);
            // preserve spaces in name, but compact multiple
            // spaces into one (token)
            case 'Name': return input.replace(/\s{2,}/g, ' ');
            case 'VariableName': return (context) => {
                const name = args.join(' ');
                return getBuiltin$1(name) || getFromContext$1(name, context);
            };
            case 'QualifiedName': return (context) => {
                return args.reduce((context, arg) => arg(context), context);
            };
            case '?': return (context) => getFromContext$1('?', context);
            // expression
            // expression ".." expression
            case 'IterationContext': return (context) => {
                const a = args[0](context);
                const b = args[1] && args[1](context);
                return b ? createRange$1(a, b) : a;
            };
            case 'Type': return args[0];
            case 'InExpressions': return (context) => {
                const iterationContexts = args.map(ctx => ctx(context));
                if (iterationContexts.some(ctx => getType$2(ctx) !== 'list')) {
                    return null;
                }
                return cartesianProduct$1(iterationContexts).map(ctx => {
                    if (!isArray$4(ctx)) {
                        ctx = [ctx];
                    }
                    return Object.assign({}, context, ...ctx);
                });
            };
            // Name kw<"in"> Expr
            case 'InExpression': return (context) => {
                return extractValue$1(context, args[0], args[2]);
            };
            case 'SpecialType': throw notImplemented$1('SpecialType');
            case 'InstanceOfExpression': return tag$1((context) => {
                const a = args[0](context);
                const b = args[3](context);
                return a instanceof b;
            }, Test$1('boolean'));
            case 'every': return tag$1((context) => {
                return (_contexts, _condition) => {
                    const contexts = _contexts(context);
                    if (getType$2(contexts) !== 'list') {
                        return contexts;
                    }
                    return contexts.every(ctx => isTruthy$1(_condition(ctx)));
                };
            }, Test$1('boolean'));
            case 'some': return tag$1((context) => {
                return (_contexts, _condition) => {
                    const contexts = _contexts(context);
                    if (getType$2(contexts) !== 'list') {
                        return contexts;
                    }
                    return contexts.some(ctx => isTruthy$1(_condition(ctx)));
                };
            }, Test$1('boolean'));
            case 'NumericLiteral': return tag$1((_context) => input.includes('.') ? parseFloat(input) : parseInt(input), 'number');
            case 'BooleanLiteral': return tag$1((_context) => input === 'true' ? true : false, 'boolean');
            case 'StringLiteral': return tag$1((_context) => parseString$1(input), 'string');
            case 'PositionalParameters': return (context) => args.map(arg => arg(context));
            case 'NamedParameter': return (context) => {
                const name = args[0];
                const value = args[1](context);
                return [name, value];
            };
            case 'NamedParameters': return (context) => args.reduce((args, arg) => {
                const [name, value] = arg(context);
                args[name] = value;
                return args;
            }, {});
            case 'DateTimeConstructor': return (context) => {
                return getBuiltin$1(input);
            };
            case 'DateTimeLiteral': return (context) => {
                // AtLiteral
                if (args.length === 1) {
                    return args[0](context);
                }
                // FunctionInvocation
                else {
                    const wrappedFn = wrapFunction$1(args[0](context));
                    if (!wrappedFn) {
                        throw new Error(`Failed to evaluate ${input}: Target is not a function`);
                    }
                    const contextOrArgs = args[2](context);
                    return wrappedFn.invoke(contextOrArgs);
                }
            };
            case 'AtLiteral': return (context) => {
                const wrappedFn = wrapFunction$1(getBuiltin$1('@'));
                if (!wrappedFn) {
                    throw new Error(`Failed to evaluate ${input}: Target is not a function`);
                }
                return wrappedFn.invoke([args[0](context)]);
            };
            case 'FunctionInvocation': return (context) => {
                const wrappedFn = wrapFunction$1(args[0](context));
                if (!wrappedFn) {
                    throw new Error(`Failed to evaluate ${input}: Target is not a function`);
                }
                const contextOrArgs = args[2](context);
                return wrappedFn.invoke(contextOrArgs);
            };
            case 'IfExpression': return (function () {
                const ifCondition = args[1];
                const thenValue = args[3];
                const elseValue = args[5];
                const type = coalecenseTypes$1(thenValue, elseValue);
                return tag$1((context) => {
                    if (isTruthy$1(ifCondition(context))) {
                        return thenValue(context);
                    }
                    else {
                        return elseValue ? elseValue(context) : null;
                    }
                }, type);
            })();
            case 'Parameters': return args.length === 3 ? args[1] : (_context) => [];
            case 'Comparison': return (context) => {
                const operator = args[1];
                // expression !compare kw<"in"> PositiveUnaryTest |
                // expression !compare kw<"in"> !unaryTest "(" PositiveUnaryTests ")"
                if (operator === 'in') {
                    return compareIn$1(args[0](context), (args[3] || args[2])(context));
                }
                // expression !compare kw<"between"> expression kw<"and"> expression
                if (operator === 'between') {
                    const start = args[2](context);
                    const end = args[4](context);
                    if (start === null || end === null) {
                        return null;
                    }
                    return createRange$1(start, end).includes(args[0](context));
                }
                // expression !compare CompareOp<"=" | "!="> expression |
                // expression !compare CompareOp<Gt | Gte | Lt | Lte> expression |
                const left = args[0](context);
                const right = args[2](context);
                const test = operator()(right);
                return compareValue$1(test, left);
            };
            case 'QuantifiedExpression': return (context) => {
                const testFn = args[0](context);
                const contexts = args[1];
                const condition = args[3];
                return testFn(contexts, condition);
            };
            // DMN 1.2 - 10.3.2.14
            // kw<"for"> commaSep1<InExpression<IterationContext>> kw<"return"> expression
            case 'ForExpression': return (context) => {
                const extractor = args[args.length - 1];
                const iterationContexts = args[1](context);
                if (getType$2(iterationContexts) !== 'list') {
                    return iterationContexts;
                }
                const partial = [];
                for (const ctx of iterationContexts) {
                    partial.push(extractor(Object.assign(Object.assign({}, ctx), { partial })));
                }
                return partial;
            };
            case 'ArithmeticExpression': return (function () {
                // binary expression (a + b)
                if (args.length === 3) {
                    const [a, op, b] = args;
                    return tag$1((context) => {
                        return op(context)(a, b);
                    }, coalecenseTypes$1(a, b));
                }
                // unary expression (-b)
                if (args.length === 2) {
                    const [op, value] = args;
                    return tag$1((context) => {
                        return op(context)(() => 0, value);
                    }, value.type);
                }
            })();
            case 'PositiveUnaryTest': return args[0];
            case 'ParenthesizedExpression': return args[1];
            case 'PathExpression': return (context) => {
                const pathTarget = args[0](context);
                const pathProp = args[1];
                if (isArray$4(pathTarget)) {
                    return coerceSingleton$1(pathTarget.map(pathProp));
                }
                else {
                    return pathProp(pathTarget);
                }
            };
            // expression !filter "[" expression "]"
            case 'FilterExpression': return (context) => {
                const target = args[0](context);
                const filterFn = args[2];
                const filterTarget = isArray$4(target) ? target : [target];
                // null[..]
                if (target === null) {
                    return null;
                }
                // a[1]
                if (filterFn.type === 'number') {
                    const idx = filterFn(context);
                    const value = filterTarget[idx < 0 ? filterTarget.length + idx : idx - 1];
                    if (typeof value === 'undefined') {
                        return null;
                    }
                    else {
                        return value;
                    }
                }
                // a[true]
                if (filterFn.type === 'boolean') {
                    if (filterFn(context)) {
                        return filterTarget;
                    }
                    else {
                        return [];
                    }
                }
                if (filterFn.type === 'string') {
                    const value = filterFn(context);
                    return filterTarget.filter(el => el === value);
                }
                // a[test]
                return filterTarget.map(el => {
                    const iterationContext = Object.assign(Object.assign(Object.assign({}, context), { item: el }), el);
                    let result = filterFn(iterationContext);
                    // test is fn(val) => boolean SimpleUnaryTest
                    if (typeof result === 'function') {
                        result = result(el);
                    }
                    if (result instanceof Range$2) {
                        result = result.includes(el);
                    }
                    if (result === true) {
                        return el;
                    }
                    return result;
                }).filter(isTruthy$1);
            };
            case 'SimplePositiveUnaryTest': return tag$1((context) => {
                // <Interval>
                if (args.length === 1) {
                    return args[0](context);
                }
                // <CompareOp> <Expr>
                return args[0](context)(args[1](context));
            }, 'test');
            case 'List': return (context) => {
                return args.slice(1, -1).map(arg => arg(context));
            };
            case 'Interval': return tag$1((context) => {
                const left = args[1](context);
                const right = args[2](context);
                const startIncluded = left !== null && args[0] === '[';
                const endIncluded = right !== null && args[3] === ']';
                return createRange$1(left, right, startIncluded, endIncluded);
            }, Test$1('boolean'));
            case 'PositiveUnaryTests':
            case 'Expressions': return (context) => {
                return args.map(a => a(context));
            };
            case 'UnaryTests': return (context) => {
                return (value = null) => {
                    const negate = args[0] === 'not';
                    const tests = negate ? args.slice(2, -1) : args;
                    const matches = tests.map(test => test(context)).flat(1).map(test => {
                        if (isArray$4(test)) {
                            return test.includes(value);
                        }
                        if (test === null) {
                            return null;
                        }
                        if (typeof test === 'boolean') {
                            return test;
                        }
                        return compareValue$1(test, value);
                    }).reduce(combineResult$1, undefined);
                    return matches === null ? null : (negate ? !matches : matches);
                };
            };
            default: return node.name;
        }
    }
    function getBuiltin$1(name, _context) {
        return getFromContext$1(name, builtins$1);
    }
    function extractValue$1(context, prop, _target) {
        const target = _target(context);
        if (['list', 'range'].includes(getType$2(target))) {
            return target.map(t => ({ [prop]: t }));
        }
        return null;
    }
    function compareIn$1(value, tests) {
        if (!isArray$4(tests)) {
            if (getType$2(tests) === 'nil') {
                return null;
            }
            tests = [tests];
        }
        return tests.some(test => compareValue$1(test, value));
    }
    function compareValue$1(test, value) {
        if (typeof test === 'function') {
            return test(value);
        }
        if (test instanceof Range$2) {
            return test.includes(value);
        }
        return equals$1(test, value);
    }
    const chars$2 = Array.from('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
    function isTyped$1(type, values) {
        return (values.some(e => getType$2(e) === type) &&
            values.every(e => e === null || getType$2(e) === type));
    }
    function createRange$1(start, end, startIncluded = true, endIncluded = true) {
        if (isTyped$1('string', [start, end])) {
            return createStringRange$1(start, end, startIncluded, endIncluded);
        }
        if (isTyped$1('number', [start, end])) {
            return createNumberRange$1(start, end, startIncluded, endIncluded);
        }
        if (isTyped$1('duration', [start, end])) {
            throw notImplemented$1('range<duration>');
        }
        if (isTyped$1('time', [start, end])) {
            throw notImplemented$1('range<time>');
        }
        if (isTyped$1('date time', [start, end])) {
            throw notImplemented$1('range<date and time>');
        }
        if (isTyped$1('date', [start, end])) {
            throw notImplemented$1('range<date>');
        }
        throw new Error(`unsupported range: ${start}..${end}`);
    }
    function noopMap$1() {
        return () => {
            throw new Error('unsupported range operation: map');
        };
    }
    function valuesMap$1(values) {
        return (fn) => values.map(fn);
    }
    function valuesIncludes$1(values) {
        return (value) => values.includes(value);
    }
    function numberMap$1(start, end, startIncluded, endIncluded) {
        const direction = start > end ? -1 : 1;
        return (fn) => {
            const result = [];
            for (let i = start;; i += direction) {
                if (i === 0 && !startIncluded) {
                    continue;
                }
                if (i === end && !endIncluded) {
                    break;
                }
                result.push(fn(i));
                if (i === end) {
                    break;
                }
            }
            return result;
        };
    }
    function includesStart$1(n, inclusive) {
        if (inclusive) {
            return (value) => n <= value;
        }
        else {
            return (value) => n < value;
        }
    }
    function includesEnd$1(n, inclusive) {
        if (inclusive) {
            return (value) => n >= value;
        }
        else {
            return (value) => n > value;
        }
    }
    function anyIncludes$1(start, end, startIncluded, endIncluded) {
        let tests = [];
        if (start !== null && end !== null) {
            if (start > end) {
                tests = [
                    includesStart$1(end, endIncluded),
                    includesEnd$1(start, startIncluded)
                ];
            }
            else {
                tests = [
                    includesStart$1(start, startIncluded),
                    includesEnd$1(end, endIncluded)
                ];
            }
        }
        else if (end !== null) {
            tests = [
                includesEnd$1(end, endIncluded)
            ];
        }
        else if (start !== null) {
            tests = [
                includesStart$1(start, startIncluded)
            ];
        }
        return (value) => tests.every(t => t(value));
    }
    function createStringRange$1(start, end, startIncluded = true, endIncluded = true) {
        if (start !== null && !chars$2.includes(start)) {
            throw new Error('illegal range start: ' + start);
        }
        if (end !== null && !chars$2.includes(end)) {
            throw new Error('illegal range end: ' + end);
        }
        let values;
        if (start !== null && end !== null) {
            let startIdx = chars$2.indexOf(start);
            let endIdx = chars$2.indexOf(end);
            const direction = startIdx > endIdx ? -1 : 1;
            if (startIncluded === false) {
                startIdx += direction;
            }
            if (endIncluded === false) {
                endIdx -= direction;
            }
            values = chars$2.slice(startIdx, endIdx + 1);
        }
        const map = values ? valuesMap$1(values) : noopMap$1();
        const includes = values ? valuesIncludes$1(values) : anyIncludes$1(start, end, startIncluded, endIncluded);
        return new Range$2({
            start,
            end,
            'start included': startIncluded,
            'end included': endIncluded,
            map,
            includes
        });
    }
    function createNumberRange$1(start, end, startIncluded, endIncluded) {
        const map = start !== null && end !== null ? numberMap$1(start, end, startIncluded, endIncluded) : noopMap$1();
        const includes = anyIncludes$1(start, end, startIncluded, endIncluded);
        return new Range$2({
            start,
            end,
            'start included': startIncluded,
            'end included': endIncluded,
            map,
            includes
        });
    }
    function cartesianProduct$1(arrays) {
        if (arrays.some(arr => getType$2(arr) === 'nil')) {
            return null;
        }
        const f = (a, b) => [].concat(...a.map(d => b.map(e => [].concat(d, e))));
        const cartesian = (a, b, ...c) => (b ? cartesian(f(a, b), ...c) : a || []);
        return cartesian(...arrays);
    }
    function coalecenseTypes$1(a, b) {
        if (!b) {
            return a.type;
        }
        if (a.type === b.type) {
            return a.type;
        }
        return 'any';
    }
    function tag$1(fn, type) {
        return Object.assign(fn, {
            type,
            toString() {
                return `TaggedFunction[${type}] ${Function.prototype.toString.call(fn)}`;
            }
        });
    }
    function combineResult$1(result, match) {
        if (!result) {
            return match;
        }
        return result;
    }
    function isTruthy$1(obj) {
        return obj !== false && obj !== null;
    }
    function Test$1(type) {
        return `Test<${type}>`;
    }
    /**
     * @param {Function} fn
     * @param {string[]} [parameterNames]
     *
     * @return {FunctionWrapper}
     */
    function wrapFunction$1(fn, parameterNames = null) {
        if (!fn) {
            return null;
        }
        if (fn instanceof FunctionWrapper$1) {
            return fn;
        }
        if (fn instanceof Range$2) {
            return new FunctionWrapper$1((value) => fn.includes(value), ['value']);
        }
        return new FunctionWrapper$1(fn, parameterNames || parseParameterNames$1(fn));
    }
    function coerceSingleton$1(values) {
        if (Array.isArray(values) && values.length === 1) {
            return values[0];
        }
        else {
            return values;
        }
    }
    function parseString$1(str) {
        if (str.startsWith('"')) {
            str = str.slice(1);
        }
        if (str.endsWith('"')) {
            str = str.slice(0, -1);
        }
        return str.replace(/(\\")|(\\\\)|(\\u[a-fA-F0-9]{5,6})|((?:\\u[a-fA-F0-9]{1,4})+)/ig, function (substring, ...groups) {
            const [quotes, escape, codePoint, charCodes] = groups;
            if (quotes) {
                return '"';
            }
            if (escape) {
                return '\\';
            }
            const escapePattern = /\\u([a-fA-F0-9]+)/ig;
            if (codePoint) {
                const codePointMatch = escapePattern.exec(codePoint);
                return String.fromCodePoint(parseInt(codePointMatch[1], 16));
            }
            if (charCodes) {
                const chars = [];
                let charCodeMatch;
                while ((charCodeMatch = escapePattern.exec(substring)) !== null) {
                    chars.push(parseInt(charCodeMatch[1], 16));
                }
                return String.fromCharCode(...chars);
            }
            throw new Error('illegal match');
        });
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const propertyIdentifier = 119,
      identifier = 120,
      nameIdentifier = 121,
      insertSemi = 122,
      expression0 = 126,
      ForExpression = 4,
      forExpressionStart = 129,
      ForInExpression = 7,
      Name = 8,
      Identifier = 9,
      AdditionalIdentifier = 10,
      forExpressionBodyStart = 137,
      IfExpression = 18,
      ifExpressionStart = 138,
      QuantifiedExpression = 22,
      quantifiedExpressionStart = 139,
      QuantifiedInExpression = 26,
      PositiveUnaryTest = 36,
      ArithmeticExpression = 40,
      arithmeticPlusStart = 143,
      arithmeticTimesStart = 144,
      arithmeticExpStart = 145,
      arithmeticUnaryStart = 146,
      VariableName = 47,
      PathExpression = 67,
      pathExpressionStart = 151,
      FilterExpression = 69,
      filterExpressionStart = 152,
      FunctionInvocation = 71,
      functionInvocationStart = 153,
      ParameterName = 75,
      nil = 158,
      NumericLiteral = 78,
      StringLiteral = 79,
      BooleanLiteral = 80,
      List = 88,
      listStart = 169,
      FunctionDefinition = 89,
      functionDefinitionStart = 171,
      Context$1 = 96,
      contextStart = 173,
      ContextEntry = 97,
      PropertyName = 99,
      PropertyIdentifier = 100;

    /* global console,process */

    const LOG_PARSE = typeof process != 'undefined' && process.env && /\bfparse(:dbg)?\b/.test(process.env.LOG);
    const LOG_PARSE_DEBUG = typeof process != 'undefined' && process.env && /\bfparse:dbg\b/.test(process.env.LOG);
    const LOG_VARS = typeof process != 'undefined' && process.env && /\bcontext\b/.test(process.env.LOG);

    const spaceChars = [
      9, 11, 12, 32, 133, 160,
      5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198,
      8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288
    ];

    const newlineChars = chars$1('\n\r');

    const additionalNameChars = chars$1("'./-+*");

    /**
     * @param { string } str
     * @return { number[] }
     */
    function chars$1(str) {
      return Array.from(str).map(s => s.charCodeAt(0));
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isStartChar(ch) {
      return (
        ch === 63 // ?
      ) || (
        ch === 95 // _
      ) || (
        ch >= 65 && ch <= 90 // A-Z
      ) || (
        ch >= 97 && ch <= 122 // a-z
      ) || (
        ch >= 161 && !isPartChar(ch) && !isSpace(ch)
      );
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isAdditional(ch) {
      return additionalNameChars.includes(ch);
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isPartChar(ch) {
      return (
        ch >= 48 && ch <= 57 // 0-9
      ) || (
        ch === 0xB7
      ) || (
        ch >= 0x0300 && ch <= 0x036F
      ) || (
        ch >= 0x203F && ch <= 0x2040
      );
    }

    /**
     * @param { number } ch
     * @return { boolean }
     */
    function isSpace(ch) {
      return spaceChars.includes(ch);
    }

    // eslint-disable-next-line
    function indent(str, spaces) {
      return spaces.concat(
        str.split(/\n/g).join('\n' + spaces)
      );
    }

    /**
     * @param { import('@lezer/lr').InputStream } input
     * @param  { number } [offset]
     * @param { boolean } [includeOperators]
     *
     * @return { { token: string, offset: number } | null }
     */
    function parseAdditionalSymbol(input, offset = 0) {

      const next = input.peek(offset);

      if (isAdditional(next)) {
        return {
          offset: 1,
          token: String.fromCharCode(next)
        };
      }

      return null;
    }

    /**
     * @param { import('@lezer/lr').InputStream } input
     * @param { number } [offset]
     * @param { boolean } [namePart]
     *
     * @return { { token: string, offset: number } | null }
     */
    function parseIdentifier(input, offset = 0, namePart = false) {
      for (let inside = false, chars = [], i = 0;; i++) {
        const next = input.peek(offset + i);

        if (isStartChar(next) || ((inside || namePart) && isPartChar(next))) {
          if (!inside) {
            inside = true;
          }

          chars.push(next);
        } else {

          if (chars.length) {
            return {
              token: String.fromCharCode(...chars),
              offset: i
            };
          }

          return null;
        }
      }
    }

    /**
     * @param { import('@lezer/lr').InputStream } input
     * @param  { number } offset
     *
     * @return { { token: string, offset: number } | null }
     */
    function parseSpaces(input, offset) {

      for (let inside = false, i = 0;; i++) {
        let next = input.peek(offset + i);

        if (isSpace(next)) {
          if (!inside) {
            inside = true;
          }
        } else {
          if (inside) {
            return {
              token: ' ',
              offset: i
            };
          }

          return null;
        }
      }
    }

    /**
     * Parse a name from the input and return the first match, if any.
     *
     * @param { import('@lezer/lr').InputStream } input
     * @param { Variables } variables
     *
     * @return { { token: string, offset: number, term: number } | null }
     */
    function parseName$1(input, variables) {
      const contextKeys = variables.contextKeys();

      const start = variables.tokens;

      for (let i = 0, tokens = [], nextMatch = null;;) {

        const namePart = (start.length + tokens.length) > 0;
        const maybeSpace = tokens.length > 0;

        const match = (
          parseIdentifier(input, i, namePart) ||
          namePart && parseAdditionalSymbol(input, i) ||
          maybeSpace && parseSpaces(input, i)
        );

        // match is required
        if (!match) {
          return nextMatch;
        }

        const {
          token,
          offset
        } = match;

        i += offset;

        if (token === ' ') {
          continue;
        }

        tokens = [ ...tokens, token ];

        const name = [ ...start, ...tokens ].join(' ');

        if (contextKeys.some(el => el === name)) {
          const token = tokens[0];

          nextMatch = {
            token,
            offset: token.length,
            term: nameIdentifier
          };
        }

        if (dateTimeIdentifiers.some(el => el === name)) {
          const token = tokens[0];

          // parse date time identifiers as normal
          // identifiers to allow specialization to kick in
          //
          // cf. https://github.com/nikku/lezer-feel/issues/8
          nextMatch = {
            token,
            offset: token.length,
            term: identifier
          };
        }

        if (
          !contextKeys.some(el => el.startsWith(name)) &&
          !dateTimeIdentifiers.some(el => el.startsWith(name))
        ) {
          return nextMatch;
        }
      }

    }

    const identifiersMap = {
      [ identifier ]: 'identifier',
      [ nameIdentifier ]: 'nameIdentifier'
    };

    const identifiers = new ExternalTokenizer((input, stack) => {

      LOG_PARSE_DEBUG && console.log('%s: T <identifier | nameIdentifier>', input.pos);

      const nameMatch = parseName$1(input, stack.context);

      const start = stack.context.tokens;

      const match = nameMatch || parseIdentifier(input, 0, start.length > 0);

      if (match) {
        input.advance(match.offset);
        input.acceptToken(nameMatch ? nameMatch.term : identifier);

        LOG_PARSE && console.log('%s: MATCH <%s> <%s>', input.pos, nameMatch ? identifiersMap[nameMatch.term] : 'identifier', match.token);
      }
    }, { contextual: true });


    const propertyIdentifiers = new ExternalTokenizer((input, stack) => {

      LOG_PARSE_DEBUG && console.log('%s: T <propertyIdentifier>', input.pos);

      const start = stack.context.tokens;

      const match = parseIdentifier(input, 0, start.length > 0);

      if (match) {
        input.advance(match.offset);
        input.acceptToken(propertyIdentifier);

        LOG_PARSE && console.log('%s: MATCH <propertyIdentifier> <%s>', input.pos, match.token);
      }
    });


    const insertSemicolon = new ExternalTokenizer((input, stack) => {

      LOG_PARSE_DEBUG && console.log('%s: T <insertSemi>', input.pos);

      let offset;
      let insert = false;

      for (offset = 0;; offset++) {
        const char = input.peek(offset);

        if (spaceChars.includes(char)) {
          continue;
        }

        if (newlineChars.includes(char)) {
          insert = true;
        }

        break;
      }

      if (insert) {

        const identifier = parseIdentifier(input, offset + 1);
        const spaces = parseSpaces(input, offset + 1);

        if (spaces || identifier && /^(then|else|return|satisfies)$/.test(identifier.token)) {
          return;
        }

        LOG_PARSE && console.log('%s: MATCH <insertSemi>', input.pos);
        input.acceptToken(insertSemi);
      }
    });

    const prefixedContextStarts = {
      [ functionInvocationStart ]: 'FunctionInvocation',
      [ filterExpressionStart ]: 'FilterExpression',
      [ pathExpressionStart ]: 'PathExpression'
    };

    const contextStarts = {
      [ contextStart ]: 'Context',
      [ functionDefinitionStart ]: 'FunctionDefinition',
      [ forExpressionStart ]: 'ForExpression',
      [ listStart ]: 'List',
      [ ifExpressionStart ]: 'IfExpression',
      [ quantifiedExpressionStart ]: 'QuantifiedExpression'
    };

    const contextEnds = {
      [ Context$1 ]: 'Context',
      [ FunctionDefinition ]: 'FunctionDefinition',
      [ ForExpression ]: 'ForExpression',
      [ List ]: 'List',
      [ IfExpression ]: 'IfExpression',
      [ QuantifiedExpression ]: 'QuantifiedExpression',
      [ PathExpression ]: 'PathExpression',
      [ FunctionInvocation ]: 'FunctionInvocation',
      [ FilterExpression ]: 'FilterExpression',
      [ ArithmeticExpression ]: 'ArithmeticExpression'
    };

    class ValueProducer {

      /**
       * @param { Function } fn
       */
      constructor(fn) {
        this.fn = fn;
      }

      get(variables) {
        return this.fn(variables);
      }

      /**
       * @param { Function }
       *
       * @return { ValueProducer }
       */
      static of(fn) {
        return new ValueProducer(fn);
      }

    }

    const dateTimeLiterals = {
      'date and time': 1,
      'date': 1,
      'time': 1,
      'duration': 1
    };

    const dateTimeIdentifiers = Object.keys(dateTimeLiterals);

    class Variables {

      constructor({
        name = 'Expressions',
        tokens = [],
        children = [],
        parent = null,
        context = { },
        value,
        raw
      } = {}) {
        this.name = name;
        this.tokens = tokens;
        this.children = children;
        this.parent = parent;
        this.context = context;
        this.value = value;
        this.raw = raw;
      }

      enterScope(name) {

        const childScope = this.of({
          name,
          parent: this
        });

        LOG_VARS && console.log('[%s] enter', childScope.path, childScope.context);

        return childScope;
      }

      exitScope(str) {

        if (!this.parent) {
          LOG_VARS && console.log('[%s] NO exit %o\n%s', this.path, this.context, indent(str, '  '));

          return this;
        }

        LOG_VARS && console.log('[%s] exit %o\n%s', this.path, this.context, indent(str, '  '));

        return this.parent.pushChild(this);
      }

      token(part) {

        LOG_VARS && console.log('[%s] token <%s> + <%s>', this.path, this.tokens.join(' '), part);

        return this.assign({
          tokens: [ ...this.tokens, part ]
        });
      }

      literal(value) {

        LOG_VARS && console.log('[%s] literal %o', this.path, value);

        return this.pushChild(this.of({
          name: 'Literal',
          value
        }));
      }

      /**
       * Return computed scope value
       *
       * @return {any}
       */
      computedValue() {
        for (let scope = this;;scope = last(scope.children)) {

          if (!scope) {
            return null;
          }

          if (scope.value) {
            return scope.value;
          }
        }
      }

      contextKeys() {
        return Object.keys(this.context).map(normalizeContextKey);
      }

      get path() {
        return this.parent?.path?.concat(' > ', this.name) || this.name;
      }

      /**
       * Return value of variable.
       *
       * @param { string } variable
       * @return { any } value
       */
      get(variable) {

        const names = [ variable, variable && normalizeContextKey(variable) ];

        const contextKey = Object.keys(this.context).find(
          key => names.includes(normalizeContextKey(key))
        );

        if (typeof contextKey === 'undefined') {
          return undefined;
        }

        const val = this.context[contextKey];

        if (val instanceof ValueProducer) {
          return val.get(this);
        } else {
          return val;
        }
      }

      resolveName() {

        const variable = this.tokens.join(' ');
        const tokens = [];

        const parentScope = this.assign({
          tokens
        });

        const variableScope = this.of({
          name: 'VariableName',
          parent: parentScope,
          value: this.get(variable),
          raw: variable
        });

        LOG_VARS && console.log('[%s] resolve name <%s=%s>', variableScope.path, variable, this.get(variable));

        return parentScope.pushChild(variableScope);
      }

      pushChild(child) {

        if (!child) {
          return this;
        }

        const parent = this.assign({
          children: [ ...this.children, child ]
        });

        child.parent = parent;

        return parent;
      }

      pushChildren(children) {

        let parent = this;

        for (const child of children) {
          parent = parent.pushChild(child);
        }

        return parent;
      }

      declareName() {

        if (this.tokens.length === 0) {
          throw Error('no tokens to declare name');
        }

        const variableName = this.tokens.join(' ');

        LOG_VARS && console.log('[%s] declareName <%s>', this.path, variableName);

        return this.assign({
          tokens: []
        }).pushChild(
          this.of({
            name: 'Name',
            value: variableName
          })
        );
      }

      define(name, value) {

        if (typeof name !== 'string') {
          LOG_VARS && console.log('[%s] no define <%s=%s>', this.path, name, value);

          return this;
        }

        LOG_VARS && console.log('[%s] define <%s=%s>', this.path, name, value);

        const context = {
          ...this.context,
          [name]: value
        };

        return this.assign({
          context
        });
      }

      /**
       * @param { Record<string, any> } [options]
       *
       * @return { Variables }
       */
      assign(options = {}) {

        return Variables.of({
          ...this,
          ...options
        });
      }

      /**
       * @param { Record<string, any> } [options]
       *
       * @return { Variables }
       */
      of(options = {}) {

        const defaultOptions = {
          context: this.context,
          parent: this.parent
        };

        return Variables.of({
          ...defaultOptions,
          ...options
        });
      }

      static of(options) {
        const {
          name,
          tokens = [],
          children = [],
          parent = null,
          context = {},
          value,
          raw
        } = options;

        return new Variables({
          name,
          tokens: [ ...tokens ],
          children: [ ...children ],
          context: {
            ...context
          },
          parent,
          value,
          raw
        });
      }

    }

    /**
     * @param { string } name
     *
     * @return { string } normalizedName
     */
    function normalizeContextKey(name) {
      return name.replace(/\s*([./\-'+*])\s*/g, ' $1 ').replace(/\s{2,}/g, ' ').trim();
    }

    /**
     * Wrap children of variables under the given named child.
     *
     * @param { Variables } variables
     * @param { string } name
     * @param { string } code
     * @return { Variables }
     */
    function wrap(variables, scopeName, code) {

      const parts = variables.children.filter(c => c.name !== scopeName);
      const children = variables.children.filter(c => c.name === scopeName);

      const namePart = parts[0];
      const valuePart = parts[Math.max(1, parts.length - 1)];

      const name = namePart.computedValue();
      const value = valuePart?.computedValue() || null;

      return variables
        .assign({
          children
        })
        .enterScope(scopeName)
        .pushChildren(parts)
        .exitScope(code)
        .define(name, value);
    }

    /**
     * @param { any } context
     *
     * @return { ContextTracker<Variables> }
     */
    function trackVariables(context = {}) {

      const start = Variables.of({
        context
      });

      return new ContextTracker({
        start,
        reduce(variables, term, stack, input) {

          if (term === IfExpression) {
            const [ thenPart, elsePart ] = variables.children.slice(-2);

            variables = variables.assign({
              value: {
                ...thenPart?.computedValue(),
                ...elsePart?.computedValue()
              }
            });
          }

          if (term === List) {
            variables = variables.assign({
              value: variables.children.reduce((value, child) => {
                return {
                  ...value,
                  ...child?.computedValue()
                };
              }, {})
            });
          }

          if (term === FilterExpression) {
            const [ sourcePart, _ ] = variables.children.slice(-2);

            variables = variables.assign({
              value: sourcePart?.computedValue()
            });
          }

          if (term === FunctionInvocation) {

            const [
              name,
              ...args
            ] = variables.children;

            // preserve type information through `get value(context, key)` utility
            if (name?.raw === 'get value') {
              variables = getContextValue(variables, args);
            }
          }

          const start = contextStarts[term];

          if (start) {
            return variables.enterScope(start);
          }

          const prefixedStart = prefixedContextStarts[term];

          // pull <expression> into new <prefixedStart> context
          if (prefixedStart) {

            const {
              children: currentChildren,
              context: currentContext,
            } = variables;

            const children = currentChildren.slice(0, -1);
            const lastChild = last(currentChildren);

            let newContext = null;

            if (term === pathExpressionStart) {
              newContext = lastChild?.computedValue();
            }

            if (term === filterExpressionStart) {
              newContext = {
                ...currentContext,
                ...lastChild?.computedValue(),
                item: lastChild?.computedValue()
              };
            }

            return variables.assign({
              children
            }).enterScope(prefixedStart).pushChild(lastChild).assign({
              context: newContext || currentContext
            });
          }

          const code = input.read(input.pos, stack.pos);

          const end = contextEnds[term];

          if (end) {
            return variables.exitScope(code);
          }

          if (term === ContextEntry) {
            const parts = variables.children.filter(c => c.name !== 'ContextEntry');

            const name = parts[0];
            const value = last(parts);

            return wrap(variables, 'ContextEntry', code).assign(
              {
                value: {
                  ...variables.value,
                  [name.computedValue()] : value?.computedValue()
                }
              }
            );
          }

          if (
            term === ForInExpression ||
            term === QuantifiedInExpression
          ) {
            return wrap(variables, 'InExpression', code);
          }

          // define <partial> within ForExpression body
          if (term === forExpressionBodyStart) {

            return variables.define(
              'partial',
              ValueProducer.of(variables => {
                return last(variables.children)?.computedValue();
              })
            );
          }

          if (
            term === ParameterName
          ) {
            const name = last(variables.children).computedValue();

            // TODO: attach type information
            return variables.define(name, 1);
          }

          // pull <expression> into ArithmeticExpression child
          if (
            term === arithmeticPlusStart ||
            term === arithmeticTimesStart ||
            term === arithmeticExpStart
          ) {
            const children = variables.children.slice(0, -1);
            const lastChild = last(variables.children);

            return variables.assign({
              children
            }).enterScope('ArithmeticExpression').pushChild(lastChild);
          }

          if (term === arithmeticUnaryStart) {
            return variables.enterScope('ArithmeticExpression');
          }

          if (
            term === Identifier ||
            term === AdditionalIdentifier ||
            term === PropertyIdentifier
          ) {
            return variables.token(code);
          }

          if (
            term === StringLiteral
          ) {
            return variables.literal(code.replace(/^"|"$/g, ''));
          }

          if (term === BooleanLiteral) {
            return variables.literal(code === 'true' ? true : false);
          }

          if (term === NumericLiteral) {
            return variables.literal(parseFloat(code));
          }

          if (term === nil) {
            return variables.literal(null);
          }

          if (
            term === VariableName
          ) {
            return variables.resolveName();
          }

          if (
            term === Name ||
            term === PropertyName
          ) {
            return variables.declareName();
          }

          if (
            term === expression0 ||
            term === PositiveUnaryTest
          ) {
            if (variables.tokens.length > 0) {
              throw new Error('uncleared name');
            }
          }

          if (term === expression0) {

            let parent = variables;

            while (parent.parent) {
              parent = parent.exitScope(code);
            }

            return parent;
          }

          return variables;
        }
      });
    }

    const variableTracker = trackVariables({});


    // helpers //////////////

    function getContextValue(variables, args) {

      if (!args.length) {
        return variables.assign({
          value: null
        });
      }

      if (args[0].name === 'Name') {
        args = extractNamedArgs(args, [ 'm', 'key' ]);
      }

      if (args.length !== 2) {
        return variables.assign({
          value: null
        });
      }

      const [
        context,
        key
      ] = args;

      const keyValue = key?.computedValue();
      const contextValue = context?.computedValue();

      if (
        (!contextValue || typeof contextValue !== 'object') || typeof keyValue !== 'string'
      ) {
        return variables.assign({
          value: null
        });
      }

      return variables.assign({
        value: [ normalizeContextKey(keyValue), keyValue ].reduce((value, keyValue) => {
          if (keyValue in contextValue) {
            return contextValue[keyValue];
          }

          return value;
        }, null)
      });
    }

    function extractNamedArgs(args, argNames) {

      const context = {};

      for (let i = 0; i < args.length; i += 2) {
        const [ name, value ] = args.slice(i, i + 2);

        context[name.value] = value;
      }

      return argNames.map(name => context[name]);
    }

    function last(arr) {
      return arr[arr.length - 1];
    }

    const feelHighlighting = styleTags({
      StringLiteral: tags.string,
      NumericLiteral: tags.number,
      BooleanLiteral: tags.bool,
      'AtLiteral!': tags.special(tags.string),
      CompareOp: tags.compareOperator,
      ArithOp: tags.arithmeticOperator,
      'for if then else some every satisfies between return': tags.controlKeyword,
      'in instance of and or': tags.operatorKeyword,
      function: tags.definitionKeyword,
      as: tags.keyword,
      'Type/...': tags.typeName,
      Wildcard: tags.special,
      null: tags.null,
      LineComment: tags.lineComment,
      BlockComment: tags.blockComment,
      'VariableName! "?"': tags.variableName,
      'DateTimeConstructor! SpecialFunctionName!': tags.function(tags.special(tags.variableName)),
      'List Interval': tags.list,
      Context: tags.definition(tags.literal),
      'Name!': tags.definition(tags.variableName),
      'Key/Name! ContextEntryType/Name!': tags.definition(tags.propertyName),
      'PathExpression/VariableName!': tags.function(tags.propertyName),
      'FormalParameter/ParameterName!': tags.function(tags.definition(tags.variableName)),
      '( )': tags.paren,
      '[ ]': tags.squareBracket,
      '{ }': tags.brace,
      '.': tags.derefOperator,
      ', ;': tags.separator,
      '..': tags.punctuation
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier = {__proto__:null,for:10, in:30, return:34, if:38, then:40, else:42, some:46, every:48, satisfies:55, or:58, and:62, between:70, instance:86, of:89, days:99, time:101, duration:103, years:105, months:107, date:109, list:115, context:121, function:128, null:154, true:324, false:324, "?":168, external:184, not:207};
    const parser$1 = LRParser.deserialize({
      version: 14,
      states: "IWO`QYOOO$gQYOOOOQU'#Ce'#CeO$qQYO'#C`O%zQ^O'#FOOOQQ'#Fd'#FdO'dQYO'#FdO`QYO'#DUOOQU'#Em'#EmO)QQ^O'#D]OOQO'#Fk'#FkO,PQWO'#DuOOQU'#D|'#D|OOQU'#D}'#D}OOQU'#EO'#EOO,UOWO'#ERO,PQWO'#EPOOQU'#EP'#EPOOQU'#Fq'#FqOOQU'#Fo'#FoOOQQ'#Fv'#FvO.yQYO'#FvO0wQYO'#FvOOQU'#ET'#ETO2sQYO'#EVOOQU'#FQ'#FQO4UQ^O'#FQO5hQYO'#EWO5rQWO'#EXOOQP'#GP'#GPO5wQXO'#E`OOQU'#Fz'#FzOOQU'#FP'#FPOOQQ'#Eh'#EhQ`QYOOOOQQ'#FR'#FROOQQ'#F['#F[O2sQYO'#CnOOQQ'#F]'#F]O$qQYO'#CrO6SQYO'#DvOOQU'#Fp'#FpO6XQYO'#EQOOQO'#EQ'#EQO2sQYO'#EUO`QYO'#ETOOQO'#F}'#F}O7bQYO'#DQO8UQWO'#F`OOQO'#DS'#DSO8aQYO'#FdQOQWOOO8hQWOOO9[QYO'#CdO9iQYO'#FTOOQQ'#Cc'#CcO9nQYO'#FSOOQQ'#Cb'#CbO9vQYO,58zO`QYO,59hOOQQ'#Fa'#FaOOQQ'#Fb'#FbOOQQ'#Fc'#FcO`QYO,59pO`QYO,59pO`QYO,59pOOQQ'#Fi'#FiO$qQYO,5:]OOQQ'#Fj'#FjO2sQYO,5:_OOQQ,5;j,5;jO`QYO,59dO`QYO,59fO2sQYO,59hO;fQYO,59hO;mQYO,59rOOQU,5:h,5:hO;rQ^O,59pOOQU-E8k-E8kO>qQYO'#FlOOQU,5:a,5:aOOQU,5:m,5:mOOQU,5:k,5:kO>{QYO,5:qOOQU,5;l,5;lO?SQYO'#FnO?aQWO,5:rO?fQYO,5:sOOQP'#Ed'#EdO@YQXO'#EcOOQO'#Eb'#EbO@aQWO'#EaO@fQWO'#GQO@nQWO,5:zOOQQ-E8f-E8fO@sQYO,59YO9iQYO'#F_OOQQ'#Cv'#CvO@zQYO'#F^OOQQ'#Cu'#CuOASQYO,59^OAXQYO,5:bOA^QYO,5:lOAcQYO,5:pOAjQ^O,5:oO2sQYO'#ElOCSQWO,5;zO2sQYOOOOQR'#Cf'#CfOOQQ'#Ei'#EiOCyQYO,59OO2sQYO,5;oOOQQ'#FW'#FWO$qQYO'#EjODZQYO,5;nO`QYO1G.fOOQQ'#FZ'#FZOEjQ^O1G/SOI]Q^O1G/[OIgQ^O1G/[OK_Q^O1G/[OOQU1G/w1G/wOLtQYO1G/yOMyQ^O1G/OO!!aQ^O1G/QO!$}QYO1G/SO!%UQYO1G/SOOQU1G/S1G/SO!&tQYO1G/^O!'`Q^O'#CdOOQO'#Dy'#DyO!(rQWO'#DxO!(wQWO'#FmOOQO'#Dw'#DwOOQO'#Dz'#DzO!)PQWO,5<WOOQU'#Fy'#FyOOQU1G0]1G0]O2sQYO'#ErO!)UQWO,5<YOOQU'#F|'#F|OOQU1G0^1G0^O!)aQWO'#EZO!)lQWO'#GOOOQO'#EY'#EYO!)tQWO1G0_OOQP'#Et'#EtO!)yQXO,5:}O2sQYO,5:{O!*QQXO'#EuO!*YQWO,5<lOOQU1G0f1G0fO2sQYO1G.tO2sQYO,5;yO$qQYO'#EkO!*bQYO,5;xO`QYO1G.xO!*jQYO1G/|OOQO1G0W1G0WO2sQYO1G0[OOQO,5;W,5;WOOQO-E8j-E8jO!*oQWOOOOQQ-E8g-E8gO!*tQYO'#ClOOQQ1G1Z1G1ZOOQQ,5;U,5;UOOQQ-E8h-E8hO!+RQ^O7+$QOOQU7+%e7+%eO`QYO7+$nO!,kQWO7+$nO!,pQ^O'#D[OOQU'#DZ'#DZO!/oQYO'#D^O!/tQYO'#D^O!/yQYO'#D^O!0OQ`O'#DfO!0TQ`O'#DiO!0YQ`O'#DmOOQU7+$x7+$xO2sQYO,5:dO$qQYO'#EqO!0_QWO,5<XOOQU1G1r1G1rO!0gQYO,5;^OOQO-E8p-E8pO!&tQYO,5:uO$qQYO'#EsO!0tQWO,5<jO!0|QYO7+%yOOQP-E8r-E8rO!1TQYO1G0gOOQO,5;a,5;aOOQO-E8s-E8sO!1_QYO7+$`O!1fQYO1G1eOOQQ,5;V,5;VOOQQ-E8i-E8iO!1pQ^O7+$dOOQO7+%h7+%hO!4WQYO7+%vO2sQYO,59WO!5lQ^O<<HYOOQU<<HY<<HYO$qQYO'#EnO!7OQ^O,59vO!9}QYO,59xO!:SQYO,59xO!:XQYO,59xO!:^QYO,5:QO$qQYO,5:TO!:xQbO,5:XO!;PQYO1G0OOOQO,5;],5;]OOQO-E8o-E8oOOQO1G0a1G0aOOQO,5;_,5;_OOQO-E8q-E8qO!;ZQ^O'#E]OOQU<<Ie<<IeO`QYO<<IeO`QYO<<GzO!<sQ^O'#FjOOQU'#Fw'#FwOOQU<<Ib<<IbO!?rQYO1G.rOOQU,5;Y,5;YOOQU-E8l-E8lO!?|QYO1G/dOOQU1G/d1G/dO!@RQbO'#D]O!@dQ`O'#D[O!@oQ`O1G/lO!@tQWO'#DlO!@yQ`O'#FeOOQO'#Dk'#DkO!ARQ`O1G/oOOQO'#Dp'#DpO!AWQ`O'#FgOOQO'#Do'#DoO!A`Q`O1G/sOOQUAN?PAN?PO!AeQ^OAN=fOOQU7+%O7+%OO!B}Q`O,59vOOQU7+%W7+%WO!:^QYO,5:WO$qQYO'#EoO!CYQ`O,5<POOQU7+%Z7+%ZO!:^QYO'#EpO!CbQ`O,5<RO!CjQ`O7+%_OOQO1G/r1G/rOOQO,5;Z,5;ZOOQO-E8m-E8mOOQO,5;[,5;[OOQO-E8n-E8nO!&tQYO<<HyOOQUAN>eAN>eO!CoQ^O'#FQO2sQYO'#ETO2sQYO,59hO2sQYO,59pO2sQYO,59pO2sQYO,59pO2sQYO,59dO2sQYO,59fO!EvQYO,59hO!E}QYO,5:oO2sQYO1G.fO!FqQYO1G/SO!HxQYO1G/[O!ISQYO1G/[O!JXQYO1G/OO!KyQYO1G/QO2sQYO1G.xO!LsQYO7+$QO2sQYO7+$nO!MgQYO7+%yO!MqQYO7+$dO!NeQYO<<HYO$qQYO'#EnO# RQYO'#E]O2sQYO<<IeO2sQYO<<GzO# uQYOAN=fO!:^QYO<<HyO2sQYO'#DUO#!iQ^O'#DQO9vQYO,58zO#$RQYO,59^O#$WQYO1G/SO#$_QWO1G0_O#$dQYO7+$`O#$kQ`O7+%_O$qQYO'#C`O$qQYO'#CrO2sQYO,59hO?fQYO,5:sO2sQYO1G.tO#$pQ`O1G/sO#$uQWO'#EXO#$zQYO,59YO!:xQbO,5:XO2sQYO'#CnO#%RQ`O'#Dm",
      stateData: "#%W~O#pOS#qOSPOSQOS~OTsOZUO[TOctOgvOhvOr}OueO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~OTsO[TOctOgvOhvOr&pOueO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~OZ!SO#Z!UO~P!|O#lQO#mQO~OZ!^O[!^O]!_O^!_O_!lOm!iOo!jOq!]Or!]Os!kOy!`O{!mO!h!fO#x!dOu$_X~O#n!hO$u!hOT#rXc#rXg#rXh#rX!S#rX!T#rX!U#rX!W#rX!b#rX!f#rX!o#rX!v#rX#R#rX#j#rX#l#rX#m#rX$f#rX$g#rX$h#rX$i#rX~P$yO$f!nOT$WXZ$WX[$WXc$WXg$WXh$WXr$WXu$WX!S$WX!T$WX!U$WX!W$WX!b$WX!f$WX!h$WX!o$WX!v$WX#R$WX#l$WX#m$WX$g$WX$h$WX$i$WX~O#lQO#mQOT!PXZ!PX[!PX]!PX^!PX_!PXc!PXg!PXh!PXm!PXo!PXq!PXr!PXs!PXu!PXy!PX{!PX!S!PX!T!PX!U!PX!W!PX!b!PX!f!PX!h!PX!o!PX!v!PX#R!PX#j!PX#n!PX#x!PX$f!PX$g!PX$h!PX$i!PX$u!PX#|!PXw!PXd!PX#{!PXa!PX#Q!PXe!PXk!PX~Ou!qO~O$g]O~OT$jXT$lXc$jXc$lXg$jXg$lXh$jXh$lXr$jXr$lXu$jXu$lX!S$jX!S$lX!T$jX!T$lX!U$jX!U$lX!W$jX!W$lX!b$jX!b$lX!f$jX!f$lX!h$jX!h$lX!o$jX!o$lX!v$jX!v$lX#R$jX#R$lX$f$jX$f$lX$g$jX$g$lX$h$jX$h$lX$i$jX$i$lX~OZ$jXZ$lX[$jX[$lX#l$jX#l$lX#m$jX#m$lX~P,ZOT$jXc$jXg$jXh$jXr$jXu$jX!S$jX!T$jX!U$jX!W$jX!b$jX!f$jX!h$jX!o$jX!v$jX#R$jX$f$jX$g$jX$h$jX$i$jX~OT$oXZ$jXZ$oX[$jX[$oXc$oXg$oXh$oXr$oXu$oX!S$oX!T$oX!U$oX!W$oX!b$oX!f$oX!h$oX!o$oX!v$oX#R$oX#l$jX#l$oX#m$jX#m$oX$f$oX$g$oX$h$oX$i$oX~P/gOZUO~P!|O#n!vOZ#tX[#tX]#tX^#tX_#tXm#tXo#tXq#tXr#tXs#tXu#tXy#tX{#tX!f#tX!h#tX#j#tX#x#tX~OT#tXc#tXg#tXh#tX!S#tX!T#tX!U#tX!W#tX!b#tX!o#tX!v#tX#R#tX#l#tX#m#tX#n#tX$f#tX$g#tX$h#tX$i#tX$u#tX~P2zOZUO!f$bP~P!|Ou!yO~O#k!zO$g]O#Q$tP~Oo#XO~Oo#YOu!tX~OZ!^O[!^O]!_O^!_O_&wOm&uOo&vOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~O#jtX#|tXwtX!ftXdtX#{tXatX#QtXetXktX~P6aO#|#]O#j$SXw$SX~O#j#YX~P'dOu#_O~OZ#`O[#`O]#`O^#`O#lQO#mQO#x#`O#y#`O$YWX~O_WXwWX#|WX~P8mO_#dO~O#|#eOa#vX~Oa#hO~OTsOZUO[TOctOgvOhvOr}O!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#rO~P9{O|#tO~O{!mO!h!fO#x!dOTxaZxa[xa]xa^xa_xacxagxahxamxaoxaqxarxasxau$_Xyxa!Sxa!Txa!Uxa!Wxa!bxa!fxa!oxa!vxa#Rxa#jxa#lxa#mxa#nxa$fxa$gxa$hxa$ixa$uxa#|xawxadxa#{xaaxa#Qxaexakxa~OZUOw$bP~P!|Ow#|O~P6aO#|$OO!f$bXw$bX~P6aO!f$QO~O#lQO#mQOw$rP~OZ#`O[#`O]#`O^#`O#k!zO#x#`O#y#`O~O$Y#VX~P?qO$Y$YO~O#|$ZO#Q$tX~O#Q$]O~Od$^O~P6aO#|$`Ok$QX~Ok$bO~O!V$cO~O!S$dO~O#{$eO~P6aOT!wac!wag!wah!wa!S!wa!T!wa!U!wa!W!wa!b!wa!f!wa!o!wa!v!wa#R!wa#j!wa#l!wa#m!wa#n!wa$f!wa$g!wa$h!wa$i!wa$u!wa~P$yO#|#]O#j$Saw$Sa~OZ#`O[#`O]#`O^#`O#lQO#mQO#x#`O#y#`O~O_Wa$YWawWa#|Wa~PC_O#|#eOa#va~OZ!^O[!^O]!_O^!_Oy!`O{!mO!h!fO#x!dO_pimpiopiqpirpispiu$_X!fpi#jpi~OTpicpigpihpi!Spi!Tpi!Upi!Wpi!bpi!opi!vpi#Rpi#lpi#mpi#npi$fpi$gpi$hpi$ipi$upi~PDcOy!`O{!mO!h!fO#x!dOTxiZxi[xi_xicxigxihximxioxiqxirxisxiu$_X!Sxi!Txi!Uxi!Wxi!bxi!fxi!oxi!vxi#Rxi#jxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$uxi~O]!_O^!_O~PF|O]xi^xi~PF|O{!mO!h!fO#x!dOZxi[xi]xi^xi_ximxioxiqxirxisxiu$_X!fxi#jxi#|xiwxidxi#{xiaxi#Qxiexikxi~OTxicxigxihxiyxi!Sxi!Txi!Uxi!Wxi!bxi!oxi!vxi#Rxi#lxi#mxi#nxi$fxi$gxi$hxi$ixi$uxi~PIqO!f$oO~P6aOZ!^O[!^O]!_O^!_O_!lOo!jOq!]Or!]Os!kOy!`O{!mO!h!fO#x!dOu$_X~OTlicliglihlimli!Sli!Tli!Uli!Wli!bli!fli!oli!vli#Rli#jli#lli#mli#nli$fli$gli$hli$ili$uli~PL{OZ!^O[!^O]!_O^!_O_!lOq!]Or!]Os!kOy!`O{!mO!h!fO#x!dOu$_X~OTnicnignihnimnioni!Sni!Tni!Uni!Wni!bni!fni!oni!vni#Rni#jni#lni#mni#nni$fni$gni$hni$ini$uni~P! fOZ!^O[!^O]!_O^!_O_&wOm&uOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~Oo$pO~P!$POTsOZUO[TOctOgvOhvOr&pOueO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~P,ZO!R$tO!U$uO!W$vO!Z$wO!^$xO!b$yO#lQO#mQO~OZ#aX[#aX]#aX^#aX_#aXm#aXo#aXq#aXr#aXs#aXu#aXw#aXy#aX{#aX!h#aX#l#aX#m#aX#n#aX#x#aX#|#aX~P8mO$Y${O~O#|$|Ow$aX~Ow%OO~O#|$OO!f$baw$ba~O$Y%ROw!}X#|!}X~O#|%SOw$rX~Ow%UO~O$Y#Va~P?qO#k!zO$g]O~O#|$ZO#Q$ta~O#|$`Ok$Qa~O!T%`O~Ow!TO~O#{%bOa`X#|`X~P6aOTSqcSqgSqhSq!SSq!TSq!USq!WSq!bSq!fSq!oSq!vSq#RSq#jSq#lSq#mSq#nSq$fSq$gSq$hSq$iSq$uSq~P$yOw%dO~O#x%eOT!OXZ!OX[!OX]!OX^!OX_!OXc!OXg!OXh!OXm!OXo!OXq!OXr!OXs!OXu!OXy!OX{!OX!S!OX!T!OX!U!OX!W!OX!b!OX!f!OX!h!OX!o!OX!v!OX#R!OX#j!OX#l!OX#m!OX#n!OX$f!OX$g!OX$h!OX$i!OX$u!OX#|!OXw!OXd!OX#{!OXa!OX#Q!OXe!OXk!OX~Oo%gO~Oo%hO~Oo%iO~O![%jO~O![%kO~O![%lO~O#|$|Ow$aa~O!f#fa#|#faw#fa~P6aO#|%SOw$ra~O#O%uO~P`O#Q#Ti#|#Ti~P6aOe%vO~P6aOk$Ri#|$Ri~P6aOTfqcfqgfqhfq!Sfq!Tfq!Ufq!Wfq!bfq!ffq!ofq!vfq#Rfq#jfq#lfq#mfq#nfq$ffq$gfq$hfq$ifq$ufq~P$yOZ!^O[!^O]!_O^!_O_&wOm&uOo&vOq&qOr&qOs'gOy!`O{!mO#x!dOu$_X~Ow%xO!f%xO!h%wO~P!3YOZ!^O[!^O]!_O^!_Oy!`O{!mO!h!fO#x!dO_pympyopyqpyrpyspyu$_X!fpy#jpy~OTpycpygpyhpy!Spy!Tpy!Upy!Wpy!bpy!opy!vpy#Rpy#lpy#mpy#npy$fpy$gpy$hpy$ipy$upy~P!4eO#x%eOT!OaZ!Oa[!Oa]!Oa^!Oa_!Oac!Oag!Oah!Oam!Oao!Oaq!Oar!Oas!Oau!Oay!Oa{!Oa!S!Oa!T!Oa!U!Oa!W!Oa!b!Oa!f!Oa!h!Oa!o!Oa!v!Oa#R!Oa#j!Oa#l!Oa#m!Oa#n!Oa$f!Oa$g!Oa$h!Oa$i!Oa$u!Oa#|!Oaw!Oad!Oa#{!Oaa!Oa#Q!Oae!Oak!Oa~O!S%}O~O!V%}O~O!S&OO~O!R$tO!U$uO!W$vO!Z$wO!^$xO!b'oO#lQO#mQO~O!X$ZP~P!:^Ow!li#|!li~P6aOT#PXc#PXg#PXh#PX!S#PX!T#PX!U#PX!W#PX!b#PX!f#PX!o#PX!v#PX#R#PX#j#PX#l#PX#m#PX#n#PX$f#PX$g#PX$h#PX$i#PX$u#PX~P$yOT$^XZ$^X[$^X]$kX^$kX_$kXc$^Xg$^Xh$^Xm$kXo$kXq$kXr$^Xs$kXu$^Xy$kX{$kX!S$^X!T$^X!U$^X!W$^X!b$^X!f$^X!h$^X!o$^X!v$^X#R$^X#j$kX#l$^X#m$^X#n$kX#x$kX$f$^X$g$^X$h$^X$i$^X$u$kX#|$kXw$kXd$kX#{$kXa$kX#Q$kXe$kXk$kX~Oa`i#|`i~P6aO!T&^O~O#lQO#mQO!X!PX#x!PX#|!PX~O#x'VO!X!OX#|!OX~O!X&`O~O$Y&aO~O#|&bO!X$XX~O!X&dO~O#|&eO!X$ZX~O!X&gO~OTb!Rcb!Rgb!Rhb!R!Sb!R!Tb!R!Ub!R!Wb!R!bb!R!fb!R!ob!R!vb!R#Rb!R#jb!R#lb!R#mb!R#nb!R$fb!R$gb!R$hb!R$ib!R$ub!R~P$yO#x'VO!X!Oa#|!Oa~O#|&bO!X$Xa~O#|&eO!X$Za~O$[&mO~O#|#tXw#tXd#tX#{#tXa#tX#Q#tXe#tXk#tX~P2zOTsOZUO[TOctOgvOhvOr&pO!S{O!T{O!UxO!WzO!b!OO!fdO!hfO!oyO!viO#RmO#lQO#mQO$f[O$g]O$h^O$i_O~Ou#rO~P!D]O#j!wa#|!waw!wa!f!wad!wa#{!waa!wa#Q!wae!wak!wa~P6aO#|piwpidpi#{piapi#Qpiepikpi~PDcOy!`O{!mO!h!fO#x!dOZxi[xi_ximxioxiqxirxisxiu$_X#jxi#|xiwxi!fxidxi#{xiaxi#Qxiexikxi~O]!_O^!_O~P!G_Oy!`O~PIqOZ!^O[!^O]!_O^!_O_&wOo&vOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~Omli#jli#|liwli!flidli#{liali#Qlielikli~P!IZOZ!^O[!^O]!_O^!_O_&wOq&qOr&qOs'gOy!`O{!mO!h!fO#x!dOu$_X~Omnioni#jni#|niwni!fnidni#{niani#Qnienikni~P!KOO#jSq#|SqwSq!fSqdSq#{SqaSq#QSqeSqkSq~P6aOZUO#O'XO~P!|O#jfq#|fqwfq!ffqdfq#{fqafq#Qfqefqkfq~P6aO#|pywpydpy#{pyapy#Qpyepykpy~P!4eO#j#PX#|#PXw#PX!f#PXd#PX#{#PXa#PX#Q#PXe#PXk#PX~P6aO#jb!R#|b!Rwb!R!fb!Rdb!R#{b!Rab!R#Qb!Reb!Rkb!R~P6aOTtXctXgtXhtX!StX!TtX!UtX!WtX!btX!ftX!otX!vtX#RtX#jtX#ltX#mtX#ntX$ftX$gtX$htX$itX$utX~P$yOk'PO~Oo'RO~P!$POw'SO~Oe'YO~P6aO$['[O~O!X'dO~Ou'hO~Od'iO~P6aO!['mO~O",
      goto: "!$f$uPPPP$vP&Q&W&_&t(sPPPPP(|P$vPPP$vPP)P)VP$vP$vP$vPPP)^P)jP$vP$vPP)s*Y*e*YPPPPPPP*YPP*YP,V,Y*YP,`,f$vP$vP$v,m-w-z.Q-wP.Z/e.Z.Z0v2QP$v3[$v4f4f5p5vP5}PP4f6V6]0r6aP6iP6l6r6y7P7V7]8y9T9Z9a9g9m9s9yPPPPPPPP:P:T=X>c?o?sPP?xPP@O@UAbBnBrBwB|CxDvEvGSPGVPGZHZIZJeJkJn$vJtJtPPPPLOMYM]Ng=XNj! t! w!#T!#X!$c#aiOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ![RR'_'eS!YR'eR$l#eU!WR#e'eU#Sw$`'fY#v!q!y$|%S'hT&S%k&b#zWOPVXhkru|}!]!a!b!c!e!g!i!j!k!l#]#_#c#g#r#t$O$Y$^$_$b$e$p${%R%U%b%e%j%l%u%v&P&a&e&m&p&q&r&s&t&u&v&w&y'P'R'S'V'X'Y'[']'g'i'm'nh!VRw!y#e$`$|%S%k&b'e'f'hU#a!V#b#uR#u!qU#a!V#b#uT$W!{$XR$k#cQ#WwR'`'fS#Uw'fR%]$`U!QP#_#rS#s!l&wR$f#]Q!TPQ$h#_R$q#rQ$z#tQ%p%RQ&R%jU&W%l&e'mQ&h&aT&n&m'[c$s#t%R%j%l&a&e&m'['mrjOVr}!]!a!b!c!i!j!l#g$b$p%U%u%vQ#m!eU$r#t%R&mS%{%e'V[&Q%j%l&a&e'['m!m&oPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR&V%kQ&T%kR&i&bQ&Z%lR'j'mS&X%l'mR&k&e#aYOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR#{!qQ#x!qR%n$|S#w!q$|V$S!y%S'h#abOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#`bOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ!s_T!|n$Z#a`OPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#aaOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#agOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#aoOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ$V!yR'b'hS$T!y'hR%q%SS%t%U'ST&[%u'XQ#OnR%X$ZT!}n$ZS!{n$ZT$W!{$XR!TPQrOR#QrS#b!V#uR$i#bQ#f!YR$m#fQ$a#UR%^$aQ#^!QR$g#^#jXOPVhkru|}!]!a!b!c!e!g!i!j!k!l!q#]#_#c#g#r#t$O$Y$^$_$b$e$p${%R%U%b%e%u%v&m&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nS!pX&P_&P%j%l&a&e'V'['mQ%f$rS%|%f&_R&_&QQ&c&TR&j&cQ&f&XR&l&fQ$}#xR%o$}Q$P!wR%Q$PQ%T$TR%r%TQ$X!{R%V$XQ$[#OR%Y$[TqOrSSOrY!PP#]#_#r&wS!oV']Q!uhS!wk!qQ#RuQ#Z|Q#[}Q#i!]Q#j!aQ#k!bS#l!c&tQ#n!gQ#o!iQ#p!jQ#q!kQ$j#cQ$n#gQ%P$OQ%W$YQ%Z$^Q%[$_Q%_$bQ%a$eQ%c$pQ%m${S%s%U%uQ%z%bQ&]%vQ&x&pQ&z&qQ&{&rQ&|&sQ&}&uQ'O&vQ'Q&yQ'T'PQ'U'RS'W'S'XQ'Z'YQ'^!lQ'a'gQ'c'iR'l'n#apOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nrROVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'ePhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nT!ZR'eV!XR#e'eQ#c!WR$_#SQ#g![R&y'_ruOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'nPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nrwOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'fPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nT#Vw'fV#Tw$`'fV!RP#_#rf!aS#[#i#o#p$n%_%c%s&]'^!X&r!P!u!w#R#Z#n#q$j%P%W%Z%[%a%m%z&x&z&}'O'Q'T'U'W'Z'a'c'lh!bS#[#i#j#o#p$n%_%c%s&]'^!Z&s!P!u!w#R#Z#n#q$j%P%W%Z%[%a%m%z&x&z&{&}'O'Q'T'U'W'Z'a'c'lj!cS#[#i#j#k#o#p$n%_%c%s&]'^!]&t!P!u!w#R#Z#n#q$j%P%W%Z%[%a%m%z&x&z&{&|&}'O'Q'T'U'W'Z'a'c'lrVOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m']Phku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR&U%kT&Y%l'm!{!eS!P!o!u!w#R#Z#[#i#j#k#l#n#o#p#q$j$n%P%W%Z%[%_%a%c%m%s%z&]&x&z&{&|&}'O'Q'T'U'W'Z'^'a'c'l!{!gS!P!o!u!w#R#Z#[#i#j#k#l#n#o#p#q$j$n%P%W%Z%[%_%a%c%m%s%z&]&x&z&{&|&}'O'Q'T'U'W'Z'^'a'c'l#aZOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nQ!rZR!t`R#y!qQ!xkR#z!q#acOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'n#a|OPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR%y%a#ahOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR#}!u#akOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR$R!xrlOVr}!]!a!b!c!i!j!l#g$b$p%U%u%v!m'kPhku|!g!k!q#]#_#c#r$O$Y$^$_$e${%b&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nT$U!y'h#anOPVhkru|}!]!a!b!c!g!i!j!k!l!q#]#_#c#g#r$O$Y$^$_$b$e$p${%U%b%u%v&p&q&r&s&t&u&v&w&y'P'R'S'X'Y']'g'i'nR#Pn",
      nodeNames: "⚠ LineComment BlockComment Expressions ForExpression for InExpressions InExpression Name Identifier Identifier ArithOp ArithOp ArithOp ArithOp in IterationContext return IfExpression if then else QuantifiedExpression some every InExpressions InExpression satisfies Disjunction or Conjunction and Comparison CompareOp CompareOp between PositiveUnaryTest ( PositiveUnaryTests ) ArithmeticExpression ArithOp InstanceOfExpression instance of Type QualifiedName VariableName SpecialType days time duration years months date > ListType list < ContextType context ContextEntryTypes ContextEntryType FunctionType function ArgumentTypes ArgumentType PathExpression ] FilterExpression [ FunctionInvocation SpecialFunctionName NamedParameters NamedParameter ParameterName PositionalParameters null NumericLiteral StringLiteral BooleanLiteral DateTimeLiteral DateTimeConstructor AtLiteral ? SimplePositiveUnaryTest Interval ParenthesizedExpression List FunctionDefinition FormalParameters FormalParameter external FunctionBody } { Context ContextEntry Key Name Identifier UnaryTests Wildcard not",
      maxTerm: 175,
      context: variableTracker,
      nodeProps: [
        ["group", -17,4,18,22,28,30,32,40,42,67,69,71,84,85,87,88,89,96,"Expression",47,"Expression Expression",-5,77,78,79,80,81,"Expression Literal"],
        ["closedBy", 37,")",70,"]",95,"}"],
        ["openedBy", 39,"(",68,"[",94,"{"]
      ],
      propSources: [feelHighlighting],
      skippedNodes: [0,1,2],
      repeatNodeCount: 14,
      tokenData: "+l~RuXY#fYZ$ZZ[#f]^$Zpq#fqr$`rs$kwx&cxy&hyz&mz{&r{|'P|}'U}!O'Z!O!P'h!P!Q(Q!Q![){![!]*^!]!^*c!^!_*h!_!`$f!`!a*w!b!c+R!}#O+W#P#Q+]#Q#R&z#o#p+b#q#r+g$f$g#f#BY#BZ#f$IS$I_#f$I|$I}$Z$I}$JO$Z$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~#kY#p~XY#fZ[#fpq#f$f$g#f#BY#BZ#f$IS$I_#f$JT$JU#f$KV$KW#f&FU&FV#f?HT?HU#f~$`O#q~~$cP!_!`$f~$kOq~~$pW$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&]<%lO$k~%_O$g~~%bRO;'S$k;'S;=`%k;=`O$k~%pX$g~OY$kZr$krs%Ys#O$k#O#P%_#P;'S$k;'S;=`&];=`<%l$k<%lO$k~&`P;=`<%l$k~&hO#y~~&mOu~~&rOw~~&wP^~z{&z~'POy~~'UO[~~'ZO#|~R'`PZP!`!a'cQ'hO$[Q~'mQ#x~!O!P's!Q!['x~'xO#{~~'}P$f~!Q!['x~(VQ]~z{(]!P!Q)d~(`TOz(]z{(o{;'S(];'S;=`)^<%lO(]~(rVOz(]z{(o{!P(]!P!Q)X!Q;'S(];'S;=`)^<%lO(]~)^OQ~~)aP;=`<%l(]~)iSP~OY)dZ;'S)d;'S;=`)u<%lO)d~)xP;=`<%l)d~*QQ$f~!O!P*W!Q![){~*ZP!Q!['x~*cO$Y~~*hO$u~R*oP![QrP!_!`*rP*wOrPR+OP!XQrP!_!`*r~+WO$i~~+]O!h~~+bO!f~~+gO#R~~+lO#Q~",
      tokenizers: [propertyIdentifiers, identifiers, insertSemicolon, 0, 1],
      topRules: {"Expressions":[0,3],"UnaryTests":[1,101]},
      dynamicPrecedences: {"30":-1,"71":-1,"73":-1,"126":-1},
      specialized: [{term: 120, get: value => spec_identifier[value] || -1}],
      tokenPrec: 0
    });

    function isContext(e) {
        return Object.getPrototypeOf(e) === Object.prototype;
    }
    function isDateTime(obj) {
        return DateTime.isDateTime(obj);
    }
    function isDuration(obj) {
        return Duration.isDuration(obj);
    }
    function isArray$3(e) {
        return Array.isArray(e);
    }
    function isBoolean(e) {
        return typeof e === 'boolean';
    }
    function getType$1(e) {
        if (e === null || e === undefined) {
            return 'nil';
        }
        if (isBoolean(e)) {
            return 'boolean';
        }
        if (isNumber(e)) {
            return 'number';
        }
        if (isString(e)) {
            return 'string';
        }
        if (isContext(e)) {
            return 'context';
        }
        if (isArray$3(e)) {
            return 'list';
        }
        if (isDuration(e)) {
            return 'duration';
        }
        if (isDateTime(e)) {
            if (e.year === 1900 &&
                e.month === 1 &&
                e.day === 1) {
                return 'time';
            }
            if (e.hour === 0 &&
                e.minute === 0 &&
                e.second === 0 &&
                e.millisecond === 0 &&
                e.zone === FixedOffsetZone.utcInstance) {
                return 'date';
            }
            return 'date time';
        }
        if (e instanceof Range$1) {
            return 'range';
        }
        if (e instanceof FunctionWrapper) {
            return 'function';
        }
        return 'literal';
    }
    function isType(el, type) {
        return getType$1(el) === type;
    }
    function typeCast(obj, type) {
        if (isDateTime(obj)) {
            if (type === 'time') {
                return obj.set({
                    year: 1900,
                    month: 1,
                    day: 1
                });
            }
            if (type === 'date') {
                return obj.setZone('utc', { keepLocalTime: true }).startOf('day');
            }
            if (type === 'date time') {
                return obj;
            }
        }
        return null;
    }
    let Range$1 = class Range {
        constructor(props) {
            Object.assign(this, props);
        }
    };
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    function isString(obj) {
        return typeof obj === 'string';
    }
    function equals(a, b) {
        if (a === null && b !== null ||
            a !== null && b === null) {
            return false;
        }
        if (isArray$3(a) && a.length < 2) {
            a = a[0];
        }
        if (isArray$3(b) && b.length < 2) {
            b = b[0];
        }
        const aType = getType$1(a);
        const bType = getType$1(b);
        if (aType !== bType) {
            return null;
        }
        if (aType === 'nil') {
            return true;
        }
        if (aType === 'list') {
            if (a.length !== b.length) {
                return false;
            }
            return a.every((element, idx) => equals(element, b[idx]));
        }
        if (aType === 'date time' || aType === 'time' || aType === 'date') {
            return (a.toUTC().valueOf() === b.toUTC().valueOf());
        }
        if (aType === 'duration') {
            // years and months duration -> months
            if (Math.abs(a.as('days')) > 180) {
                return Math.trunc(a.minus(b).as('months')) === 0;
            }
            // days and time duration -> seconds
            else {
                return Math.trunc(a.minus(b).as('seconds')) === 0;
            }
        }
        if (aType === 'context') {
            const aEntries = Object.entries(a);
            const bEntries = Object.entries(b);
            if (aEntries.length !== bEntries.length) {
                return false;
            }
            return aEntries.every(([key, value]) => key in b && equals(value, b[key]));
        }
        if (aType === 'range') {
            return [
                [a.start, b.start],
                [a.end, b.end],
                [a['start included'], b['start included']],
                [a['end included'], b['end included']]
            ].every(([a, b]) => a === b);
        }
        if (a == b) {
            return true;
        }
        return aType === bType ? false : null;
    }
    class FunctionWrapper {
        constructor(fn, parameterNames) {
            this.fn = fn;
            this.parameterNames = parameterNames;
        }
        invoke(contextOrArgs) {
            let params;
            if (isArray$3(contextOrArgs)) {
                params = contextOrArgs;
            }
            else {
                params = this.parameterNames.map(n => contextOrArgs[n]);
            }
            return this.fn.call(null, ...params);
        }
    }

    function parseParameterNames(fn) {
        if (Array.isArray(fn.$args)) {
            return fn.$args;
        }
        const code = fn.toString();
        const match = /^(?:[^(]*\s*)?\(([^)]+)?\)/.exec(code);
        if (!match) {
            throw new Error('failed to parse params: ' + code);
        }
        const [_, params] = match;
        if (!params) {
            return [];
        }
        return params.split(',').map(p => p.trim());
    }
    function notImplemented(thing) {
        return new Error(`not implemented: ${thing}`);
    }
    /**
     * @param {string} name
     * @param {Record<string, any>} context
     *
     * @return {any}
     */
    function getFromContext(name, context) {
        if (['nil', 'boolean', 'number', 'string'].includes(getType$1(context))) {
            return null;
        }
        if (name in context) {
            return context[name];
        }
        const normalizedName = normalizeContextKey(name);
        if (normalizedName in context) {
            return context[normalizedName];
        }
        const entry = Object.entries(context).find(([key]) => normalizedName === normalizeContextKey(key));
        if (entry) {
            return entry[1];
        }
        return null;
    }

    function duration$1(opts) {
        if (typeof opts === 'number') {
            return Duration.fromMillis(opts);
        }
        return Duration.fromISO(opts);
    }
    function date(str = null, time = null, zone = null) {
        if (time) {
            if (str) {
                throw new Error('<str> and <time> provided');
            }
            return date(`1900-01-01T${time}`);
        }
        if (typeof str === 'string') {
            if (str.startsWith('-')) {
                throw notImplemented('negative date');
            }
            if (!str.includes('T')) {
                // raw dates are in UTC time zone
                return date(str + 'T00:00:00.000Z');
            }
            if (str.includes('@')) {
                if (zone) {
                    throw new Error('<zone> already provided');
                }
                const [datePart, zonePart] = str.split('@');
                return date(datePart, null, Info.normalizeZone(zonePart));
            }
            return DateTime.fromISO(str.toUpperCase(), {
                setZone: true,
                zone
            });
        }
        return DateTime.now();
    }

    // 10.3.4 Built-in functions
    const builtins = {
        // 10.3.4.1 Conversion functions
        'number': function () {
            throw notImplemented('number');
        },
        'string': fn$1(function (from) {
            if (arguments.length !== 1) {
                return null;
            }
            return toString$2(from);
        }, ['any']),
        // date(from) => date string
        // date(from) => date and time
        // date(year, month, day)
        'date': fn$1(function (year, month, day, from) {
            if (!from && !isNumber(year)) {
                from = year;
                year = null;
            }
            let d;
            if (isString(from)) {
                d = date(from);
            }
            if (isDateTime(from)) {
                d = from;
            }
            if (year) {
                d = date().setZone('utc').set({
                    year,
                    month,
                    day
                });
            }
            return d && ifValid(d.setZone('utc').startOf('day')) || null;
        }, ['any?', 'number?', 'number?', 'any?']),
        // date and time(from) => date time string
        // date and time(date, time)
        'date and time': fn$1(function (d, time, from) {
            let dt;
            if (isDateTime(d) && isDateTime(time)) {
                dt = time.set({
                    year: d.year,
                    month: d.month,
                    day: d.day
                });
            }
            if (isString(d)) {
                from = d;
                d = null;
            }
            if (isString(from)) {
                dt = date(from);
            }
            return dt && ifValid(dt) || null;
        }, ['any?', 'time?', 'string?'], ['date', 'time', 'from']),
        // time(from) => time string
        // time(from) => time, date and time
        // time(hour, minute, second, offset?) => ...
        'time': fn$1(function (hour, minute, second, offset, from) {
            let t;
            if (offset) {
                throw notImplemented('time(..., offset)');
            }
            if (isString(hour) || isDateTime(hour)) {
                from = hour;
                hour = null;
            }
            if (isString(from)) {
                t = date(null, from);
            }
            if (isDateTime(from)) {
                t = from.set({
                    year: 1900,
                    month: 1,
                    day: 1
                });
            }
            if (isNumber(hour)) {
                // TODO: support offset = days and time duration
                t = date().set({
                    hour,
                    minute,
                    second
                }).set({
                    year: 1900,
                    month: 1,
                    day: 1,
                    millisecond: 0
                });
            }
            return t && ifValid(t) || null;
        }, ['any?', 'number?', 'number?', 'any?', 'any?']),
        'duration': fn$1(function (from) {
            return ifValid(duration$1(from));
        }, ['string']),
        'years and months duration': fn$1(function (from, to) {
            return ifValid(to.diff(from, ['years', 'months']));
        }, ['date', 'date']),
        '@': fn$1(function (string) {
            let t;
            if (/^-?P/.test(string)) {
                t = duration$1(string);
            }
            else if (/^[\d]{1,2}:[\d]{1,2}:[\d]{1,2}/.test(string)) {
                t = date(null, string);
            }
            else {
                t = date(string);
            }
            return t && ifValid(t) || null;
        }, ['string']),
        'now': fn$1(function () {
            return date();
        }, []),
        'today': fn$1(function () {
            return date().startOf('day');
        }, []),
        // 10.3.4.2 Boolean function
        'not': fn$1(function (bool) {
            return isType(bool, 'boolean') ? !bool : null;
        }, ['any']),
        // 10.3.4.3 String functions
        'substring': fn$1(function (string, start, length) {
            const _start = (start < 0 ? string.length + start : start - 1);
            const arr = Array.from(string);
            return (typeof length !== 'undefined'
                ? arr.slice(_start, _start + length)
                : arr.slice(_start)).join('');
        }, ['string', 'number', 'number?'], ['string', 'start position', 'length']),
        'string length': fn$1(function (string) {
            return countSymbols(string);
        }, ['string']),
        'upper case': fn$1(function (string) {
            return string.toUpperCase();
        }, ['string']),
        'lower case': fn$1(function (string) {
            return string.toLowerCase();
        }, ['string']),
        'substring before': fn$1(function (string, match) {
            const index = string.indexOf(match);
            if (index === -1) {
                return '';
            }
            return string.substring(0, index);
        }, ['string', 'string']),
        'substring after': fn$1(function (string, match) {
            const index = string.indexOf(match);
            if (index === -1) {
                return '';
            }
            return string.substring(index + match.length);
        }, ['string', 'string']),
        'replace': fn$1(function (input, pattern, replacement, flags) {
            return input.replace(new RegExp(pattern, 'ug' + (flags || '').replace(/[x]/g, '')), replacement.replace(/\$0/g, '$$&'));
        }, ['string', 'string', 'string', 'string?']),
        'contains': fn$1(function (string, match) {
            return string.includes(match);
        }, ['string', 'string']),
        'starts with': fn$1(function (string, match) {
            return string.startsWith(match);
        }, ['string', 'string']),
        'ends with': fn$1(function (string, match) {
            return string.endsWith(match);
        }, ['string', 'string']),
        'split': fn$1(function (string, delimiter) {
            return string.split(new RegExp(delimiter, 'u'));
        }, ['string', 'string']),
        // 10.3.4.4 List functions
        'list contains': fn$1(function (list, element) {
            return list.some(el => matches$1(el, element));
        }, ['list', 'any?']),
        'count': fn$1(function (list) {
            return list.length;
        }, ['list']),
        'min': listFn(function (list) {
            return list.reduce((min, el) => min === null ? el : Math.min(min, el), null);
        }, 'number'),
        'max': listFn(function (list) {
            return list.reduce((max, el) => max === null ? el : Math.max(max, el), null);
        }, 'number'),
        'sum': listFn(function (list) {
            return sum(list);
        }, 'number'),
        'mean': listFn(function (list) {
            const s = sum(list);
            return s === null ? s : s / list.length;
        }, 'number'),
        'all': listFn(function (list) {
            let nonBool = false;
            for (const o of list) {
                if (o === false) {
                    return false;
                }
                if (typeof o !== 'boolean') {
                    nonBool = true;
                }
            }
            return nonBool ? null : true;
        }, 'any?'),
        'any': listFn(function (list) {
            let nonBool = false;
            for (const o of list) {
                if (o === true) {
                    return true;
                }
                if (typeof o !== 'boolean') {
                    nonBool = true;
                }
            }
            return nonBool ? null : false;
        }, 'any?'),
        'sublist': fn$1(function (list, start, length) {
            const _start = (start < 0 ? list.length + start : start - 1);
            return (typeof length !== 'undefined'
                ? list.slice(_start, _start + length)
                : list.slice(_start));
        }, ['list', 'number', 'number?']),
        'append': fn$1(function (list, ...items) {
            return list.concat(items);
        }, ['list', 'any?']),
        'concatenate': fn$1(function (...args) {
            return args.reduce((result, arg) => {
                return result.concat(arg);
            }, []);
        }, ['any']),
        'insert before': fn$1(function (list, position, newItem) {
            return list.slice(0, position - 1).concat([newItem], list.slice(position - 1));
        }, ['list', 'number', 'any?']),
        'remove': fn$1(function (list, position) {
            return list.slice(0, position - 1).concat(list.slice(position));
        }, ['list', 'number']),
        'reverse': fn$1(function (list) {
            return list.slice().reverse();
        }, ['list']),
        'index of': fn$1(function (list, match) {
            return list.reduce(function (result, element, index) {
                if (matches$1(element, match)) {
                    result.push(index + 1);
                }
                return result;
            }, []);
        }, ['list', 'any']),
        'union': fn$1(function (..._lists) {
            throw notImplemented('union');
        }, ['list']),
        'distinct values': fn$1(function (_list) {
            throw notImplemented('distinct values');
        }, ['list']),
        'flatten': fn$1(function (list) {
            return flatten$1(list);
        }, ['list']),
        'product': listFn(function (list) {
            if (list.length === 0) {
                return null;
            }
            return list.reduce((result, n) => {
                return result * n;
            }, 1);
        }, 'number'),
        'median': listFn(function (list) {
            if (list.length === 0) {
                return null;
            }
            return median(list);
        }, 'number'),
        'stddev': listFn(function (list) {
            if (list.length < 2) {
                return null;
            }
            return stddev(list);
        }, 'number'),
        'mode': listFn(function (list) {
            return mode(list);
        }, 'number'),
        // 10.3.4.5 Numeric functions
        'decimal': fn$1(function (n, scale) {
            if (!scale) {
                return round$9(n);
            }
            const offset = Math.pow(10, scale);
            return round$9(n * offset) / (offset);
        }, ['number', 'number']),
        'floor': fn$1(function (n) {
            return Math.floor(n);
        }, ['number']),
        'ceiling': fn$1(function (n) {
            return Math.ceil(n) + 0;
        }, ['number']),
        'abs': fn$1(function (n) {
            if (typeof n !== 'number') {
                return null;
            }
            return Math.abs(n);
        }, ['number']),
        'modulo': fn$1(function (dividend, divisor) {
            if (!divisor) {
                return null;
            }
            const adjust = 1000000000;
            // cf. https://dustinpfister.github.io/2017/09/02/js-whats-wrong-with-modulo/
            //
            // need to round here as using this custom modulo
            // variant is prone to rounding errors
            return Math.round((dividend % divisor + divisor) % divisor * adjust) / adjust;
        }, ['number', 'number']),
        'sqrt': fn$1(function (number) {
            if (number < 0) {
                return null;
            }
            return Math.sqrt(number);
        }, ['number']),
        'log': fn$1(function (number) {
            if (number <= 0) {
                return null;
            }
            return Math.log(number);
        }, ['number']),
        'exp': fn$1(function (number) {
            return Math.exp(number);
        }, ['number']),
        'odd': fn$1(function (number) {
            return Math.abs(number) % 2 === 1;
        }, ['number']),
        'even': fn$1(function (number) {
            return Math.abs(number) % 2 === 0;
        }, ['number']),
        // 10.3.4.6 Date and time functions
        'is': fn$1(function (value1, value2) {
            if (typeof value1 === 'undefined' || typeof value2 === 'undefined') {
                return false;
            }
            return equals(value1, value2);
        }, ['any?', 'any?']),
        // 10.3.4.7 Range Functions
        'before': fn$1(function (a, b) {
            return before(a, b);
        }, ['any', 'any']),
        'after': fn$1(function (a, b) {
            return before(b, a);
        }, ['any', 'any']),
        'meets': fn$1(function (a, b) {
            return meets(a, b);
        }, ['range', 'range']),
        'met by': fn$1(function (a, b) {
            return meets(b, a);
        }, ['range', 'range']),
        'overlaps': fn$1(function () {
            throw notImplemented('overlaps');
        }, ['any?']),
        'overlaps before': fn$1(function () {
            throw notImplemented('overlaps before');
        }, ['any?']),
        'overlaps after': fn$1(function () {
            throw notImplemented('overlaps after');
        }, ['any?']),
        'finishes': fn$1(function () {
            throw notImplemented('finishes');
        }, ['any?']),
        'finished by': fn$1(function () {
            throw notImplemented('finished by');
        }, ['any?']),
        'includes': fn$1(function () {
            throw notImplemented('includes');
        }, ['any?']),
        'during': fn$1(function () {
            throw notImplemented('during');
        }, ['any?']),
        'starts': fn$1(function () {
            throw notImplemented('starts');
        }, ['any?']),
        'started by': fn$1(function () {
            throw notImplemented('started by');
        }, ['any?']),
        'coincides': fn$1(function () {
            throw notImplemented('coincides');
        }, ['any?']),
        // 10.3.4.8 Temporal built-in functions
        'day of year': fn$1(function () {
            throw notImplemented('day of year');
        }, ['any?']),
        'day of week': fn$1(function () {
            throw notImplemented('day of week');
        }, ['any?']),
        'month of year': fn$1(function () {
            throw notImplemented('month of year');
        }, ['any?']),
        'week of year': fn$1(function () {
            throw notImplemented('week of year');
        }, ['any?']),
        // 10.3.4.9 Sort
        'sort': function () {
            throw notImplemented('sort');
        },
        // 10.3.4.10 Context function
        'get value': fn$1(function (m, key) {
            return getFromContext(key, m);
        }, ['context', 'string']),
        'get entries': fn$1(function (m) {
            if (arguments.length !== 1) {
                return null;
            }
            if (Array.isArray(m)) {
                return null;
            }
            return Object.entries(m).map(([key, value]) => ({ key, value }));
        }, ['context']),
        'context': listFn(function (_contexts) {
            throw notImplemented('context');
        }, 'context'),
        'context merge': listFn(function (_contexts) {
            throw notImplemented('context merge');
        }, 'context'),
        'context put': fn$1(function (_context, _keys, _value) {
            throw notImplemented('context put');
        }, ['context', 'list', 'any'])
    };
    function matches$1(a, b) {
        return a === b;
    }
    const FALSE = {};
    function createArgTester(arg) {
        const optional = arg.endsWith('?');
        const type = optional ? arg.substring(0, arg.length - 1) : arg;
        return function (obj) {
            const arr = Array.isArray(obj);
            if (type === 'list') {
                if (arr || optional && typeof obj === 'undefined') {
                    return obj;
                }
                else {
                    // implicit conversion obj => [ obj ]
                    return [obj];
                }
            }
            if (type !== 'any' && arr && obj.length === 1) {
                // implicit conversion [ obj ] => obj
                obj = obj[0];
            }
            if (type === 'range') {
                return obj instanceof Range$1 ? obj : FALSE;
            }
            const objType = getType$1(obj);
            if (objType === 'nil') {
                return (optional ? obj : FALSE);
            }
            if (type === 'any' || type === objType) {
                return obj;
            }
            return typeCast(obj, type) || FALSE;
        };
    }
    function createArgsValidator(argDefinitions) {
        const tests = argDefinitions.map(createArgTester);
        return function (args) {
            while (args.length < argDefinitions.length) {
                args.push(undefined);
            }
            return args.reduce((result, arg, index) => {
                if (result === false) {
                    return result;
                }
                const test = tests[index];
                const conversion = test ? test(arg) : arg;
                if (conversion === FALSE) {
                    return false;
                }
                result.push(conversion);
                return result;
            }, []);
        };
    }
    /**
     * @param {Function} fnDefinition
     * @param {string} type
     * @param {string[]} [parameterNames]
     *
     * @return {Function}
     */
    function listFn(fnDefinition, type, parameterNames = null) {
        const tester = createArgTester(type);
        const wrappedFn = function (...args) {
            if (args.length === 0) {
                return null;
            }
            // unwrap first arg
            if (Array.isArray(args[0]) && args.length === 1) {
                args = args[0];
            }
            if (!args.every(arg => tester(arg) !== FALSE)) {
                return null;
            }
            return fnDefinition(args);
        };
        wrappedFn.$args = parameterNames || parseParameterNames(fnDefinition);
        return wrappedFn;
    }
    /**
     * @param {Function} fnDefinition
     * @param {string[]} argDefinitions
     * @param {string[]} [parameterNames]
     *
     * @return {Function}
     */
    function fn$1(fnDefinition, argDefinitions, parameterNames = null) {
        const checkArgs = createArgsValidator(argDefinitions);
        parameterNames = parameterNames || parseParameterNames(fnDefinition);
        const wrappedFn = function (...args) {
            const convertedArgs = checkArgs(args);
            if (!convertedArgs) {
                return null;
            }
            return fnDefinition(...convertedArgs);
        };
        wrappedFn.$args = parameterNames;
        return wrappedFn;
    }
    function meets(a, b) {
        return [
            (a.end === b.start),
            (a['end included'] === true),
            (b['start included'] === true)
        ].every(v => v);
    }
    function before(a, b) {
        if (a instanceof Range$1 && b instanceof Range$1) {
            return (a.end < b.start || (!a['end included'] || !b['start included']) && a.end == b.start);
        }
        if (a instanceof Range$1) {
            return (a.end < b || (!a['end included'] && a.end === b));
        }
        if (b instanceof Range$1) {
            return (b.start > a || (!b['start included'] && b.start === a));
        }
        return a < b;
    }
    function sum(list) {
        return list.reduce((sum, el) => sum === null ? el : sum + el, null);
    }
    function flatten$1([x, ...xs]) {
        return (x !== undefined
            ? [...Array.isArray(x) ? flatten$1(x) : [x], ...flatten$1(xs)]
            : []);
    }
    function toKeyString(key) {
        if (typeof key === 'string' && /\W/.test(key)) {
            return toString$2(key, true);
        }
        return key;
    }
    function toDeepString(obj) {
        return toString$2(obj, true);
    }
    function escapeStr(str) {
        return str.replace(/("|\\)/g, '\\$1');
    }
    function toString$2(obj, wrap = false) {
        var _a, _b, _c, _d;
        const type = getType$1(obj);
        if (type === 'nil') {
            return 'null';
        }
        if (type === 'string') {
            return wrap ? `"${escapeStr(obj)}"` : obj;
        }
        if (type === 'boolean' || type === 'number') {
            return String(obj);
        }
        if (type === 'list') {
            return '[' + obj.map(toDeepString).join(', ') + ']';
        }
        if (type === 'context') {
            return '{' + Object.entries(obj).map(([key, value]) => {
                return toKeyString(key) + ': ' + toDeepString(value);
            }).join(', ') + '}';
        }
        if (type === 'duration') {
            return obj.shiftTo('years', 'months', 'days', 'hours', 'minutes', 'seconds').normalize().toISO();
        }
        if (type === 'date time') {
            if ((_a = obj.zone) === null || _a === void 0 ? void 0 : _a.zoneName) {
                return obj.toISO({ suppressMilliseconds: true, includeOffset: false }) + '@' + ((_b = obj.zone) === null || _b === void 0 ? void 0 : _b.zoneName);
            }
            return obj.toISO({ suppressMilliseconds: true });
        }
        if (type === 'date') {
            return obj.toISODate();
        }
        if (type === 'range') {
            return '<range>';
        }
        if (type === 'time') {
            if ((_c = obj.zone) === null || _c === void 0 ? void 0 : _c.zoneName) {
                return obj.toISOTime({ suppressMilliseconds: true, includeOffset: false }) + '@' + ((_d = obj.zone) === null || _d === void 0 ? void 0 : _d.zoneName);
            }
            return obj.toISOTime({ suppressMilliseconds: true });
        }
        if (type === 'function') {
            return '<function>';
        }
        throw notImplemented('string(' + type + ')');
    }
    function countSymbols(str) {
        // cf. https://mathiasbynens.be/notes/javascript-unicode
        return str.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '_').length;
    }
    function round$9(n) {
        const integral = Math.trunc(n);
        if (n - integral > .5) {
            return integral + 1;
        }
        else {
            return integral;
        }
    }
    // adapted from https://stackoverflow.com/a/53577159
    function stddev(array) {
        const n = array.length;
        const mean = array.reduce((a, b) => a + b) / n;
        return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / (n - 1));
    }
    function median(array) {
        const n = array.length;
        const sorted = array.slice().sort();
        const mid = n / 2 - 1;
        const index = Math.ceil(mid);
        // even
        if (mid === index) {
            return (sorted[index] + sorted[index + 1]) / 2;
        }
        // uneven
        return sorted[index];
    }
    function mode(array) {
        if (array.length < 2) {
            return array;
        }
        const buckets = {};
        for (const n of array) {
            buckets[n] = (buckets[n] || 0) + 1;
        }
        const sorted = Object.entries(buckets).sort((a, b) => b[1] - a[1]);
        return sorted.filter(s => s[1] === sorted[0][1]).map(e => +e[0]);
    }
    function ifValid(o) {
        return o.isValid ? o : null;
    }

    function parseExpressions(expression, context = {}) {
        return parser$1.configure({
            top: 'Expressions',
            contextTracker: trackVariables(context)
        }).parse(expression);
    }
    function parseUnaryTests(expression, context = {}) {
        return parser$1.configure({
            top: 'UnaryTests',
            contextTracker: trackVariables(context)
        }).parse(expression);
    }

    class Interpreter {
        _buildExecutionTree(tree, input) {
            const root = { args: [], nodeInput: input };
            const stack = [root];
            tree.iterate({
                enter(nodeRef) {
                    const { isError, isSkipped } = nodeRef.type;
                    const { from, to } = nodeRef;
                    if (isError) {
                        throw new Error(`Statement unparseable at [${from}, ${to}]`);
                    }
                    if (isSkipped) {
                        return false;
                    }
                    const nodeInput = input.slice(from, to);
                    stack.push({
                        nodeInput,
                        args: []
                    });
                },
                leave(nodeRef) {
                    if (nodeRef.type.isSkipped) {
                        return;
                    }
                    const { nodeInput, args } = stack.pop();
                    const parent = stack[stack.length - 1];
                    const expr = evalNode(nodeRef, nodeInput, args);
                    parent.args.push(expr);
                }
            });
            return root.args[root.args.length - 1];
        }
        evaluate(expression, context = {}) {
            const parseTree = parseExpressions(expression, context);
            const root = this._buildExecutionTree(parseTree, expression);
            return {
                parseTree,
                root
            };
        }
        unaryTest(expression, context = {}) {
            const parseTree = parseUnaryTests(expression, context);
            const root = this._buildExecutionTree(parseTree, expression);
            return {
                parseTree,
                root
            };
        }
    }
    const interpreter = new Interpreter();
    function evaluate$1(expression, context = {}) {
        const { root } = interpreter.evaluate(expression, context);
        // root = [ fn(ctx) ]
        const results = root(context);
        if (results.length === 1) {
            return results[0];
        }
        else {
            return results;
        }
    }
    function evalNode(node, input, args) {
        switch (node.name) {
            case 'ArithOp': return (context) => {
                const nullable = (op, types = ['number']) => (a, b) => {
                    const left = a(context);
                    const right = b(context);
                    if (isArray$3(left)) {
                        return null;
                    }
                    if (isArray$3(right)) {
                        return null;
                    }
                    const leftType = getType$1(left);
                    const rightType = getType$1(right);
                    if (leftType !== rightType ||
                        !types.includes(leftType)) {
                        return null;
                    }
                    return op(left, right);
                };
                switch (input) {
                    case '+': return nullable((a, b) => a + b, ['string', 'number']);
                    case '-': return nullable((a, b) => a - b);
                    case '*': return nullable((a, b) => a * b);
                    case '/': return nullable((a, b) => !b ? null : a / b);
                    case '**':
                    case '^': return nullable((a, b) => Math.pow(a, b));
                }
            };
            case 'CompareOp': return tag(() => {
                switch (input) {
                    case '>': return (b) => createRange(b, null, false, false);
                    case '>=': return (b) => createRange(b, null, true, false);
                    case '<': return (b) => createRange(null, b, false, false);
                    case '<=': return (b) => createRange(null, b, false, true);
                    case '=': return (b) => (a) => equals(a, b);
                    case '!=': return (b) => (a) => !equals(a, b);
                }
            }, Test('boolean'));
            case 'Wildcard': return (_context) => true;
            case 'null': return (_context) => {
                return null;
            };
            case 'Disjunction': return tag((context) => {
                const left = args[0](context);
                const right = args[2](context);
                const matrix = [
                    [true, true, true],
                    [true, false, true],
                    [true, null, true],
                    [false, true, true],
                    [false, false, false],
                    [false, null, null],
                    [null, true, true],
                    [null, false, null],
                    [null, null, null],
                ];
                const a = typeof left === 'boolean' ? left : null;
                const b = typeof right === 'boolean' ? right : null;
                return matrix.find(el => el[0] === a && el[1] === b)[2];
            }, Test('boolean'));
            case 'Conjunction': return tag((context) => {
                const left = args[0](context);
                const right = args[2](context);
                const matrix = [
                    [true, true, true],
                    [true, false, false],
                    [true, null, null],
                    [false, true, false],
                    [false, false, false],
                    [false, null, false],
                    [null, true, null],
                    [null, false, false],
                    [null, null, null],
                ];
                const a = typeof left === 'boolean' ? left : null;
                const b = typeof right === 'boolean' ? right : null;
                return matrix.find(el => el[0] === a && el[1] === b)[2];
            }, Test('boolean'));
            case 'Context': return (context) => {
                return args.slice(1, -1).reduce((obj, arg) => {
                    const [key, value] = arg(Object.assign(Object.assign({}, context), obj));
                    return Object.assign(Object.assign({}, obj), { [key]: value });
                }, {});
            };
            case 'FunctionBody': return args[0];
            case 'FormalParameters': return args;
            case 'FormalParameter': return args[0];
            case 'ParameterName': return args.join(' ');
            case 'FunctionDefinition': return (context) => {
                const parameterNames = args[2];
                const fnBody = args[4];
                return wrapFunction((...args) => {
                    const fnContext = parameterNames.reduce((context, name, idx) => {
                        // support positional parameters
                        context[name] = args[idx];
                        return context;
                    }, Object.assign({}, context));
                    return fnBody(fnContext);
                }, parameterNames);
            };
            case 'ContextEntry': return (context) => {
                const key = typeof args[0] === 'function' ? args[0](context) : args[0];
                const value = args[1](context);
                return [key, value];
            };
            case 'Key': return args[0];
            case 'Identifier': return input;
            case 'SpecialFunctionName': return (context) => getBuiltin(input);
            // preserve spaces in name, but compact multiple
            // spaces into one (token)
            case 'Name': return input.replace(/\s{2,}/g, ' ');
            case 'VariableName': return (context) => {
                const name = args.join(' ');
                return getBuiltin(name) || getFromContext(name, context);
            };
            case 'QualifiedName': return (context) => {
                return args.reduce((context, arg) => arg(context), context);
            };
            case '?': return (context) => getFromContext('?', context);
            // expression
            // expression ".." expression
            case 'IterationContext': return (context) => {
                const a = args[0](context);
                const b = args[1] && args[1](context);
                return b ? createRange(a, b) : a;
            };
            case 'Type': return args[0];
            case 'InExpressions': return (context) => {
                const iterationContexts = args.map(ctx => ctx(context));
                if (iterationContexts.some(ctx => getType$1(ctx) !== 'list')) {
                    return null;
                }
                return cartesianProduct(iterationContexts).map(ctx => {
                    if (!isArray$3(ctx)) {
                        ctx = [ctx];
                    }
                    return Object.assign({}, context, ...ctx);
                });
            };
            // Name kw<"in"> Expr
            case 'InExpression': return (context) => {
                return extractValue(context, args[0], args[2]);
            };
            case 'SpecialType': throw notImplemented('SpecialType');
            case 'InstanceOfExpression': return tag((context) => {
                const a = args[0](context);
                const b = args[3](context);
                return a instanceof b;
            }, Test('boolean'));
            case 'every': return tag((context) => {
                return (_contexts, _condition) => {
                    const contexts = _contexts(context);
                    if (getType$1(contexts) !== 'list') {
                        return contexts;
                    }
                    return contexts.every(ctx => isTruthy(_condition(ctx)));
                };
            }, Test('boolean'));
            case 'some': return tag((context) => {
                return (_contexts, _condition) => {
                    const contexts = _contexts(context);
                    if (getType$1(contexts) !== 'list') {
                        return contexts;
                    }
                    return contexts.some(ctx => isTruthy(_condition(ctx)));
                };
            }, Test('boolean'));
            case 'NumericLiteral': return tag((_context) => input.includes('.') ? parseFloat(input) : parseInt(input), 'number');
            case 'BooleanLiteral': return tag((_context) => input === 'true' ? true : false, 'boolean');
            case 'StringLiteral': return tag((_context) => parseString(input), 'string');
            case 'PositionalParameters': return (context) => args.map(arg => arg(context));
            case 'NamedParameter': return (context) => {
                const name = args[0];
                const value = args[1](context);
                return [name, value];
            };
            case 'NamedParameters': return (context) => args.reduce((args, arg) => {
                const [name, value] = arg(context);
                args[name] = value;
                return args;
            }, {});
            case 'DateTimeConstructor': return (context) => {
                return getBuiltin(input);
            };
            case 'DateTimeLiteral': return (context) => {
                // AtLiteral
                if (args.length === 1) {
                    return args[0](context);
                }
                // FunctionInvocation
                else {
                    const wrappedFn = wrapFunction(args[0](context));
                    if (!wrappedFn) {
                        throw new Error(`Failed to evaluate ${input}: Target is not a function`);
                    }
                    const contextOrArgs = args[2](context);
                    return wrappedFn.invoke(contextOrArgs);
                }
            };
            case 'AtLiteral': return (context) => {
                const wrappedFn = wrapFunction(getBuiltin('@'));
                if (!wrappedFn) {
                    throw new Error(`Failed to evaluate ${input}: Target is not a function`);
                }
                return wrappedFn.invoke([args[0](context)]);
            };
            case 'FunctionInvocation': return (context) => {
                const wrappedFn = wrapFunction(args[0](context));
                if (!wrappedFn) {
                    throw new Error(`Failed to evaluate ${input}: Target is not a function`);
                }
                const contextOrArgs = args[2](context);
                return wrappedFn.invoke(contextOrArgs);
            };
            case 'IfExpression': return (function () {
                const ifCondition = args[1];
                const thenValue = args[3];
                const elseValue = args[5];
                const type = coalecenseTypes(thenValue, elseValue);
                return tag((context) => {
                    if (isTruthy(ifCondition(context))) {
                        return thenValue(context);
                    }
                    else {
                        return elseValue ? elseValue(context) : null;
                    }
                }, type);
            })();
            case 'Parameters': return args.length === 3 ? args[1] : (_context) => [];
            case 'Comparison': return (context) => {
                const operator = args[1];
                // expression !compare kw<"in"> PositiveUnaryTest |
                // expression !compare kw<"in"> !unaryTest "(" PositiveUnaryTests ")"
                if (operator === 'in') {
                    return compareIn(args[0](context), (args[3] || args[2])(context));
                }
                // expression !compare kw<"between"> expression kw<"and"> expression
                if (operator === 'between') {
                    const start = args[2](context);
                    const end = args[4](context);
                    if (start === null || end === null) {
                        return null;
                    }
                    return createRange(start, end).includes(args[0](context));
                }
                // expression !compare CompareOp<"=" | "!="> expression |
                // expression !compare CompareOp<Gt | Gte | Lt | Lte> expression |
                const left = args[0](context);
                const right = args[2](context);
                const test = operator()(right);
                return compareValue(test, left);
            };
            case 'QuantifiedExpression': return (context) => {
                const testFn = args[0](context);
                const contexts = args[1];
                const condition = args[3];
                return testFn(contexts, condition);
            };
            // DMN 1.2 - 10.3.2.14
            // kw<"for"> commaSep1<InExpression<IterationContext>> kw<"return"> expression
            case 'ForExpression': return (context) => {
                const extractor = args[args.length - 1];
                const iterationContexts = args[1](context);
                if (getType$1(iterationContexts) !== 'list') {
                    return iterationContexts;
                }
                const partial = [];
                for (const ctx of iterationContexts) {
                    partial.push(extractor(Object.assign(Object.assign({}, ctx), { partial })));
                }
                return partial;
            };
            case 'ArithmeticExpression': return (function () {
                // binary expression (a + b)
                if (args.length === 3) {
                    const [a, op, b] = args;
                    return tag((context) => {
                        return op(context)(a, b);
                    }, coalecenseTypes(a, b));
                }
                // unary expression (-b)
                if (args.length === 2) {
                    const [op, value] = args;
                    return tag((context) => {
                        return op(context)(() => 0, value);
                    }, value.type);
                }
            })();
            case 'PositiveUnaryTest': return args[0];
            case 'ParenthesizedExpression': return args[1];
            case 'PathExpression': return (context) => {
                const pathTarget = coerceSingleton(args[0](context));
                const pathProp = args[1];
                if (isArray$3(pathTarget)) {
                    return pathTarget.map(pathProp).filter(e => e !== null);
                }
                else {
                    return pathProp(pathTarget);
                }
            };
            // expression !filter "[" expression "]"
            case 'FilterExpression': return (context) => {
                const target = args[0](context);
                const filterFn = args[2];
                const filterTarget = isArray$3(target) ? target : [target];
                // null[..]
                if (target === null) {
                    return null;
                }
                // a[1]
                if (filterFn.type === 'number') {
                    const idx = filterFn(context);
                    const value = filterTarget[idx < 0 ? filterTarget.length + idx : idx - 1];
                    if (typeof value === 'undefined') {
                        return null;
                    }
                    else {
                        return value;
                    }
                }
                // a[true]
                if (filterFn.type === 'boolean') {
                    if (filterFn(context)) {
                        return filterTarget;
                    }
                    else {
                        return [];
                    }
                }
                if (filterFn.type === 'string') {
                    const value = filterFn(context);
                    return filterTarget.filter(el => el === value);
                }
                // a[test]
                return filterTarget.map(el => {
                    const iterationContext = Object.assign(Object.assign(Object.assign({}, context), { item: el }), el);
                    let result = filterFn(iterationContext);
                    // test is fn(val) => boolean SimpleUnaryTest
                    if (typeof result === 'function') {
                        result = result(el);
                    }
                    if (result instanceof Range$1) {
                        result = result.includes(el);
                    }
                    if (result === true) {
                        return el;
                    }
                    return result;
                }).filter(isTruthy);
            };
            case 'SimplePositiveUnaryTest': return tag((context) => {
                // <Interval>
                if (args.length === 1) {
                    return args[0](context);
                }
                // <CompareOp> <Expr>
                return args[0](context)(args[1](context));
            }, 'test');
            case 'List': return (context) => {
                return args.slice(1, -1).map(arg => arg(context));
            };
            case 'Interval': return tag((context) => {
                const left = args[1](context);
                const right = args[2](context);
                const startIncluded = left !== null && args[0] === '[';
                const endIncluded = right !== null && args[3] === ']';
                return createRange(left, right, startIncluded, endIncluded);
            }, Test('boolean'));
            case 'PositiveUnaryTests':
            case 'Expressions': return (context) => {
                return args.map(a => a(context));
            };
            case 'UnaryTests': return (context) => {
                return (value = null) => {
                    const negate = args[0] === 'not';
                    const tests = negate ? args.slice(2, -1) : args;
                    const matches = tests.map(test => test(context)).flat(1).map(test => {
                        if (isArray$3(test)) {
                            return test.includes(value);
                        }
                        if (test === null) {
                            return null;
                        }
                        if (typeof test === 'boolean') {
                            return test;
                        }
                        return compareValue(test, value);
                    }).reduce(combineResult, undefined);
                    return matches === null ? null : (negate ? !matches : matches);
                };
            };
            default: return node.name;
        }
    }
    function getBuiltin(name, _context) {
        return getFromContext(name, builtins);
    }
    function extractValue(context, prop, _target) {
        const target = _target(context);
        if (['list', 'range'].includes(getType$1(target))) {
            return target.map(t => ({ [prop]: t }));
        }
        return null;
    }
    function compareIn(value, tests) {
        if (!isArray$3(tests)) {
            if (getType$1(tests) === 'nil') {
                return null;
            }
            tests = [tests];
        }
        return tests.some(test => compareValue(test, value));
    }
    function compareValue(test, value) {
        if (typeof test === 'function') {
            return test(value);
        }
        if (test instanceof Range$1) {
            return test.includes(value);
        }
        return equals(test, value);
    }
    const chars = Array.from('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
    function isTyped(type, values) {
        return (values.some(e => getType$1(e) === type) &&
            values.every(e => e === null || getType$1(e) === type));
    }
    const nullRange = new Range$1({
        start: null,
        end: null,
        'start included': false,
        'end included': false,
        map() {
            return [];
        },
        includes() {
            return null;
        }
    });
    function createRange(start, end, startIncluded = true, endIncluded = true) {
        if (isTyped('string', [start, end])) {
            return createStringRange(start, end, startIncluded, endIncluded);
        }
        if (isTyped('number', [start, end])) {
            return createNumberRange(start, end, startIncluded, endIncluded);
        }
        if (isTyped('duration', [start, end])) {
            throw notImplemented('range<duration>');
        }
        if (isTyped('time', [start, end])) {
            throw notImplemented('range<time>');
        }
        if (isTyped('date time', [start, end])) {
            throw notImplemented('range<date and time>');
        }
        if (isTyped('date', [start, end])) {
            throw notImplemented('range<date>');
        }
        if (start === null && end === null) {
            return nullRange;
        }
        throw new Error(`unsupported range: ${start}..${end}`);
    }
    function noopMap() {
        return () => {
            throw new Error('unsupported range operation: map');
        };
    }
    function valuesMap(values) {
        return (fn) => values.map(fn);
    }
    function valuesIncludes(values) {
        return (value) => values.includes(value);
    }
    function numberMap(start, end, startIncluded, endIncluded) {
        const direction = start > end ? -1 : 1;
        return (fn) => {
            const result = [];
            for (let i = start;; i += direction) {
                if (i === 0 && !startIncluded) {
                    continue;
                }
                if (i === end && !endIncluded) {
                    break;
                }
                result.push(fn(i));
                if (i === end) {
                    break;
                }
            }
            return result;
        };
    }
    function includesStart(n, inclusive) {
        if (inclusive) {
            return (value) => n <= value;
        }
        else {
            return (value) => n < value;
        }
    }
    function includesEnd(n, inclusive) {
        if (inclusive) {
            return (value) => n >= value;
        }
        else {
            return (value) => n > value;
        }
    }
    function anyIncludes(start, end, startIncluded, endIncluded) {
        let tests = [];
        if (start === null && end === null) {
            return () => null;
        }
        if (start !== null && end !== null) {
            if (start > end) {
                tests = [
                    includesStart(end, endIncluded),
                    includesEnd(start, startIncluded)
                ];
            }
            else {
                tests = [
                    includesStart(start, startIncluded),
                    includesEnd(end, endIncluded)
                ];
            }
        }
        else if (end !== null) {
            tests = [
                includesEnd(end, endIncluded)
            ];
        }
        else if (start !== null) {
            tests = [
                includesStart(start, startIncluded)
            ];
        }
        return (value) => value === null ? null : tests.every(t => t(value));
    }
    function createStringRange(start, end, startIncluded = true, endIncluded = true) {
        if (start !== null && !chars.includes(start)) {
            throw new Error('illegal range start: ' + start);
        }
        if (end !== null && !chars.includes(end)) {
            throw new Error('illegal range end: ' + end);
        }
        let values;
        if (start !== null && end !== null) {
            let startIdx = chars.indexOf(start);
            let endIdx = chars.indexOf(end);
            const direction = startIdx > endIdx ? -1 : 1;
            if (startIncluded === false) {
                startIdx += direction;
            }
            if (endIncluded === false) {
                endIdx -= direction;
            }
            values = chars.slice(startIdx, endIdx + 1);
        }
        const map = values ? valuesMap(values) : noopMap();
        const includes = values ? valuesIncludes(values) : anyIncludes(start, end, startIncluded, endIncluded);
        return new Range$1({
            start,
            end,
            'start included': startIncluded,
            'end included': endIncluded,
            map,
            includes
        });
    }
    function createNumberRange(start, end, startIncluded, endIncluded) {
        const map = start !== null && end !== null ? numberMap(start, end, startIncluded, endIncluded) : noopMap();
        const includes = anyIncludes(start, end, startIncluded, endIncluded);
        return new Range$1({
            start,
            end,
            'start included': startIncluded,
            'end included': endIncluded,
            map,
            includes
        });
    }
    function cartesianProduct(arrays) {
        if (arrays.some(arr => getType$1(arr) === 'nil')) {
            return null;
        }
        const f = (a, b) => [].concat(...a.map(d => b.map(e => [].concat(d, e))));
        const cartesian = (a, b, ...c) => (b ? cartesian(f(a, b), ...c) : a || []);
        return cartesian(...arrays);
    }
    function coalecenseTypes(a, b) {
        if (!b) {
            return a.type;
        }
        if (a.type === b.type) {
            return a.type;
        }
        return 'any';
    }
    function tag(fn, type) {
        return Object.assign(fn, {
            type,
            toString() {
                return `TaggedFunction[${type}] ${Function.prototype.toString.call(fn)}`;
            }
        });
    }
    function combineResult(result, match) {
        if (!result) {
            return match;
        }
        return result;
    }
    function isTruthy(obj) {
        return obj !== false && obj !== null;
    }
    function Test(type) {
        return `Test<${type}>`;
    }
    /**
     * @param {Function} fn
     * @param {string[]} [parameterNames]
     *
     * @return {FunctionWrapper}
     */
    function wrapFunction(fn, parameterNames = null) {
        if (!fn) {
            return null;
        }
        if (fn instanceof FunctionWrapper) {
            return fn;
        }
        if (fn instanceof Range$1) {
            return new FunctionWrapper((value) => fn.includes(value), ['value']);
        }
        return new FunctionWrapper(fn, parameterNames || parseParameterNames(fn));
    }
    function coerceSingleton(values) {
        if (Array.isArray(values) && values.length === 1) {
            return values[0];
        }
        else {
            return values;
        }
    }
    function parseString(str) {
        if (str.startsWith('"')) {
            str = str.slice(1);
        }
        if (str.endsWith('"')) {
            str = str.slice(0, -1);
        }
        return str.replace(/(\\")|(\\\\)|(\\u[a-fA-F0-9]{5,6})|((?:\\u[a-fA-F0-9]{1,4})+)/ig, function (substring, ...groups) {
            const [quotes, escape, codePoint, charCodes] = groups;
            if (quotes) {
                return '"';
            }
            if (escape) {
                return '\\';
            }
            const escapePattern = /\\u([a-fA-F0-9]+)/ig;
            if (codePoint) {
                const codePointMatch = escapePattern.exec(codePoint);
                return String.fromCodePoint(parseInt(codePointMatch[1], 16));
            }
            if (charCodes) {
                const chars = [];
                let charCodeMatch;
                while ((charCodeMatch = escapePattern.exec(substring)) !== null) {
                    chars.push(parseInt(charCodeMatch[1], 16));
                }
                return String.fromCharCode(...chars);
            }
            throw new Error('illegal match');
        });
    }

    /**
    The data structure for documents. @nonabstract
    */
    let Text$2 = class Text {
        /**
        @internal
        */
        constructor() { }
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            let parts = [];
            this.decompose(0, from, parts, 2 /* Open.To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
            this.decompose(to, this.length, parts, 1 /* Open.From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (let skip = start, pos = start;;) {
                a.next(skip);
                b.next(skip);
                skip = 0;
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                pos += a.value.length;
                if (a.done || pos >= end)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        @internal
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    };
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text$2 {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line$1(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* Open.From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Tree.Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        scanIdentical() { return 0; }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text$2 {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        scanIdentical(other, dir) {
            if (!(other instanceof TextNode))
                return 0;
            let length = 0;
            let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
                : [this.children.length - 1, other.children.length - 1, -1, -1];
            for (;; iA += dir, iB += dir) {
                if (iA == eA || iB == eB)
                    return length;
                let chA = this.children[iA], chB = other.children[iB];
                if (chA != chB)
                    return length + chA.scanIdentical(chB, dir);
                length += chA.length + 1;
            }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Tree.Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Tree.Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text$2.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    if (typeof Symbol != "undefined") {
        Text$2.prototype[Symbol.iterator] = function () { return this.iter(); };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
            LineCursor.prototype[Symbol.iterator] = function () { return this; };
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
    */
    let Line$1 = class Line {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from, 
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to, 
        /**
        This line's line number (1-based).
        */
        number, 
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    };

    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend$2 = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend$2.length; i++)
        extend$2[i] += extend$2[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend$2.length; i += 2)
            if (extend$2[i] > code)
                return extend$2[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters (when
    `includeExtending` is true), characters joined with zero-width
    joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true, includeExtending = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
    }
    function nextClusterBreak(str, pos, includeExtending) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    function prevClusterBreak(str, pos, includeExtending) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2, includeExtending);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    The amount of positions a character takes up a JavaScript string.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
        /**
        @internal
        */
        static create(sections) { return new ChangeDesc(sections); }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text$2.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text$2.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return ChangeDesc.create(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: ChangeDesc.create(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text$2.empty : typeof insert == "string" ? Text$2.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text$2.empty);
                    inserted[i] = Text$2.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text$2.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text$2.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        // Produce a copy of setA that applies to the document after setB
        // has been applied (assuming both start at the same document).
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        // Iterate over both sets in parallel. inserted tracks, for changes
        // in A that have to be processed piece-by-piece, whether their
        // content has been inserted already, and refers to the section
        // index.
        for (let inserted = -1;;) {
            if (a.ins == -1 && b.ins == -1) {
                // Move across ranges skipped by both sets.
                let len = Math.min(a.len, b.len);
                addSection(sections, len, -1);
                a.forward(len);
                b.forward(len);
            }
            else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
                // If there's a change in B that comes before the next change in
                // A (ordered by start pos, then len, then before flag), skip
                // that (and process any changes in A it covers).
                let len = b.len;
                addSection(sections, b.ins, -1);
                while (len) {
                    let piece = Math.min(a.len, len);
                    if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                        addSection(sections, 0, a.ins);
                        if (insert)
                            addInsert(insert, sections, a.text);
                        inserted = a.i;
                    }
                    a.forward(piece);
                    len -= piece;
                }
                b.next();
            }
            else if (a.ins >= 0) {
                // Process the part of a change in A up to the start of the next
                // non-deletion change in B (if overlapping).
                let len = 0, left = a.len;
                while (left) {
                    if (b.ins == -1) {
                        let piece = Math.min(left, b.len);
                        len += piece;
                        left -= piece;
                        b.forward(piece);
                    }
                    else if (b.ins == 0 && b.len < left) {
                        left -= b.len;
                        b.next();
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, inserted < a.i ? a.ins : 0);
                if (insert && inserted < a.i)
                    addInsert(insert, sections, a.text);
                inserted = a.i;
                a.forward(a.len - left);
            }
            else if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text$2.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text$2.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 3 /* RangeFlag.BidiLevelMask */;
            return level == 3 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;
            return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from, to;
            if (this.empty) {
                from = to = change.mapPos(this.from, assoc);
            }
            else {
                from = change.mapPos(this.from, 1);
                to = change.mapPos(this.to, -1);
            }
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
        /**
        @internal
        */
        static create(from, to, flags) {
            return new SelectionRange(from, to, flags);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection.
        */
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return EditorSelection.normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn, bidiLevel) {
            let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel));
            return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | 8 /* RangeFlag.AssocAfter */ | flags)
                : SelectionRange.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0) | flags);
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
            let main = ranges[mainIndex];
            ranges.sort((a, b) => a.from - b.from);
            mainIndex = ranges.indexOf(main);
            for (let i = 1; i < ranges.length; i++) {
                let range = ranges[i], prev = ranges[i - 1];
                if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                    let from = prev.from, to = Math.max(range.to, prev.to);
                    if (i <= mainIndex)
                        mainIndex--;
                    ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
                }
            }
            return new EditorSelection(ranges, mainIndex);
        }
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of uses of facets are the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
    attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
    listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, enables) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
            this.extensions = typeof enables == "function" ? enables(this) : enables;
        }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Provider.Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return {
                create(state) {
                    state.values[idx] = getter(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update(state, tr) {
                    if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                        let newVal = getter(state);
                        if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                            state.values[idx] = newVal;
                            return 1 /* SlotStatus.Changed */;
                        }
                    }
                    return 0;
                },
                reconfigure: (state, oldState) => {
                    let newVal, oldAddr = oldState.config.address[id];
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (this.dependencies.every(dep => {
                            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                                dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                        }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                            state.values[idx] = oldVal;
                            return 0;
                        }
                    }
                    else {
                        newVal = getter(state);
                    }
                    state.values[idx] = newVal;
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function ensureAll(state, addrs) {
        let changed = false;
        for (let addr of addrs)
            if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
                changed = true;
        return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        function get(state) {
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Provider.Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            return facet.combine(values);
        }
        return {
            create(state) {
                for (let addr of providerAddrs)
                    ensureAddr(state, addr);
                state.values[idx] = get(state);
                return 1 /* SlotStatus.Changed */;
            },
            update(state, tr) {
                if (!ensureAll(state, dynamic))
                    return 0;
                let value = get(state);
                if (facet.compare(value, state.values[idx]))
                    return 0;
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            },
            reconfigure(state, oldState) {
                let depChanged = ensureAll(state, providerAddrs);
                let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
                if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                let value = get(state);
                if (facet.compare(value, oldValue)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            }
        };
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return {
                create: (state) => {
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update: (state, tr) => {
                    let oldVal = state.values[idx];
                    let value = this.updateF(oldVal, tr);
                    if (this.compareF(oldVal, value))
                        return 0;
                    state.values[idx] = value;
                    return 1 /* SlotStatus.Changed */;
                },
                reconfigure: (state, oldState) => {
                    if (oldState.config.address[this.id] != null) {
                        state.values[idx] = oldState.field(this);
                        return 0;
                    }
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /*@__PURE__*/prec(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /*@__PURE__*/prec(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec(Prec_.lowest)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.facets = facets;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                let oldProviders = oldFacets && oldFacets[id] || [];
                if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    if (sameArray(oldProviders, providers)) {
                        staticValues.push(oldState.facet(facet));
                    }
                    else {
                        let value = facet.combine(providers.map(p => p.value));
                        staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                    }
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Provider.Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            let dynamic = dynamicSlots.map(f => f(address));
            return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known <= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, Prec_.default);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* SlotStatus.Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* SlotStatus.Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* SlotStatus.Computed */)
            return status;
        state.status[idx] = 4 /* SlotStatus.Computing */;
        let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
        return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
    dispatch one by calling
    [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
    */
    class Transaction {
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView) {
            return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
    }
    /**
    Annotation used to store transaction timestamps. Automatically
    added to every transaction, holding `Date.now()`.
    */
    Transaction.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:

     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions

    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
            }
            tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$1 = [];
    function asArray(value) {
        return value == null ? none$1 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, 
        /**
        @internal
        */
        values, computeSlot, tr) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            this.values = values;
            this.status = config.statusTemplate.slice();
            this.computeSlot = computeSlot;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.computeSlot = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray(base).concat(effect.value);
                }
            }
            let startValues;
            if (!conf) {
                conf = Configuration.resolve(base, compartments, this);
                let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
                startValues = intermediateState.values;
            }
            else {
                startValues = tr.startState.values.slice();
            }
            new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string) {
            return Text$2.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField && this.config.address[value.id] != null)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    if (Object.prototype.hasOwnProperty.call(json, prop)) {
                        let field = fields[prop], value = json[prop];
                        fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                    }
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text$2 ? config.doc
                : Text$2.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        
        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                    phrase = map[phrase];
                    break;
                }
            if (insert.length)
                phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                    if (i == "$")
                        return "$";
                    let n = +(i || 1);
                    return !n || n > insert.length ? m : insert[n - 1];
                });
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        
        Examples of language data fields are...
        
        - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
          comment syntax.
        - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
          for providing language-specific completion sources.
        - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
          characters that should be considered part of words in this
          language.
        - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
          bracket closing behavior.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.

    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = /*@__PURE__*/Facet.define({
        compare(a, b) {
            let kA = Object.keys(a), kB = Object.keys(b);
            return kA.length == kB.length && kA.every(k => a[k] == b[k]);
        }
    });
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two numbers indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even if the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are present.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. `defaults` should hold
    default values for all optional fields in `Config`.

    The function will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from, to = from) { return Range.create(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    class Range {
        constructor(
        /**
        The range's start position.
        */
        from, 
        /**
        Its end position.
        */
        to, 
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
        /**
        @internal
        */
        static create(from, to, value) {
            return new Range(from, to, value);
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                    if (val.startSide != val.endSide) {
                        newTo = changes.mapPos(curFrom, val.endSide);
                        if (newTo < newFrom)
                            continue;
                    }
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        constructor(
        /**
        @internal
        */
        chunkPos, 
        /**
        @internal
        */
        chunk, 
        /**
        @internal
        */
        nextLayer, 
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
            return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add = add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(Range.create(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.empty || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, 
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration. `from` and
        `to` are coordinates in the _new_ space, after these changes.
        */
        textDiff, comparator, 
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b, textDiff);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* C.Far */ - 1;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to > to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator, 
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let openRanges = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    let active = cursor.activeForPoint(cursor.to);
                    let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
                    iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                    openRanges = Math.min(cursor.openEnd(curTo), active.length);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, openRanges);
                    openRanges = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
                pos = cursor.to;
                cursor.next();
            }
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
    */
    class RangeSetBuilder {
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* C.Far */;
            this.lastTo = -1000000000 /* C.Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* C.ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b, textDiff) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint <= 0)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++) {
                let known = inA.get(set.chunk[i]);
                if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                    !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                    shared.add(set.chunk[i]);
            }
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* C.Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
                this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* C.Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* C.Far */;
            this.endSide = 0;
            // The amount of open active ranges at the start of the iterator.
            // Not including points.
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove$3(this.active, index);
            remove$3(this.activeTo, index);
            remove$3(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            while (i < this.activeRank.length && this.activeRank[i] <= rank)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove$3(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* C.Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        this.cursor.next();
                        this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                this.openStart = 0;
                for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                    this.openStart++;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove$3(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* C.Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account. By
    default, the string length is returned when it is too short to
    reach the column. Pass `strict` true to make it return -1 in that
    situation.
    */
    function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0;;) {
            if (n >= col)
                return i;
            if (i == string.length)
                break;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
    }

    const C$2 = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C$2 : Symbol.for(C$2);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C$2 + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      static mount(root, modules) {
        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
      }
    }

    let adoptedSet = new Map; //<Document, StyleSet>

    class StyleSet {
      constructor(root) {
        let doc = root.ownerDocument || root, win = doc.defaultView;
        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
          let adopted = adoptedSet.get(doc);
          if (adopted) {
            root.adoptedStyleSheets = [adopted.sheet, ...root.adoptedStyleSheets];
            return root[SET] = adopted
          }
          this.sheet = new win.CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
          adoptedSet.set(doc, this);
        } else {
          this.styleTag = doc.createElement("style");
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
        }
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\""
    };

    var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    mac || chrome$1 && +chrome$1[1] < 57;

    // Fill in the digit keys
    for (var i$2 = 0; i$2 < 10; i$2++) base[48 + i$2] = base[96 + i$2] = String(i$2);

    // The function keys
    for (var i$2 = 1; i$2 <= 24; i$2++) base[i$2 + 111] = "F" + i$2;

    // And the alphabetic keys
    for (var i$2 = 65; i$2 <= 90; i$2++) {
      base[i$2] = String.fromCharCode(i$2 + 32);
      shift[i$2] = String.fromCharCode(i$2);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function getSelection(root) {
        let target;
        // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.
        if (root.nodeType == 11) { // Shadow root
            target = root.getSelection ? root : root.ownerDocument;
        }
        else {
            target = root;
        }
        return target.getSelection();
    }
    function contains(dom, node) {
        return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function deepActiveElement(doc) {
        let elt = doc.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        for (let cur = dom; cur;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.assignedSlot || cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                        top: rect.top, bottom: rect.top + cur.clientHeight };
                }
                let moveX = 0, moveY = 0;
                if (y == "nearest") {
                    if (rect.top < bounding.top) {
                        moveY = -(bounding.top - rect.top + yMargin);
                        if (side > 0 && rect.bottom > bounding.bottom + moveY)
                            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                    }
                    else if (rect.bottom > bounding.bottom) {
                        moveY = rect.bottom - bounding.bottom + yMargin;
                        if (side < 0 && (rect.top - moveY) < bounding.top)
                            moveY = -(bounding.top + moveY - rect.top + yMargin);
                    }
                }
                else {
                    let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                    let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                        y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                            rect.bottom - boundingHeight + yMargin;
                    moveY = targetTop - bounding.top;
                }
                if (x == "nearest") {
                    if (rect.left < bounding.left) {
                        moveX = -(bounding.left - rect.left + xMargin);
                        if (side > 0 && rect.right > bounding.right + moveX)
                            moveX = rect.right - bounding.right + moveX + xMargin;
                    }
                    else if (rect.right > bounding.right) {
                        moveX = rect.right - bounding.right + xMargin;
                        if (side < 0 && rect.left < bounding.left + moveX)
                            moveX = -(bounding.left + moveX - rect.left + xMargin);
                    }
                }
                else {
                    let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                        (x == "start") == ltr ? rect.left - xMargin :
                            rect.right - (bounding.right - bounding.left) + xMargin;
                    moveX = targetLeft - bounding.left;
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        let movedX = 0, movedY = 0;
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY;
                            movedY = cur.scrollTop - start;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX;
                            movedX = cur.scrollLeft - start;
                        }
                        rect = { left: rect.left - movedX, top: rect.top - movedY,
                            right: rect.right - movedX, bottom: rect.bottom - movedY };
                        if (movedX && Math.abs(movedX - moveX) < 1)
                            x = "nearest";
                        if (movedY && Math.abs(movedY - moveY) < 1)
                            y = "nearest";
                    }
                }
                if (top)
                    break;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    function scrollableParent(dom) {
        let doc = dom.ownerDocument;
        for (let cur = dom.parentNode; cur;) {
            if (cur == doc.body) {
                break;
            }
            else if (cur.nodeType == 1) {
                if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
                    return cur;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) {
                cur = cur.host;
            }
            else {
                break;
            }
        }
        return null;
    }
    class DOMSelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
            this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
        while (node) {
            if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
                return node;
            node = node.assignedSlot || node.parentNode;
        }
        return null;
    }
    function clearAttributes(node) {
        while (node.attributes.length)
            node.removeAttributeNode(node.attributes[0]);
    }
    function atElementStart(doc, selection) {
        let node = selection.focusNode, offset = selection.focusOffset;
        if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
            return false;
        for (;;) {
            if (offset) {
                if (node.nodeType != 1)
                    return false;
                let prev = node.childNodes[offset - 1];
                if (prev.contentEditable == "false")
                    offset--;
                else {
                    node = prev;
                    offset = maxOffset(node);
                }
            }
            else if (node == doc) {
                return true;
            }
            else {
                offset = domIndex(node);
                node = node.parentNode;
            }
        }
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const noChildren = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.dirty = 2 /* Dirty.Node */;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) { return null; }
        sync(view, track) {
            if (this.dirty & 2 /* Dirty.Node */) {
                let parent = this.dom;
                let prev = null, next;
                for (let child of this.children) {
                    if (child.dirty) {
                        if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                            let contentView = ContentView.get(next);
                            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                                child.reuseDOM(next);
                        }
                        child.sync(view, track);
                        child.dirty = 0 /* Dirty.Not */;
                    }
                    next = prev ? prev.nextSibling : parent.firstChild;
                    if (track && !track.written && track.node == parent && next != child.dom)
                        track.written = true;
                    if (child.dom.parentNode == parent) {
                        while (next && next != child.dom)
                            next = rm$1(next);
                    }
                    else {
                        parent.insertBefore(child.dom, next);
                    }
                    prev = child.dom;
                }
                next = prev ? prev.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.dirty & 1 /* Dirty.Child */) {
                for (let child of this.children)
                    if (child.dirty) {
                        child.sync(view, track);
                        child.dirty = 0 /* Dirty.Not */;
                    }
            }
        }
        reuseDOM(_dom) { }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.dirty |= 2 /* Dirty.Node */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.dirty |= 2 /* Dirty.Node */;
                if (parent.dirty & 1 /* Dirty.Child */)
                    return;
                parent.dirty |= 1 /* Dirty.Child */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.dirty)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = noChildren) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this)
                    child.destroy();
            }
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
        get isEditable() { return true; }
        get isWidget() { return false; }
        get isHidden() { return false; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
        }
        become(other) { return false; }
        canReuseDOM(other) { return other.constructor == this.constructor; }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() { return 0; }
        destroy() {
            this.parent = null;
        }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }
    function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        // Change within a single child
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
            before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
            return;
        if (toI < children.length) {
            let after = children[toI];
            // Make sure the end of the child after the update is preserved in `after`
            if (after && toOff < after.length) {
                // If we're splitting a child, separate part of it to avoid that
                // being mangled when updating the child before the update.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    insert[insert.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    insert.push(after);
                }
            }
            else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
        }
        if (before) {
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                    before.breakAfter = insert.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
        }
        // Try to merge widgets on the boundaries of the replacement
        while (fromI < toI && insert.length) {
            if (children[toI - 1].become(insert[insert.length - 1])) {
                toI--;
                insert.pop();
                openEnd = insert.length ? 0 : openStart;
            }
            else if (children[fromI].become(insert[0])) {
                fromI++;
                insert.shift();
                openStart = insert.length ? 0 : openEnd;
            }
            else {
                break;
            }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
            children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
            fromI--;
        if (fromI < toI || insert.length)
            parent.replaceChildren(fromI, toI, insert);
    }
    function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
            dLen += view.length;
        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
    }

    let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
    const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
    const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    var browser = {
        mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
        windows: /*@__PURE__*//Win/.test(nav.platform),
        linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios,
        android: /*@__PURE__*//Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    const MaxJoinLen = 256;
    class TextView extends ContentView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(view, track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType == 3)
                this.createDOM(dom);
        }
        merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends ContentView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            return dom;
        }
        reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
                this.setDOM(node);
                this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
            }
        }
        sync(view, track) {
            if (!this.dom)
                this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
            else if (this.dirty & 4 /* Dirty.Attrs */)
                this.setAttrs(this.dom);
            super.sync(view, track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1) {
                this.children.length = detachFrom;
                this.markDirty();
            }
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else if (to < length) {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else if (to < length)
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return Rect0;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends ContentView {
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
            this.prevWidget = null;
        }
        static create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
        }
        split(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
                if (this.widget.constructor == other.widget.constructor) {
                    if (!this.widget.compare(other.widget))
                        this.markDirty(true);
                    if (this.dom && !this.prevWidget)
                        this.prevWidget = this.widget;
                    this.widget = other.widget;
                    return true;
                }
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text$2.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let { view } = top, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text$2.empty;
        }
        domAtPos(pos) {
            return (this.length ? pos == 0 : this.side > 0)
                ? DOMPos.before(this.dom)
                : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return Rect0;
            for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return this.length ? rect : flattenRect(rect, this.side > 0);
        }
        get isEditable() { return false; }
        get isWidget() { return true; }
        get isHidden() { return this.widget.isHidden; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
    class CompositionView extends WidgetView {
        domAtPos(pos) {
            let { topView, text } = this.widget;
            if (!topView)
                return new DOMPos(text, Math.min(pos, text.nodeValue.length));
            return scanCompositionTree(pos, 0, topView, text, this.length - topView.length, (v, p) => v.domAtPos(p), (text, p) => new DOMPos(text, Math.min(p, text.nodeValue.length)));
        }
        sync() { this.setDOM(this.widget.toDOM()); }
        localPosFromDOM(node, offset) {
            let { topView, text } = this.widget;
            if (!topView)
                return Math.min(offset, this.length);
            return posFromDOMInCompositionTree(node, offset, topView, text, this.length - topView.length);
        }
        ignoreMutation() { return false; }
        get overrideDOMText() { return null; }
        coordsAt(pos, side) {
            let { topView, text } = this.widget;
            if (!topView)
                return textCoords(text, pos, side);
            return scanCompositionTree(pos, side, topView, text, this.length - topView.length, (v, pos, side) => v.coordsAt(pos, side), (text, pos, side) => textCoords(text, pos, side));
        }
        destroy() {
            var _a;
            super.destroy();
            (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
        }
        get isEditable() { return true; }
        canReuseDOM() { return true; }
    }
    // Uses the old structure of a chunk of content view frozen for
    // composition to try and find a reasonable DOM location for the given
    // offset.
    function scanCompositionTree(pos, side, view, text, dLen, enterView, fromText) {
        if (view instanceof MarkView) {
            for (let child = view.dom.firstChild; child; child = child.nextSibling) {
                let desc = ContentView.get(child);
                if (!desc) {
                    let inner = scanCompositionNode(pos, side, child, fromText);
                    if (typeof inner != "number")
                        return inner;
                    pos = inner;
                }
                else {
                    let hasComp = contains(child, text);
                    let len = desc.length + (hasComp ? dLen : 0);
                    if (pos < len || pos == len && desc.getSide() <= 0)
                        return hasComp ? scanCompositionTree(pos, side, desc, text, dLen, enterView, fromText) : enterView(desc, pos, side);
                    pos -= len;
                }
            }
            return enterView(view, view.length, -1);
        }
        else if (view.dom == text) {
            return fromText(text, pos, side);
        }
        else {
            return enterView(view, pos, side);
        }
    }
    function scanCompositionNode(pos, side, node, fromText) {
        if (node.nodeType == 3) {
            let len = node.nodeValue.length;
            if (pos <= len)
                return fromText(node, pos, side);
            pos -= len;
        }
        else if (node.nodeType == 1 && node.contentEditable != "false") {
            for (let child = node.firstChild; child; child = child.nextSibling) {
                let inner = scanCompositionNode(pos, side, child, fromText);
                if (typeof inner != "number")
                    return inner;
                pos = inner;
            }
        }
        return pos;
    }
    function posFromDOMInCompositionTree(node, offset, view, text, dLen) {
        if (view instanceof MarkView) {
            let pos = 0;
            for (let child = view.dom.firstChild; child; child = child.nextSibling) {
                let childView = ContentView.get(child);
                if (childView) {
                    let hasComp = contains(child, text);
                    if (contains(child, node))
                        return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, childView, text, dLen)
                            : childView.localPosFromDOM(node, offset));
                    pos += childView.length + (hasComp ? dLen : 0);
                }
                else {
                    let inner = posFromDOMInOpaqueNode(node, offset, child);
                    if (inner.result != null)
                        return pos + inner.result;
                    pos += inner.size;
                }
            }
        }
        else if (view.dom == text) {
            return Math.min(offset, text.nodeValue.length);
        }
        return view.localPosFromDOM(node, offset);
    }
    function posFromDOMInOpaqueNode(node, offset, target) {
        if (target.nodeType == 3) {
            return node == target ? { result: offset } : { size: target.nodeValue.length };
        }
        else if (target.nodeType == 1 && target.contentEditable != "false") {
            let pos = 0;
            for (let child = target.firstChild, i = 0;; child = child.nextSibling, i++) {
                if (node == target && i == offset)
                    return { result: pos };
                if (!child)
                    return { size: pos };
                let inner = posFromDOMInOpaqueNode(node, offset, child);
                if (inner.result != null)
                    return { result: offset + inner.result };
                pos += inner.size;
            }
        }
        else {
            return target.contains(node) ? { result: 0 } : { size: 0 };
        }
    }
    // These are drawn around uneditable widgets to avoid a number of
    // browser bugs that show up when the cursor is directly next to
    // uneditable inline content.
    class WidgetBufferView extends ContentView {
        constructor(side) {
            super();
            this.side = side;
        }
        get length() { return 0; }
        merge() { return false; }
        become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() { return new WidgetBufferView(this.side); }
        sync() {
            if (!this.dom) {
                let dom = document.createElement("img");
                dom.className = "cm-widgetBuffer";
                dom.setAttribute("aria-hidden", "true");
                this.setDOM(dom);
            }
        }
        getSide() { return this.side; }
        domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
        localPosFromDOM() { return 0; }
        domBoundsAround() { return null; }
        coordsAt(pos) {
            let imgRect = this.dom.getBoundingClientRect();
            // Since the <img> height doesn't correspond to text height, try
            // to borrow the height from some sibling node.
            let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
            return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top
                ? { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;
        }
        get overrideDOMText() {
            return Text$2.empty;
        }
        get isHidden() { return true; }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineSiblingRect(view, side) {
        let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;
        while (parent && index >= 0) {
            if (side < 0 ? index > 0 : index < parent.children.length) {
                let next = parent.children[index + side];
                if (next instanceof TextView) {
                    let nextRect = next.coordsAt(side < 0 ? next.length : 0, side);
                    if (nextRect)
                        return nextRect;
                }
                index += side;
            }
            else if (parent instanceof MarkView && parent.parent) {
                index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
                parent = parent.parent;
            }
            else {
                let last = parent.dom.lastChild;
                if (last && last.nodeName == "BR")
                    return last.getClientRects()[0];
                break;
            }
        }
        return undefined;
    }
    function inlineDOMAtPos(parent, pos) {
        let dom = parent.dom, { children } = parent, i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (let j = i; j > 0; j--) {
            let prev = children[j - 1];
            if (prev.dom.parentNode == dom)
                return prev.domAtPos(prev.length);
        }
        for (let j = i; j < children.length; j++) {
            let next = children[j];
            if (next.dom.parentNode == dom)
                return next.domAtPos(0);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        let before = null, beforePos = -1, after = null, afterPos = -1;
        function scan(view, pos) {
            for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
                let child = view.children[i], end = off + child.length;
                if (end >= pos) {
                    if (child.children.length) {
                        scan(child, pos - off);
                    }
                    else if ((!after || after instanceof WidgetBufferView && side > 0) &&
                        (end > pos || off == end && child.getSide() > 0)) {
                        after = child;
                        afterPos = pos - off;
                    }
                    else if (off < pos || (off == end && child.getSide() < 0)) {
                        before = child;
                        beforePos = pos - off;
                    }
                }
                off = end;
            }
        }
        scan(view, pos);
        let target = (side < 0 ? before : after) || before || after;
        if (target)
            return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
        return fallbackRect(view);
    }
    function fallbackRect(view) {
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    function attrsEq(a, b) {
        if (a == b)
            return true;
        if (!a || !b)
            return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
            return false;
        for (let key of keysA) {
            if (keysB.indexOf(key) == -1 || a[key] !== b[key])
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        let changed = null;
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs))
                    dom.removeAttribute(changed = name);
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name]))
                    dom.setAttribute(changed = name, attrs[name]);
        return !!changed;
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even if the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom, view) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) { return true; }
        /**
        @internal
        */
        get customView() { return null; }
        /**
        @internal
        */
        get isHidden() { return false; }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) { }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
    @nonabstract
    */
    class Decoration extends RangeValue {
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
            let side = spec.side || 0, block = !!spec.block;
            side += block ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */) : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block, startSide, endSide;
            if (spec.isBlockGap) {
                startSide = -500000000 /* Side.GapStart */;
                endSide = 400000000 /* Side.GapEnd */;
            }
            else {
                let { start, end } = getInclusive(spec, block);
                startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
                endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
            }
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    this.class == other.class &&
                    attrsEq(this.attrs, other.attrs);
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration &&
                this.spec.class == other.spec.class &&
                attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType.WidgetRange
                : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin >= from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (hasStart)
                this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].split(off), 0);
                this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0)
                this.children[--i].destroy();
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            this.markDirty();
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes, cls = deco.spec.class;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls)
                this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        reuseDOM(node) {
            if (node.nodeName == "DIV") {
                this.setDOM(node);
                this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
            }
        }
        sync(view, track) {
            var _a;
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            else if (this.dirty & 4 /* Dirty.Attrs */) {
                clearAttributes(this.dom);
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(view, track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last || !this.length ||
                last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0, textHeight;
            for (let child of this.children) {
                if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
                textHeight = rects[0].height;
            }
            return !totalWidth ? null : {
                lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length,
                textHeight
            };
        }
        coordsAt(pos, side) {
            let rect = coordsInChildren(this, pos, side);
            // Correct rectangle height for empty lines when the returned
            // height is larger than the text height.
            if (!this.children.length && rect && this.parent) {
                let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
                if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                    let dist = (height - heightOracle.textHeight) / 2;
                    return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
                }
            }
            return rect;
        }
        become(_other) { return false; }
        get type() { return BlockType.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0; i < docView.children.length; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (end > pos)
                        break;
                }
                off = end + block.breakAfter;
            }
            return null;
        }
    }
    class BlockWidgetView extends ContentView {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
            this.prevWidget = null;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            let end = new BlockWidgetView(this.widget, len, this.type);
            end.breakAfter = this.breakAfter;
            return end;
        }
        get children() { return noChildren; }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text$2.empty;
        }
        domBoundsAround() { return null; }
        become(other) {
            if (other instanceof BlockWidgetView && other.type == this.type &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.compare(this.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get isEditable() { return false; }
        get isWidget() { return true; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }

    class ContentBuilder {
        constructor(doc, pos, end, disallowBlockEffectsFor) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.disallowBlockEffectsFor = disallowBlockEffectsFor;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.pendingBuffer = 0 /* Buf.No */;
            this.bufferMarks = [];
            // Set to false directly after a widget that covers the position after it
            this.atCursorPos = true;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
            if (!this.curLine) {
                this.content.push(this.curLine = new LineView);
                this.atCursorPos = true;
            }
            return this.curLine;
        }
        flushBuffer(active = this.bufferMarks) {
            if (this.pendingBuffer) {
                this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
                this.pendingBuffer = 0 /* Buf.No */;
            }
        }
        addBlockWidget(view) {
            this.flushBuffer();
            this.curLine = null;
            this.content.push(view);
        }
        finish(openEnd) {
            if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
                this.flushBuffer();
            else
                this.pendingBuffer = 0 /* Buf.No */;
            if (!this.posCovered())
                this.getLine();
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.flushBuffer();
                        this.curLine = null;
                        this.atCursorPos = true;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
                this.flushBuffer(active.slice(active.length - openStart));
                this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.atCursorPos = true;
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart, index) {
            if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
                if (deco.block)
                    throw new RangeError("Block decorations may not be specified via plugins");
                if (to > this.doc.lineAt(this.pos).to)
                    throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
            }
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
                }
                else {
                    let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
                    let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                        (from < to || deco.startSide > 0);
                    let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                    let line = this.getLine();
                    if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                        this.pendingBuffer = 0 /* Buf.No */;
                    this.flushBuffer(active);
                    if (cursorBefore) {
                        line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                        openStart = active.length + Math.max(0, openStart - active.length);
                    }
                    line.append(wrapMarks(view, active), openStart);
                    this.atCursorPos = cursorAfter;
                    this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                    if (this.pendingBuffer)
                        this.bufferMarks = active.slice();
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations, dynamicDecorationMap) {
            let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
        }
    }
    function wrapMarks(view, active) {
        for (let mark of active)
            view = new MarkView(mark, [view], view.length);
        return view;
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
        get isHidden() { return true; }
    }

    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler = /*@__PURE__*/Facet.define();
    const focusChangeEffect = /*@__PURE__*/Facet.define();
    const perLineTextDirection = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const nativeSelectionHidden = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    class ScrollTarget {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
            this.range = range;
            this.y = y;
            this.x = x;
            this.yMargin = yMargin;
            this.xMargin = xMargin;
        }
        map(changes) {
            return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
        }
    }
    const scrollIntoView = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        domEventHandlers, buildExtensions) {
            this.id = id;
            this.create = create;
            this.domEventHandlers = domEventHandlers;
            this.extension = buildExtensions(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            const { eventHandlers, provide, decorations: deco } = spec || {};
            return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
                let ext = [viewPlugin.of(plugin)];
                if (deco)
                    ext.push(decorations.of(view => {
                        let pluginInst = view.plugin(plugin);
                        return pluginInst ? deco(pluginInst) : Decoration.none;
                    }));
                if (provide)
                    ext.push(provide(plugin));
                return ext;
            });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        update(view) {
            if (!this.value) {
                if (this.spec) {
                    try {
                        this.value = this.spec.create(view);
                    }
                    catch (e) {
                        logException(view.state, e, "CodeMirror plugin crashed");
                        this.deactivate();
                    }
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (this.value.update) {
                    try {
                        this.value.update(update);
                    }
                    catch (e) {
                        logException(update.state, e, "CodeMirror plugin crashed");
                        if (this.value.destroy)
                            try {
                                this.value.destroy();
                            }
                            catch (_) { }
                        this.deactivate();
                    }
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
        deactivate() {
            this.spec = this.value = null;
        }
    }
    const editorAttributes = /*@__PURE__*/Facet.define();
    const contentAttributes = /*@__PURE__*/Facet.define();
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const atomicRanges = /*@__PURE__*/Facet.define();
    const scrollMargins = /*@__PURE__*/Facet.define();
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
            return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* UpdateFlag.Height */) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                        0x2000 <= ch && ch <= 0x200b ? 256 /* T.NI */ :
                            0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ :
                                ch == 0x200c ? 256 /* T.NI */ : 1 /* T.L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    // Reused array of character types
    const types$7 = [];
    function computeOrder(line, direction) {
        let len = line.length, outerType = direction == LTR ? 1 /* T.L */ : 2 /* T.R */, oppositeType = direction == LTR ? 2 /* T.R */ : 1 /* T.L */;
        if (!line || outerType == 1 /* T.L */ && !BidiRE.test(line))
            return trivialOrder(len);
        // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = charType(line.charCodeAt(i));
            if (type == 512 /* T.NSM */)
                type = prev;
            else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                type = 16 /* T.AN */;
            types$7[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
            if (type & 7 /* T.Strong */)
                prevStrong = type;
            prev = type;
        }
        // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
            let type = types$7[i];
            if (type == 128 /* T.CS */) {
                if (i < len - 1 && prev == types$7[i + 1] && (prev & 24 /* T.Num */))
                    type = types$7[i] = prev;
                else
                    types$7[i] = 256 /* T.NI */;
            }
            else if (type == 64 /* T.ET */) {
                let end = i + 1;
                while (end < len && types$7[end] == 64 /* T.ET */)
                    end++;
                let replace = (i && prev == 8 /* T.EN */) || (end < len && types$7[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                for (let j = i; j < end; j++)
                    types$7[j] = replace;
                i = end - 1;
            }
            else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                types$7[i] = 1 /* T.L */;
            }
            prev = type;
            if (type & 7 /* T.Strong */)
                prevStrong = type;
        }
        // N0. Process bracket pairs in an isolating run sequence
        // sequentially in the logical order of the text positions of the
        // opening paired brackets using the logic given below. Within this
        // scope, bidirectional types EN and AN are treated as R.
        for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
            // Keeps [startIndex, type, strongSeen] triples for each open
            // bracket on BracketStack.
            if (br = Brackets[ch = line.charCodeAt(i)]) {
                if (br < 0) { // Closing bracket
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        if (BracketStack[sJ + 1] == -br) {
                            let flags = BracketStack[sJ + 2];
                            let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                    (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                            if (type)
                                types$7[i] = types$7[BracketStack[sJ]] = type;
                            sI = sJ;
                            break;
                        }
                    }
                }
                else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                    break;
                }
                else {
                    BracketStack[sI++] = i;
                    BracketStack[sI++] = ch;
                    BracketStack[sI++] = context;
                }
            }
            else if ((type = types$7[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                let embed = type == outerType;
                context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                    let cur = BracketStack[sJ + 2];
                    if (cur & 2 /* Bracketed.EmbedInside */)
                        break;
                    if (embed) {
                        BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                    }
                    else {
                        if (cur & 4 /* Bracketed.OppositeInside */)
                            break;
                        BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                    }
                }
            }
        }
        // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)
        for (let i = 0; i < len; i++) {
            if (types$7[i] == 256 /* T.NI */) {
                let end = i + 1;
                while (end < len && types$7[end] == 256 /* T.NI */)
                    end++;
                let beforeL = (i ? types$7[i - 1] : outerType) == 1 /* T.L */;
                let afterL = (end < len ? types$7[end] : outerType) == 1 /* T.L */;
                let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                for (let j = i; j < end; j++)
                    types$7[j] = replace;
                i = end - 1;
            }
        }
        // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.
        let order = [];
        if (outerType == 1 /* T.L */) {
            for (let i = 0; i < len;) {
                let start = i, rtl = types$7[i++] != 1 /* T.L */;
                while (i < len && rtl == (types$7[i] != 1 /* T.L */))
                    i++;
                if (rtl) {
                    for (let j = i; j > start;) {
                        let end = j, l = types$7[--j] != 2 /* T.R */;
                        while (j > start && l == (types$7[j - 1] != 2 /* T.R */))
                            j--;
                        order.push(new BidiSpan(j, end, l ? 2 : 1));
                    }
                }
                else {
                    order.push(new BidiSpan(start, i, 0));
                }
            }
        }
        else {
            for (let i = 0; i < len;) {
                let start = i, rtl = types$7[i++] == 2 /* T.R */;
                while (i < len && rtl == (types$7[i] == 2 /* T.R */))
                    i++;
                order.push(new BidiSpan(start, i, rtl ? 1 : 2));
            }
        }
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
    }

    const LineBreakPlaceholder = "\uffff";
    class DOMReader {
        constructor(points, state) {
            this.points = points;
            this.text = "";
            this.lineSeparator = state.facet(EditorState.lineSeparator);
        }
        append(text) {
            this.text += text;
        }
        lineBreak() {
            this.text += LineBreakPlaceholder;
        }
        readRange(start, end) {
            if (!start)
                return this;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if (view && nextView ? view.breakAfter :
                    (view ? view.breakAfter : isBlockElement(cur)) ||
                        (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)))
                    this.lineBreak();
                cur = next;
            }
            this.findPointBefore(parent, end);
            return this;
        }
        readTextNode(node) {
            let text = node.nodeValue;
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, text.length);
            for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
                let nextBreak = -1, breakSize = 1, m;
                if (this.lineSeparator) {
                    nextBreak = text.indexOf(this.lineSeparator, off);
                    breakSize = this.lineSeparator.length;
                }
                else if (m = re.exec(text)) {
                    nextBreak = m.index;
                    breakSize = m[0].length;
                }
                this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
                if (nextBreak < 0)
                    break;
                this.lineBreak();
                if (breakSize > 1)
                    for (let point of this.points)
                        if (point.node == node && point.pos > this.text.length)
                            point.pos -= breakSize - 1;
                off = nextBreak + breakSize;
            }
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            if (fromView != null) {
                this.findPointInside(node, fromView.length);
                for (let i = fromView.iter(); !i.next().done;) {
                    if (i.lineBreak)
                        this.lineBreak();
                    else
                        this.append(i.value);
                }
            }
            else if (node.nodeType == 3) {
                this.readTextNode(node);
            }
            else if (node.nodeName == "BR") {
                if (node.nextSibling)
                    this.lineBreak();
            }
            else if (node.nodeType == 1) {
                this.readRange(node.firstChild, null);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointInside(node, maxLen) {
            for (let point of this.points)
                if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                    point.pos = this.text.length + Math.min(maxLen, point.offset);
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }

    class DocView extends ContentView {
        constructor(view) {
            super();
            this.view = view;
            this.compositionDeco = Decoration.none;
            this.decorations = [];
            this.dynamicDecorationMap = [];
            // Track a minimum width for the editor. When measuring sizes in
            // measureVisibleLineHeights, this is updated to point at the width
            // of a given element and its extent in the document. When a change
            // happens in that range, these are reset. That way, once we've seen
            // a line/element of a given length, we keep the editor wide enough
            // to fit at least that element, until it is changed, at which point
            // we forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.forceSelection = false;
            // Used by the resize observer to ignore resizes that we caused
            // ourselves
            this.lastUpdate = Date.now();
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateDeco();
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
        }
        get length() { return this.view.state.doc.length; }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            if (this.view.inputState.composing < 0)
                this.compositionDeco = Decoration.none;
            else if (update.transactions.length || this.dirty)
                this.compositionDeco = computeCompositionDeco(this.view, update.changes);
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
                update.state.doc.lines != update.startState.doc.lines)
                this.forceSelection = true;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            if (this.dirty == 0 /* Dirty.Not */ && changedRanges.length == 0) {
                return false;
            }
            else {
                this.updateInner(changedRanges, update.startState.doc.length);
                if (update.transactions.length)
                    this.lastUpdate = Date.now();
                return true;
            }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength) {
            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.contentHeight + "px";
                this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(this.view, track);
                this.dirty = 0 /* Dirty.Not */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    this.forceSelection = true;
                this.dom.style.height = "";
            });
            let gaps = [];
            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                for (let child of this.children)
                    if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                        gaps.push(child.dom);
            observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength) {
            let cursor = this.childCursor(oldLength);
            for (let i = changes.length - 1;; i--) {
                let next = i >= 0 ? changes[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next;
                let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
            if (mustRead || !this.view.observer.selectionRange.focusNode)
                this.view.observer.readSelectionRange();
            let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
            let selectionNotFocus = !focused &&
                hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
            if (!(focused || fromPointer || selectionNotFocus))
                return;
            let force = this.forceSelection;
            this.forceSelection = false;
            let main = this.view.state.selection.main;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(main.anchor);
            let head = main.empty ? anchor : this.domAtPos(main.head);
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && !this.compositionDeco.size && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    // Chrome Android will hide the virtual keyboard when tapping
                    // inside an uneditable node, and not bring it back when we
                    // move the cursor to its proper position. This tries to
                    // restore the keyboard by cycling focus.
                    if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                        inUneditable(domSel.focusNode, this.dom)) {
                        this.dom.blur();
                        this.dom.focus({ preventScroll: true });
                    }
                    let rawSel = getSelection(this.view.root);
                    if (!rawSel) ;
                    else if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos(text, nextTo == 1 /* NextTo.Before */ ? 0 : text.nodeValue.length);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                            domSel.cursorBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        // Safari will ignore the call above when the editor is
                        // hidden, and then raise an error on the call to extend
                        // (#940).
                        try {
                            rawSel.extend(head.node, head.offset);
                        }
                        catch (_) { }
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                    if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                        this.dom.blur();
                        if (activeElt)
                            activeElt.focus();
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            if (this.compositionDeco.size)
                return;
            let { view } = this, cursor = view.state.selection.main;
            let sel = getSelection(view.root);
            let { anchorNode, anchorOffset } = view.observer.selectionRange;
            if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
            // This can go wrong in corner cases like single-character lines,
            // so check and reset if necessary.
            view.observer.readSelectionRange();
            let newRange = view.observer.selectionRange;
            if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
                sel.collapse(anchorNode, anchorOffset);
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos > start ||
                    (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                        (!i || side == 2 || this.children[i - 1].breakAfter ||
                            (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        measureVisibleLineHeights(viewport) {
            let result = [], { from, to } = viewport;
            let contentWidth = this.view.contentDOM.clientWidth;
            let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            let widest = -1, ltr = this.view.textDirection == Direction.LTR;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    let childRect = child.dom.getBoundingClientRect();
                    result.push(childRect.height);
                    if (isWider) {
                        let last = child.dom.lastChild;
                        let rects = last ? clientRectsFor(last) : [];
                        if (rects.length) {
                            let rect = rects[rects.length - 1];
                            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                            if (width > widest) {
                                widest = width;
                                this.minWidth = contentWidth;
                                this.minWidthFrom = pos;
                                this.minWidthTo = end;
                            }
                        }
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        textDirectionAt(pos) {
            let { i } = this.childPos(pos, 1);
            return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
            dummy.className = "cm-line";
            dummy.style.width = "99999px";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                textHeight = rect ? rect.height : lineHeight;
                dummy.remove();
            });
            return { lineHeight, charWidth, textHeight };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
                    deco.push(Decoration.replace({
                        widget: new BlockGapWidget(height),
                        block: true,
                        inclusive: true,
                        isBlockGap: true,
                    }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            let allDeco = this.view.state.facet(decorations).map((d, i) => {
                let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
                return dynamic ? d(this.view) : d;
            });
            for (let i = allDeco.length; i < allDeco.length + 3; i++)
                this.dynamicDecorationMap[i] = false;
            return this.decorations = [
                ...allDeco,
                this.compositionDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
        }
        scrollIntoView(target) {
            let { range } = target;
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
            for (let margins of this.view.state.facet(scrollMargins).map(f => f(this.view)))
                if (margins) {
                    let { left, right, top, bottom } = margins;
                    if (left != null)
                        mLeft = Math.max(mLeft, left);
                    if (right != null)
                        mRight = Math.max(mRight, right);
                    if (top != null)
                        mTop = Math.max(mTop, top);
                    if (bottom != null)
                        mBottom = Math.max(mBottom, bottom);
                }
            let targetRect = {
                left: rect.left - mLeft, top: rect.top - mTop,
                right: rect.right + mRight, bottom: rect.bottom + mBottom
            };
            scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function compositionSurroundingNode(view) {
        let sel = view.observer.selectionRange;
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return null;
        let cView = view.docView.nearest(textNode);
        if (!cView)
            return null;
        if (cView instanceof LineView) {
            let topNode = textNode;
            while (topNode.parentNode != cView.dom)
                topNode = topNode.parentNode;
            let prev = topNode.previousSibling;
            while (prev && !ContentView.get(prev))
                prev = prev.previousSibling;
            let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
            return { from: pos, to: pos, node: topNode, text: textNode };
        }
        else {
            for (;;) {
                let { parent } = cView;
                if (!parent)
                    return null;
                if (parent instanceof LineView)
                    break;
                cView = parent;
            }
            let from = cView.posAtStart;
            return { from, to: from + cView.length, node: cView.dom, text: textNode };
        }
    }
    function computeCompositionDeco(view, changes) {
        let surrounding = compositionSurroundingNode(view);
        if (!surrounding)
            return Decoration.none;
        let { from, to, node, text: textNode } = surrounding;
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let { state } = view, text = node.nodeType == 3 ? node.nodeValue :
            new DOMReader([], state).readRange(node.firstChild, null).text;
        if (newTo - newFrom < text.length) {
            if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text)
                newTo = newFrom + text.length;
            else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text)
                newFrom = newTo - text.length;
            else
                return Decoration.none;
        }
        else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
            return Decoration.none;
        }
        let topView = ContentView.get(node);
        if (topView instanceof CompositionView)
            topView = topView.widget.topView;
        else if (topView)
            topView.parent = null;
        return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })
            .range(newFrom, newTo));
    }
    class CompositionWidget extends WidgetType {
        constructor(top, text, topView) {
            super();
            this.top = top;
            this.text = text;
            this.topView = topView;
        }
        eq(other) { return this.top == other.top && this.text == other.text; }
        toDOM() { return this.top; }
        ignoreEvent() { return false; }
        get customView() { return CompositionView; }
    }
    function nearbyTextNode(startNode, startOffset, side) {
        if (side <= 0)
            for (let node = startNode, offset = startOffset;;) {
                if (node.nodeType == 3)
                    return node;
                if (node.nodeType == 1 && offset > 0) {
                    node = node.childNodes[offset - 1];
                    offset = maxOffset(node);
                }
                else {
                    break;
                }
            }
        if (side >= 0)
            for (let node = startNode, offset = startOffset;;) {
                if (node.nodeType == 3)
                    return node;
                if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                    node = node.childNodes[offset];
                    offset = 0;
                }
                else {
                    break;
                }
            }
        return null;
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
    }
    class DecorationComparator$1 {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    }
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    function inUneditable(node, inside) {
        for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
            if (cur.nodeType == 1 && cur.contentEditable == 'false') {
                return true;
            }
        }
        return false;
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY, closestOverlap = false;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                    let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
                    closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (closestOverlap && closest.contentEditable != "false")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, coords, precise, bias = -1) {
        var _a, _b;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, { docHeight } = view.viewState;
        let { x, y } = coords, yOffset = y - docTop;
        if (yOffset < 0)
            return 0;
        if (yOffset > docHeight)
            return view.state.doc.length;
        // Scan for a text block near the queried y position
        for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
            block = view.elementAtHeight(yOffset);
            if (block.type == BlockType.Text)
                break;
            for (;;) {
                // Move the y position out of this block
                yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
                if (yOffset >= 0 && yOffset <= docHeight)
                    break;
                // If the document consists entirely of replaced widgets, we
                // won't find a text block, so return 0
                if (bounced)
                    return precise ? null : 0;
                bounced = true;
                bias = -bias;
            }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length :
                precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
        let doc = view.dom.ownerDocument;
        let root = view.root.elementFromPoint ? view.root : doc;
        let element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element))
            element = null;
        // If the element is unexpected, clip x at the sides of the content area and try again
        if (!element) {
            x = Math.max(content.left + 1, Math.min(content.right - 1, x));
            element = root.elementFromPoint(x, y);
            if (element && !view.contentDOM.contains(element))
                element = null;
        }
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
            if (doc.caretPositionFromPoint) {
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (!view.contentDOM.contains(node) ||
                        browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                        browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                        node = undefined;
                }
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            if (!line)
                return yOffset > block.top + block.height / 2 ? block.to : block.from;
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        let nearest = view.docView.nearest(node);
        if (!nearest)
            return null;
        if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
            let rect = nearest.dom.getBoundingClientRect();
            return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
                ? nearest.posAtStart : nearest.posAtEnd;
        }
        else {
            return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
        }
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let line = Math.floor((y - block.top) / view.defaultLineHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousSafariCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
    }
    // Chrome will move positions between lines to the start of the next line
    function isSuspiciousChromeCaretResult(node, offset, x) {
        if (offset != 0)
            return false;
        for (let cur = node;;) {
            let parent = cur.parentNode;
            if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
                return false;
            if (parent.classList.contains("cm-line"))
                break;
            cur = parent;
        }
        let rect = node.nodeType == 1 ? node.getBoundingClientRect()
            : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
        return x - rect.left > 5;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let direction = view.textDirectionAt(line.from);
            let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView.find(view.docView, start.head);
        let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
        return EditorSelection.cursor(end, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        let direction = view.textDirectionAt(line.from);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos, start.assoc);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineBlockAt(startPos);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
                return EditorSelection.cursor(pos, start.assoc, undefined, goal);
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let atoms = view.state.facet(atomicRanges).map(f => f(view));
        for (;;) {
            let moved = false;
            for (let set of atoms) {
                set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
                    if (pos.from > from && pos.from < to) {
                        pos = oldPos.head > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
                        moved = true;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }

    // This will also be where dragging info and such goes
    class InputState {
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastTouchTime = 0;
            this.lastFocusTime = 0;
            this.lastScrollTop = 0;
            this.lastScrollLeft = 0;
            this.chromeScrollHack = -1;
            // On iOS, some keys need to have their default behavior happen
            // (after which we retroactively handle them and reset the DOM) to
            // avoid messing up the virtual keyboard state.
            this.pendingIOSKey = undefined;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastEscPress = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            // End time of the previous composition
            this.compositionEndedAt = 0;
            // Used in a kludge to detect when an Enter keypress should be
            // considered part of the composition on Safari, which fires events
            // in the wrong order
            this.compositionPendingKey = false;
            // Used to categorize changes as part of a composition, even when
            // the mutation events fire shortly after the compositionend event
            this.compositionPendingChange = false;
            this.mouseSelection = null;
            let handleEvent = (handler, event) => {
                if (this.ignoreDuringComposition(event))
                    return;
                if (event.type == "keydown" && this.keydown(view, event))
                    return;
                if (this.mustFlushObserver(event))
                    view.observer.forceFlush();
                if (this.runCustomHandlers(event.type, view, event))
                    event.preventDefault();
                else
                    handler(view, event);
            };
            for (let type in handlers) {
                let handler = handlers[type];
                view.contentDOM.addEventListener(type, event => {
                    if (eventBelongsToEditor(view, event))
                        handleEvent(handler, event);
                }, handlerOptions[type]);
                this.registeredEvents.push(type);
            }
            view.scrollDOM.addEventListener("mousedown", (event) => {
                if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {
                    handleEvent(handlers.mousedown, event);
                    if (!event.defaultPrevented && event.button == 2) {
                        // Make sure the content covers the entire scroller height, in order
                        // to catch a native context menu click below it
                        let start = view.contentDOM.style.minHeight;
                        view.contentDOM.style.minHeight = "100%";
                        setTimeout(() => view.contentDOM.style.minHeight = start, 200);
                    }
                }
            });
            if (browser.chrome && browser.chrome_version == 102) { // FIXME remove at some point
                // On Chrome 102, viewport updates somehow stop wheel-based
                // scrolling. Turning off pointer events during the scroll seems
                // to avoid the issue.
                view.scrollDOM.addEventListener("wheel", () => {
                    if (this.chromeScrollHack < 0)
                        view.contentDOM.style.pointerEvents = "none";
                    else
                        window.clearTimeout(this.chromeScrollHack);
                    this.chromeScrollHack = setTimeout(() => {
                        this.chromeScrollHack = -1;
                        view.contentDOM.style.pointerEvents = "";
                    }, 100);
                }, { passive: true });
            }
            this.notifiedFocused = view.hasFocus;
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
        }
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view, plugins) {
            var _a;
            let handlers;
            this.customHandlers = [];
            for (let plugin of plugins)
                if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
                    this.customHandlers.push({ plugin: plugin.value, handlers });
                    for (let type in handlers)
                        if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                            this.registeredEvents.push(type);
                            view.contentDOM.addEventListener(type, (event) => {
                                if (!eventBelongsToEditor(view, event))
                                    return;
                                if (this.runCustomHandlers(type, view, event))
                                    event.preventDefault();
                            });
                        }
                }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type];
                if (handler) {
                    try {
                        if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                            return true;
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            this.lastScrollTop = view.scrollDOM.scrollTop;
            this.lastScrollLeft = view.scrollDOM.scrollLeft;
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
        }
        keydown(view, event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
                return true;
            // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.
            if (browser.android && browser.chrome && !event.synthetic &&
                (event.keyCode == 13 || event.keyCode == 8)) {
                view.observer.delayAndroidKey(event.key, event.keyCode);
                return true;
            }
            // Prevent the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            let pending;
            if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
                ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                    EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
                this.pendingIOSKey = pending || event;
                setTimeout(() => this.flushIOSKey(view), 250);
                return true;
            }
            return false;
        }
        flushIOSKey(view) {
            let key = this.pendingIOSKey;
            if (!key)
                return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(view.contentDOM, key.key, key.keyCode);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
                this.compositionPendingKey = false;
                return true;
            }
            return false;
        }
        mustFlushObserver(event) {
            return event.type == "keydown" && event.keyCode != 229;
        }
        startMouseSelection(mouseSelection) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    const PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    const EmacsyPendingKeys = "dthko";
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    const dragScrollMargin = 6;
    function dragScrollSpeed(dist) {
        return Math.max(0, dist) * 0.7 + 8;
    }
    class MouseSelection {
        constructor(view, startEvent, style, mustSelect) {
            this.view = view;
            this.style = style;
            this.mustSelect = mustSelect;
            this.scrollSpeed = { x: 0, y: 0 };
            this.scrolling = -1;
            this.lastEvent = startEvent;
            this.scrollParent = scrollableParent(view.contentDOM);
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragMove = dragMovesSelection(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
        }
        start(event) {
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                event.preventDefault();
                this.select(event);
            }
        }
        move(event) {
            var _a;
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging !== false)
                return;
            this.select(this.lastEvent = event);
            let sx = 0, sy = 0;
            let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())
                || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
            if (event.clientX <= rect.left + dragScrollMargin)
                sx = -dragScrollSpeed(rect.left - event.clientX);
            else if (event.clientX >= rect.right - dragScrollMargin)
                sx = dragScrollSpeed(event.clientX - rect.right);
            if (event.clientY <= rect.top + dragScrollMargin)
                sy = -dragScrollSpeed(rect.top - event.clientY);
            else if (event.clientY >= rect.bottom - dragScrollMargin)
                sy = dragScrollSpeed(event.clientY - rect.bottom);
            this.setScrollSpeed(sx, sy);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            this.setScrollSpeed(0, 0);
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = null;
        }
        setScrollSpeed(sx, sy) {
            this.scrollSpeed = { x: sx, y: sy };
            if (sx || sy) {
                if (this.scrolling < 0)
                    this.scrolling = setInterval(() => this.scroll(), 50);
            }
            else if (this.scrolling > -1) {
                clearInterval(this.scrolling);
                this.scrolling = -1;
            }
        }
        scroll() {
            if (this.scrollParent) {
                this.scrollParent.scrollLeft += this.scrollSpeed.x;
                this.scrollParent.scrollTop += this.scrollSpeed.y;
            }
            else {
                this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
            }
            if (this.dragging === false)
                this.select(this.lastEvent);
        }
        select(event) {
            let selection = this.style.get(event, this.extend, this.multiple);
            if (this.mustSelect || !selection.eq(this.view.state.selection) ||
                selection.main.assoc != this.view.state.selection.main.assoc)
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer"
                });
            this.mustSelect = false;
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (!sel || sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = /*@__PURE__*/Object.create(null);
    const handlerOptions = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function doPaste(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27)
            view.inputState.lastEscPress = Date.now();
        else if (modifierCodes.indexOf(event.keyCode) < 0)
            view.inputState.lastEscPress = 0;
    };
    handlers.touchstart = (view, e) => {
        view.inputState.lastTouchTime = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlerOptions.touchstart = handlerOptions.touchmove = { passive: true };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (view.inputState.lastTouchTime > Date.now() - 2000)
            return; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            let mustFocus = view.root.activeElement != view.contentDOM;
            view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
            if (mustFocus)
                view.observer.ignore(() => focusPreventScroll(view.contentDOM));
            if (view.inputState.mouseSelection)
                view.inputState.mouseSelection.start(event);
        }
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        return {
            update(update) {
                if (update.docChanged) {
                    start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur = queryPos(view, event), removed;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                    return removed;
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    function removeRangeAround(sel, pos) {
        for (let i = 0; i < sel.ranges.length; i++) {
            let { from, to } = sel.ranges[i];
            if (from <= pos && to >= pos)
                return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
        }
        return null;
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = main;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    function dropText(view, event, text, direct) {
        if (!text)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
    }
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        if (view.state.readOnly)
            return event.preventDefault();
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            event.preventDefault();
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
        }
        else {
            dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
    };
    handlers.paste = (view, event) => {
        if (view.state.readOnly)
            return event.preventDefault();
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
            event.preventDefault();
        }
        else {
            capturePaste(view);
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
            return;
        lastLinewiseCopy = linewise ? text : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, text);
        }
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
    };
    const isFocusChange = /*@__PURE__*/Annotation.define();
    function focusChangeTransaction(state, focus) {
        let effects = [];
        for (let getEffect of state.facet(focusChangeEffect)) {
            let effect = getEffect(state, focus);
            if (effect)
                effects.push(effect);
        }
        return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
    }
    function updateForFocusChange(view) {
        setTimeout(() => {
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                let tr = focusChangeTransaction(view.state, focus);
                if (tr)
                    view.dispatch(tr);
                else
                    view.update([]);
            }
        }, 10);
    }
    handlers.focus = view => {
        view.inputState.lastFocusTime = Date.now();
        // When focusing reset the scroll position, move it back to where it was
        if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
            view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
            view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
        }
        updateForFocusChange(view);
    };
    handlers.blur = view => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
    };
    handlers.compositionstart = handlers.compositionupdate = view => {
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
        }
    };
    handlers.compositionend = view => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionPendingKey = true;
        view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
        view.inputState.compositionFirstChange = null;
        if (browser.chrome && browser.android)
            view.observer.flushSoon();
        setTimeout(() => {
            // Force the composition state to be cleared if it hasn't already been
            if (view.inputState.composing < 0 && view.docView.compositionDeco.size)
                view.update([]);
        }, 50);
    };
    handlers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
        var _a;
        // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
            view.observer.delayAndroidKey(pending.key, pending.keyCode);
            if (pending.key == "Backspace" || pending.key == "Delete") {
                let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
                setTimeout(() => {
                    var _a;
                    // Backspacing near uneditable nodes on Chrome Android sometimes
                    // closes the virtual keyboard. This tries to crudely detect
                    // that and refocus to get it back.
                    if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                        view.contentDOM.blur();
                        view.focus();
                    }
                }, 100);
            }
        }
    };

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    class HeightOracle {
        constructor(lineWrapping) {
            this.lineWrapping = lineWrapping;
            this.doc = Text$2.empty;
            this.heightSamples = {};
            this.lineHeight = 14; // The height of an entire line (line-height)
            this.charWidth = 7;
            this.textHeight = 14; // The height of the actual font (font-size)
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefreshForWrapping(whiteSpace) {
            return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
            this.lineWrapping = lineWrapping;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.textHeight = textHeight;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        type) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this.type = type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        @internal
        */
        join(other) {
            let detail = (Array.isArray(this.type) ? this.type : [this])
                .concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
    }
    var QueryType = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType || (QueryType = {}));
    const Epsilon = 1e-3;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Flag.Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this, doc = oracle.doc;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, type) {
            super(length, height);
            this.type = type;
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, oracle, top, offset) {
            return this.blockAt(0, oracle, top, offset);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            if (from <= offset + this.length && to >= offset)
                f(this.blockAt(0, oracle, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, BlockType.Text);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        heightMetrics(oracle, offset) {
            let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
            let lines = lastLine - firstLine + 1;
            let perLine, perChar = 0;
            if (oracle.lineWrapping) {
                let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
                perLine = totalPerLine / lines;
                if (this.length > lines + 1)
                    perChar = (this.height - totalPerLine) / (this.length - lines - 1);
            }
            else {
                perLine = this.height / lines;
            }
            return { firstLine, lastLine, perLine, perChar };
        }
        blockAt(height, oracle, top, offset) {
            let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            if (oracle.lineWrapping) {
                let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);
                let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
                let lineTop = Math.max(top, height - lineHeight / 2);
                return new BlockInfo(line.from, line.length, lineTop, lineHeight, BlockType.Text);
            }
            else {
                let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
                let { from, length } = oracle.doc.line(firstLine + line);
                return new BlockInfo(from, length, top + perLine * line, perLine, BlockType.Text);
            }
        }
        lineAt(value, type, oracle, top, offset) {
            if (type == QueryType.ByHeight)
                return this.blockAt(value, oracle, top, offset);
            if (type == QueryType.ByPosNoHeight) {
                let { from, to } = oracle.doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
            }
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
            let linesAbove = line.number - firstLine;
            let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
            return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, BlockType.Text);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            from = Math.max(from, offset);
            to = Math.min(to, offset + this.length);
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            for (let pos = from, lineTop = top; pos <= to;) {
                let line = oracle.doc.lineAt(pos);
                if (pos == from) {
                    let linesAbove = line.number - firstLine;
                    lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
                }
                let lineHeight = perLine + perChar * line.length;
                f(new BlockInfo(line.from, line.length, lineTop, lineHeight, BlockType.Text));
                lineTop += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let height = measured.heights[measured.index++];
                    if (singleHeight == -1)
                        singleHeight = height;
                    else if (Math.abs(height - singleHeight) >= Epsilon)
                        singleHeight = -2;
                    let line = new HeightMapText(len, height);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                let result = HeightMap.of(nodes);
                if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                    Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                    oracle.heightChanged = true;
                return result;
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Flag.Break */; }
        blockAt(height, oracle, top, offset) {
            let mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, oracle, top, offset)
                : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, oracle, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, oracle, top, offset)
                : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, oracle, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? deco.widget.estimatedHeight : 0;
                if (height < 0)
                    height = this.oracle.lineHeight;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco.type));
                }
                else if (len || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* Flag.SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent && parent != doc.body;) {
            if (parent.nodeType == 1) {
                let elt = parent;
                let style = window.getComputedStyle(elt);
                if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = elt.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: Math.max(left, right) - rect.left,
            top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
    }
    function fullPixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        return { left: 0, right: rect.right - rect.left,
            top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(wrapping) {
            return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0;
            this.paddingBottom = 0;
            this.contentDOMWidth = 0;
            this.contentDOMHeight = 0;
            this.editorHeight = 0;
            this.editorWidth = 0;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTarget = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            // Flag set when editor content was redrawn, so that the next
            // measure stage knows it must read DOM layout
            this.mustMeasureContent = true;
            this.defaultTextDirection = Direction.LTR;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
            this.heightOracle = new HeightOracle(guessWrapping);
            this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
            this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text$2.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.updateViewportLines();
            this.updateForViewport();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineBlockAt(pos);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        }
        updateViewportLines() {
            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
                this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
            });
        }
        update(update, scrollTarget = null) {
            this.state = update.state;
            let prevDeco = this.stateDeco;
            this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* UpdateFlag.Height */;
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
                !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTarget);
            let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||
                viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            this.updateForViewport();
            if (updateLines)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            update.flags |= this.computeVisibleRanges();
            if (scrollTarget)
                this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc &&
                !update.state.facet(nativeSelectionHidden))
                this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
            let dom = view.contentDOM, style = window.getComputedStyle(dom);
            let oracle = this.heightOracle;
            let whiteSpace = style.whiteSpace;
            this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
            let domRect = dom.getBoundingClientRect();
            let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
            this.contentDOMHeight = domRect.height;
            this.mustMeasureContent = false;
            let result = 0, bias = 0;
            // Vertical padding
            let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
                result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
            }
            if (this.editorWidth != view.scrollDOM.clientWidth) {
                if (oracle.lineWrapping)
                    measureContent = true;
                this.editorWidth = view.scrollDOM.clientWidth;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            // Pixel viewport
            let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (inView != this.inView) {
                this.inView = inView;
                if (inView)
                    measureContent = true;
            }
            if (!this.inView && !this.scrollTarget)
                return 0;
            let contentWidth = domRect.width;
            if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
                this.contentDOMWidth = domRect.width;
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            if (measureContent) {
                let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
                if (oracle.mustRefreshForHeights(lineHeights))
                    refresh = true;
                if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                    refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        view.docView.minWidth = 0;
                        result |= 8 /* UpdateFlag.Geometry */;
                    }
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
                oracle.heightChanged = false;
                for (let vp of this.viewports) {
                    let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                    this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text$2.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
                }
                if (oracle.heightChanged)
                    result |= 2 /* UpdateFlag.Height */;
            }
            let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                    this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange)
                this.viewport = this.getViewport(bias, this.scrollTarget);
            this.updateForViewport();
            if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
            result |= this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                view.docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
        getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
            let map = this.heightMap, oracle = this.heightOracle;
            let { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
            // If scrollTarget is given, make sure the viewport includes that position
            if (scrollTarget) {
                let { head } = scrollTarget.range;
                if (head < viewport.from || head > viewport.to) {
                    let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                    let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
                    if (scrollTarget.y == "center")
                        topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                    else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                        topPos = block.top;
                    else
                        topPos = block.bottom - viewHeight;
                    viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            if (!this.inView)
                return true;
            let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current, mayMeasure) {
            let wrapping = this.heightOracle.lineWrapping;
            let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
            // The non-wrapping logic won't work at all in predominantly right-to-left text.
            if (this.defaultTextDirection != Direction.LTR && !wrapping)
                return [];
            let gaps = [];
            let addGap = (from, to, line, structure) => {
                if (to - from < halfMargin)
                    return;
                let sel = this.state.selection.main, avoid = [sel.from];
                if (!sel.empty)
                    avoid.push(sel.to);
                for (let pos of avoid) {
                    if (pos > from && pos < to) {
                        addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                        addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                        return;
                    }
                }
                let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                    Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                    !avoid.some(pos => gap.from < pos && gap.to > pos));
                if (!gap) {
                    // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                    if (to < line.to && mayMeasure && wrapping &&
                        mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                        let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                        if (lineStart > from)
                            to = lineStart;
                    }
                    gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
                }
                gaps.push(gap);
            };
            for (let line of this.viewportLines) {
                if (line.length < doubleMargin)
                    continue;
                let structure = lineStructure(line.from, line.to, this.stateDeco);
                if (structure.total < doubleMargin)
                    continue;
                let target = this.scrollTarget ? this.scrollTarget.range.head : null;
                let viewFrom, viewTo;
                if (wrapping) {
                    let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                    let top, bot;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                        top = targetFrac - spaceFrac;
                        bot = targetFrac + spaceFrac;
                    }
                    else {
                        top = (this.visibleTop - line.top - marginHeight) / line.height;
                        bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                    }
                    viewFrom = findPosition(structure, top);
                    viewTo = findPosition(structure, bot);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    let marginWidth = margin * this.heightOracle.charWidth;
                    let left, right;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
                        left = targetFrac - spaceFrac;
                        right = targetFrac + spaceFrac;
                    }
                    else {
                        left = (this.pixelViewport.left - marginWidth) / totalWidth;
                        right = (this.pixelViewport.right + marginWidth) / totalWidth;
                    }
                    viewFrom = findPosition(structure, left);
                    viewTo = findPosition(structure, right);
                }
                if (viewFrom > line.from)
                    addGap(line.from, viewFrom, line, structure);
                if (viewTo < line.to)
                    addGap(viewTo, line.to, line, structure);
            }
            return gaps;
        }
        gapSize(line, from, to, structure) {
            let fraction = findFraction(structure, to) - findFraction(structure, from);
            if (this.heightOracle.lineWrapping) {
                return line.height * fraction;
            }
            else {
                return structure.total * this.heightOracle.charWidth * fraction;
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
            }
        }
        computeVisibleRanges() {
            let deco = this.stateDeco;
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            let changed = ranges.length != this.visibleRanges.length ||
                this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
            this.visibleRanges = ranges;
            return changed ? 4 /* UpdateFlag.Viewport */ : 0;
        }
        lineBlockAt(pos) {
            return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
                scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
        }
        elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
        }
        get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
        }
    }
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    function lineStructure(from, to, stateDeco) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(stateDeco, from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(oracle, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
    }
    function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler)) : block.type);
    }

    const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            flexShrink: 0,
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none",
            "&[contenteditable=true]": {
                WebkitUserModify: "read-write-plaintext-only",
            }
        },
        ".cm-lineWrapping": {
            whiteSpace_fallback: "pre-wrap",
            whiteSpace: "break-spaces",
            wordBreak: "break-word",
            overflowWrap: "anywhere",
            flexShrink: 1
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 6px"
        },
        ".cm-layer": {
            position: "absolute",
            left: 0,
            top: 0,
            contain: "size style",
            "& > *": {
                position: "absolute"
            }
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            pointerEvents: "none"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
        },
        ".cm-cursor": {
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#444"
        },
        ".cm-dropCursor": {
            position: "absolute"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
            display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
        "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
            flexShrink: 0,
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            left: 0,
            zIndex: 200
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#6c6c6c",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            minHeight: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        },
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
            verticalAlign: "text-top",
            height: "1em",
            width: 0,
            display: "inline"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block",
            verticalAlign: "top",
        },
        ".cm-highlightSpace:before": {
            content: "attr(data-display)",
            position: "absolute",
            pointerEvents: "none",
            color: "#888"
        },
        ".cm-highlightTab": {
            backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
            backgroundSize: "auto 100%",
            backgroundPosition: "right 90%",
            backgroundRepeat: "no-repeat"
        },
        ".cm-trailingSpace": {
            backgroundColor: "#ff332255"
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "1px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    class DOMChange {
        constructor(view, start, end, typeOver) {
            this.typeOver = typeOver;
            this.bounds = null;
            this.text = "";
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            if (view.state.readOnly && start > -1) {
                // Ignore changes when the editor is read-only
                this.newSel = null;
            }
            else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
                let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
                let reader = new DOMReader(selPoints, view.state);
                reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
                this.text = reader.text;
                this.newSel = selectionFromPoints(selPoints, this.bounds.from);
            }
            else {
                let domSel = view.observer.selectionRange;
                let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                    !contains(view.contentDOM, domSel.focusNode)
                    ? view.state.selection.main.head
                    : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
                let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                    !contains(view.contentDOM, domSel.anchorNode)
                    ? view.state.selection.main.anchor
                    : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
                this.newSel = EditorSelection.single(anchor, head);
            }
        }
    }
    function applyDOMChange(view, domChange) {
        let change;
        let { newSel } = domChange, sel = view.state.selection.main;
        if (domChange.bounds) {
            let { from, to } = domChange.bounds;
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
                browser.android && domChange.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
            if (diff) {
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. DomChange drops one of those.
                if (browser.chrome && view.inputState.lastKeyCode == 13 &&
                    diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                    diff.toB--;
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: Text$2.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
            }
        }
        else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
            newSel = null;
        }
        if (!change && !newSel)
            return false;
        if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
            // Heuristic to notice typing over a selected character
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        }
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4) {
            // If the change is inside the selection and covers most of it,
            // assume it is a selection replace (with identical characters at
            // the start/end not included in the diff)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        }
        else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
            /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
            // Detect insert-period-on-double-space Mac and Android behavior,
            // and transform it into a regular space insert.
            if (newSel && change.insert.length == 2)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text$2.of([" "]) };
        }
        else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
            change.insert.toString() == "\n " && view.lineWrapping) {
            // In Chrome, if you insert a space at the start of a wrapped
            // line, it will actually insert a newline and a space, causing a
            // bogus new line to be created in CodeMirror (#968)
            if (newSel)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text$2.of([" "]) };
        }
        if (change) {
            let startState = view.state;
            if (browser.ios && view.inputState.flushIOSKey(view))
                return true;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events. (Some of these keys are also handled by beforeinput
            // events and the pendingAndroidKey mechanism, but that's not
            // reliable in all situations.)
            if (browser.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view.contentDOM, "Enter", 13)) ||
                    (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Delete", 46))))
                return true;
            let text = change.insert.toString();
            if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text)))
                return true;
            if (view.inputState.composing >= 0)
                view.inputState.composing++;
            let tr;
            if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
                (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
                view.inputState.composing < 0) {
                let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
                let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
                tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
            }
            else {
                let changes = startState.changes(change);
                let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
                // Try to apply a composition change to all cursors
                if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                    change.to <= sel.to && change.to >= sel.to - 10) {
                    let replaced = view.state.sliceDoc(change.from, change.to);
                    let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
                    let offset = sel.to - change.to, size = sel.to - sel.from;
                    tr = startState.changeByRange(range => {
                        if (range.from == sel.from && range.to == sel.to)
                            return { changes, range: mainSel || range.map(changes) };
                        let to = range.to - offset, from = to - replaced.length;
                        if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                            // Unfortunately, there's no way to make multiple
                            // changes in the same node work without aborting
                            // composition, so cursors in the composition range are
                            // ignored.
                            compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)
                            return { range };
                        let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                        return {
                            changes: rangeChanges,
                            range: !mainSel ? range.map(rangeChanges) :
                                EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                        };
                    });
                }
                else {
                    tr = {
                        changes,
                        selection: mainSel && startState.selection.replaceRange(mainSel)
                    };
                }
            }
            let userEvent = "input.type";
            if (view.composing ||
                view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
                view.inputState.compositionPendingChange = false;
                userEvent += ".compose";
                if (view.inputState.compositionFirstChange) {
                    userEvent += ".start";
                    view.inputState.compositionFirstChange = false;
                }
            }
            view.dispatch(tr, { scrollIntoView: true, userEvent });
            return true;
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
            return true;
        }
        else {
            return false;
        }
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view) {
            this.view = view;
            this.active = false;
            // The known selection. Kept in our own object, as opposed to just
            // directly accessing the selection because:
            //  - Safari doesn't report the right selection in shadow DOM
            //  - Reading from the selection forces a DOM layout
            //  - This way, we can ignore selectionchange events if we have
            //    already seen the 'new' selection
            this.selectionRange = new DOMSelectionState;
            // Set when a selection change is detected, cleared on flush
            this.selectionChanged = false;
            this.delayedFlush = -1;
            this.resizeTimeout = -1;
            this.queue = [];
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
            this.lastChange = 0;
            this.scrollTargets = [];
            this.intersection = null;
            this.resizeScroll = null;
            this.resizeContent = null;
            this.intersecting = false;
            this.gapIntersection = null;
            this.gaps = [];
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            this.onResize = this.onResize.bind(this);
            this.onPrint = this.onPrint.bind(this);
            this.onScroll = this.onScroll.bind(this);
            if (typeof ResizeObserver == "function") {
                this.resizeScroll = new ResizeObserver(() => {
                    var _a;
                    if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                        this.onResize();
                });
                this.resizeScroll.observe(view.scrollDOM);
                this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());
                this.resizeContent.observe(view.contentDOM);
            }
            this.addWindowListeners(this.win = view.win);
            this.start();
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, {});
                this.intersection.observe(this.dom);
                this.gapIntersection = new IntersectionObserver(entries => {
                    if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                        this.onScrollChanged(document.createEvent("Event"));
                }, {});
            }
            this.listenForScroll();
            this.readSelectionRange();
        }
        onScrollChanged(e) {
            this.view.inputState.runScrollHandlers(this.view, e);
            if (this.intersecting)
                this.view.measure();
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush(false);
            this.onScrollChanged(e);
        }
        onResize() {
            if (this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                    this.resizeTimeout = -1;
                    this.view.requestMeasure();
                }, 50);
        }
        onPrint() {
            this.view.viewState.printing = true;
            this.view.measure();
            setTimeout(() => {
                this.view.viewState.printing = false;
                this.view.requestMeasure();
            }, 500);
        }
        updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
                this.gapIntersection.disconnect();
                for (let gap of gaps)
                    this.gapIntersection.observe(gap);
                this.gaps = gaps;
            }
        }
        onSelectionChange(event) {
            let wasChanged = this.selectionChanged;
            if (!this.readSelectionRange() || this.delayedAndroidKey)
                return;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event)) {
                if (!wasChanged)
                    this.selectionChanged = false;
                return;
            }
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).
            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
                // (Selection.isCollapsed isn't reliable on IE)
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush(false);
        }
        readSelectionRange() {
            let { view } = this;
            // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/dev/issues/414
            let range = browser.safari && view.root.nodeType == 11 &&
                deepActiveElement(this.dom.ownerDocument) == this.dom &&
                safariSelectionRangeHack(this.view) || getSelection(view.root);
            if (!range || this.selectionRange.eq(range))
                return false;
            let local = hasSelection(this.dom, range);
            // Detect the situation where the browser has, on focus, moved the
            // selection to the start of the content element. Reset it to the
            // position from the editor state.
            if (local && !this.selectionChanged &&
                view.inputState.lastFocusTime > Date.now() - 200 &&
                view.inputState.lastTouchTime < Date.now() - 300 &&
                atElementStart(this.dom, range)) {
                this.view.inputState.lastFocusTime = 0;
                view.docView.updateSelection();
                return false;
            }
            this.selectionRange.setRange(range);
            if (local)
                this.selectionChanged = true;
            return true;
        }
        setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
        }
        clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
            this.processRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
            var _a;
            if (!this.delayedAndroidKey) {
                let flush = () => {
                    let key = this.delayedAndroidKey;
                    if (key) {
                        this.clearDelayedAndroidKey();
                        if (!this.flush() && key.force)
                            dispatchKey(this.dom, key.key, key.keyCode);
                    }
                };
                this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
            }
            // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.
            if (!this.delayedAndroidKey || key == "Enter")
                this.delayedAndroidKey = {
                    key, keyCode,
                    // Only run the key handler when no changes are detected if
                    // this isn't coming right after another change, in which case
                    // it is probably part of a weird chain of updates, and should
                    // be ignored if it returns the DOM to its previous state.
                    force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
                };
        }
        clearDelayedAndroidKey() {
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                this.view.win.cancelAnimationFrame(this.delayedFlush);
                this.delayedFlush = -1;
            }
            this.flush();
        }
        pendingRecords() {
            for (let mut of this.observer.takeRecords())
                this.queue.push(mut);
            return this.queue;
        }
        processRecords() {
            let records = this.pendingRecords();
            if (records.length)
                this.queue = [];
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            return { from, to, typeOver };
        }
        readChange() {
            let { from, to, typeOver } = this.processRecords();
            let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
            if (from < 0 && !newSel)
                return null;
            if (from > -1)
                this.lastChange = Date.now();
            this.view.inputState.lastFocusTime = 0;
            this.selectionChanged = false;
            return new DOMChange(this.view, from, to, typeOver);
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                return false;
            if (readSelection)
                this.readSelectionRange();
            let domChange = this.readChange();
            if (!domChange)
                return false;
            let startState = this.view.state;
            let handled = applyDOMChange(this.view, domChange);
            // The view wasn't updated
            if (this.view.state == startState)
                this.view.update([]);
            return handled;
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.dirty |= 4 /* Dirty.Attrs */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        setWindow(win) {
            if (win != this.win) {
                this.removeWindowListeners(this.win);
                this.win = win;
                this.addWindowListeners(this.win);
            }
        }
        addWindowListeners(win) {
            win.addEventListener("resize", this.onResize);
            win.addEventListener("beforeprint", this.onPrint);
            win.addEventListener("scroll", this.onScroll);
            win.document.addEventListener("selectionchange", this.onSelectionChange);
        }
        removeWindowListeners(win) {
            win.removeEventListener("scroll", this.onScroll);
            win.removeEventListener("resize", this.onResize);
            win.removeEventListener("beforeprint", this.onPrint);
            win.document.removeEventListener("selectionchange", this.onSelectionChange);
        }
        destroy() {
            var _a, _b, _c, _d;
            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
            (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            this.removeWindowListeners(this.win);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
            this.win.cancelAnimationFrame(this.delayedFlush);
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    function safariSelectionRangeHack(view) {
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        view.dom.ownerDocument.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found)
            return null;
        let anchorNode = found.startContainer, anchorOffset = found.startOffset;
        let focusNode = found.endContainer, focusOffset = found.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
            this.plugins = [];
            this.pluginMap = new Map;
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            this.destroyed = false;
            /**
            @internal
            */
            this.updateState = 2 /* UpdateState.Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.style.cssText = "position: fixed; top: -10000px";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            this._dispatch = config.dispatch || ((tr) => this.update([tr]));
            this.dispatch = this.dispatch.bind(this);
            this._root = (config.root || getRoot(config.parent) || document);
            this.viewState = new ViewState(config.state || EditorState.create(config));
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
            for (let plugin of this.plugins)
                plugin.update(this);
            this.observer = new DOMObserver(this);
            this.inputState = new InputState(this);
            this.inputState.ensureHandlers(this, this.plugins);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* UpdateState.Idle */;
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() { return this.inputState.composing > 0; }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() { return this.inputState.composing >= 0; }
        /**
        The document or shadow root that the view lives in.
        */
        get root() { return this._root; }
        /**
        @internal
        */
        get win() { return this.dom.ownerDocument.defaultView || window; }
        dispatch(...input) {
            this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
                : this.state.update(...input));
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, attrsChanged = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            if (this.destroyed) {
                this.viewState.state = state;
                return;
            }
            let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
            if (transactions.some(tr => tr.annotation(isFocusChange))) {
                this.inputState.notifiedFocused = focus;
                // If a focus-change transaction is being dispatched, set this update flag.
                focusFlag = 1 /* UpdateFlag.Focus */;
            }
            else if (focus != this.inputState.notifiedFocused) {
                this.inputState.notifiedFocused = focus;
                // Schedule a separate focus transaction if necessary, otherwise
                // add a flag to this update
                dispatchFocus = focusChangeTransaction(state, focus);
                if (!dispatchFocus)
                    focusFlag = 1 /* UpdateFlag.Focus */;
            }
            // If there was a pending DOM change, eagerly read it and try to
            // apply it after the given transactions.
            let pendingKey = this.observer.delayedAndroidKey, domChange = null;
            if (pendingKey) {
                this.observer.clearDelayedAndroidKey();
                domChange = this.observer.readChange();
                // Only try to apply DOM changes if the transactions didn't
                // change the doc or selection.
                if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                    domChange = null;
            }
            else {
                this.observer.clear();
            }
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = ViewUpdate.create(this, state, transactions);
            update.flags |= focusFlag;
            let scrollTarget = this.viewState.scrollTarget;
            try {
                this.updateState = 2 /* UpdateState.Updating */;
                for (let tr of transactions) {
                    if (scrollTarget)
                        scrollTarget = scrollTarget.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollIntoView))
                            scrollTarget = e.value;
                }
                this.viewState.update(update, scrollTarget);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                attrsChanged = this.updateAttrs();
                this.showAnnouncements(transactions);
                this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (update.startState.facet(theme) != update.state.facet(theme))
                this.viewState.mustMeasureContent = true;
            if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
                this.requestMeasure();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(update);
            if (dispatchFocus || domChange)
                Promise.resolve().then(() => {
                    if (dispatchFocus && this.state == dispatchFocus.startState)
                        this.dispatch(dispatchFocus);
                    if (domChange) {
                        if (!applyDOMChange(this, domChange) && pendingKey.force)
                            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                    }
                });
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            if (this.destroyed) {
                this.viewState.state = newState;
                return;
            }
            this.updateState = 2 /* UpdateState.Updating */;
            let hadFocus = this.hasFocus;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
                this.pluginMap.clear();
                for (let plugin of this.plugins)
                    plugin.update(this);
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this, this.plugins);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (hadFocus)
                this.focus();
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.pluginMap.clear();
                this.inputState.ensureHandlers(this, this.plugins);
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i].update(this);
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.destroyed)
                return;
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.forceFlush();
            let updated = null;
            let { scrollHeight, scrollTop, clientHeight } = this.scrollDOM;
            let refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;
            try {
                for (let i = 0;; i++) {
                    this.updateState = 1 /* UpdateState.Measuring */;
                    let oldViewport = this.viewport;
                    let refBlock = this.viewState.lineBlockAtHeight(refHeight);
                    let changed = this.viewState.measure(this);
                    if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                        break;
                    if (i > 5) {
                        console.warn(this.measureRequests.length
                            ? "Measure loop restarted more than 5 times"
                            : "Viewport failed to stabilize");
                        break;
                    }
                    let measuring = [];
                    // Only run measure requests in this cycle when the viewport didn't change
                    if (!(changed & 4 /* UpdateFlag.Viewport */))
                        [this.measureRequests, measuring] = [measuring, this.measureRequests];
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* UpdateState.Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                        this.updateAttrs();
                        redrawn = this.docView.update(update);
                    }
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                let m = measuring[i];
                                if (m.write)
                                    m.write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (this.viewState.editorHeight) {
                        if (this.viewState.scrollTarget) {
                            this.docView.scrollIntoView(this.viewState.scrollTarget);
                            this.viewState.scrollTarget = null;
                            scrolled = true;
                        }
                        else {
                            let diff = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;
                            if (diff > 1 || diff < -1) {
                                this.scrollDOM.scrollTop += diff;
                                scrolled = true;
                            }
                        }
                    }
                    if (redrawn)
                        this.docView.updateSelection(true);
                    if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&
                        !scrolled && this.measureRequests.length == 0)
                        break;
                }
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
                this.measureScheduled = -1;
            }
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = attrsFromFacet(this, editorAttributes, {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                translate: "no",
                contenteditable: !this.state.facet(editable) ? "false" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            let changed = this.observer.ignore(() => {
                let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
                let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
                return changedContent || changedEditor;
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
            return changed;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse());
        }
        readMeasured() {
            if (this.updateState == 2 /* UpdateState.Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
            if (request) {
                if (this.measureRequests.indexOf(request) > -1)
                    return;
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            let known = this.pluginMap.get(plugin);
            if (known === undefined || known && known.spec != plugin)
                this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
            return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
            return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
        */
        elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height, again interpreted relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
        */
        lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
            return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        
        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() { return this.viewState.defaultTextDirection; }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
            let perLine = this.state.facet(perLineTextDirection);
            if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
                return this.textDirection;
            this.readMeasured();
            return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirectionAt(line.from);
            for (let entry of this.bidiCache)
                if (entry.from == line.from && entry.dir == dir)
                    return entry.order;
            let order = computeOrder(line.text, dir);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
        necessary when moving the editor's existing DOM to a new window or shadow root.
        */
        setRoot(root) {
            if (this._root != root) {
                this._root = root;
                this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
                this.mountStyles();
            }
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.plugins = [];
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
            return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
            var _a;
            let content = dom.querySelector(".cm-content");
            let cView = content && ContentView.get(content) || ContentView.get(dom);
            return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
        }
    }
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.
    */
    EditorView.inputHandler = inputHandler;
    /**
    This facet can be used to provide functions that create effects
    to be dispatched when the editor's focus state changes.
    */
    EditorView.focusChangeEffect = focusChangeEffect;
    /**
    By default, the editor assumes all its content has the same
    [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
    value to make it read the text direction of every (rendered)
    line separately.
    */
    EditorView.perLineTextDirection = perLineTextDirection;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not have its `contenteditable` attribute set. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds a
    new range to the existing selection or replaces it entirely. The
    default behavior is to check `event.metaKey` on macOS, and
    `event.ctrlKey` elsewhere.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. Decorations can be provided in two
    ways—directly, or via a function that takes an editor view.

    Only decoration sets provided directly are allowed to influence
    the editor's vertical layout structure. The ones provided as
    functions are called _after_ the new viewport has been computed,
    and thus **must not** introduce block widgets or replacing
    decorations that cover line breaks.

    If you want decorated ranges to behave like atomic units for
    cursor motion and deletion purposes, also provide the range set
    containing the decorations to
    [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
    */
    EditorView.decorations = decorations;
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    EditorView.atomicRanges = atomicRanges;
    /**
    Facet that allows extensions to provide additional scroll
    margins (space around the sides of the scrolling element that
    should be considered invisible). This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    EditorView.scrollMargins = scrollMargins;
    /**
    This facet records whether a dark theme is active. The extension
    returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
    includes an instance of this when the `dark` option is set to
    true.
    */
    EditorView.darkTheme = darkTheme;
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty)
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }
            return result;
        }
    }
    function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
            let source = sources[i], value = typeof source == "function" ? source(view) : source;
            if (value)
                combineAttrs(value, base);
        }
        return base;
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const themeSpec = {
        ".cm-line": {
            "& ::selection": { backgroundColor: "transparent !important" },
            "&::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";

    const Outside = "-10000px";
    class TooltipViewManager {
        constructor(view, facet, createTooltipView) {
            this.facet = facet;
            this.createTooltipView = createTooltipView;
            this.input = view.state.facet(facet);
            this.tooltips = this.input.filter(t => t);
            this.tooltipViews = this.tooltips.map(createTooltipView);
        }
        update(update) {
            var _a;
            let input = update.state.facet(this.facet);
            let tooltips = input.filter(x => x);
            if (input === this.input) {
                for (let t of this.tooltipViews)
                    if (t.update)
                        t.update(update);
                return false;
            }
            let tooltipViews = [];
            for (let i = 0; i < tooltips.length; i++) {
                let tip = tooltips[i], known = -1;
                if (!tip)
                    continue;
                for (let i = 0; i < this.tooltips.length; i++) {
                    let other = this.tooltips[i];
                    if (other && other.create == tip.create)
                        known = i;
                }
                if (known < 0) {
                    tooltipViews[i] = this.createTooltipView(tip);
                }
                else {
                    let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                    if (tooltipView.update)
                        tooltipView.update(update);
                }
            }
            for (let t of this.tooltipViews)
                if (tooltipViews.indexOf(t) < 0) {
                    t.dom.remove();
                    (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
                }
            this.input = input;
            this.tooltips = tooltips;
            this.tooltipViews = tooltipViews;
            return true;
        }
    }
    function windowSpace(view) {
        let { win } = view;
        return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
    }
    const tooltipConfig = /*@__PURE__*/Facet.define({
        combine: values => {
            var _a, _b, _c;
            return ({
                position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
                parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
                tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
            });
        }
    });
    const knownHeight = /*@__PURE__*/new WeakMap();
    const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.inView = true;
            this.lastTransaction = 0;
            this.measureTimeout = -1;
            let config = view.state.facet(tooltipConfig);
            this.position = config.position;
            this.parent = config.parent;
            this.classes = view.themeClasses;
            this.createContainer();
            this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
            this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
            this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
                if (Date.now() > this.lastTransaction - 50 &&
                    entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                    this.measureSoon();
            }, { threshold: [1] }) : null;
            this.observeIntersection();
            view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
            this.maybeMeasure();
        }
        createContainer() {
            if (this.parent) {
                this.container = document.createElement("div");
                this.container.style.position = "relative";
                this.container.className = this.view.themeClasses;
                this.parent.appendChild(this.container);
            }
            else {
                this.container = this.view.dom;
            }
        }
        observeIntersection() {
            if (this.intersectionObserver) {
                this.intersectionObserver.disconnect();
                for (let tooltip of this.manager.tooltipViews)
                    this.intersectionObserver.observe(tooltip.dom);
            }
        }
        measureSoon() {
            if (this.measureTimeout < 0)
                this.measureTimeout = setTimeout(() => {
                    this.measureTimeout = -1;
                    this.maybeMeasure();
                }, 50);
        }
        update(update) {
            if (update.transactions.length)
                this.lastTransaction = Date.now();
            let updated = this.manager.update(update);
            if (updated)
                this.observeIntersection();
            let shouldMeasure = updated || update.geometryChanged;
            let newConfig = update.state.facet(tooltipConfig);
            if (newConfig.position != this.position) {
                this.position = newConfig.position;
                for (let t of this.manager.tooltipViews)
                    t.dom.style.position = this.position;
                shouldMeasure = true;
            }
            if (newConfig.parent != this.parent) {
                if (this.parent)
                    this.container.remove();
                this.parent = newConfig.parent;
                this.createContainer();
                for (let t of this.manager.tooltipViews)
                    this.container.appendChild(t.dom);
                shouldMeasure = true;
            }
            else if (this.parent && this.view.themeClasses != this.classes) {
                this.classes = this.container.className = this.view.themeClasses;
            }
            if (shouldMeasure)
                this.maybeMeasure();
        }
        createTooltip(tooltip) {
            let tooltipView = tooltip.create(this.view);
            tooltipView.dom.classList.add("cm-tooltip");
            if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
                let arrow = document.createElement("div");
                arrow.className = "cm-tooltip-arrow";
                tooltipView.dom.appendChild(arrow);
            }
            tooltipView.dom.style.position = this.position;
            tooltipView.dom.style.top = Outside;
            this.container.appendChild(tooltipView.dom);
            if (tooltipView.mount)
                tooltipView.mount(this.view);
            return tooltipView;
        }
        destroy() {
            var _a, _b;
            this.view.win.removeEventListener("resize", this.measureSoon);
            for (let tooltipView of this.manager.tooltipViews) {
                tooltipView.dom.remove();
                (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
            }
            (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
            clearTimeout(this.measureTimeout);
        }
        readMeasure() {
            let editor = this.view.dom.getBoundingClientRect();
            return {
                editor,
                parent: this.parent ? this.container.getBoundingClientRect() : editor,
                pos: this.manager.tooltips.map((t, i) => {
                    let tv = this.manager.tooltipViews[i];
                    return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
                }),
                size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
                space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
            };
        }
        writeMeasure(measured) {
            var _a;
            let { editor, space } = measured;
            let others = [];
            for (let i = 0; i < this.manager.tooltips.length; i++) {
                let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
                let pos = measured.pos[i], size = measured.size[i];
                // Hide tooltips that are outside of the editor.
                if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
                    pos.top >= Math.min(editor.bottom, space.bottom) ||
                    pos.right < Math.max(editor.left, space.left) - .1 ||
                    pos.left > Math.min(editor.right, space.right) + .1) {
                    dom.style.top = Outside;
                    continue;
                }
                let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
                let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
                let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
                let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
                let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)
                    : ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)
                        : Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);
                let above = !!tooltip.above;
                if (!tooltip.strictSide && (above
                    ? pos.top - (size.bottom - size.top) - offset.y < space.top
                    : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
                    above == (space.bottom - pos.bottom > pos.top - space.top))
                    above = !above;
                let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
                if (spaceVert < height && tView.resize !== false) {
                    if (spaceVert < this.view.defaultLineHeight) {
                        dom.style.top = Outside;
                        continue;
                    }
                    knownHeight.set(tView, height);
                    dom.style.height = (height = spaceVert) + "px";
                }
                else if (dom.style.height) {
                    dom.style.height = "";
                }
                let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
                let right = left + width;
                if (tView.overlap !== true)
                    for (let r of others)
                        if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                            top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
                if (this.position == "absolute") {
                    dom.style.top = (top - measured.parent.top) + "px";
                    dom.style.left = (left - measured.parent.left) + "px";
                }
                else {
                    dom.style.top = top + "px";
                    dom.style.left = left + "px";
                }
                if (arrow)
                    arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */)}px`;
                if (tView.overlap !== true)
                    others.push({ left, top, right, bottom: top + height });
                dom.classList.toggle("cm-tooltip-above", above);
                dom.classList.toggle("cm-tooltip-below", !above);
                if (tView.positioned)
                    tView.positioned(measured.space);
            }
        }
        maybeMeasure() {
            if (this.manager.tooltips.length) {
                if (this.view.inView)
                    this.view.requestMeasure(this.measureReq);
                if (this.inView != this.view.inView) {
                    this.inView = this.view.inView;
                    if (!this.inView)
                        for (let tv of this.manager.tooltipViews)
                            tv.dom.style.top = Outside;
                }
            }
        }
    }, {
        eventHandlers: {
            scroll() { this.maybeMeasure(); }
        }
    });
    const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip": {
            zIndex: 100,
            boxSizing: "border-box"
        },
        "&light .cm-tooltip": {
            border: "1px solid #bbb",
            backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
            borderTop: "1px solid #bbb",
        },
        "&dark .cm-tooltip": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tooltip-arrow": {
            height: `${7 /* Arrow.Size */}px`,
            width: `${7 /* Arrow.Size */ * 2}px`,
            position: "absolute",
            zIndex: -1,
            overflow: "hidden",
            "&:before, &:after": {
                content: "''",
                position: "absolute",
                width: 0,
                height: 0,
                borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
                borderRight: `${7 /* Arrow.Size */}px solid transparent`,
            },
            ".cm-tooltip-above &": {
                bottom: `-${7 /* Arrow.Size */}px`,
                "&:before": {
                    borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
                },
                "&:after": {
                    borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                    bottom: "1px"
                }
            },
            ".cm-tooltip-below &": {
                top: `-${7 /* Arrow.Size */}px`,
                "&:before": {
                    borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
                },
                "&:after": {
                    borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                    top: "1px"
                }
            },
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
            "&:before": {
                borderTopColor: "#333338",
                borderBottomColor: "#333338"
            },
            "&:after": {
                borderTopColor: "transparent",
                borderBottomColor: "transparent"
            }
        }
    });
    const noOffset = { x: 0, y: 0 };
    /**
    Facet to which an extension can add a value to show a tooltip.
    */
    const showTooltip = /*@__PURE__*/Facet.define({
        enables: [tooltipPlugin, baseTheme$2]
    });
    const showHoverTooltip = /*@__PURE__*/Facet.define();
    class HoverTooltipHost {
        constructor(view) {
            this.view = view;
            this.mounted = false;
            this.dom = document.createElement("div");
            this.dom.classList.add("cm-tooltip-hover");
            this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
        }
        // Needs to be static so that host tooltip instances always match
        static create(view) {
            return new HoverTooltipHost(view);
        }
        createHostedView(tooltip) {
            let hostedView = tooltip.create(this.view);
            hostedView.dom.classList.add("cm-tooltip-section");
            this.dom.appendChild(hostedView.dom);
            if (this.mounted && hostedView.mount)
                hostedView.mount(this.view);
            return hostedView;
        }
        mount(view) {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.mount)
                    hostedView.mount(view);
            }
            this.mounted = true;
        }
        positioned(space) {
            for (let hostedView of this.manager.tooltipViews) {
                if (hostedView.positioned)
                    hostedView.positioned(space);
            }
        }
        update(update) {
            this.manager.update(update);
        }
        destroy() {
            var _a;
            for (let t of this.manager.tooltipViews)
                (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
        }
    }
    const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
        let tooltips = state.facet(showHoverTooltip).filter(t => t);
        if (tooltips.length === 0)
            return null;
        return {
            pos: Math.min(...tooltips.map(t => t.pos)),
            end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),
            create: HoverTooltipHost.create,
            above: tooltips[0].above,
            arrow: tooltips.some(t => t.arrow),
        };
    });
    class HoverPlugin {
        constructor(view, source, field, setHover, hoverTime) {
            this.view = view;
            this.source = source;
            this.field = field;
            this.setHover = setHover;
            this.hoverTime = hoverTime;
            this.hoverTimeout = -1;
            this.restartTimeout = -1;
            this.pending = null;
            this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
            this.checkHover = this.checkHover.bind(this);
            view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
            view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }
        update() {
            if (this.pending) {
                this.pending = null;
                clearTimeout(this.restartTimeout);
                this.restartTimeout = setTimeout(() => this.startHover(), 20);
            }
        }
        get active() {
            return this.view.state.field(this.field);
        }
        checkHover() {
            this.hoverTimeout = -1;
            if (this.active)
                return;
            let hovered = Date.now() - this.lastMove.time;
            if (hovered < this.hoverTime)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
            else
                this.startHover();
        }
        startHover() {
            clearTimeout(this.restartTimeout);
            let { lastMove } = this;
            let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
            if (pos == null)
                return;
            let posCoords = this.view.coordsAtPos(pos);
            if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||
                lastMove.x < posCoords.left - this.view.defaultCharacterWidth ||
                lastMove.x > posCoords.right + this.view.defaultCharacterWidth)
                return;
            let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
            let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
            let open = this.source(this.view, pos, (lastMove.x < posCoords.left ? -rtl : rtl));
            if (open === null || open === void 0 ? void 0 : open.then) {
                let pending = this.pending = { pos };
                open.then(result => {
                    if (this.pending == pending) {
                        this.pending = null;
                        if (result)
                            this.view.dispatch({ effects: this.setHover.of(result) });
                    }
                }, e => logException(this.view.state, e, "hover tooltip"));
            }
            else if (open) {
                this.view.dispatch({ effects: this.setHover.of(open) });
            }
        }
        mousemove(event) {
            var _a;
            this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
            if (this.hoverTimeout < 0)
                this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
            let tooltip = this.active;
            if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
                let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
                if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos
                    : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* Hover.MaxDist */))) {
                    this.view.dispatch({ effects: this.setHover.of(null) });
                    this.pending = null;
                }
            }
        }
        mouseleave(e) {
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = -1;
            if (this.active && !isInTooltip(e.relatedTarget))
                this.view.dispatch({ effects: this.setHover.of(null) });
        }
        destroy() {
            clearTimeout(this.hoverTimeout);
            this.view.dom.removeEventListener("mouseleave", this.mouseleave);
            this.view.dom.removeEventListener("mousemove", this.mousemove);
        }
    }
    function isInTooltip(elt) {
        for (let cur = elt; cur; cur = cur.parentNode)
            if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
                return true;
        return false;
    }
    function isOverRange(view, from, to, x, y, margin) {
        let range = document.createRange();
        let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);
        range.setEnd(toDOM.node, toDOM.offset);
        range.setStart(fromDOM.node, fromDOM.offset);
        let rects = range.getClientRects();
        range.detach();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
            if (dist <= margin)
                return true;
        }
        return false;
    }
    /**
    Set up a hover tooltip, which shows up when the pointer hovers
    over ranges of text. The callback is called when the mouse hovers
    over the document text. It should, if there is a tooltip
    associated with position `pos`, return the tooltip description
    (either directly or in a promise). The `side` argument indicates
    on which side of the position the pointer is—it will be -1 if the
    pointer is before the position, 1 if after the position.

    Note that all hover tooltips are hosted within a single tooltip
    container element. This allows multiple tooltips over the same
    range to be "merged" together without overlapping.
    */
    function hoverTooltip(source, options = {}) {
        let setHover = StateEffect.define();
        let hoverState = StateField.define({
            create() { return null; },
            update(value, tr) {
                if (value && (options.hideOnChange && (tr.docChanged || tr.selection) ||
                    options.hideOn && options.hideOn(tr, value)))
                    return null;
                if (value && tr.docChanged) {
                    let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
                    if (newPos == null)
                        return null;
                    let copy = Object.assign(Object.create(null), value);
                    copy.pos = newPos;
                    if (value.end != null)
                        copy.end = tr.changes.mapPos(value.end);
                    value = copy;
                }
                for (let effect of tr.effects) {
                    if (effect.is(setHover))
                        value = effect.value;
                    if (effect.is(closeHoverTooltipEffect))
                        value = null;
                }
                return value;
            },
            provide: f => showHoverTooltip.from(f)
        });
        return [
            hoverState,
            ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),
            showHoverTooltipHost
        ];
    }
    const closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();

    const panelConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let topContainer, bottomContainer;
            for (let c of configs) {
                topContainer = topContainer || c.topContainer;
                bottomContainer = bottomContainer || c.bottomContainer;
            }
            return { topContainer, bottomContainer };
        }
    });
    const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.input = view.state.facet(showPanel);
            this.specs = this.input.filter(s => s);
            this.panels = this.specs.map(spec => spec(view));
            let conf = view.state.facet(panelConfig);
            this.top = new PanelGroup(view, true, conf.topContainer);
            this.bottom = new PanelGroup(view, false, conf.bottomContainer);
            this.top.sync(this.panels.filter(p => p.top));
            this.bottom.sync(this.panels.filter(p => !p.top));
            for (let p of this.panels) {
                p.dom.classList.add("cm-panel");
                if (p.mount)
                    p.mount();
            }
        }
        update(update) {
            let conf = update.state.facet(panelConfig);
            if (this.top.container != conf.topContainer) {
                this.top.sync([]);
                this.top = new PanelGroup(update.view, true, conf.topContainer);
            }
            if (this.bottom.container != conf.bottomContainer) {
                this.bottom.sync([]);
                this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
            }
            this.top.syncClasses();
            this.bottom.syncClasses();
            let input = update.state.facet(showPanel);
            if (input != this.input) {
                let specs = input.filter(x => x);
                let panels = [], top = [], bottom = [], mount = [];
                for (let spec of specs) {
                    let known = this.specs.indexOf(spec), panel;
                    if (known < 0) {
                        panel = spec(update.view);
                        mount.push(panel);
                    }
                    else {
                        panel = this.panels[known];
                        if (panel.update)
                            panel.update(update);
                    }
                    panels.push(panel);
                    (panel.top ? top : bottom).push(panel);
                }
                this.specs = specs;
                this.panels = panels;
                this.top.sync(top);
                this.bottom.sync(bottom);
                for (let p of mount) {
                    p.dom.classList.add("cm-panel");
                    if (p.mount)
                        p.mount();
                }
            }
            else {
                for (let p of this.panels)
                    if (p.update)
                        p.update(update);
            }
        }
        destroy() {
            this.top.sync([]);
            this.bottom.sync([]);
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
        })
    });
    class PanelGroup {
        constructor(view, top, container) {
            this.view = view;
            this.top = top;
            this.container = container;
            this.dom = undefined;
            this.classes = "";
            this.panels = [];
            this.syncClasses();
        }
        sync(panels) {
            for (let p of this.panels)
                if (p.destroy && panels.indexOf(p) < 0)
                    p.destroy();
            this.panels = panels;
            this.syncDOM();
        }
        syncDOM() {
            if (this.panels.length == 0) {
                if (this.dom) {
                    this.dom.remove();
                    this.dom = undefined;
                }
                return;
            }
            if (!this.dom) {
                this.dom = document.createElement("div");
                this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
                this.dom.style[this.top ? "top" : "bottom"] = "0";
                let parent = this.container || this.view.dom;
                parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
            }
            let curDOM = this.dom.firstChild;
            for (let panel of this.panels) {
                if (panel.dom.parentNode == this.dom) {
                    while (curDOM != panel.dom)
                        curDOM = rm(curDOM);
                    curDOM = curDOM.nextSibling;
                }
                else {
                    this.dom.insertBefore(panel.dom, curDOM);
                }
            }
            while (curDOM)
                curDOM = rm(curDOM);
        }
        scrollMargin() {
            return !this.dom || this.container ? 0
                : Math.max(0, this.top ?
                    this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                    Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
        }
        syncClasses() {
            if (!this.container || this.classes == this.view.themeClasses)
                return;
            for (let cls of this.classes.split(" "))
                if (cls)
                    this.container.classList.remove(cls);
            for (let cls of (this.classes = this.view.themeClasses).split(" "))
                if (cls)
                    this.container.classList.add(cls);
        }
    }
    function rm(node) {
        let next = node.nextSibling;
        node.remove();
        return next;
    }
    /**
    Opening a panel is done by providing a constructor function for
    the panel through this facet. (The panel is closed again when its
    constructor is no longer provided.) Values of `null` are ignored.
    */
    const showPanel = /*@__PURE__*/Facet.define({
        enables: panelPlugin
    });

    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) { }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;

    var _a;
    /**
    Node prop stored in a parser's top syntax node to provide the
    facet that stores language-specific data for that language.
    */
    const languageDataProp = /*@__PURE__*/new NodeProp();
    /**
    Syntax node prop used to register sublangauges. Should be added to
    the top level node type for the language.
    */
    const sublanguageProp = /*@__PURE__*/new NodeProp();
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. The class
    can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
    subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
    via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
    for stream parsers.
    */
    class Language {
        /**
        Construct a language object. If you need to invoke this
        directly, first define a data facet with
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
        configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
        to the language's outer syntax node.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
        used for this language.
        */
        data, parser, extraExtensions = [], 
        /**
        A language name.
        */
        name = "") {
            this.data = data;
            this.name = name;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language.of(this),
                EditorState.languageData.of((state, pos, side) => {
                    let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                    if (!data)
                        return [];
                    let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                    if (sub) {
                        let innerNode = top.resolve(pos - top.from, side);
                        for (let sublang of sub)
                            if (sublang.test(innerNode, state)) {
                                let data = state.facet(sublang.facet);
                                return sublang.type == "replace" ? data : data.concat(base);
                            }
                    }
                    return base;
                })
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
            return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            let explore = (tree, from) => {
                if (tree.prop(languageDataProp) == this.data) {
                    result.push({ from, to: from + tree.length });
                    return;
                }
                let mount = tree.prop(NodeProp.mounted);
                if (mount) {
                    if (mount.tree.prop(languageDataProp) == this.data) {
                        if (mount.overlay)
                            for (let r of mount.overlay)
                                result.push({ from: r.from + from, to: r.to + from });
                        else
                            result.push({ from: from, to: from + tree.length });
                        return;
                    }
                    else if (mount.overlay) {
                        let size = result.length;
                        explore(mount.tree, mount.overlay[0].from + from);
                        if (result.length > size)
                            return;
                    }
                }
                for (let i = 0; i < tree.children.length; i++) {
                    let ch = tree.children[i];
                    if (ch instanceof Tree)
                        explore(ch, tree.positions[i] + from);
                }
            };
            explore(syntaxTree(state), 0);
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
    }
    /**
    @internal
    */
    Language.setState = /*@__PURE__*/StateEffect.define();
    function topNodeAt(state, pos, side) {
        let topLang = state.facet(language), tree = syntaxTree(state).topNode;
        if (!topLang || topLang.allowsNesting) {
            for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
                if (node.type.isTop)
                    tree = node;
        }
        return tree;
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of the active
    [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
    language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    // Lezer-style Input object for a Text document.
    class DocInput {
        constructor(doc) {
            this.doc = doc;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        get length() { return this.doc.length; }
        syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        chunk(pos) {
            this.syncTo(pos);
            return this.string;
        }
        get lineChunks() { return true; }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
    }
    let currentContext = null;
    /**
    A parse context provided to parsers working on the editor content.
    */
    class ParseContext {
        constructor(parser, 
        /**
        The current editor state.
        */
        state, 
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [], 
        /**
        @internal
        */
        tree, 
        /**
        @internal
        */
        treeLen, 
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport, 
        /**
        @internal
        */
        skipped, 
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.treeLen = treeLen;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        /**
        @internal
        */
        static create(parser, state, viewport) {
            return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
        }
        startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(until, upto) {
            if (upto != null && upto >= this.state.doc.length)
                upto = undefined;
            if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
                this.takeTree();
                return true;
            }
            return this.withContext(() => {
                var _a;
                if (typeof until == "number") {
                    let endTime = Date.now() + until;
                    until = () => Date.now() > endTime;
                }
                if (!this.parse)
                    this.parse = this.startParse();
                if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                    upto < this.state.doc.length)
                    this.parse.stopAt(upto);
                for (;;) {
                    let done = this.parse.advance();
                    if (done) {
                        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                        this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                        this.tree = done;
                        this.parse = null;
                        if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                            this.parse = this.startParse();
                        else
                            return true;
                    }
                    if (until())
                        return false;
                }
            });
        }
        /**
        @internal
        */
        takeTree() {
            let pos, tree;
            if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
                if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                    this.parse.stopAt(pos);
                this.withContext(() => { while (!(tree = this.parse.advance())) { } });
                this.treeLen = pos;
                this.tree = tree;
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
                this.parse = null;
            }
        }
        withContext(f) {
            let prev = currentContext;
            currentContext = this;
            try {
                return f();
            }
            finally {
                currentContext = prev;
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, treeLen, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                treeLen = 0;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
                return false;
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            if (this.skipped.length >= startLen)
                return false;
            this.reset();
            return true;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return new class extends Parser$1 {
                createParse(input, fragments, ranges) {
                    let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                    let parser = {
                        parsedPos: from,
                        advance() {
                            let cx = currentContext;
                            if (cx) {
                                for (let r of ranges)
                                    cx.tempSkipped.push(r);
                                if (until)
                                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                            }
                            this.parsedPos = to;
                            return new Tree(NodeType.none, [], [], to - from);
                        },
                        stoppedAt: null,
                        stopAt() { }
                    };
                    return parser;
                }
            };
        }
        /**
        @internal
        */
        isDone(upto) {
            upto = Math.min(upto, this.state.doc.length);
            let frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() { return currentContext; }
    }
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged && this.tree == this.context.tree)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.treeLen == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(20 /* Work.Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
            let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
            if (!parseState.work(20 /* Work.Apply */, vpTo))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = /*@__PURE__*/StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language) != tr.state.facet(language))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = (callback) => {
        let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
        return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
            let idle = -1, timeout = setTimeout(() => {
                idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
            }, 100 /* Work.MinPause */);
            return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
    const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
        ? () => navigator.scheduling.isInputPending() : null;
    const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = null;
            this.workScheduled = 0;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
                this.scheduleWork();
            if (update.docChanged) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* Work.ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
            if (this.working)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
                this.working = requestIdle(this.work);
        }
        work(deadline) {
            this.working = null;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* Work.ChunkTime */;
                this.chunkBudget = 3000 /* Work.ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
                return;
            let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
            let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
            let done = field.context.work(() => {
                return isInputPending && isInputPending() || Date.now() > endTime;
            }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (this.chunkBudget > 0 && !(done && !viewportFirst))
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                this.workScheduled++;
                cx.scheduleOn
                    .then(() => this.scheduleWork())
                    .catch(err => logException(this.view.state, err))
                    .then(() => this.workScheduled--);
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working)
                this.working();
        }
        isWorking() {
            return !!(this.working || this.workScheduled > 0);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state. Used
    by `Language` object's `extension` property (so you don't need to
    manually wrap your languages in this). Can be used to access the
    current language on a state.
    */
    const language = /*@__PURE__*/Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: language => [
            Language.state,
            parseWorker,
            EditorView.contentAttributes.compute([language], state => {
                let lang = state.facet(language);
                return lang && lang.name ? { "data-language": lang.name } : {};
            })
        ]
    });

    /**
    A highlight style associates CSS styles with higlighting
    [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
    */
    class HighlightStyle {
        constructor(
        /**
        The tag styles used to create this highlight style.
        */
        specs, options) {
            this.specs = specs;
            let modSpec;
            function def(spec) {
                let cls = StyleModule.newName();
                (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
                return cls;
            }
            const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
            const scopeOpt = options.scope;
            this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
                : scopeOpt ? (type) => type == scopeOpt : undefined;
            this.style = tagHighlighter(specs.map(style => ({
                tag: style.tag,
                class: style.class || def(Object.assign({}, style, { tag: null }))
            })), {
                all,
            }).style;
            this.module = modSpec ? new StyleModule(modSpec) : null;
            this.themeType = options.themeType;
        }
        /**
        Create a highlighter style that associates the given styles to
        the given tags. The specs must be objects that hold a style tag
        or array of tags in their `tag` property, and either a single
        `class` property providing a static CSS class (for highlighter
        that rely on external styling), or a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        set of CSS properties (which define the styling for those tags).
        
        The CSS rules created for a highlighter will be emitted in the
        order of the spec's properties. That means that for elements that
        have multiple tags associated with them, styles defined further
        down in the list will have a higher CSS precedence than styles
        defined earlier.
        */
        static define(specs, options) {
            return new HighlightStyle(specs, options || {});
        }
    }
    const highlighterFacet = /*@__PURE__*/Facet.define();
    const fallbackHighlighter = /*@__PURE__*/Facet.define({
        combine(values) { return values.length ? [values[0]] : null; }
    });
    function getHighlighters(state) {
        let main = state.facet(highlighterFacet);
        return main.length ? main : state.facet(fallbackHighlighter);
    }
    /**
    Wrap a highlighter in an editor extension that uses it to apply
    syntax highlighting to the editor content.

    When multiple (non-fallback) styles are provided, the styling
    applied is the union of the classes they emit.
    */
    function syntaxHighlighting(highlighter, options) {
        let ext = [treeHighlighter], themeType;
        if (highlighter instanceof HighlightStyle) {
            if (highlighter.module)
                ext.push(EditorView.styleModule.of(highlighter.module));
            themeType = highlighter.themeType;
        }
        if (options === null || options === void 0 ? void 0 : options.fallback)
            ext.push(fallbackHighlighter.of(highlighter));
        else if (themeType)
            ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
                return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
            }));
        else
            ext.push(highlighterFacet.of(highlighter));
        return ext;
    }
    class TreeHighlighter {
        constructor(view) {
            this.markCache = Object.create(null);
            this.tree = syntaxTree(view.state);
            this.decorations = this.buildDeco(view, getHighlighters(view.state));
        }
        update(update) {
            let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
            let styleChange = highlighters != getHighlighters(update.startState);
            if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
                this.decorations = this.decorations.map(update.changes);
            }
            else if (tree != this.tree || update.viewportChanged || styleChange) {
                this.tree = tree;
                this.decorations = this.buildDeco(update.view, highlighters);
            }
        }
        buildDeco(view, highlighters) {
            if (!highlighters || !this.tree.length)
                return Decoration.none;
            let builder = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges) {
                highlightTree(this.tree, highlighters, (from, to, style) => {
                    builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
                }, from, to);
            }
            return builder.finish();
        }
    }
    const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
        decorations: v => v.decorations
    }));
    /**
    A default highlight style (works well with light themes).
    */
    /*@__PURE__*/HighlightStyle.define([
        { tag: tags.meta,
            color: "#404740" },
        { tag: tags.link,
            textDecoration: "underline" },
        { tag: tags.heading,
            textDecoration: "underline",
            fontWeight: "bold" },
        { tag: tags.emphasis,
            fontStyle: "italic" },
        { tag: tags.strong,
            fontWeight: "bold" },
        { tag: tags.strikethrough,
            textDecoration: "line-through" },
        { tag: tags.keyword,
            color: "#708" },
        { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
            color: "#219" },
        { tag: [tags.literal, tags.inserted],
            color: "#164" },
        { tag: [tags.string, tags.deleted],
            color: "#a11" },
        { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
            color: "#e40" },
        { tag: /*@__PURE__*/tags.definition(tags.variableName),
            color: "#00f" },
        { tag: /*@__PURE__*/tags.local(tags.variableName),
            color: "#30a" },
        { tag: [tags.typeName, tags.namespace],
            color: "#085" },
        { tag: tags.className,
            color: "#167" },
        { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
            color: "#256" },
        { tag: /*@__PURE__*/tags.definition(tags.propertyName),
            color: "#00c" },
        { tag: tags.comment,
            color: "#940" },
        { tag: tags.invalid,
            color: "#f00" }
    ]);
    const noTokens = /*@__PURE__*/Object.create(null);
    const typeArray = [NodeType.none];
    const warned = [];
    const defaultTable = /*@__PURE__*/Object.create(null);
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "tagName"],
        ["attribute", "attributeName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(extra, tagStr) {
        let tag = null;
        for (let part of tagStr.split(".")) {
            let value = (extra[part] || tags[part]);
            if (!value) {
                warnForPart(part, `Unknown highlighting tag ${part}`);
            }
            else if (typeof value == "function") {
                if (!tag)
                    warnForPart(part, `Modifier ${part} used at start of tag`);
                else
                    tag = value(tag);
            }
            else {
                if (tag)
                    warnForPart(part, `Tag ${part} used as modifier`);
                else
                    tag = value;
            }
        }
        if (!tag)
            return 0;
        let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
            id: typeArray.length,
            name,
            props: [styleTags({ [name]: tag })]
        });
        typeArray.push(type);
        return type.id;
    }

    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
          var value = next[name];
          if (typeof value == "string") elt.setAttribute(name, value);
          else if (value != null) elt[name] = value;
        }
        i++;
      }
      for (; i < arguments.length; i++) add$2(elt, arguments[i]);
      return elt
    }

    function add$2(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) ; else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i = 0; i < child.length; i++) add$2(elt, child[i]);
      } else {
        throw new RangeError("Unsupported child node: " + child)
      }
    }

    class SelectedDiagnostic {
        constructor(from, to, diagnostic) {
            this.from = from;
            this.to = to;
            this.diagnostic = diagnostic;
        }
    }
    class LintState {
        constructor(diagnostics, panel, selected) {
            this.diagnostics = diagnostics;
            this.panel = panel;
            this.selected = selected;
        }
        static init(diagnostics, panel, state) {
            // Filter the list of diagnostics for which to create markers
            let markedDiagnostics = diagnostics;
            let diagnosticFilter = state.facet(lintConfig).markerFilter;
            if (diagnosticFilter)
                markedDiagnostics = diagnosticFilter(markedDiagnostics);
            let ranges = Decoration.set(markedDiagnostics.map((d) => {
                // For zero-length ranges or ranges covering only a line break, create a widget
                return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)
                    ? Decoration.widget({
                        widget: new DiagnosticWidget(d),
                        diagnostic: d
                    }).range(d.from)
                    : Decoration.mark({
                        attributes: { class: "cm-lintRange cm-lintRange-" + d.severity },
                        diagnostic: d
                    }).range(d.from, d.to);
            }), true);
            return new LintState(ranges, panel, findDiagnostic(ranges));
        }
    }
    function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
        let found = null;
        diagnostics.between(after, 1e9, (from, to, { spec }) => {
            if (diagnostic && spec.diagnostic != diagnostic)
                return;
            found = new SelectedDiagnostic(from, to, spec.diagnostic);
            return false;
        });
        return found;
    }
    function hideTooltip(tr, tooltip) {
        return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(tooltip.pos));
    }
    function maybeEnableLint(state, effects) {
        return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
    }
    /**
    Returns a transaction spec which updates the current set of
    diagnostics, and enables the lint extension if if wasn't already
    active.
    */
    function setDiagnostics(state, diagnostics) {
        return {
            effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
        };
    }
    /**
    The state effect that updates the set of active diagnostics. Can
    be useful when writing an extension that needs to track these.
    */
    const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
    const togglePanel = /*@__PURE__*/StateEffect.define();
    const movePanelSelection = /*@__PURE__*/StateEffect.define();
    const lintState = /*@__PURE__*/StateField.define({
        create() {
            return new LintState(Decoration.none, null, null);
        },
        update(value, tr) {
            if (tr.docChanged) {
                let mapped = value.diagnostics.map(tr.changes), selected = null;
                if (value.selected) {
                    let selPos = tr.changes.mapPos(value.selected.from, 1);
                    selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
                }
                value = new LintState(mapped, value.panel, selected);
            }
            for (let effect of tr.effects) {
                if (effect.is(setDiagnosticsEffect)) {
                    value = LintState.init(effect.value, value.panel, tr.state);
                }
                else if (effect.is(togglePanel)) {
                    value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
                }
                else if (effect.is(movePanelSelection)) {
                    value = new LintState(value.diagnostics, value.panel, effect.value);
                }
            }
            return value;
        },
        provide: f => [showPanel.from(f, val => val.panel),
            EditorView.decorations.from(f, s => s.diagnostics)]
    });
    const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
    function lintTooltip(view, pos, side) {
        let { diagnostics } = view.state.field(lintState);
        let found = [], stackStart = 2e8, stackEnd = 0;
        diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
            if (pos >= from && pos <= to &&
                (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
                found.push(spec.diagnostic);
                stackStart = Math.min(from, stackStart);
                stackEnd = Math.max(to, stackEnd);
            }
        });
        let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
        if (diagnosticFilter)
            found = diagnosticFilter(found);
        if (!found.length)
            return null;
        return {
            pos: stackStart,
            end: stackEnd,
            above: view.state.doc.lineAt(stackStart).to < stackEnd,
            create() {
                return { dom: diagnosticsTooltip(view, found) };
            }
        };
    }
    function diagnosticsTooltip(view, diagnostics) {
        return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map(d => renderDiagnostic(view, d, false)));
    }
    /**
    Command to close the lint panel, when open.
    */
    const closeLintPanel = (view) => {
        let field = view.state.field(lintState, false);
        if (!field || !field.panel)
            return false;
        view.dispatch({ effects: togglePanel.of(false) });
        return true;
    };
    const lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.timeout = -1;
            this.set = true;
            let { delay } = view.state.facet(lintConfig);
            this.lintTime = Date.now() + delay;
            this.run = this.run.bind(this);
            this.timeout = setTimeout(this.run, delay);
        }
        run() {
            let now = Date.now();
            if (now < this.lintTime - 10) {
                setTimeout(this.run, this.lintTime - now);
            }
            else {
                this.set = false;
                let { state } = this.view, { sources } = state.facet(lintConfig);
                Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {
                    let all = annotations.reduce((a, b) => a.concat(b));
                    if (this.view.state.doc == state.doc)
                        this.view.dispatch(setDiagnostics(this.view.state, all));
                }, error => { logException(this.view.state, error); });
            }
        }
        update(update) {
            let config = update.state.facet(lintConfig);
            if (update.docChanged || config != update.startState.facet(lintConfig) ||
                config.needsRefresh && config.needsRefresh(update)) {
                this.lintTime = Date.now() + config.delay;
                if (!this.set) {
                    this.set = true;
                    this.timeout = setTimeout(this.run, config.delay);
                }
            }
        }
        force() {
            if (this.set) {
                this.lintTime = Date.now();
                this.run();
            }
        }
        destroy() {
            clearTimeout(this.timeout);
        }
    });
    const lintConfig = /*@__PURE__*/Facet.define({
        combine(input) {
            return Object.assign({ sources: input.map(i => i.source) }, combineConfig(input.map(i => i.config), {
                delay: 750,
                markerFilter: null,
                tooltipFilter: null,
                needsRefresh: null
            }, {
                needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)
            }));
        }
    });
    /**
    Given a diagnostic source, this function returns an extension that
    enables linting with that source. It will be called whenever the
    editor is idle (after its content changed).
    */
    function linter(source, config = {}) {
        return [
            lintConfig.of({ source, config }),
            lintPlugin,
            lintExtensions
        ];
    }
    function assignKeys(actions) {
        let assigned = [];
        if (actions)
            actions: for (let { name } of actions) {
                for (let i = 0; i < name.length; i++) {
                    let ch = name[i];
                    if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
                        assigned.push(ch);
                        continue actions;
                    }
                }
                assigned.push("");
            }
        return assigned;
    }
    function renderDiagnostic(view, diagnostic, inPanel) {
        var _a;
        let keys = inPanel ? assignKeys(diagnostic.actions) : [];
        return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
            let fired = false, click = (e) => {
                e.preventDefault();
                if (fired)
                    return;
                fired = true;
                let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
                if (found)
                    action.apply(view, found.from, found.to);
            };
            let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
            let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
                crelt("u", name.slice(keyIndex, keyIndex + 1)),
                name.slice(keyIndex + 1)];
            return crelt("button", {
                type: "button",
                class: "cm-diagnosticAction",
                onclick: click,
                onmousedown: click,
                "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
            }, nameElt);
        }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
    }
    class DiagnosticWidget extends WidgetType {
        constructor(diagnostic) {
            super();
            this.diagnostic = diagnostic;
        }
        eq(other) { return other.diagnostic == this.diagnostic; }
        toDOM() {
            return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
        }
    }
    class PanelItem {
        constructor(view, diagnostic) {
            this.diagnostic = diagnostic;
            this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
            this.dom = renderDiagnostic(view, diagnostic, true);
            this.dom.id = this.id;
            this.dom.setAttribute("role", "option");
        }
    }
    class LintPanel {
        constructor(view) {
            this.view = view;
            this.items = [];
            let onkeydown = (event) => {
                if (event.keyCode == 27) { // Escape
                    closeLintPanel(this.view);
                    this.view.focus();
                }
                else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
                    this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
                }
                else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
                    this.moveSelection((this.selectedIndex + 1) % this.items.length);
                }
                else if (event.keyCode == 36) { // Home
                    this.moveSelection(0);
                }
                else if (event.keyCode == 35) { // End
                    this.moveSelection(this.items.length - 1);
                }
                else if (event.keyCode == 13) { // Enter
                    this.view.focus();
                }
                else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
                    let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
                    for (let i = 0; i < keys.length; i++)
                        if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                            if (found)
                                diagnostic.actions[i].apply(view, found.from, found.to);
                        }
                }
                else {
                    return;
                }
                event.preventDefault();
            };
            let onclick = (event) => {
                for (let i = 0; i < this.items.length; i++) {
                    if (this.items[i].dom.contains(event.target))
                        this.moveSelection(i);
                }
            };
            this.list = crelt("ul", {
                tabIndex: 0,
                role: "listbox",
                "aria-label": this.view.state.phrase("Diagnostics"),
                onkeydown,
                onclick
            });
            this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
                type: "button",
                name: "close",
                "aria-label": this.view.state.phrase("close"),
                onclick: () => closeLintPanel(this.view)
            }, "×"));
            this.update();
        }
        get selectedIndex() {
            let selected = this.view.state.field(lintState).selected;
            if (!selected)
                return -1;
            for (let i = 0; i < this.items.length; i++)
                if (this.items[i].diagnostic == selected.diagnostic)
                    return i;
            return -1;
        }
        update() {
            let { diagnostics, selected } = this.view.state.field(lintState);
            let i = 0, needsSync = false, newSelectedItem = null;
            diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
                let found = -1, item;
                for (let j = i; j < this.items.length; j++)
                    if (this.items[j].diagnostic == spec.diagnostic) {
                        found = j;
                        break;
                    }
                if (found < 0) {
                    item = new PanelItem(this.view, spec.diagnostic);
                    this.items.splice(i, 0, item);
                    needsSync = true;
                }
                else {
                    item = this.items[found];
                    if (found > i) {
                        this.items.splice(i, found - i);
                        needsSync = true;
                    }
                }
                if (selected && item.diagnostic == selected.diagnostic) {
                    if (!item.dom.hasAttribute("aria-selected")) {
                        item.dom.setAttribute("aria-selected", "true");
                        newSelectedItem = item;
                    }
                }
                else if (item.dom.hasAttribute("aria-selected")) {
                    item.dom.removeAttribute("aria-selected");
                }
                i++;
            });
            while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
                needsSync = true;
                this.items.pop();
            }
            if (this.items.length == 0) {
                this.items.push(new PanelItem(this.view, {
                    from: -1, to: -1,
                    severity: "info",
                    message: this.view.state.phrase("No diagnostics")
                }));
                needsSync = true;
            }
            if (newSelectedItem) {
                this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
                this.view.requestMeasure({
                    key: this,
                    read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
                    write: ({ sel, panel }) => {
                        if (sel.top < panel.top)
                            this.list.scrollTop -= panel.top - sel.top;
                        else if (sel.bottom > panel.bottom)
                            this.list.scrollTop += sel.bottom - panel.bottom;
                    }
                });
            }
            else if (this.selectedIndex < 0) {
                this.list.removeAttribute("aria-activedescendant");
            }
            if (needsSync)
                this.sync();
        }
        sync() {
            let domPos = this.list.firstChild;
            function rm() {
                let prev = domPos;
                domPos = prev.nextSibling;
                prev.remove();
            }
            for (let item of this.items) {
                if (item.dom.parentNode == this.list) {
                    while (domPos != item.dom)
                        rm();
                    domPos = item.dom.nextSibling;
                }
                else {
                    this.list.insertBefore(item.dom, domPos);
                }
            }
            while (domPos)
                rm();
        }
        moveSelection(selectedIndex) {
            if (this.selectedIndex < 0)
                return;
            let field = this.view.state.field(lintState);
            let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
            if (!selection)
                return;
            this.view.dispatch({
                selection: { anchor: selection.from, head: selection.to },
                scrollIntoView: true,
                effects: movePanelSelection.of(selection)
            });
        }
        static open(view) { return new LintPanel(view); }
    }
    function svg(content, attrs = `viewBox="0 0 40 40"`) {
        return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
    }
    function underline(color) {
        return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
    }
    const baseTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-diagnostic": {
            padding: "3px 6px 3px 8px",
            marginLeft: "-1px",
            display: "block",
            whiteSpace: "pre-wrap"
        },
        ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
        ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
        ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
        ".cm-diagnosticAction": {
            font: "inherit",
            border: "none",
            padding: "2px 4px",
            backgroundColor: "#444",
            color: "white",
            borderRadius: "3px",
            marginLeft: "8px",
            cursor: "pointer"
        },
        ".cm-diagnosticSource": {
            fontSize: "70%",
            opacity: .7
        },
        ".cm-lintRange": {
            backgroundPosition: "left bottom",
            backgroundRepeat: "repeat-x",
            paddingBottom: "0.7px",
        },
        ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
        ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
        ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
        ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
        ".cm-tooltip-lint": {
            padding: 0,
            margin: 0
        },
        ".cm-lintPoint": {
            position: "relative",
            "&:after": {
                content: '""',
                position: "absolute",
                bottom: 0,
                left: "-2px",
                borderLeft: "3px solid transparent",
                borderRight: "3px solid transparent",
                borderBottom: "4px solid #d11"
            }
        },
        ".cm-lintPoint-warning": {
            "&:after": { borderBottomColor: "orange" }
        },
        ".cm-lintPoint-info": {
            "&:after": { borderBottomColor: "#999" }
        },
        ".cm-panel.cm-panel-lint": {
            position: "relative",
            "& ul": {
                maxHeight: "100px",
                overflowY: "auto",
                "& [aria-selected]": {
                    backgroundColor: "#ddd",
                    "& u": { textDecoration: "underline" }
                },
                "&:focus [aria-selected]": {
                    background_fallback: "#bdf",
                    backgroundColor: "Highlight",
                    color_fallback: "white",
                    color: "HighlightText"
                },
                "& u": { textDecoration: "none" },
                padding: 0,
                margin: 0
            },
            "& [name=close]": {
                position: "absolute",
                top: "0",
                right: "2px",
                background: "inherit",
                border: "none",
                font: "inherit",
                padding: 0,
                margin: 0
            }
        }
    });
    const lintExtensions = [
        lintState,
        /*@__PURE__*/EditorView.decorations.compute([lintState], state => {
            let { selected, panel } = state.field(lintState);
            return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
                activeMark.range(selected.from, selected.to)
            ]);
        }),
        /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
        baseTheme
    ];

    class CompositeBlock {
        constructor(type, 
        // Used for indentation in list items, markup character in lists
        value, from, hash, end, children, positions) {
            this.type = type;
            this.value = value;
            this.from = from;
            this.hash = hash;
            this.end = end;
            this.children = children;
            this.positions = positions;
            this.hashProp = [[NodeProp.contextHash, hash]];
        }
        static create(type, value, from, parentHash, end) {
            let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
            return new CompositeBlock(type, value, from, hash, end, [], []);
        }
        addChild(child, pos) {
            if (child.prop(NodeProp.contextHash) != this.hash)
                child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
            this.children.push(child);
            this.positions.push(pos);
        }
        toTree(nodeSet, end = this.end) {
            let last = this.children.length - 1;
            if (last >= 0)
                end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
            let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
                makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
            });
            return tree;
        }
    }
    var Type;
    (function (Type) {
        Type[Type["Document"] = 1] = "Document";
        Type[Type["CodeBlock"] = 2] = "CodeBlock";
        Type[Type["FencedCode"] = 3] = "FencedCode";
        Type[Type["Blockquote"] = 4] = "Blockquote";
        Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
        Type[Type["BulletList"] = 6] = "BulletList";
        Type[Type["OrderedList"] = 7] = "OrderedList";
        Type[Type["ListItem"] = 8] = "ListItem";
        Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
        Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
        Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
        Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
        Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
        Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
        Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
        Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
        Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
        Type[Type["LinkReference"] = 18] = "LinkReference";
        Type[Type["Paragraph"] = 19] = "Paragraph";
        Type[Type["CommentBlock"] = 20] = "CommentBlock";
        Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
        // Inline
        Type[Type["Escape"] = 22] = "Escape";
        Type[Type["Entity"] = 23] = "Entity";
        Type[Type["HardBreak"] = 24] = "HardBreak";
        Type[Type["Emphasis"] = 25] = "Emphasis";
        Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
        Type[Type["Link"] = 27] = "Link";
        Type[Type["Image"] = 28] = "Image";
        Type[Type["InlineCode"] = 29] = "InlineCode";
        Type[Type["HTMLTag"] = 30] = "HTMLTag";
        Type[Type["Comment"] = 31] = "Comment";
        Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
        Type[Type["URL"] = 33] = "URL";
        // Smaller tokens
        Type[Type["HeaderMark"] = 34] = "HeaderMark";
        Type[Type["QuoteMark"] = 35] = "QuoteMark";
        Type[Type["ListMark"] = 36] = "ListMark";
        Type[Type["LinkMark"] = 37] = "LinkMark";
        Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
        Type[Type["CodeMark"] = 39] = "CodeMark";
        Type[Type["CodeText"] = 40] = "CodeText";
        Type[Type["CodeInfo"] = 41] = "CodeInfo";
        Type[Type["LinkTitle"] = 42] = "LinkTitle";
        Type[Type["LinkLabel"] = 43] = "LinkLabel";
    })(Type || (Type = {}));
    /// Data structure used to accumulate a block's content during [leaf
    /// block parsing](#BlockParser.leaf).
    class LeafBlock {
        /// @internal
        constructor(
        /// The start position of the block.
        start, 
        /// The block's text content.
        content) {
            this.start = start;
            this.content = content;
            /// @internal
            this.marks = [];
            /// The block parsers active for this block.
            this.parsers = [];
        }
    }
    /// Data structure used during block-level per-line parsing.
    class Line {
        constructor() {
            /// The line's full text.
            this.text = "";
            /// The base indent provided by the composite contexts (that have
            /// been handled so far).
            this.baseIndent = 0;
            /// The string position corresponding to the base indent.
            this.basePos = 0;
            /// The number of contexts handled @internal
            this.depth = 0;
            /// Any markers (i.e. block quote markers) parsed for the contexts. @internal
            this.markers = [];
            /// The position of the next non-whitespace character beyond any
            /// list, blockquote, or other composite block markers.
            this.pos = 0;
            /// The column of the next non-whitespace character.
            this.indent = 0;
            /// The character code of the character after `pos`.
            this.next = -1;
        }
        /// @internal
        forward() {
            if (this.basePos > this.pos)
                this.forwardInner();
        }
        /// @internal
        forwardInner() {
            let newPos = this.skipSpace(this.basePos);
            this.indent = this.countIndent(newPos, this.pos, this.indent);
            this.pos = newPos;
            this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
        }
        /// Skip whitespace after the given position, return the position of
        /// the next non-space character or the end of the line if there's
        /// only space after `from`.
        skipSpace(from) { return skipSpace(this.text, from); }
        /// @internal
        reset(text) {
            this.text = text;
            this.baseIndent = this.basePos = this.pos = this.indent = 0;
            this.forwardInner();
            this.depth = 1;
            while (this.markers.length)
                this.markers.pop();
        }
        /// Move the line's base position forward to the given position.
        /// This should only be called by composite [block
        /// parsers](#BlockParser.parse) or [markup skipping
        /// functions](#NodeSpec.composite).
        moveBase(to) {
            this.basePos = to;
            this.baseIndent = this.countIndent(to, this.pos, this.indent);
        }
        /// Move the line's base position forward to the given _column_.
        moveBaseColumn(indent) {
            this.baseIndent = indent;
            this.basePos = this.findColumn(indent);
        }
        /// Store a composite-block-level marker. Should be called from
        /// [markup skipping functions](#NodeSpec.composite) when they
        /// consume any non-whitespace characters.
        addMarker(elt) {
            this.markers.push(elt);
        }
        /// Find the column position at `to`, optionally starting at a given
        /// position and column.
        countIndent(to, from = 0, indent = 0) {
            for (let i = from; i < to; i++)
                indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
            return indent;
        }
        /// Find the position corresponding to the given column.
        findColumn(goal) {
            let i = 0;
            for (let indent = 0; i < this.text.length && indent < goal; i++)
                indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
            return i;
        }
        /// @internal
        scrub() {
            if (!this.baseIndent)
                return this.text;
            let result = "";
            for (let i = 0; i < this.basePos; i++)
                result += " ";
            return result + this.text.slice(this.basePos);
        }
    }
    function skipForList(bl, cx, line) {
        if (line.pos == line.text.length ||
            (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
            return true;
        if (line.indent >= line.baseIndent + 4)
            return false;
        let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
        return size > 0 &&
            (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&
            line.text.charCodeAt(line.pos + size - 1) == bl.value;
    }
    const DefaultSkipMarkup = {
        [Type.Blockquote](bl, cx, line) {
            if (line.next != 62 /* '>' */)
                return false;
            line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
            line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
            bl.end = cx.lineStart + line.text.length;
            return true;
        },
        [Type.ListItem](bl, _cx, line) {
            if (line.indent < line.baseIndent + bl.value && line.next > -1)
                return false;
            line.moveBaseColumn(line.baseIndent + bl.value);
            return true;
        },
        [Type.OrderedList]: skipForList,
        [Type.BulletList]: skipForList,
        [Type.Document]() { return true; }
    };
    function space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
    function skipSpace(line, i = 0) {
        while (i < line.length && space(line.charCodeAt(i)))
            i++;
        return i;
    }
    function skipSpaceBack(line, i, to) {
        while (i > to && space(line.charCodeAt(i - 1)))
            i--;
        return i;
    }
    function isFencedCode(line) {
        if (line.next != 96 && line.next != 126 /* '`~' */)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
            pos++;
        if (pos < line.pos + 3)
            return -1;
        if (line.next == 96)
            for (let i = pos; i < line.text.length; i++)
                if (line.text.charCodeAt(i) == 96)
                    return -1;
        return pos;
    }
    function isBlockquote(line) {
        return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
    }
    function isHorizontalRule(line, cx, breaking) {
        if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
            return -1;
        let count = 1;
        for (let pos = line.pos + 1; pos < line.text.length; pos++) {
            let ch = line.text.charCodeAt(pos);
            if (ch == line.next)
                count++;
            else if (!space(ch))
                return -1;
        }
        // Setext headers take precedence
        if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)
            return -1;
        return count < 3 ? -1 : 1;
    }
    function inList(cx, type) {
        for (let i = cx.stack.length - 1; i >= 0; i--)
            if (cx.stack[i].type == type)
                return true;
        return false;
    }
    function isBulletList(line, cx, breaking) {
        return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
            (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&
            (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
    }
    function isOrderedList(line, cx, breaking) {
        let pos = line.pos, next = line.next;
        for (;;) {
            if (next >= 48 && next <= 57 /* '0-9' */)
                pos++;
            else
                break;
            if (pos == line.text.length)
                return -1;
            next = line.text.charCodeAt(pos);
        }
        if (pos == line.pos || pos > line.pos + 9 ||
            (next != 46 && next != 41 /* '.)' */) ||
            (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||
            breaking && !inList(cx, Type.OrderedList) &&
                (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
            return -1;
        return pos + 1 - line.pos;
    }
    function isAtxHeading(line) {
        if (line.next != 35 /* '#' */)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
            pos++;
        if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
            return -1;
        let size = pos - line.pos;
        return size > 6 ? -1 : size;
    }
    function isSetextUnderline(line) {
        if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
            return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
            pos++;
        let end = pos;
        while (pos < line.text.length && space(line.text.charCodeAt(pos)))
            pos++;
        return pos == line.text.length ? end : -1;
    }
    const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
    const HTMLBlockStyle = [
        [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
        [/^\s*<!--/, CommentEnd],
        [/^\s*<\?/, ProcessingEnd],
        [/^\s*<![A-Z]/, />/],
        [/^\s*<!\[CDATA\[/, /\]\]>/],
        [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
        [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
    ];
    function isHTMLBlock(line, _cx, breaking) {
        if (line.next != 60 /* '<' */)
            return -1;
        let rest = line.text.slice(line.pos);
        for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
            if (HTMLBlockStyle[i][0].test(rest))
                return i;
        return -1;
    }
    function getListIndent(line, pos) {
        let indentAfter = line.countIndent(pos, line.pos, line.indent);
        let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
        return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
    }
    function addCodeText(marks, from, to) {
        let last = marks.length - 1;
        if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)
            marks[last].to = to;
        else
            marks.push(elt(Type.CodeText, from, to));
    }
    // Rules for parsing blocks. A return value of false means the rule
    // doesn't apply here, true means it does. When true is returned and
    // `p.line` has been updated, the rule is assumed to have consumed a
    // leaf block. Otherwise, it is assumed to have opened a context.
    const DefaultBlockParsers = {
        LinkReference: undefined,
        IndentedCode(cx, line) {
            let base = line.baseIndent + 4;
            if (line.indent < base)
                return false;
            let start = line.findColumn(base);
            let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
            let marks = [], pendingMarks = [];
            addCodeText(marks, from, to);
            while (cx.nextLine() && line.depth >= cx.stack.length) {
                if (line.pos == line.text.length) { // Empty
                    addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        pendingMarks.push(m);
                }
                else if (line.indent < base) {
                    break;
                }
                else {
                    if (pendingMarks.length) {
                        for (let m of pendingMarks) {
                            if (m.type == Type.CodeText)
                                addCodeText(marks, m.from, m.to);
                            else
                                marks.push(m);
                        }
                        pendingMarks = [];
                    }
                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        marks.push(m);
                    to = cx.lineStart + line.text.length;
                    let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                    if (codeStart < to)
                        addCodeText(marks, codeStart, to);
                }
            }
            if (pendingMarks.length) {
                pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);
                if (pendingMarks.length)
                    line.markers = pendingMarks.concat(line.markers);
            }
            cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
            return true;
        },
        FencedCode(cx, line) {
            let fenceEnd = isFencedCode(line);
            if (fenceEnd < 0)
                return false;
            let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
            let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
            let marks = [elt(Type.CodeMark, from, from + len)];
            if (infoFrom < infoTo)
                marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
            for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
                let i = line.pos;
                if (line.indent - line.baseIndent < 4)
                    while (i < line.text.length && line.text.charCodeAt(i) == ch)
                        i++;
                if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                    for (let m of line.markers)
                        marks.push(m);
                    marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                    cx.nextLine();
                    break;
                }
                else {
                    if (!first)
                        addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                    for (let m of line.markers)
                        marks.push(m);
                    let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                    if (textStart < textEnd)
                        addCodeText(marks, textStart, textEnd);
                }
            }
            cx.addNode(cx.buffer.writeElements(marks, -from)
                .finish(Type.FencedCode, cx.prevLineEnd() - from), from);
            return true;
        },
        Blockquote(cx, line) {
            let size = isBlockquote(line);
            if (size < 0)
                return false;
            cx.startContext(Type.Blockquote, line.pos);
            cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
            line.moveBase(line.pos + size);
            return null;
        },
        HorizontalRule(cx, line) {
            if (isHorizontalRule(line, cx, false) < 0)
                return false;
            let from = cx.lineStart + line.pos;
            cx.nextLine();
            cx.addNode(Type.HorizontalRule, from);
            return true;
        },
        BulletList(cx, line) {
            let size = isBulletList(line, cx, false);
            if (size < 0)
                return false;
            if (cx.block.type != Type.BulletList)
                cx.startContext(Type.BulletList, line.basePos, line.next);
            let newBase = getListIndent(line, line.pos + 1);
            cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
            cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
            line.moveBaseColumn(newBase);
            return null;
        },
        OrderedList(cx, line) {
            let size = isOrderedList(line, cx, false);
            if (size < 0)
                return false;
            if (cx.block.type != Type.OrderedList)
                cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
            let newBase = getListIndent(line, line.pos + size);
            cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
            cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
            line.moveBaseColumn(newBase);
            return null;
        },
        ATXHeading(cx, line) {
            let size = isAtxHeading(line);
            if (size < 0)
                return false;
            let off = line.pos, from = cx.lineStart + off;
            let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
            while (after > off && line.text.charCodeAt(after - 1) == line.next)
                after--;
            if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))
                after = line.text.length;
            let buf = cx.buffer
                .write(Type.HeaderMark, 0, size)
                .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
            if (after < line.text.length)
                buf.write(Type.HeaderMark, after - off, endOfSpace - off);
            let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
            cx.nextLine();
            cx.addNode(node, from);
            return true;
        },
        HTMLBlock(cx, line) {
            let type = isHTMLBlock(line, cx, false);
            if (type < 0)
                return false;
            let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
            let marks = [], trailing = end != EmptyLine;
            while (!end.test(line.text) && cx.nextLine()) {
                if (line.depth < cx.stack.length) {
                    trailing = false;
                    break;
                }
                for (let m of line.markers)
                    marks.push(m);
            }
            if (trailing)
                cx.nextLine();
            let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
            let to = cx.prevLineEnd();
            cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
            return true;
        },
        SetextHeading: undefined // Specifies relative precedence for block-continue function
    };
    // This implements a state machine that incrementally parses link references. At each
    // next line, it looks ahead to see if the line continues the reference or not. If it
    // doesn't and a valid link is available ending before that line, it finishes that.
    // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
    // creates a link reference if there's a valid reference up to the current point.
    class LinkReferenceParser {
        constructor(leaf) {
            this.stage = 0 /* Start */;
            this.elts = [];
            this.pos = 0;
            this.start = leaf.start;
            this.advance(leaf.content);
        }
        nextLine(cx, line, leaf) {
            if (this.stage == -1 /* Failed */)
                return false;
            let content = leaf.content + "\n" + line.scrub();
            let finish = this.advance(content);
            if (finish > -1 && finish < content.length)
                return this.complete(cx, leaf, finish);
            return false;
        }
        finish(cx, leaf) {
            if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
                return this.complete(cx, leaf, leaf.content.length);
            return false;
        }
        complete(cx, leaf, len) {
            cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
            return true;
        }
        nextStage(elt) {
            if (elt) {
                this.pos = elt.to - this.start;
                this.elts.push(elt);
                this.stage++;
                return true;
            }
            if (elt === false)
                this.stage = -1 /* Failed */;
            return false;
        }
        advance(content) {
            for (;;) {
                if (this.stage == -1 /* Failed */) {
                    return -1;
                }
                else if (this.stage == 0 /* Start */) {
                    if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                        return -1;
                    if (content.charCodeAt(this.pos) != 58 /* ':' */)
                        return this.stage = -1 /* Failed */;
                    this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                    this.pos++;
                }
                else if (this.stage == 1 /* Label */) {
                    if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                        return -1;
                }
                else if (this.stage == 2 /* Link */) {
                    let skip = skipSpace(content, this.pos), end = 0;
                    if (skip > this.pos) {
                        let title = parseLinkTitle(content, skip, this.start);
                        if (title) {
                            let titleEnd = lineEnd(content, title.to - this.start);
                            if (titleEnd > 0) {
                                this.nextStage(title);
                                end = titleEnd;
                            }
                        }
                    }
                    if (!end)
                        end = lineEnd(content, this.pos);
                    return end > 0 && end < content.length ? end : -1;
                }
                else { // RefStage.Title
                    return lineEnd(content, this.pos);
                }
            }
        }
    }
    function lineEnd(text, pos) {
        for (; pos < text.length; pos++) {
            let next = text.charCodeAt(pos);
            if (next == 10)
                break;
            if (!space(next))
                return -1;
        }
        return pos;
    }
    class SetextHeadingParser {
        nextLine(cx, line, leaf) {
            let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
            let next = line.next;
            if (underline < 0)
                return false;
            let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
            cx.nextLine();
            cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [
                ...cx.parser.parseInline(leaf.content, leaf.start),
                underlineMark
            ]));
            return true;
        }
        finish() {
            return false;
        }
    }
    const DefaultLeafBlocks = {
        LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
        SetextHeading() { return new SetextHeadingParser; }
    };
    const DefaultEndLeaf = [
        (_, line) => isAtxHeading(line) >= 0,
        (_, line) => isFencedCode(line) >= 0,
        (_, line) => isBlockquote(line) >= 0,
        (p, line) => isBulletList(line, p, true) >= 0,
        (p, line) => isOrderedList(line, p, true) >= 0,
        (p, line) => isHorizontalRule(line, p, true) >= 0,
        (p, line) => isHTMLBlock(line, p, true) >= 0
    ];
    const scanLineResult = { text: "", end: 0 };
    /// Block-level parsing functions get access to this context object.
    class BlockContext {
        /// @internal
        constructor(
        /// The parser configuration used.
        parser, 
        /// @internal
        input, fragments, 
        /// @internal
        ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.line = new Line();
            this.atEnd = false;
            /// @internal
            this.dontInject = new Set;
            this.stoppedAt = null;
            /// The range index that absoluteLineStart points into @internal
            this.rangeI = 0;
            this.to = ranges[ranges.length - 1].to;
            this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
            this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
            this.stack = [this.block];
            this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;
            this.readLine();
        }
        get parsedPos() {
            return this.absoluteLineStart;
        }
        advance() {
            if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
                return this.finish();
            let { line } = this;
            for (;;) {
                while (line.depth < this.stack.length)
                    this.finishContext();
                for (let mark of line.markers)
                    this.addNode(mark.type, mark.from, mark.to);
                if (line.pos < line.text.length)
                    break;
                // Empty line
                if (!this.nextLine())
                    return this.finish();
            }
            if (this.fragments && this.reuseFragment(line.basePos))
                return null;
            start: for (;;) {
                for (let type of this.parser.blockParsers)
                    if (type) {
                        let result = type(this, line);
                        if (result != false) {
                            if (result == true)
                                return null;
                            line.forward();
                            continue start;
                        }
                    }
                break;
            }
            let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
            for (let parse of this.parser.leafBlockParsers)
                if (parse) {
                    let parser = parse(this, leaf);
                    if (parser)
                        leaf.parsers.push(parser);
                }
            lines: while (this.nextLine()) {
                if (line.pos == line.text.length)
                    break;
                if (line.indent < line.baseIndent + 4) {
                    for (let stop of this.parser.endLeafBlock)
                        if (stop(this, line, leaf))
                            break lines;
                }
                for (let parser of leaf.parsers)
                    if (parser.nextLine(this, line, leaf))
                        return null;
                leaf.content += "\n" + line.scrub();
                for (let m of line.markers)
                    leaf.marks.push(m);
            }
            this.finishLeaf(leaf);
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        reuseFragment(start) {
            if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
                !this.fragments.matches(this.block.hash))
                return false;
            let taken = this.fragments.takeNodes(this);
            if (!taken)
                return false;
            let withoutGaps = taken, end = this.absoluteLineStart + taken;
            for (let i = 1; i < this.ranges.length; i++) {
                let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;
                if (gapFrom >= this.lineStart && gapTo < end)
                    withoutGaps -= gapTo - gapFrom;
            }
            this.lineStart += withoutGaps;
            this.absoluteLineStart += taken;
            this.moveRangeI();
            if (this.absoluteLineStart < this.to) {
                this.lineStart++;
                this.absoluteLineStart++;
                this.readLine();
            }
            else {
                this.atEnd = true;
                this.readLine();
            }
            return true;
        }
        /// The number of parent blocks surrounding the current block.
        get depth() {
            return this.stack.length;
        }
        /// Get the type of the parent block at the given depth. When no
        /// depth is passed, return the type of the innermost parent.
        parentType(depth = this.depth - 1) {
            return this.parser.nodeSet.types[this.stack[depth].type];
        }
        /// Move to the next input line. This should only be called by
        /// (non-composite) [block parsers](#BlockParser.parse) that consume
        /// the line directly, or leaf block parser
        /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
        /// consume the current line (and return true).
        nextLine() {
            this.lineStart += this.line.text.length;
            if (this.absoluteLineEnd >= this.to) {
                this.absoluteLineStart = this.absoluteLineEnd;
                this.atEnd = true;
                this.readLine();
                return false;
            }
            else {
                this.lineStart++;
                this.absoluteLineStart = this.absoluteLineEnd + 1;
                this.moveRangeI();
                this.readLine();
                return true;
            }
        }
        moveRangeI() {
            while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
                this.rangeI++;
                this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
            }
        }
        /// @internal
        scanLine(start) {
            let r = scanLineResult;
            r.end = start;
            if (start >= this.to) {
                r.text = "";
            }
            else {
                r.text = this.lineChunkAt(start);
                r.end += r.text.length;
                if (this.ranges.length > 1) {
                    let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                    while (this.ranges[rangeI].to < r.end) {
                        rangeI++;
                        let nextFrom = this.ranges[rangeI].from;
                        let after = this.lineChunkAt(nextFrom);
                        r.end = nextFrom + after.length;
                        r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                        textOffset = r.end - r.text.length;
                    }
                }
            }
            return r;
        }
        /// @internal
        readLine() {
            let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
            this.absoluteLineEnd = end;
            line.reset(text);
            for (; line.depth < this.stack.length; line.depth++) {
                let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
                if (!handler)
                    throw new Error("Unhandled block context " + Type[cx.type]);
                if (!handler(cx, this, line))
                    break;
                line.forward();
            }
        }
        lineChunkAt(pos) {
            let next = this.input.chunk(pos), text;
            if (!this.input.lineChunks) {
                let eol = next.indexOf("\n");
                text = eol < 0 ? next : next.slice(0, eol);
            }
            else {
                text = next == "\n" ? "" : next;
            }
            return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
        }
        /// The end position of the previous line.
        prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
        /// @internal
        startContext(type, start, value = 0) {
            this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
            this.stack.push(this.block);
        }
        /// Start a composite block. Should only be called from [block
        /// parser functions](#BlockParser.parse) that return null.
        startComposite(type, start, value = 0) {
            this.startContext(this.parser.getNodeType(type), start, value);
        }
        /// @internal
        addNode(block, from, to) {
            if (typeof block == "number")
                block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
            this.block.addChild(block, from - this.block.from);
        }
        /// Add a block element. Can be called by [block
        /// parsers](#BlockParser.parse).
        addElement(elt) {
            this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
        }
        /// Add a block element from a [leaf parser](#LeafBlockParser). This
        /// makes sure any extra composite block markup (such as blockquote
        /// markers) inside the block are also added to the syntax tree.
        addLeafElement(leaf, elt) {
            this.addNode(this.buffer
                .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
                .finish(elt.type, elt.to - elt.from), elt.from);
        }
        /// @internal
        finishContext() {
            let cx = this.stack.pop();
            let top = this.stack[this.stack.length - 1];
            top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
            this.block = top;
        }
        finish() {
            while (this.stack.length > 1)
                this.finishContext();
            return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
        }
        addGaps(tree) {
            return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
        }
        /// @internal
        finishLeaf(leaf) {
            for (let parser of leaf.parsers)
                if (parser.finish(this, leaf))
                    return;
            let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
            this.addNode(this.buffer
                .writeElements(inline, -leaf.start)
                .finish(Type.Paragraph, leaf.content.length), leaf.start);
        }
        elt(type, from, to, children) {
            if (typeof type == "string")
                return elt(this.parser.getNodeType(type), from, to, children);
            return new TreeElement(type, from);
        }
        /// @internal
        get buffer() { return new Buffer(this.parser.nodeSet); }
    }
    function injectGaps(ranges, rangeI, tree, offset, dont) {
        if (dont.has(tree.tree))
            return tree.tree;
        let rangeEnd = ranges[rangeI].to;
        let children = [], positions = [], start = tree.from + offset;
        function movePastNext(upto, inclusive) {
            while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
                let size = ranges[rangeI + 1].from - rangeEnd;
                offset += size;
                upto += size;
                rangeI++;
                rangeEnd = ranges[rangeI].to;
            }
        }
        for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
            movePastNext(ch.from + offset, true);
            let from = ch.from + offset, node;
            if (ch.to + offset > rangeEnd) {
                node = injectGaps(ranges, rangeI, ch, offset, dont);
                movePastNext(ch.to + offset, false);
            }
            else {
                node = ch.toTree();
            }
            children.push(node);
            positions.push(from - start);
        }
        movePastNext(tree.to + offset, false);
        return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
    }
    /// A Markdown parser configuration.
    class MarkdownParser extends Parser$1 {
        /// @internal
        constructor(
        /// The parser's syntax [node
        /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
        nodeSet, 
        /// @internal
        blockParsers, 
        /// @internal
        leafBlockParsers, 
        /// @internal
        blockNames, 
        /// @internal
        endLeafBlock, 
        /// @internal
        skipContextMarkup, 
        /// @internal
        inlineParsers, 
        /// @internal
        inlineNames, 
        /// @internal
        wrappers) {
            super();
            this.nodeSet = nodeSet;
            this.blockParsers = blockParsers;
            this.leafBlockParsers = leafBlockParsers;
            this.blockNames = blockNames;
            this.endLeafBlock = endLeafBlock;
            this.skipContextMarkup = skipContextMarkup;
            this.inlineParsers = inlineParsers;
            this.inlineNames = inlineNames;
            this.wrappers = wrappers;
            /// @internal
            this.nodeTypes = Object.create(null);
            for (let t of nodeSet.types)
                this.nodeTypes[t.name] = t.id;
        }
        createParse(input, fragments, ranges) {
            let parse = new BlockContext(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /// Reconfigure the parser.
        configure(spec) {
            let config = resolveConfig(spec);
            if (!config)
                return this;
            let { nodeSet, skipContextMarkup } = this;
            let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
            if (nonEmpty(config.defineNodes)) {
                skipContextMarkup = Object.assign({}, skipContextMarkup);
                let nodeTypes = nodeSet.types.slice(), styles;
                for (let s of config.defineNodes) {
                    let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
                    if (nodeTypes.some(t => t.name == name))
                        continue;
                    if (composite)
                        skipContextMarkup[nodeTypes.length] =
                            (bl, cx, line) => composite(cx, line, bl.value);
                    let id = nodeTypes.length;
                    let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                        : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                    nodeTypes.push(NodeType.define({
                        id,
                        name,
                        props: group && [[NodeProp.group, group]]
                    }));
                    if (style) {
                        if (!styles)
                            styles = {};
                        if (Array.isArray(style) || style instanceof Tag)
                            styles[name] = style;
                        else
                            Object.assign(styles, style);
                    }
                }
                nodeSet = new NodeSet(nodeTypes);
                if (styles)
                    nodeSet = nodeSet.extend(styleTags(styles));
            }
            if (nonEmpty(config.props))
                nodeSet = nodeSet.extend(...config.props);
            if (nonEmpty(config.remove)) {
                for (let rm of config.remove) {
                    let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                    if (block > -1)
                        blockParsers[block] = leafBlockParsers[block] = undefined;
                    if (inline > -1)
                        inlineParsers[inline] = undefined;
                }
            }
            if (nonEmpty(config.parseBlock)) {
                for (let spec of config.parseBlock) {
                    let found = blockNames.indexOf(spec.name);
                    if (found > -1) {
                        blockParsers[found] = spec.parse;
                        leafBlockParsers[found] = spec.leaf;
                    }
                    else {
                        let pos = spec.before ? findName(blockNames, spec.before)
                            : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                        blockParsers.splice(pos, 0, spec.parse);
                        leafBlockParsers.splice(pos, 0, spec.leaf);
                        blockNames.splice(pos, 0, spec.name);
                    }
                    if (spec.endLeaf)
                        endLeafBlock.push(spec.endLeaf);
                }
            }
            if (nonEmpty(config.parseInline)) {
                for (let spec of config.parseInline) {
                    let found = inlineNames.indexOf(spec.name);
                    if (found > -1) {
                        inlineParsers[found] = spec.parse;
                    }
                    else {
                        let pos = spec.before ? findName(inlineNames, spec.before)
                            : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                        inlineParsers.splice(pos, 0, spec.parse);
                        inlineNames.splice(pos, 0, spec.name);
                    }
                }
            }
            if (config.wrap)
                wrappers = wrappers.concat(config.wrap);
            return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
        }
        /// @internal
        getNodeType(name) {
            let found = this.nodeTypes[name];
            if (found == null)
                throw new RangeError(`Unknown node type '${name}'`);
            return found;
        }
        /// Parse the given piece of inline text at the given offset,
        /// returning an array of [`Element`](#Element) objects representing
        /// the inline content.
        parseInline(text, offset) {
            let cx = new InlineContext(this, text, offset);
            outer: for (let pos = offset; pos < cx.end;) {
                let next = cx.char(pos);
                for (let token of this.inlineParsers)
                    if (token) {
                        let result = token(cx, next, pos);
                        if (result >= 0) {
                            pos = result;
                            continue outer;
                        }
                    }
                pos++;
            }
            return cx.resolveMarkers(0);
        }
    }
    function nonEmpty(a) {
        return a != null && a.length > 0;
    }
    function resolveConfig(spec) {
        if (!Array.isArray(spec))
            return spec;
        if (spec.length == 0)
            return null;
        let conf = resolveConfig(spec[0]);
        if (spec.length == 1)
            return conf;
        let rest = resolveConfig(spec.slice(1));
        if (!rest || !conf)
            return conf || rest;
        let conc = (a, b) => (a || none).concat(b || none);
        let wrapA = conf.wrap, wrapB = rest.wrap;
        return {
            props: conc(conf.props, rest.props),
            defineNodes: conc(conf.defineNodes, rest.defineNodes),
            parseBlock: conc(conf.parseBlock, rest.parseBlock),
            parseInline: conc(conf.parseInline, rest.parseInline),
            remove: conc(conf.remove, rest.remove),
            wrap: !wrapA ? wrapB : !wrapB ? wrapA :
                (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
        };
    }
    function findName(names, name) {
        let found = names.indexOf(name);
        if (found < 0)
            throw new RangeError(`Position specified relative to unknown parser ${name}`);
        return found;
    }
    let nodeTypes = [NodeType.none];
    for (let i = 1, name; name = Type[i]; i++) {
        nodeTypes[i] = NodeType.define({
            id: i,
            name,
            props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
        });
    }
    const none = [];
    class Buffer {
        constructor(nodeSet) {
            this.nodeSet = nodeSet;
            this.content = [];
            this.nodes = [];
        }
        write(type, from, to, children = 0) {
            this.content.push(type, from, to, 4 + children * 4);
            return this;
        }
        writeElements(elts, offset = 0) {
            for (let e of elts)
                e.writeTo(this, offset);
            return this;
        }
        finish(type, length) {
            return Tree.build({
                buffer: this.content,
                nodeSet: this.nodeSet,
                reused: this.nodes,
                topID: type,
                length
            });
        }
    }
    /// Elements are used to compose syntax nodes during parsing.
    class Element {
        /// @internal
        constructor(
        /// The node's
        /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
        type, 
        /// The start of the node, as an offset from the start of the document.
        from, 
        /// The end of the node.
        to, 
        /// The node's child nodes @internal
        children = none) {
            this.type = type;
            this.from = from;
            this.to = to;
            this.children = children;
        }
        /// @internal
        writeTo(buf, offset) {
            let startOff = buf.content.length;
            buf.writeElements(this.children, offset);
            buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
        }
        /// @internal
        toTree(nodeSet) {
            return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
        }
    }
    class TreeElement {
        constructor(tree, from) {
            this.tree = tree;
            this.from = from;
        }
        get to() { return this.from + this.tree.length; }
        get type() { return this.tree.type.id; }
        get children() { return none; }
        writeTo(buf, offset) {
            buf.nodes.push(this.tree);
            buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
        }
        toTree() { return this.tree; }
    }
    function elt(type, from, to, children) {
        return new Element(type, from, to, children);
    }
    const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
    const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
    const LinkStart = {}, ImageStart = {};
    class InlineDelimiter {
        constructor(type, from, to, side) {
            this.type = type;
            this.from = from;
            this.to = to;
            this.side = side;
        }
    }
    const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    let Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
    try {
        Punctuation = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
    }
    catch (_) { }
    const DefaultInline = {
        Escape(cx, next, start) {
            if (next != 92 /* '\\' */ || start == cx.end - 1)
                return -1;
            let escaped = cx.char(start + 1);
            for (let i = 0; i < Escapable.length; i++)
                if (Escapable.charCodeAt(i) == escaped)
                    return cx.append(elt(Type.Escape, start, start + 2));
            return -1;
        },
        Entity(cx, next, start) {
            if (next != 38 /* '&' */)
                return -1;
            let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
            return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
        },
        InlineCode(cx, next, start) {
            if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
                return -1;
            let pos = start + 1;
            while (pos < cx.end && cx.char(pos) == 96)
                pos++;
            let size = pos - start, curSize = 0;
            for (; pos < cx.end; pos++) {
                if (cx.char(pos) == 96) {
                    curSize++;
                    if (curSize == size && cx.char(pos + 1) != 96)
                        return cx.append(elt(Type.InlineCode, start, pos + 1, [
                            elt(Type.CodeMark, start, start + size),
                            elt(Type.CodeMark, pos + 1 - size, pos + 1)
                        ]));
                }
                else {
                    curSize = 0;
                }
            }
            return -1;
        },
        HTMLTag(cx, next, start) {
            if (next != 60 /* '<' */ || start == cx.end - 1)
                return -1;
            let after = cx.slice(start + 1, cx.end);
            let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
            if (url)
                return cx.append(elt(Type.URL, start, start + 1 + url[0].length));
            let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
            if (comment)
                return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));
            let procInst = /^\?[^]*?\?>/.exec(after);
            if (procInst)
                return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
            let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
            if (!m)
                return -1;
            return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));
        },
        Emphasis(cx, next, start) {
            if (next != 95 && next != 42)
                return -1;
            let pos = start + 1;
            while (cx.char(pos) == next)
                pos++;
            let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
            let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
            let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
            let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
            let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
            let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
            let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
            return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));
        },
        HardBreak(cx, next, start) {
            if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
                return cx.append(elt(Type.HardBreak, start, start + 2));
            if (next == 32) {
                let pos = start + 1;
                while (cx.char(pos) == 32)
                    pos++;
                if (cx.char(pos) == 10 && pos >= start + 2)
                    return cx.append(elt(Type.HardBreak, start, pos + 1));
            }
            return -1;
        },
        Link(cx, next, start) {
            return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;
        },
        Image(cx, next, start) {
            return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
                ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;
        },
        LinkEnd(cx, next, start) {
            if (next != 93 /* ']' */)
                return -1;
            // Scanning back to the next link/image start marker
            for (let i = cx.parts.length - 1; i >= 0; i--) {
                let part = cx.parts[i];
                if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                    // If this one has been set invalid (because it would produce
                    // a nested link) or there's no valid link here ignore both.
                    if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                        cx.parts[i] = null;
                        return -1;
                    }
                    // Finish the content and replace the entire range in
                    // this.parts with the link/image node.
                    let content = cx.takeContent(i);
                    let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
                    // Set any open-link markers before this link to invalid.
                    if (part.type == LinkStart)
                        for (let j = 0; j < i; j++) {
                            let p = cx.parts[j];
                            if (p instanceof InlineDelimiter && p.type == LinkStart)
                                p.side = 0;
                        }
                    return link.to;
                }
            }
            return -1;
        }
    };
    function finishLink(cx, content, type, start, startPos) {
        let { text } = cx, next = cx.char(startPos), endPos = startPos;
        content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
        content.push(elt(Type.LinkMark, startPos - 1, startPos));
        if (next == 40 /* '(' */) {
            let pos = cx.skipSpace(startPos + 1);
            let dest = parseURL(text, pos - cx.offset, cx.offset), title;
            if (dest) {
                pos = cx.skipSpace(dest.to);
                title = parseLinkTitle(text, pos - cx.offset, cx.offset);
                if (title)
                    pos = cx.skipSpace(title.to);
            }
            if (cx.char(pos) == 41 /* ')' */) {
                content.push(elt(Type.LinkMark, startPos, startPos + 1));
                endPos = pos + 1;
                if (dest)
                    content.push(dest);
                if (title)
                    content.push(title);
                content.push(elt(Type.LinkMark, pos, endPos));
            }
        }
        else if (next == 91 /* '[' */) {
            let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
            if (label) {
                content.push(label);
                endPos = label.to;
            }
        }
        return elt(type, start, endPos, content);
    }
    // These return `null` when falling off the end of the input, `false`
    // when parsing fails otherwise (for use in the incremental link
    // reference parser).
    function parseURL(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next == 60 /* '<' */) {
            for (let pos = start + 1; pos < text.length; pos++) {
                let ch = text.charCodeAt(pos);
                if (ch == 62 /* '>' */)
                    return elt(Type.URL, start + offset, pos + 1 + offset);
                if (ch == 60 || ch == 10 /* '<\n' */)
                    return false;
            }
            return null;
        }
        else {
            let depth = 0, pos = start;
            for (let escaped = false; pos < text.length; pos++) {
                let ch = text.charCodeAt(pos);
                if (space(ch)) {
                    break;
                }
                else if (escaped) {
                    escaped = false;
                }
                else if (ch == 40 /* '(' */) {
                    depth++;
                }
                else if (ch == 41 /* ')' */) {
                    if (!depth)
                        break;
                    depth--;
                }
                else if (ch == 92 /* '\\' */) {
                    escaped = true;
                }
            }
            return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
        }
    }
    function parseLinkTitle(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
            return false;
        let end = next == 40 ? 41 : next;
        for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
            let ch = text.charCodeAt(pos);
            if (escaped)
                escaped = false;
            else if (ch == end)
                return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
            else if (ch == 92 /* '\\' */)
                escaped = true;
        }
        return null;
    }
    function parseLinkLabel(text, start, offset, requireNonWS) {
        for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
            let ch = text.charCodeAt(pos);
            if (escaped)
                escaped = false;
            else if (ch == 93 /* ']' */)
                return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
            else {
                if (requireNonWS && !space(ch))
                    requireNonWS = false;
                if (ch == 91 /* '[' */)
                    return false;
                else if (ch == 92 /* '\\' */)
                    escaped = true;
            }
        }
        return null;
    }
    /// Inline parsing functions get access to this context, and use it to
    /// read the content and emit syntax nodes.
    class InlineContext {
        /// @internal
        constructor(
        /// The parser that is being used.
        parser, 
        /// The text of this inline section.
        text, 
        /// The starting offset of the section in the document.
        offset) {
            this.parser = parser;
            this.text = text;
            this.offset = offset;
            /// @internal
            this.parts = [];
        }
        /// Get the character code at the given (document-relative)
        /// position.
        char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
        /// The position of the end of this inline section.
        get end() { return this.offset + this.text.length; }
        /// Get a substring of this inline section. Again uses
        /// document-relative positions.
        slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
        /// @internal
        append(elt) {
            this.parts.push(elt);
            return elt.to;
        }
        /// Add a [delimiter](#DelimiterType) at this given position. `open`
        /// and `close` indicate whether this delimiter is opening, closing,
        /// or both. Returns the end of the delimiter, for convenient
        /// returning from [parse functions](#InlineParser.parse).
        addDelimiter(type, from, to, open, close) {
            return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));
        }
        /// Add an inline element. Returns the end of the element.
        addElement(elt) {
            return this.append(elt);
        }
        /// Resolve markers between this.parts.length and from, wrapping matched markers in the
        /// appropriate node and updating the content of this.parts. @internal
        resolveMarkers(from) {
            // Scan forward, looking for closing tokens
            for (let i = from; i < this.parts.length; i++) {
                let close = this.parts[i];
                if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))
                    continue;
                let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
                let closeSize = close.to - close.from;
                let open, j = i - 1;
                // Continue scanning for a matching opening token
                for (; j >= from; j--) {
                    let part = this.parts[j];
                    if (part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type &&
                        // Ignore emphasis delimiters where the character count doesn't match
                        !(emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&
                            (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
                        open = part;
                        break;
                    }
                }
                if (!open)
                    continue;
                let type = close.type.resolve, content = [];
                let start = open.from, end = close.to;
                // Emphasis marker effect depends on the character count. Size consumed is minimum of the two
                // markers.
                if (emp) {
                    let size = Math.min(2, open.to - open.from, closeSize);
                    start = open.to - size;
                    end = close.from + size;
                    type = size == 1 ? "Emphasis" : "StrongEmphasis";
                }
                // Move the covered region into content, optionally adding marker nodes
                if (open.type.mark)
                    content.push(this.elt(open.type.mark, start, open.to));
                for (let k = j + 1; k < i; k++) {
                    if (this.parts[k] instanceof Element)
                        content.push(this.parts[k]);
                    this.parts[k] = null;
                }
                if (close.type.mark)
                    content.push(this.elt(close.type.mark, close.from, end));
                let element = this.elt(type, start, end, content);
                // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.
                this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
                let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
                // Insert the new element in this.parts
                if (keep)
                    this.parts.splice(i, 0, element);
                else
                    this.parts[i] = element;
            }
            // Collect the elements remaining in this.parts into an array.
            let result = [];
            for (let i = from; i < this.parts.length; i++) {
                let part = this.parts[i];
                if (part instanceof Element)
                    result.push(part);
            }
            return result;
        }
        /// Find an opening delimiter of the given type. Returns `null` if
        /// no delimiter is found, or an index that can be passed to
        /// [`takeContent`](#InlineContext.takeContent) otherwise.
        findOpeningDelimiter(type) {
            for (let i = this.parts.length - 1; i >= 0; i--) {
                let part = this.parts[i];
                if (part instanceof InlineDelimiter && part.type == type)
                    return i;
            }
            return null;
        }
        /// Remove all inline elements and delimiters starting from the
        /// given index (which you should get from
        /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
        /// resolve delimiters inside of them, and return them as an array
        /// of elements.
        takeContent(startIndex) {
            let content = this.resolveMarkers(startIndex);
            this.parts.length = startIndex;
            return content;
        }
        /// Skip space after the given (document) position, returning either
        /// the position of the next non-space character or the end of the
        /// section.
        skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
        elt(type, from, to, children) {
            if (typeof type == "string")
                return elt(this.parser.getNodeType(type), from, to, children);
            return new TreeElement(type, from);
        }
    }
    function injectMarks(elements, marks) {
        if (!marks.length)
            return elements;
        if (!elements.length)
            return marks;
        let elts = elements.slice(), eI = 0;
        for (let mark of marks) {
            while (eI < elts.length && elts[eI].to < mark.to)
                eI++;
            if (eI < elts.length && elts[eI].from < mark.from) {
                let e = elts[eI];
                if (e instanceof Element)
                    elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));
            }
            else {
                elts.splice(eI++, 0, mark);
            }
        }
        return elts;
    }
    // These are blocks that can span blank lines, and should thus only be
    // reused if their next sibling is also being reused.
    const NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
    class FragmentCursor {
        constructor(fragments, input) {
            this.fragments = fragments;
            this.input = input;
            // Index into fragment array
            this.i = 0;
            // Active fragment
            this.fragment = null;
            this.fragmentEnd = -1;
            // Cursor into the current fragment, if any. When `moveTo` returns
            // true, this points at the first block after `pos`.
            this.cursor = null;
            if (fragments.length)
                this.fragment = fragments[this.i++];
        }
        nextFragment() {
            this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
            this.cursor = null;
            this.fragmentEnd = -1;
        }
        moveTo(pos, lineStart) {
            while (this.fragment && this.fragment.to <= pos)
                this.nextFragment();
            if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
                return false;
            if (this.fragmentEnd < 0) {
                let end = this.fragment.to;
                while (end > 0 && this.input.read(end - 1, end) != "\n")
                    end--;
                this.fragmentEnd = end ? end - 1 : 0;
            }
            let c = this.cursor;
            if (!c) {
                c = this.cursor = this.fragment.tree.cursor();
                c.firstChild();
            }
            let rPos = pos + this.fragment.offset;
            while (c.to <= rPos)
                if (!c.parent())
                    return false;
            for (;;) {
                if (c.from >= rPos)
                    return this.fragment.from <= lineStart;
                if (!c.childAfter(rPos))
                    return false;
            }
        }
        matches(hash) {
            let tree = this.cursor.tree;
            return tree && tree.prop(NodeProp.contextHash) == hash;
        }
        takeNodes(cx) {
            let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
            let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
            let prevEnd = end, prevI = blockI;
            for (;;) {
                if (cur.to - off > fragEnd) {
                    if (cur.type.isAnonymous && cur.firstChild())
                        continue;
                    break;
                }
                cx.dontInject.add(cur.tree);
                cx.addNode(cur.tree, cur.from - off);
                // Taken content must always end in a block, because incremental
                // parsing happens on block boundaries. Never stop directly
                // after an indented code block, since those can continue after
                // any number of blank lines.
                if (cur.type.is("Block")) {
                    if (NotLast.indexOf(cur.type.id) < 0) {
                        end = cur.to - off;
                        blockI = cx.block.children.length;
                    }
                    else {
                        end = prevEnd;
                        blockI = prevI;
                        prevEnd = cur.to - off;
                        prevI = cx.block.children.length;
                    }
                }
                if (!cur.nextSibling())
                    break;
            }
            while (cx.block.children.length > blockI) {
                cx.block.children.pop();
                cx.block.positions.pop();
            }
            return end - start;
        }
    }
    const markdownHighlighting = styleTags({
        "Blockquote/...": tags.quote,
        HorizontalRule: tags.contentSeparator,
        "ATXHeading1/... SetextHeading1/...": tags.heading1,
        "ATXHeading2/... SetextHeading2/...": tags.heading2,
        "ATXHeading3/...": tags.heading3,
        "ATXHeading4/...": tags.heading4,
        "ATXHeading5/...": tags.heading5,
        "ATXHeading6/...": tags.heading6,
        "Comment CommentBlock": tags.comment,
        Escape: tags.escape,
        Entity: tags.character,
        "Emphasis/...": tags.emphasis,
        "StrongEmphasis/...": tags.strong,
        "Link/... Image/...": tags.link,
        "OrderedList/... BulletList/...": tags.list,
        "BlockQuote/...": tags.quote,
        "InlineCode CodeText": tags.monospace,
        URL: tags.url,
        "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags.processingInstruction,
        "CodeInfo LinkLabel": tags.labelName,
        LinkTitle: tags.string,
        Paragraph: tags.content
    });
    /// The default CommonMark parser.
    new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);

    const StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
    /// An extension that implements
    /// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
    /// Strikethrough syntax using `~~` delimiters.
    ({
        defineNodes: [{
                name: "Strikethrough",
                style: { "Strikethrough/...": tags.strikethrough }
            }, {
                name: "StrikethroughMark",
                style: tags.processingInstruction
            }],
        parseInline: [{
                name: "Strikethrough",
                parse(cx, next, pos) {
                    if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)
                        return -1;
                    let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);
                    let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
                    let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
                    return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
                },
                after: "Emphasis"
            }]
    });
    function parseRow(cx, line, startI = 0, elts, offset = 0) {
        let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
        let parseCell = () => {
            elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
        };
        for (let i = startI; i < line.length; i++) {
            let next = line.charCodeAt(i);
            if (next == 124 /* '|' */ && !esc) {
                if (!first || cellStart > -1)
                    count++;
                first = false;
                if (elts) {
                    if (cellStart > -1)
                        parseCell();
                    elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
                }
                cellStart = cellEnd = -1;
            }
            else if (esc || next != 32 && next != 9) {
                if (cellStart < 0)
                    cellStart = i;
                cellEnd = i + 1;
            }
            esc = !esc && next == 92;
        }
        if (cellStart > -1) {
            count++;
            if (elts)
                parseCell();
        }
        return count;
    }
    function hasPipe(str, start) {
        for (let i = start; i < str.length; i++) {
            let next = str.charCodeAt(i);
            if (next == 124 /* '|' */)
                return true;
            if (next == 92 /* '\\' */)
                i++;
        }
        return false;
    }
    const delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
    class TableParser {
        constructor() {
            // Null means we haven't seen the second line yet, false means this
            // isn't a table, and an array means this is a table and we've
            // parsed the given rows so far.
            this.rows = null;
        }
        nextLine(cx, line, leaf) {
            if (this.rows == null) { // Second line
                this.rows = false;
                let lineText;
                if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&
                    delimiterLine.test(lineText = line.text.slice(line.pos))) {
                    let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
                    if (firstCount == parseRow(cx, lineText, line.pos))
                        this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                            cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
                }
            }
            else if (this.rows) { // Line after the second
                let content = [];
                parseRow(cx, line.text, line.pos, content, cx.lineStart);
                this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
            }
            return false;
        }
        finish(cx, leaf) {
            if (!this.rows)
                return false;
            cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
            return true;
        }
    }
    /// This extension provides
    /// [GFM-style](https://github.github.com/gfm/#tables-extension-)
    /// tables, using syntax like this:
    ///
    /// ```
    /// | head 1 | head 2 |
    /// | ---    | ---    |
    /// | cell 1 | cell 2 |
    /// ```
    ({
        defineNodes: [
            { name: "Table", block: true },
            { name: "TableHeader", style: { "TableHeader/...": tags.heading } },
            "TableRow",
            { name: "TableCell", style: tags.content },
            { name: "TableDelimiter", style: tags.processingInstruction },
        ],
        parseBlock: [{
                name: "Table",
                leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },
                endLeaf(cx, line, leaf) {
                    if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
                        return false;
                    let next = cx.scanLine(cx.absoluteLineEnd + 1).text;
                    return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);
                },
                before: "SetextHeading"
            }]
    });
    class TaskParser {
        nextLine() { return false; }
        finish(cx, leaf) {
            cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
                cx.elt("TaskMarker", leaf.start, leaf.start + 3),
                ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
            ]));
            return true;
        }
    }
    /// Extension providing
    /// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
    /// task list items, where list items can be prefixed with `[ ]` or
    /// `[x]` to add a checkbox.
    ({
        defineNodes: [
            { name: "Task", block: true, style: tags.list },
            { name: "TaskMarker", style: tags.atom }
        ],
        parseBlock: [{
                name: "TaskList",
                leaf(cx, leaf) {
                    return /^\[[ xX]\]/.test(leaf.content) && cx.parentType().name == "ListItem" ? new TaskParser : null;
                },
                after: "SetextHeading"
            }]
    });
    function parseSubSuper(ch, node, mark) {
        return (cx, next, pos) => {
            if (next != ch || cx.char(pos + 1) == ch)
                return -1;
            let elts = [cx.elt(mark, pos, pos + 1)];
            for (let i = pos + 1; i < cx.end; i++) {
                let next = cx.char(i);
                if (next == ch)
                    return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
                if (next == 92 /* '\\' */)
                    elts.push(cx.elt("Escape", i, i++ + 2));
                if (space(next))
                    break;
            }
            return -1;
        };
    }
    /// Extension providing
    /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
    /// superscript using `^` markers.
    ({
        defineNodes: [
            { name: "Superscript", style: tags.special(tags.content) },
            { name: "SuperscriptMark", style: tags.processingInstruction }
        ],
        parseInline: [{
                name: "Superscript",
                parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
            }]
    });
    /// Extension providing
    /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
    /// subscript using `~` markers.
    ({
        defineNodes: [
            { name: "Subscript", style: tags.special(tags.content) },
            { name: "SubscriptMark", style: tags.processingInstruction }
        ],
        parseInline: [{
                name: "Subscript",
                parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
            }]
    });
    /// Extension that parses two colons with only letters, underscores,
    /// and numbers between them as `Emoji` nodes.
    ({
        defineNodes: [{ name: "Emoji", style: tags.character }],
        parseInline: [{
                name: "Emoji",
                parse(cx, next, pos) {
                    let match;
                    if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
                        return -1;
                    return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
                }
            }]
    });

    /**
     * Create an array of syntax errors in the given tree.
     *
     * @param {Tree} syntaxTree
     * @returns {LintMessage[]} array of syntax errors
     */
    function lintSyntax(syntaxTree) {

      const lintMessages = [];

      syntaxTree.iterate({
        enter: node => {
          if (node.type.isError) {

            const error = node.toString();

            /* The error has the pattern [⚠ || ⚠(NodeType)]. The regex extracts the node type from inside the brackets */
            const match = /\((.*?)\)/.exec(error);
            const nodeType = match && match[1];

            let message;

            if (nodeType) {
              message = 'unexpected ' + nodeType;
            } else {
              message = 'expression expected';
            }

            lintMessages.push(
              {
                from: node.from,
                to: node.to,
                severity: 'error',
                message: message,
                type: 'syntaxError'
              }
            );
          }
        }
      });

      return lintMessages;
    }

    /**
     * Generates lint messages for the given syntax tree.
     *
     * @param {Tree} syntaxTree
     * @returns {LintMessage[]} array of all lint messages
     */
    function lintAll$1(syntaxTree) {

      const lintMessages = [
        ... lintSyntax(syntaxTree)
      ];

      return lintMessages;
    }

    /**
     * CodeMirror extension that provides linting for FEEL expressions.
     *
     * @param {EditorView} editorView
     * @returns {Source} CodeMirror linting source
     */
    const cmFeelLinter = () => editorView => {

      // don't lint if the Editor is empty
      if (editorView.state.doc.length === 0) {
        return [];
      }

      const tree = syntaxTree(editorView.state);

      const messages = lintAll$1(tree);

      return messages.map(message => ({
        ...message,
        source: 'syntaxError'
      }));
    };

    syntaxHighlighting(HighlightStyle.define([
      { tag: tags.strong, fontWeight: 'bold' },
      { tag: tags.emphasis, fontStyle: 'italic' },
    ]));

    EditorView.theme({
      '& .cm-lintRange': {
        position: 'relative',
      },
      '& .cm-lintRange::after': {
        content: '""',
        width: '100%',
        position: 'absolute',
        left: '0px',
        bottom: '-2px',
        height: '3px',
        backgroundRepeat: 'repeat-x',
      },
      '& .cm-lintRange.cm-lintRange-warning, & .cm-lintRange.cm-lintRange-error': {
        backgroundImage: 'none',
      },
      '& .cm-lintPoint::after': {
        bottom: '-2px'
      }
    });

    const _urlify = (color) => `%23${color.slice(1)}`;

    const colors = {
      black: '#1f2b36',
      darkGrey: '#2f3d58',
      grey: '#404a5c',
      midGrey: '#576071',
      lightGrey: '#c5d1e5',
      offWhite: '#d9e0f5',
      snowWhite: '#eaf1ff',
      white: '#ffffff',
      mossGreen: '#7ab6aa',
      iceBlue: '#6cbfd8',
      waterBlue: '#065aaa',
      brightBlue: '#0a56b9',
      deepBlue: '#355472',
      red: '#9f1c15',
      orangeBrown: '#b4502f',
      yellow: '#debd71',
      lila: '#9a4890',
      purple: '#5b2c83'
    };

    const colorByRole = {
      lightBackground: colors.white,
      darkBackground: colors.snowWhite,
      selection: colors.snowWhite,
      tooltipBackground: colors.offWhite,
      error: colors.red,
      warning: colors.yellow,
      invalid: '#b40000'
    };

    EditorView.theme(
      {
        '&': { color: colors.black, backgroundColor: colorByRole.lightBackground },
        '.cm-content': { caretColor: colors.darkGrey },
        '.cm-cursor, .cm-dropCursor': { borderLeftColor: colors.darkGrey },
        '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection':
          { backgroundColor: colorByRole.selection },

        '.cm-panels': { backgroundColor: colorByRole.darkBackground, color: colors.grey },
        '.cm-panels.cm-panels-top': { borderBottom: `2px solid ${ colors.black }` },
        '.cm-panels.cm-panels-bottom': { borderTop: `2px solid ${ colors.black }` },

        '.cm-searchMatch': {
          backgroundColor: '#72a1ff59',
          outline: `1px solid ${colors.midGrey}`
        },
        '.cm-searchMatch.cm-searchMatch-selected': { backgroundColor: colors.offWhite },
        '.cm-activeLine': { backgroundColor: colorByRole.selection },
        '.cm-selectionMatch': { backgroundColor: colors.offWhite },

        '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
          outline: `1px solid ${colors.grey}`
        },

        '&.cm-focused .cm-matchingBracket': {
          backgroundColor: colors.snowWhite
        },

        '.cm-gutters': {
          backgroundColor: '#f3f7fe',
          color: '#52668d',
          border: 'none',
          padding: '0 5px'
        },

        '.cm-activeLineGutter': {
          backgroundColor: colorByRole.selection
        },

        '.cm-foldPlaceholder': {
          backgroundColor: 'transparent',
          border: 'none',
          color: '#ddd'
        },

        '.cm-tooltip': {
          border: 'none',
          backgroundColor: colorByRole.tooltipBackground
        },
        '.cm-tooltip .cm-tooltip-arrow:before': {
          borderTopColor: 'transparent',
          borderBottomColor: 'transparent'
        },
        '.cm-tooltip .cm-tooltip-arrow:after': {
          borderTopColor: colorByRole.tooltipBackground,
          borderBottomColor: colorByRole.tooltipBackground
        },
        '.cm-tooltip-autocomplete': {
          '& > ul > li[aria-selected]': {
            backgroundColor: colorByRole.darkBackground,
            color: colors.midGrey
          }
        },
        '& .cm-lintRange.cm-lintRange-warning::after': {
          backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${_urlify(colorByRole.warning)}' fill='none' stroke-width='1.2'/></svg>")`,
        },
        '& .cm-lintRange.cm-lintRange-error::after': {
          backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${_urlify(colorByRole.error)}' fill='none' stroke-width='1.2'/></svg>")`,
        },
        '& .cm-diagnostic-warning': {
          border: `1px solid ${colorByRole.warning}`,
          borderLeft: `5px solid ${colorByRole.warning}`,
          background: colorByRole.lightBackground,
        },
        '& .cm-diagnostic-error': {
          border: `1px solid ${colorByRole.error}`,
          borderLeft: `5px solid ${colorByRole.error}`,
          background: colorByRole.lightBackground
        },
        '& .cm-diagnostic': {
          padding: '3px 8px'
        }
      },
      { dark: false }
    );

    syntaxHighlighting(HighlightStyle.define([
      {
        tag: [ tags.macroName, tags.variableName ],
        color: colors.waterBlue
      },
      {
        tag: [ tags.special(tags.bracket) ],
        color: colors.waterBlue,
        fontWeight: 'bold'
      },
      {
        tag: [ tags.color, tags.name, tags.definition(tags.name), tags.constant(tags.name), tags.standard(tags.name), tags.propertyName, ],
        color: colors.deepBlue
      },
      {
        tag: [ tags.definition(tags.variableName), tags.function(tags.variableName), tags.function(tags.propertyName) ],
        color: colors.brightBlue,
      },
      { tag: [ tags.labelName ], color: colors.orangeBrown },
      {
        tag: [ tags.annotation ],
        color: colorByRole.invalid
      },
      {
        tag: [ tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace, tags.atom, tags.bool, tags.special(tags.variableName) ],
        color: colors.red
      },
      {
        tag: [ tags.typeName, tags.className, tags.attributeName ],
        color: colors.lila
      },
      {
        tag: [ tags.operator, tags.operatorKeyword, tags.tagName, tags.keyword ],
        color: colors.purple
      },
      {
        tag: [ tags.angleBracket, tags.squareBracket, tags.brace, tags.separator, tags.punctuation ],
        color: colors.midGrey
      },
      {
        tag: [ tags.regexp ],
        color: colors.deepBlue
      },
      {
        tag: [ tags.quote ],
        color: colors.darkGrey
      },
      { tag: [ tags.string, tags.character, tags.deleted ], color: colors.orangeBrown },
      {
        tag: tags.link,
        color: colors.mossGreen,
        textDecoration: 'underline',
        textUnderlinePosition: 'under'
      },
      {
        tag: [ tags.url, tags.escape, tags.special(tags.string) ],
        color: colors.red
      },
      { tag: [ tags.meta ], color: colors.iceBlue },
      { tag: [ tags.comment ], color: colors.midGrey, fontStyle: 'italic' },
      { tag: tags.strong, fontWeight: 'bold', color: colors.deepBlue },
      { tag: tags.emphasis, fontStyle: 'italic', color: colors.deepBlue },
      { tag: tags.strikethrough, textDecoration: 'line-through' },
      { tag: tags.heading, fontWeight: 'bold', color: colors.midGray },
      { tag: tags.special(tags.heading1), fontWeight: 'bold', color: colors.darkGrey },
      {
        tag: [ tags.heading1, tags.heading2, tags.heading3, tags.heading4 ],
        fontWeight: 'bold',
        color: colors.midGrey
      },
      { tag: [ tags.heading5, tags.heading6, tags.processingInstruction, tags.inserted ], color: colors.grey },
      {
        tag: [ tags.contentSeparator ],
        color: colors.yellow
      },
      { tag: tags.invalid, color: colors.midGrey, borderBottom: `1px dotted ${colorByRole.invalid}` }
    ]));

    const ivory = '#abb2bf',
          peach = '#f07178',
          stone = '#7d8799',
          invalid = '#ffffff',
          pastelYellow = '#fffce1',
          pastelOrange = '#ec9e6f',
          raisinBlack = '#21252b',
          highlightBackground = 'rgba(0, 0, 0, 0.5)',
          background = '#292d3e',
          tooltipBackground = '#353a42',
          selection = 'rgba(128, 203, 196, 0.2)',
          cursor = '#ffcc00';

    const urlHash = '%23';
    const warningColorHex = 'fff890';
    const errorColor = 'red';
    const warningBackgroundColor = '#281e16';
    const errorBackgroundColor = '#281616';

    EditorView.theme(
      {
        '&': {
          color: '#ffffff',
          backgroundColor: background
        },
        '.cm-content': {
          caretColor: cursor
        },
        '&.cm-focused .cm-cursor': {
          borderLeftColor: cursor
        },
        '&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection':
          { backgroundColor: selection },
        '.cm-panels': { backgroundColor: raisinBlack, color: '#ffffff' },
        '.cm-panels.cm-panels-top': { borderBottom: '2px solid black' },
        '.cm-panels.cm-panels-bottom': { borderTop: '2px solid black' },
        '.cm-searchMatch': {
          backgroundColor: '#72a1ff59',
          outline: '1px solid #457dff'
        },
        '.cm-searchMatch.cm-searchMatch-selected': {
          backgroundColor: '#6199ff2f'
        },
        '.cm-activeLine': { backgroundColor: highlightBackground },
        '.cm-selectionMatch': { backgroundColor: '#aafe661a' },
        '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
          backgroundColor: '#bad0f847',
          outline: '1px solid #515a6b'
        },
        '.cm-gutters': {
          background: '#292d3e',
          color: '#676e95',
          border: 'none',
          padding: '0 5px'
        },
        '.cm-activeLineGutter': {
          backgroundColor: highlightBackground
        },
        '.cm-foldPlaceholder': {
          backgroundColor: 'transparent',
          border: 'none',
          color: '#ddd'
        },
        '.cm-tooltip': {
          border: 'none',
          backgroundColor: tooltipBackground
        },
        '.cm-tooltip .cm-tooltip-arrow:before': {
          borderTopColor: 'transparent',
          borderBottomColor: 'transparent'
        },
        '.cm-tooltip .cm-tooltip-arrow:after': {
          borderTopColor: tooltipBackground,
          borderBottomColor: tooltipBackground
        },
        '.cm-tooltip-autocomplete': {
          '& > ul > li[aria-selected]': {
            backgroundColor: highlightBackground,
            color: ivory
          }
        },
        '& .cm-lintRange.cm-lintRange-warning::after': {
          backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${urlHash + warningColorHex}' fill='none' stroke-width='1.2'/></svg>")`,
        },
        '& .cm-lintRange.cm-lintRange-error::after': {
          backgroundImage: `url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='6' height='3'><path d='m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0' stroke='${errorColor}' fill='none' stroke-width='1.2'/></svg>")`,
        },
        '& .cm-diagnostic-warning': {
          borderLeft: `5px solid #${warningColorHex}`,
          background: warningBackgroundColor
        },
        '& .cm-diagnostic-error': {
          borderLeft: `5px solid ${errorColor}`,
          background: errorBackgroundColor
        },
        '& .cm-diagnostic': {
          borderRadius: '2px',
          padding: '3px 8px'
        }
      },
      { dark: true }
    );

    syntaxHighlighting(HighlightStyle.define([

      // Markdown headings
      { tag: tags.heading1, color: pastelYellow },
      { tag: tags.heading2, color: pastelYellow },
      { tag: tags.heading3, color: pastelYellow },
      { tag: tags.heading4, color: pastelYellow },
      { tag: tags.heading5, color: pastelYellow },
      { tag: tags.heading6, color: pastelYellow },

      // Feelers
      { tag: tags.special(tags.bracket), color: pastelOrange, fontWeight: 'bold' },

      // Everything else
      { tag: tags.keyword, color: '#c792ea' },
      { tag: tags.operator, color: '#89ddff' },
      { tag: tags.special(tags.variableName), color: '#eeffff' },
      { tag: tags.typeName, color: '#f07178' },
      { tag: tags.atom, color: '#f78c6c' },
      { tag: tags.number, color: '#ff5370' },
      { tag: tags.bool, color: '#ff5370' },
      { tag: tags.definition(tags.variableName), color: '#82aaff' },
      { tag: tags.string, color: '#c3e88d' },
      { tag: tags.comment, color: stone },
      { tag: tags.tagName, color: '#ff5370' },
      { tag: tags.bracket, color: '#a2a1a4' },
      { tag: tags.meta, color: '#ffcb6b' },
      { tag: tags.special(tags.string), color: peach },
      { tag: tags.propertyName, color: pastelOrange },
      { tag: tags.variableName, color: pastelOrange },
      { tag: tags.attributeName, color: peach },
      { tag: tags.className, color: peach },
      { tag: tags.invalid, color: invalid }
    ]));

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const Feel = 1,
      FeelBlock = 2,
      SimpleTextBlock = 3;

    /* global console */

    const CHAR_TABLE = {
      '{': 123,
      '}': 125
    };

    const isClosingFeelScope = (input, offset = 0) => {

      const isReadingCloseCurrent = input.peek(offset) === CHAR_TABLE['}'];
      const isReadingCloseAhead = input.peek(offset + 1) === CHAR_TABLE['}'];

      const isReadingClose = isReadingCloseCurrent && isReadingCloseAhead;

      return isReadingClose || input.peek(offset) === -1;

    };

    const feelBlock = new ExternalTokenizer((input, stack) => {

      let lookAhead = 0;

      // check if we haven't reached the end of a templating tag
      while (!isClosingFeelScope(input, lookAhead)) { lookAhead++; }

      if (lookAhead > 0) {
        input.advance(lookAhead);
        input.acceptToken(FeelBlock);
      }

    });

    const isClosingTextScope = (input, offset = 0) => {
      const isReadingOpenCurrent = input.peek(offset) === CHAR_TABLE['{'];
      const isReadingOpenAhead = input.peek(offset + 1) === CHAR_TABLE['{'];

      const isReadOpen = isReadingOpenCurrent && isReadingOpenAhead;

      return isReadOpen || input.peek(offset) === -1;
    };


    const simpleTextBlock = new ExternalTokenizer((input, stack) => {

      let lookAhead = 0;

      // check if we haven't reached the start of a templating tag
      while (!isClosingTextScope(input, lookAhead)) { lookAhead++; }

      if (lookAhead > 0) {
        input.advance(lookAhead);
        input.acceptToken(SimpleTextBlock);
      }

    });

    // Anytime this tokenizer is run, simply tag the rest of the input as FEEL
    const feel = new ExternalTokenizer((input, stack) => {

      let lookAhead = 0;

      while (input.peek(lookAhead) !== -1) { lookAhead++; }

      if (lookAhead > 0) {
        input.advance(lookAhead);
        input.acceptToken(Feel);
      }

    });

    const feelersHighlighting = styleTags({
      ConditionalSpanner: tags.special(tags.bracket),
      ConditionalSpannerClose: tags.special(tags.bracket),
      ConditionalSpannerCloseNl: tags.special(tags.bracket),
      LoopSpanner: tags.special(tags.bracket),
      LoopSpannerClose: tags.special(tags.bracket),
      LoopSpannerCloseNl: tags.special(tags.bracket),
      EmptyInsert: tags.special(tags.bracket),
      Insert: tags.special(tags.bracket),
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser = LRParser.deserialize({
      version: 14,
      states: "$bOQOaOOOfOXO'#CbOOO`'#Cm'#CmOqOWO'#CcOvOWO'#CfOOO`'#Cp'#CpOOO`'#Ci'#CiO{OaO'#ClO!jOSOOQOOOOOO!oOPO,58{O!tOXO,58|OOO`,58|,58|O!|OQO,58}O#ROQO,59QOOO`-E6g-E6gOOO`1G.g1G.gO#WOPO1G.gOOO`1G.h1G.hO#]OaO1G.iO#qOaO1G.lOOO`7+$R7+$RO$VOPO7+$TO$_OPO7+$WOOO`<<Go<<GoOOO`<<Gr<<Gr",
      stateData: "$g~ORUO_WObPOeROgSO^`P~OQYO_ZOc[O~OQ]O~OQ^O~ORUObPOeROgSO^`XW`XX`XZ`X[`X~OPXO~Oc`O~OQaOcbO~OfcO~OfdO~OceO~ORUObPOeROgSOW`PX`P~ORUObPOeROgSOZ`P[`P~OWhOXhO~OZiO[iO~O",
      goto: "!ZePPPPPfflPPlPPrPPz!TPP!TXQOVcdXTOVcdUVOcdR_VQXOQfcRgdXUOVcd",
      nodeNames: "⚠ Feel FeelBlock SimpleTextBlock Feelers Insert EmptyInsert ConditionalSpanner ConditionalSpannerClose ConditionalSpannerCloseNl LoopSpanner LoopSpannerClose LoopSpannerCloseNl",
      maxTerm: 23,
      propSources: [feelersHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 1,
      tokenData: "%X~RR!_!`[#o#pa#q#r$r~aO_~~dP#o#pg~lQb~str!P!Q!{~uQ#]#^{#`#a!^~!OP#Y#Z!R~!UPpq!X~!^Oe~~!aP#c#d!d~!gP#c#d!j~!mP#d#e!p~!sPpq!v~!{Og~~#OQ#]#^#U#`#a#u~#XP#Y#Z#[~#_P#q#r#b~#eP#q#r#h~#mPW~YZ#p~#uOX~~#xP#c#d#{~$OP#c#d$R~$UP#d#e$X~$[P#q#r$_~$bP#q#r$e~$jPZ~YZ$m~$rO[~R$uP#q#r$xR%PPcPfQYZ%SQ%XOfQ",
      tokenizers: [0, 1, feel, feelBlock, simpleTextBlock],
      topRules: {"Feelers":[0,4]},
      tokenPrec: 0
    });

    function buildSimpleTree(parseTree, templateString) {

      const stack = [ { children: [] } ];
      const isLeafNode = (node) => [ 'SimpleTextBlock', 'Feel', 'FeelBlock' ].includes(node.type.name);

      parseTree.iterate({
        enter: (node, pos, type) => {

          const nodeRepresentation = {
            name: node.type.name,
            children: []
          };

          if (isLeafNode(node)) {
            nodeRepresentation.content = templateString.slice(node.from, node.to);
          }

          stack.push(nodeRepresentation);
        },
        leave: (node, pos, type) => {
          const result = stack.pop();
          const parent = stack[stack.length - 1];
          result.parent = parent;
          parent.children.push(result);
        }
      });

      return stack[0].children[0];
    }

    /**
     * @typedef {object} EvaluationOptions
     * @property {boolean} [debug=false] - whether to enable debug mode, which displays errors inline instead of throwing them
     * @property {function} [buildDebugString=(e) => `{{ ${e.message.toLowerCase()} }}`] - function that takes an error and returns the string to display in debug mode
     * @property {boolean} [strict=false] - whether to expect strict data types out of our FEEL expression, e.g. boolean for conditionals
     */

    /**
     * @param {string} templateString - the template string to evaluate
     * @param {object} [context={}] - the context object to evaluate the template string against
     * @param {EvaluationOptions} [options={}] - options to configure the evaluation
     * @return {string} the evaluated template string
     */
    const evaluate = (templateString, context = {}, options = {}) => {

      const {
        debug = false,
        buildDebugString = (e) => `{{ ${e.message.toLowerCase()} }}`,
        strict = false
      } = options;

      const parseTree = parser.parse(templateString);

      const simpleTreeRoot = buildSimpleTree(parseTree, templateString);

      const evaluateNode = buildNodeEvaluator(debug, buildDebugString, strict);

      return evaluateNode(simpleTreeRoot, enhanceContext(context, null));

    };

    const buildNodeEvaluator = (debug, buildDebugString, strict) => {

      const errorHandler = (error) => {

        if (debug) {
          return buildDebugString(error);
        }

        throw error;
      };

      const evaluateNodeValue = (node, context = {}) => {

        switch (node.name) {

        case 'SimpleTextBlock':
          return node.content;

        case 'Insert': {
          const feel = node.children[0].content;

          try {
            return evaluate$1(feel, context);
          }
          catch {
            return errorHandler(new Error(`FEEL expression ${feel} couldn't be evaluated`));
          }
        }

        case 'EmptyInsert':
          return '';

        case 'Feel':
        case 'FeelBlock': {
          try {
            return evaluate$1(node.content, context);
          }
          catch {
            return errorHandler(new Error(`FEEL expression ${node.content} couldn't be evaluated`));
          }
        }

        case 'Feelers':
          return node.children.map(child => evaluateNode(child, context)).join('');

        case 'ConditionalSpanner': {
          const feel = node.children[0].content;
          let shouldRender;

          try {
            shouldRender = evaluate$1(feel, context);
          }
          catch {
            return errorHandler(new Error(`FEEL expression ${feel} couldn't be evaluated`));
          }

          if (strict && typeof(shouldRender) !== 'boolean') {
            return errorHandler(new Error(`FEEL expression ${feel} expected to evaluate to a boolean`));
          }

          if (shouldRender) {
            const children = node.children.slice(1, node.children.length - 1);
            const innerRender = children.map(child => evaluateNode(child, context)).join('');

            const closeNode = node.children[node.children.length - 1];
            const shouldAddNewline = closeNode.name.endsWith('Nl') && !innerRender.endsWith('\n');

            return innerRender + (shouldAddNewline ? '\n' : '');
          }

          return '';
        }

        case 'LoopSpanner': {
          const feel = node.children[0].content;
          let loopArray;

          try {
            loopArray = evaluate$1(feel, context);
          }
          catch {
            return errorHandler(new Error(`FEEL expression ${feel} couldn't be evaluated`));
          }

          if (!Array.isArray(loopArray)) {

            if (strict) {
              return errorHandler(new Error(`FEEL expression ${feel} expected to evaluate to an array`));
            }

            // if not strict, we treat undefined/null as an empty array
            else if (loopArray === undefined || loopArray === null) {
              loopArray = [];
            }

            // if not strict, we treat a single item as an array with one item
            else {
              loopArray = [ loopArray ];
            }

          }

          const childrenToLoop = node.children.slice(1, node.children.length - 1);

          const evaluateChildren = (arrayElement, parentContext) => {
            const childContext = enhanceContext(arrayElement, parentContext);
            return childrenToLoop.map(child => evaluateNode(child, childContext)).join('');
          };

          const innerRender = loopArray.map(arrayElement => evaluateChildren(arrayElement, context)).join('');
          const closeNode = node.children[node.children.length - 1];
          const shouldAddNewline = closeNode.name.endsWith('Nl') && !innerRender.endsWith('\n');

          return innerRender + (shouldAddNewline ? '\n' : '');
        }}

      };

      const evaluateNode = (node, context = {}) => {
        try {
          return evaluateNodeValue(node, context);
        } catch (error) {
          return errorHandler(error);
        }
      };

      return evaluateNode;

    };

    const enhanceContext = (context, parentContext) => {

      if (typeof(context) === 'object') {
        return { this: context, parent: parentContext, ...context, _this_: context, _parent_: parentContext };
      }

      return { this: context, parent: parentContext, _this_: context, _parent_: parentContext };

    };

    /**
     * Create warnings for empty inserts in the given tree.
     *
     * @param {Tree} syntaxTree
     * @returns {LintMessage[]} array of syntax errors
     */
    function lintEmptyInserts(syntaxTree) {

      const lintMessages = [];

      syntaxTree.iterate({
        enter: node => {
          if (node.type.name === 'EmptyInsert') {
            lintMessages.push(
              {
                from: node.from,
                to: node.to,
                severity: 'warning',
                message: 'this insert is empty and will be ignored',
                type: 'emptyInsert'
              }
            );
          }
        }
      });

      return lintMessages;
    }

    /**
     * Generates lint messages for the given syntax tree.
     *
     * @param {Tree} syntaxTree
     * @returns {LintMessage[]} array of all lint messages
     */
    function lintAll(syntaxTree) {

      const lintMessages = [

        ...lintEmptyInserts(syntaxTree)
      ];

      return lintMessages;
    }


    /**
     * CodeMirror extension that provides linting for FEEL expressions.
     *
     * @param {EditorView} editorView
     * @returns {Source} CodeMirror linting source
     */
    function cmFeelersLinter() {
      const lintFeel = cmFeelLinter();
      return editorView => {

        const feelMessages = lintFeel(editorView);

        // don't lint if the Editor is empty
        if (editorView.state.doc.length === 0) {
          return [];
        }

        const tree = syntaxTree(editorView.state);

        const feelersMessages = lintAll(tree);

        return [
          ...feelMessages,
          ...feelersMessages.map(message => ({
            ...message,
            source: 'feelers linter'
          }))
        ];
      };
    }

    linter(cmFeelersLinter());

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var showdown$1 = {exports: {}};

    (function (module) {
    	(function(){
    	/**
    	 * Created by Tivie on 13-07-2015.
    	 */

    	function getDefaultOpts (simple) {

    	  var defaultOptions = {
    	    omitExtraWLInCodeBlocks: {
    	      defaultValue: false,
    	      describe: 'Omit the default extra whiteline added to code blocks',
    	      type: 'boolean'
    	    },
    	    noHeaderId: {
    	      defaultValue: false,
    	      describe: 'Turn on/off generated header id',
    	      type: 'boolean'
    	    },
    	    prefixHeaderId: {
    	      defaultValue: false,
    	      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
    	      type: 'string'
    	    },
    	    rawPrefixHeaderId: {
    	      defaultValue: false,
    	      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
    	      type: 'boolean'
    	    },
    	    ghCompatibleHeaderId: {
    	      defaultValue: false,
    	      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
    	      type: 'boolean'
    	    },
    	    rawHeaderId: {
    	      defaultValue: false,
    	      describe: 'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
    	      type: 'boolean'
    	    },
    	    headerLevelStart: {
    	      defaultValue: false,
    	      describe: 'The header blocks level start',
    	      type: 'integer'
    	    },
    	    parseImgDimensions: {
    	      defaultValue: false,
    	      describe: 'Turn on/off image dimension parsing',
    	      type: 'boolean'
    	    },
    	    simplifiedAutoLink: {
    	      defaultValue: false,
    	      describe: 'Turn on/off GFM autolink style',
    	      type: 'boolean'
    	    },
    	    excludeTrailingPunctuationFromURLs: {
    	      defaultValue: false,
    	      describe: 'Excludes trailing punctuation from links generated with autoLinking',
    	      type: 'boolean'
    	    },
    	    literalMidWordUnderscores: {
    	      defaultValue: false,
    	      describe: 'Parse midword underscores as literal underscores',
    	      type: 'boolean'
    	    },
    	    literalMidWordAsterisks: {
    	      defaultValue: false,
    	      describe: 'Parse midword asterisks as literal asterisks',
    	      type: 'boolean'
    	    },
    	    strikethrough: {
    	      defaultValue: false,
    	      describe: 'Turn on/off strikethrough support',
    	      type: 'boolean'
    	    },
    	    tables: {
    	      defaultValue: false,
    	      describe: 'Turn on/off tables support',
    	      type: 'boolean'
    	    },
    	    tablesHeaderId: {
    	      defaultValue: false,
    	      describe: 'Add an id to table headers',
    	      type: 'boolean'
    	    },
    	    ghCodeBlocks: {
    	      defaultValue: true,
    	      describe: 'Turn on/off GFM fenced code blocks support',
    	      type: 'boolean'
    	    },
    	    tasklists: {
    	      defaultValue: false,
    	      describe: 'Turn on/off GFM tasklist support',
    	      type: 'boolean'
    	    },
    	    smoothLivePreview: {
    	      defaultValue: false,
    	      describe: 'Prevents weird effects in live previews due to incomplete input',
    	      type: 'boolean'
    	    },
    	    smartIndentationFix: {
    	      defaultValue: false,
    	      describe: 'Tries to smartly fix indentation in es6 strings',
    	      type: 'boolean'
    	    },
    	    disableForced4SpacesIndentedSublists: {
    	      defaultValue: false,
    	      describe: 'Disables the requirement of indenting nested sublists by 4 spaces',
    	      type: 'boolean'
    	    },
    	    simpleLineBreaks: {
    	      defaultValue: false,
    	      describe: 'Parses simple line breaks as <br> (GFM Style)',
    	      type: 'boolean'
    	    },
    	    requireSpaceBeforeHeadingText: {
    	      defaultValue: false,
    	      describe: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',
    	      type: 'boolean'
    	    },
    	    ghMentions: {
    	      defaultValue: false,
    	      describe: 'Enables github @mentions',
    	      type: 'boolean'
    	    },
    	    ghMentionsLink: {
    	      defaultValue: 'https://github.com/{u}',
    	      describe: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
    	      type: 'string'
    	    },
    	    encodeEmails: {
    	      defaultValue: true,
    	      describe: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
    	      type: 'boolean'
    	    },
    	    openLinksInNewWindow: {
    	      defaultValue: false,
    	      describe: 'Open all links in new windows',
    	      type: 'boolean'
    	    },
    	    backslashEscapesHTMLTags: {
    	      defaultValue: false,
    	      describe: 'Support for HTML Tag escaping. ex: \<div>foo\</div>',
    	      type: 'boolean'
    	    },
    	    emoji: {
    	      defaultValue: false,
    	      describe: 'Enable emoji support. Ex: `this is a :smile: emoji`',
    	      type: 'boolean'
    	    },
    	    underline: {
    	      defaultValue: false,
    	      describe: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
    	      type: 'boolean'
    	    },
    	    ellipsis: {
    	      defaultValue: true,
    	      describe: 'Replaces three dots with the ellipsis unicode character',
    	      type: 'boolean'
    	    },
    	    completeHTMLDocument: {
    	      defaultValue: false,
    	      describe: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
    	      type: 'boolean'
    	    },
    	    metadata: {
    	      defaultValue: false,
    	      describe: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
    	      type: 'boolean'
    	    },
    	    splitAdjacentBlockquotes: {
    	      defaultValue: false,
    	      describe: 'Split adjacent blockquote blocks',
    	      type: 'boolean'
    	    }
    	  };
    	  if (simple === false) {
    	    return JSON.parse(JSON.stringify(defaultOptions));
    	  }
    	  var ret = {};
    	  for (var opt in defaultOptions) {
    	    if (defaultOptions.hasOwnProperty(opt)) {
    	      ret[opt] = defaultOptions[opt].defaultValue;
    	    }
    	  }
    	  return ret;
    	}

    	function allOptionsOn () {
    	  var options = getDefaultOpts(true),
    	      ret = {};
    	  for (var opt in options) {
    	    if (options.hasOwnProperty(opt)) {
    	      ret[opt] = true;
    	    }
    	  }
    	  return ret;
    	}

    	/**
    	 * Created by Tivie on 06-01-2015.
    	 */

    	// Private properties
    	var showdown = {},
    	    parsers = {},
    	    extensions = {},
    	    globalOptions = getDefaultOpts(true),
    	    setFlavor = 'vanilla',
    	    flavor = {
    	      github: {
    	        omitExtraWLInCodeBlocks:              true,
    	        simplifiedAutoLink:                   true,
    	        excludeTrailingPunctuationFromURLs:   true,
    	        literalMidWordUnderscores:            true,
    	        strikethrough:                        true,
    	        tables:                               true,
    	        tablesHeaderId:                       true,
    	        ghCodeBlocks:                         true,
    	        tasklists:                            true,
    	        disableForced4SpacesIndentedSublists: true,
    	        simpleLineBreaks:                     true,
    	        requireSpaceBeforeHeadingText:        true,
    	        ghCompatibleHeaderId:                 true,
    	        ghMentions:                           true,
    	        backslashEscapesHTMLTags:             true,
    	        emoji:                                true,
    	        splitAdjacentBlockquotes:             true
    	      },
    	      original: {
    	        noHeaderId:                           true,
    	        ghCodeBlocks:                         false
    	      },
    	      ghost: {
    	        omitExtraWLInCodeBlocks:              true,
    	        parseImgDimensions:                   true,
    	        simplifiedAutoLink:                   true,
    	        excludeTrailingPunctuationFromURLs:   true,
    	        literalMidWordUnderscores:            true,
    	        strikethrough:                        true,
    	        tables:                               true,
    	        tablesHeaderId:                       true,
    	        ghCodeBlocks:                         true,
    	        tasklists:                            true,
    	        smoothLivePreview:                    true,
    	        simpleLineBreaks:                     true,
    	        requireSpaceBeforeHeadingText:        true,
    	        ghMentions:                           false,
    	        encodeEmails:                         true
    	      },
    	      vanilla: getDefaultOpts(true),
    	      allOn: allOptionsOn()
    	    };

    	/**
    	 * helper namespace
    	 * @type {{}}
    	 */
    	showdown.helper = {};

    	/**
    	 * TODO LEGACY SUPPORT CODE
    	 * @type {{}}
    	 */
    	showdown.extensions = {};

    	/**
    	 * Set a global option
    	 * @static
    	 * @param {string} key
    	 * @param {*} value
    	 * @returns {showdown}
    	 */
    	showdown.setOption = function (key, value) {
    	  globalOptions[key] = value;
    	  return this;
    	};

    	/**
    	 * Get a global option
    	 * @static
    	 * @param {string} key
    	 * @returns {*}
    	 */
    	showdown.getOption = function (key) {
    	  return globalOptions[key];
    	};

    	/**
    	 * Get the global options
    	 * @static
    	 * @returns {{}}
    	 */
    	showdown.getOptions = function () {
    	  return globalOptions;
    	};

    	/**
    	 * Reset global options to the default values
    	 * @static
    	 */
    	showdown.resetOptions = function () {
    	  globalOptions = getDefaultOpts(true);
    	};

    	/**
    	 * Set the flavor showdown should use as default
    	 * @param {string} name
    	 */
    	showdown.setFlavor = function (name) {
    	  if (!flavor.hasOwnProperty(name)) {
    	    throw Error(name + ' flavor was not found');
    	  }
    	  showdown.resetOptions();
    	  var preset = flavor[name];
    	  setFlavor = name;
    	  for (var option in preset) {
    	    if (preset.hasOwnProperty(option)) {
    	      globalOptions[option] = preset[option];
    	    }
    	  }
    	};

    	/**
    	 * Get the currently set flavor
    	 * @returns {string}
    	 */
    	showdown.getFlavor = function () {
    	  return setFlavor;
    	};

    	/**
    	 * Get the options of a specified flavor. Returns undefined if the flavor was not found
    	 * @param {string} name Name of the flavor
    	 * @returns {{}|undefined}
    	 */
    	showdown.getFlavorOptions = function (name) {
    	  if (flavor.hasOwnProperty(name)) {
    	    return flavor[name];
    	  }
    	};

    	/**
    	 * Get the default options
    	 * @static
    	 * @param {boolean} [simple=true]
    	 * @returns {{}}
    	 */
    	showdown.getDefaultOptions = function (simple) {
    	  return getDefaultOpts(simple);
    	};

    	/**
    	 * Get or set a subParser
    	 *
    	 * subParser(name)       - Get a registered subParser
    	 * subParser(name, func) - Register a subParser
    	 * @static
    	 * @param {string} name
    	 * @param {function} [func]
    	 * @returns {*}
    	 */
    	showdown.subParser = function (name, func) {
    	  if (showdown.helper.isString(name)) {
    	    if (typeof func !== 'undefined') {
    	      parsers[name] = func;
    	    } else {
    	      if (parsers.hasOwnProperty(name)) {
    	        return parsers[name];
    	      } else {
    	        throw Error('SubParser named ' + name + ' not registered!');
    	      }
    	    }
    	  }
    	};

    	/**
    	 * Gets or registers an extension
    	 * @static
    	 * @param {string} name
    	 * @param {object|object[]|function=} ext
    	 * @returns {*}
    	 */
    	showdown.extension = function (name, ext) {

    	  if (!showdown.helper.isString(name)) {
    	    throw Error('Extension \'name\' must be a string');
    	  }

    	  name = showdown.helper.stdExtName(name);

    	  // Getter
    	  if (showdown.helper.isUndefined(ext)) {
    	    if (!extensions.hasOwnProperty(name)) {
    	      throw Error('Extension named ' + name + ' is not registered!');
    	    }
    	    return extensions[name];

    	    // Setter
    	  } else {
    	    // Expand extension if it's wrapped in a function
    	    if (typeof ext === 'function') {
    	      ext = ext();
    	    }

    	    // Ensure extension is an array
    	    if (!showdown.helper.isArray(ext)) {
    	      ext = [ext];
    	    }

    	    var validExtension = validate(ext, name);

    	    if (validExtension.valid) {
    	      extensions[name] = ext;
    	    } else {
    	      throw Error(validExtension.error);
    	    }
    	  }
    	};

    	/**
    	 * Gets all extensions registered
    	 * @returns {{}}
    	 */
    	showdown.getAllExtensions = function () {
    	  return extensions;
    	};

    	/**
    	 * Remove an extension
    	 * @param {string} name
    	 */
    	showdown.removeExtension = function (name) {
    	  delete extensions[name];
    	};

    	/**
    	 * Removes all extensions
    	 */
    	showdown.resetExtensions = function () {
    	  extensions = {};
    	};

    	/**
    	 * Validate extension
    	 * @param {array} extension
    	 * @param {string} name
    	 * @returns {{valid: boolean, error: string}}
    	 */
    	function validate (extension, name) {

    	  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',
    	      ret = {
    	        valid: true,
    	        error: ''
    	      };

    	  if (!showdown.helper.isArray(extension)) {
    	    extension = [extension];
    	  }

    	  for (var i = 0; i < extension.length; ++i) {
    	    var baseMsg = errMsg + ' sub-extension ' + i + ': ',
    	        ext = extension[i];
    	    if (typeof ext !== 'object') {
    	      ret.valid = false;
    	      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';
    	      return ret;
    	    }

    	    if (!showdown.helper.isString(ext.type)) {
    	      ret.valid = false;
    	      ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + ' given';
    	      return ret;
    	    }

    	    var type = ext.type = ext.type.toLowerCase();

    	    // normalize extension type
    	    if (type === 'language') {
    	      type = ext.type = 'lang';
    	    }

    	    if (type === 'html') {
    	      type = ext.type = 'output';
    	    }

    	    if (type !== 'lang' && type !== 'output' && type !== 'listener') {
    	      ret.valid = false;
    	      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"';
    	      return ret;
    	    }

    	    if (type === 'listener') {
    	      if (showdown.helper.isUndefined(ext.listeners)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + '. Extensions of type "listener" must have a property called "listeners"';
    	        return ret;
    	      }
    	    } else {
    	      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + type + ' extensions must define either a "regex" property or a "filter" method';
    	        return ret;
    	      }
    	    }

    	    if (ext.listeners) {
    	      if (typeof ext.listeners !== 'object') {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"listeners" property must be an object but ' + typeof ext.listeners + ' given';
    	        return ret;
    	      }
    	      for (var ln in ext.listeners) {
    	        if (ext.listeners.hasOwnProperty(ln)) {
    	          if (typeof ext.listeners[ln] !== 'function') {
    	            ret.valid = false;
    	            ret.error = baseMsg + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + ln +
    	              ' must be a function but ' + typeof ext.listeners[ln] + ' given';
    	            return ret;
    	          }
    	        }
    	      }
    	    }

    	    if (ext.filter) {
    	      if (typeof ext.filter !== 'function') {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + ' given';
    	        return ret;
    	      }
    	    } else if (ext.regex) {
    	      if (showdown.helper.isString(ext.regex)) {
    	        ext.regex = new RegExp(ext.regex, 'g');
    	      }
    	      if (!(ext.regex instanceof RegExp)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"regex" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';
    	        return ret;
    	      }
    	      if (showdown.helper.isUndefined(ext.replace)) {
    	        ret.valid = false;
    	        ret.error = baseMsg + '"regex" extensions must implement a replace string or function';
    	        return ret;
    	      }
    	    }
    	  }
    	  return ret;
    	}

    	/**
    	 * Validate extension
    	 * @param {object} ext
    	 * @returns {boolean}
    	 */
    	showdown.validateExtension = function (ext) {

    	  var validateExtension = validate(ext, null);
    	  if (!validateExtension.valid) {
    	    console.warn(validateExtension.error);
    	    return false;
    	  }
    	  return true;
    	};

    	/**
    	 * showdownjs helper functions
    	 */

    	if (!showdown.hasOwnProperty('helper')) {
    	  showdown.helper = {};
    	}

    	/**
    	 * Check if var is string
    	 * @static
    	 * @param {string} a
    	 * @returns {boolean}
    	 */
    	showdown.helper.isString = function (a) {
    	  return (typeof a === 'string' || a instanceof String);
    	};

    	/**
    	 * Check if var is a function
    	 * @static
    	 * @param {*} a
    	 * @returns {boolean}
    	 */
    	showdown.helper.isFunction = function (a) {
    	  var getType = {};
    	  return a && getType.toString.call(a) === '[object Function]';
    	};

    	/**
    	 * isArray helper function
    	 * @static
    	 * @param {*} a
    	 * @returns {boolean}
    	 */
    	showdown.helper.isArray = function (a) {
    	  return Array.isArray(a);
    	};

    	/**
    	 * Check if value is undefined
    	 * @static
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
    	 */
    	showdown.helper.isUndefined = function (value) {
    	  return typeof value === 'undefined';
    	};

    	/**
    	 * ForEach helper function
    	 * Iterates over Arrays and Objects (own properties only)
    	 * @static
    	 * @param {*} obj
    	 * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object
    	 */
    	showdown.helper.forEach = function (obj, callback) {
    	  // check if obj is defined
    	  if (showdown.helper.isUndefined(obj)) {
    	    throw new Error('obj param is required');
    	  }

    	  if (showdown.helper.isUndefined(callback)) {
    	    throw new Error('callback param is required');
    	  }

    	  if (!showdown.helper.isFunction(callback)) {
    	    throw new Error('callback param must be a function/closure');
    	  }

    	  if (typeof obj.forEach === 'function') {
    	    obj.forEach(callback);
    	  } else if (showdown.helper.isArray(obj)) {
    	    for (var i = 0; i < obj.length; i++) {
    	      callback(obj[i], i, obj);
    	    }
    	  } else if (typeof (obj) === 'object') {
    	    for (var prop in obj) {
    	      if (obj.hasOwnProperty(prop)) {
    	        callback(obj[prop], prop, obj);
    	      }
    	    }
    	  } else {
    	    throw new Error('obj does not seem to be an array or an iterable object');
    	  }
    	};

    	/**
    	 * Standardidize extension name
    	 * @static
    	 * @param {string} s extension name
    	 * @returns {string}
    	 */
    	showdown.helper.stdExtName = function (s) {
    	  return s.replace(/[_?*+\/\\.^-]/g, '').replace(/\s/g, '').toLowerCase();
    	};

    	function escapeCharactersCallback (wholeMatch, m1) {
    	  var charCodeToEscape = m1.charCodeAt(0);
    	  return '¨E' + charCodeToEscape + 'E';
    	}

    	/**
    	 * Callback used to escape characters when passing through String.replace
    	 * @static
    	 * @param {string} wholeMatch
    	 * @param {string} m1
    	 * @returns {string}
    	 */
    	showdown.helper.escapeCharactersCallback = escapeCharactersCallback;

    	/**
    	 * Escape characters in a string
    	 * @static
    	 * @param {string} text
    	 * @param {string} charsToEscape
    	 * @param {boolean} afterBackslash
    	 * @returns {XML|string|void|*}
    	 */
    	showdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {
    	  // First we have to escape the escape characters so that
    	  // we can build a character class out of them
    	  var regexString = '([' + charsToEscape.replace(/([\[\]\\])/g, '\\$1') + '])';

    	  if (afterBackslash) {
    	    regexString = '\\\\' + regexString;
    	  }

    	  var regex = new RegExp(regexString, 'g');
    	  text = text.replace(regex, escapeCharactersCallback);

    	  return text;
    	};

    	/**
    	 * Unescape HTML entities
    	 * @param txt
    	 * @returns {string}
    	 */
    	showdown.helper.unescapeHTMLEntities = function (txt) {

    	  return txt
    	    .replace(/&quot;/g, '"')
    	    .replace(/&lt;/g, '<')
    	    .replace(/&gt;/g, '>')
    	    .replace(/&amp;/g, '&');
    	};

    	var rgxFindMatchPos = function (str, left, right, flags) {
    	  var f = flags || '',
    	      g = f.indexOf('g') > -1,
    	      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),
    	      l = new RegExp(left, f.replace(/g/g, '')),
    	      pos = [],
    	      t, s, m, start, end;

    	  do {
    	    t = 0;
    	    while ((m = x.exec(str))) {
    	      if (l.test(m[0])) {
    	        if (!(t++)) {
    	          s = x.lastIndex;
    	          start = s - m[0].length;
    	        }
    	      } else if (t) {
    	        if (!--t) {
    	          end = m.index + m[0].length;
    	          var obj = {
    	            left: {start: start, end: s},
    	            match: {start: s, end: m.index},
    	            right: {start: m.index, end: end},
    	            wholeMatch: {start: start, end: end}
    	          };
    	          pos.push(obj);
    	          if (!g) {
    	            return pos;
    	          }
    	        }
    	      }
    	    }
    	  } while (t && (x.lastIndex = s));

    	  return pos;
    	};

    	/**
    	 * matchRecursiveRegExp
    	 *
    	 * (c) 2007 Steven Levithan <stevenlevithan.com>
    	 * MIT License
    	 *
    	 * Accepts a string to search, a left and right format delimiter
    	 * as regex patterns, and optional regex flags. Returns an array
    	 * of matches, allowing nested instances of left/right delimiters.
    	 * Use the "g" flag to return all matches, otherwise only the
    	 * first is returned. Be careful to ensure that the left and
    	 * right format delimiters produce mutually exclusive matches.
    	 * Backreferences are not supported within the right delimiter
    	 * due to how it is internally combined with the left delimiter.
    	 * When matching strings whose format delimiters are unbalanced
    	 * to the left or right, the output is intentionally as a
    	 * conventional regex library with recursion support would
    	 * produce, e.g. "<<x>" and "<x>>" both produce ["x"] when using
    	 * "<" and ">" as the delimiters (both strings contain a single,
    	 * balanced instance of "<x>").
    	 *
    	 * examples:
    	 * matchRecursiveRegExp("test", "\\(", "\\)")
    	 * returns: []
    	 * matchRecursiveRegExp("<t<<e>><s>>t<>", "<", ">", "g")
    	 * returns: ["t<<e>><s>", ""]
    	 * matchRecursiveRegExp("<div id=\"x\">test</div>", "<div\\b[^>]*>", "</div>", "gi")
    	 * returns: ["test"]
    	 */
    	showdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {

    	  var matchPos = rgxFindMatchPos (str, left, right, flags),
    	      results = [];

    	  for (var i = 0; i < matchPos.length; ++i) {
    	    results.push([
    	      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
    	      str.slice(matchPos[i].match.start, matchPos[i].match.end),
    	      str.slice(matchPos[i].left.start, matchPos[i].left.end),
    	      str.slice(matchPos[i].right.start, matchPos[i].right.end)
    	    ]);
    	  }
    	  return results;
    	};

    	/**
    	 *
    	 * @param {string} str
    	 * @param {string|function} replacement
    	 * @param {string} left
    	 * @param {string} right
    	 * @param {string} flags
    	 * @returns {string}
    	 */
    	showdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {

    	  if (!showdown.helper.isFunction(replacement)) {
    	    var repStr = replacement;
    	    replacement = function () {
    	      return repStr;
    	    };
    	  }

    	  var matchPos = rgxFindMatchPos(str, left, right, flags),
    	      finalStr = str,
    	      lng = matchPos.length;

    	  if (lng > 0) {
    	    var bits = [];
    	    if (matchPos[0].wholeMatch.start !== 0) {
    	      bits.push(str.slice(0, matchPos[0].wholeMatch.start));
    	    }
    	    for (var i = 0; i < lng; ++i) {
    	      bits.push(
    	        replacement(
    	          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
    	          str.slice(matchPos[i].match.start, matchPos[i].match.end),
    	          str.slice(matchPos[i].left.start, matchPos[i].left.end),
    	          str.slice(matchPos[i].right.start, matchPos[i].right.end)
    	        )
    	      );
    	      if (i < lng - 1) {
    	        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));
    	      }
    	    }
    	    if (matchPos[lng - 1].wholeMatch.end < str.length) {
    	      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));
    	    }
    	    finalStr = bits.join('');
    	  }
    	  return finalStr;
    	};

    	/**
    	 * Returns the index within the passed String object of the first occurrence of the specified regex,
    	 * starting the search at fromIndex. Returns -1 if the value is not found.
    	 *
    	 * @param {string} str string to search
    	 * @param {RegExp} regex Regular expression to search
    	 * @param {int} [fromIndex = 0] Index to start the search
    	 * @returns {Number}
    	 * @throws InvalidArgumentError
    	 */
    	showdown.helper.regexIndexOf = function (str, regex, fromIndex) {
    	  if (!showdown.helper.isString(str)) {
    	    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
    	  }
    	  if (regex instanceof RegExp === false) {
    	    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';
    	  }
    	  var indexOf = str.substring(fromIndex || 0).search(regex);
    	  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;
    	};

    	/**
    	 * Splits the passed string object at the defined index, and returns an array composed of the two substrings
    	 * @param {string} str string to split
    	 * @param {int} index index to split string at
    	 * @returns {[string,string]}
    	 * @throws InvalidArgumentError
    	 */
    	showdown.helper.splitAtIndex = function (str, index) {
    	  if (!showdown.helper.isString(str)) {
    	    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
    	  }
    	  return [str.substring(0, index), str.substring(index)];
    	};

    	/**
    	 * Obfuscate an e-mail address through the use of Character Entities,
    	 * transforming ASCII characters into their equivalent decimal or hex entities.
    	 *
    	 * Since it has a random component, subsequent calls to this function produce different results
    	 *
    	 * @param {string} mail
    	 * @returns {string}
    	 */
    	showdown.helper.encodeEmailAddress = function (mail) {
    	  var encode = [
    	    function (ch) {
    	      return '&#' + ch.charCodeAt(0) + ';';
    	    },
    	    function (ch) {
    	      return '&#x' + ch.charCodeAt(0).toString(16) + ';';
    	    },
    	    function (ch) {
    	      return ch;
    	    }
    	  ];

    	  mail = mail.replace(/./g, function (ch) {
    	    if (ch === '@') {
    	      // this *must* be encoded. I insist.
    	      ch = encode[Math.floor(Math.random() * 2)](ch);
    	    } else {
    	      var r = Math.random();
    	      // roughly 10% raw, 45% hex, 45% dec
    	      ch = (
    	        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)
    	      );
    	    }
    	    return ch;
    	  });

    	  return mail;
    	};

    	/**
    	 *
    	 * @param str
    	 * @param targetLength
    	 * @param padString
    	 * @returns {string}
    	 */
    	showdown.helper.padEnd = function padEnd (str, targetLength, padString) {
    	  /*jshint bitwise: false*/
    	  // eslint-disable-next-line space-infix-ops
    	  targetLength = targetLength>>0; //floor if number or convert non-number to 0;
    	  /*jshint bitwise: true*/
    	  padString = String(padString || ' ');
    	  if (str.length > targetLength) {
    	    return String(str);
    	  } else {
    	    targetLength = targetLength - str.length;
    	    if (targetLength > padString.length) {
    	      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
    	    }
    	    return String(str) + padString.slice(0,targetLength);
    	  }
    	};

    	/**
    	 * POLYFILLS
    	 */
    	// use this instead of builtin is undefined for IE8 compatibility
    	if (typeof (console) === 'undefined') {
    	  console = {
    	    warn: function (msg) {
    	      alert(msg);
    	    },
    	    log: function (msg) {
    	      alert(msg);
    	    },
    	    error: function (msg) {
    	      throw msg;
    	    }
    	  };
    	}

    	/**
    	 * Common regexes.
    	 * We declare some common regexes to improve performance
    	 */
    	showdown.helper.regexes = {
    	  asteriskDashAndColon: /([*_:~])/g
    	};

    	/**
    	 * EMOJIS LIST
    	 */
    	showdown.helper.emojis = {
    	  '+1':'\ud83d\udc4d',
    	  '-1':'\ud83d\udc4e',
    	  '100':'\ud83d\udcaf',
    	  '1234':'\ud83d\udd22',
    	  '1st_place_medal':'\ud83e\udd47',
    	  '2nd_place_medal':'\ud83e\udd48',
    	  '3rd_place_medal':'\ud83e\udd49',
    	  '8ball':'\ud83c\udfb1',
    	  'a':'\ud83c\udd70\ufe0f',
    	  'ab':'\ud83c\udd8e',
    	  'abc':'\ud83d\udd24',
    	  'abcd':'\ud83d\udd21',
    	  'accept':'\ud83c\ude51',
    	  'aerial_tramway':'\ud83d\udea1',
    	  'airplane':'\u2708\ufe0f',
    	  'alarm_clock':'\u23f0',
    	  'alembic':'\u2697\ufe0f',
    	  'alien':'\ud83d\udc7d',
    	  'ambulance':'\ud83d\ude91',
    	  'amphora':'\ud83c\udffa',
    	  'anchor':'\u2693\ufe0f',
    	  'angel':'\ud83d\udc7c',
    	  'anger':'\ud83d\udca2',
    	  'angry':'\ud83d\ude20',
    	  'anguished':'\ud83d\ude27',
    	  'ant':'\ud83d\udc1c',
    	  'apple':'\ud83c\udf4e',
    	  'aquarius':'\u2652\ufe0f',
    	  'aries':'\u2648\ufe0f',
    	  'arrow_backward':'\u25c0\ufe0f',
    	  'arrow_double_down':'\u23ec',
    	  'arrow_double_up':'\u23eb',
    	  'arrow_down':'\u2b07\ufe0f',
    	  'arrow_down_small':'\ud83d\udd3d',
    	  'arrow_forward':'\u25b6\ufe0f',
    	  'arrow_heading_down':'\u2935\ufe0f',
    	  'arrow_heading_up':'\u2934\ufe0f',
    	  'arrow_left':'\u2b05\ufe0f',
    	  'arrow_lower_left':'\u2199\ufe0f',
    	  'arrow_lower_right':'\u2198\ufe0f',
    	  'arrow_right':'\u27a1\ufe0f',
    	  'arrow_right_hook':'\u21aa\ufe0f',
    	  'arrow_up':'\u2b06\ufe0f',
    	  'arrow_up_down':'\u2195\ufe0f',
    	  'arrow_up_small':'\ud83d\udd3c',
    	  'arrow_upper_left':'\u2196\ufe0f',
    	  'arrow_upper_right':'\u2197\ufe0f',
    	  'arrows_clockwise':'\ud83d\udd03',
    	  'arrows_counterclockwise':'\ud83d\udd04',
    	  'art':'\ud83c\udfa8',
    	  'articulated_lorry':'\ud83d\ude9b',
    	  'artificial_satellite':'\ud83d\udef0',
    	  'astonished':'\ud83d\ude32',
    	  'athletic_shoe':'\ud83d\udc5f',
    	  'atm':'\ud83c\udfe7',
    	  'atom_symbol':'\u269b\ufe0f',
    	  'avocado':'\ud83e\udd51',
    	  'b':'\ud83c\udd71\ufe0f',
    	  'baby':'\ud83d\udc76',
    	  'baby_bottle':'\ud83c\udf7c',
    	  'baby_chick':'\ud83d\udc24',
    	  'baby_symbol':'\ud83d\udebc',
    	  'back':'\ud83d\udd19',
    	  'bacon':'\ud83e\udd53',
    	  'badminton':'\ud83c\udff8',
    	  'baggage_claim':'\ud83d\udec4',
    	  'baguette_bread':'\ud83e\udd56',
    	  'balance_scale':'\u2696\ufe0f',
    	  'balloon':'\ud83c\udf88',
    	  'ballot_box':'\ud83d\uddf3',
    	  'ballot_box_with_check':'\u2611\ufe0f',
    	  'bamboo':'\ud83c\udf8d',
    	  'banana':'\ud83c\udf4c',
    	  'bangbang':'\u203c\ufe0f',
    	  'bank':'\ud83c\udfe6',
    	  'bar_chart':'\ud83d\udcca',
    	  'barber':'\ud83d\udc88',
    	  'baseball':'\u26be\ufe0f',
    	  'basketball':'\ud83c\udfc0',
    	  'basketball_man':'\u26f9\ufe0f',
    	  'basketball_woman':'\u26f9\ufe0f&zwj;\u2640\ufe0f',
    	  'bat':'\ud83e\udd87',
    	  'bath':'\ud83d\udec0',
    	  'bathtub':'\ud83d\udec1',
    	  'battery':'\ud83d\udd0b',
    	  'beach_umbrella':'\ud83c\udfd6',
    	  'bear':'\ud83d\udc3b',
    	  'bed':'\ud83d\udecf',
    	  'bee':'\ud83d\udc1d',
    	  'beer':'\ud83c\udf7a',
    	  'beers':'\ud83c\udf7b',
    	  'beetle':'\ud83d\udc1e',
    	  'beginner':'\ud83d\udd30',
    	  'bell':'\ud83d\udd14',
    	  'bellhop_bell':'\ud83d\udece',
    	  'bento':'\ud83c\udf71',
    	  'biking_man':'\ud83d\udeb4',
    	  'bike':'\ud83d\udeb2',
    	  'biking_woman':'\ud83d\udeb4&zwj;\u2640\ufe0f',
    	  'bikini':'\ud83d\udc59',
    	  'biohazard':'\u2623\ufe0f',
    	  'bird':'\ud83d\udc26',
    	  'birthday':'\ud83c\udf82',
    	  'black_circle':'\u26ab\ufe0f',
    	  'black_flag':'\ud83c\udff4',
    	  'black_heart':'\ud83d\udda4',
    	  'black_joker':'\ud83c\udccf',
    	  'black_large_square':'\u2b1b\ufe0f',
    	  'black_medium_small_square':'\u25fe\ufe0f',
    	  'black_medium_square':'\u25fc\ufe0f',
    	  'black_nib':'\u2712\ufe0f',
    	  'black_small_square':'\u25aa\ufe0f',
    	  'black_square_button':'\ud83d\udd32',
    	  'blonde_man':'\ud83d\udc71',
    	  'blonde_woman':'\ud83d\udc71&zwj;\u2640\ufe0f',
    	  'blossom':'\ud83c\udf3c',
    	  'blowfish':'\ud83d\udc21',
    	  'blue_book':'\ud83d\udcd8',
    	  'blue_car':'\ud83d\ude99',
    	  'blue_heart':'\ud83d\udc99',
    	  'blush':'\ud83d\ude0a',
    	  'boar':'\ud83d\udc17',
    	  'boat':'\u26f5\ufe0f',
    	  'bomb':'\ud83d\udca3',
    	  'book':'\ud83d\udcd6',
    	  'bookmark':'\ud83d\udd16',
    	  'bookmark_tabs':'\ud83d\udcd1',
    	  'books':'\ud83d\udcda',
    	  'boom':'\ud83d\udca5',
    	  'boot':'\ud83d\udc62',
    	  'bouquet':'\ud83d\udc90',
    	  'bowing_man':'\ud83d\ude47',
    	  'bow_and_arrow':'\ud83c\udff9',
    	  'bowing_woman':'\ud83d\ude47&zwj;\u2640\ufe0f',
    	  'bowling':'\ud83c\udfb3',
    	  'boxing_glove':'\ud83e\udd4a',
    	  'boy':'\ud83d\udc66',
    	  'bread':'\ud83c\udf5e',
    	  'bride_with_veil':'\ud83d\udc70',
    	  'bridge_at_night':'\ud83c\udf09',
    	  'briefcase':'\ud83d\udcbc',
    	  'broken_heart':'\ud83d\udc94',
    	  'bug':'\ud83d\udc1b',
    	  'building_construction':'\ud83c\udfd7',
    	  'bulb':'\ud83d\udca1',
    	  'bullettrain_front':'\ud83d\ude85',
    	  'bullettrain_side':'\ud83d\ude84',
    	  'burrito':'\ud83c\udf2f',
    	  'bus':'\ud83d\ude8c',
    	  'business_suit_levitating':'\ud83d\udd74',
    	  'busstop':'\ud83d\ude8f',
    	  'bust_in_silhouette':'\ud83d\udc64',
    	  'busts_in_silhouette':'\ud83d\udc65',
    	  'butterfly':'\ud83e\udd8b',
    	  'cactus':'\ud83c\udf35',
    	  'cake':'\ud83c\udf70',
    	  'calendar':'\ud83d\udcc6',
    	  'call_me_hand':'\ud83e\udd19',
    	  'calling':'\ud83d\udcf2',
    	  'camel':'\ud83d\udc2b',
    	  'camera':'\ud83d\udcf7',
    	  'camera_flash':'\ud83d\udcf8',
    	  'camping':'\ud83c\udfd5',
    	  'cancer':'\u264b\ufe0f',
    	  'candle':'\ud83d\udd6f',
    	  'candy':'\ud83c\udf6c',
    	  'canoe':'\ud83d\udef6',
    	  'capital_abcd':'\ud83d\udd20',
    	  'capricorn':'\u2651\ufe0f',
    	  'car':'\ud83d\ude97',
    	  'card_file_box':'\ud83d\uddc3',
    	  'card_index':'\ud83d\udcc7',
    	  'card_index_dividers':'\ud83d\uddc2',
    	  'carousel_horse':'\ud83c\udfa0',
    	  'carrot':'\ud83e\udd55',
    	  'cat':'\ud83d\udc31',
    	  'cat2':'\ud83d\udc08',
    	  'cd':'\ud83d\udcbf',
    	  'chains':'\u26d3',
    	  'champagne':'\ud83c\udf7e',
    	  'chart':'\ud83d\udcb9',
    	  'chart_with_downwards_trend':'\ud83d\udcc9',
    	  'chart_with_upwards_trend':'\ud83d\udcc8',
    	  'checkered_flag':'\ud83c\udfc1',
    	  'cheese':'\ud83e\uddc0',
    	  'cherries':'\ud83c\udf52',
    	  'cherry_blossom':'\ud83c\udf38',
    	  'chestnut':'\ud83c\udf30',
    	  'chicken':'\ud83d\udc14',
    	  'children_crossing':'\ud83d\udeb8',
    	  'chipmunk':'\ud83d\udc3f',
    	  'chocolate_bar':'\ud83c\udf6b',
    	  'christmas_tree':'\ud83c\udf84',
    	  'church':'\u26ea\ufe0f',
    	  'cinema':'\ud83c\udfa6',
    	  'circus_tent':'\ud83c\udfaa',
    	  'city_sunrise':'\ud83c\udf07',
    	  'city_sunset':'\ud83c\udf06',
    	  'cityscape':'\ud83c\udfd9',
    	  'cl':'\ud83c\udd91',
    	  'clamp':'\ud83d\udddc',
    	  'clap':'\ud83d\udc4f',
    	  'clapper':'\ud83c\udfac',
    	  'classical_building':'\ud83c\udfdb',
    	  'clinking_glasses':'\ud83e\udd42',
    	  'clipboard':'\ud83d\udccb',
    	  'clock1':'\ud83d\udd50',
    	  'clock10':'\ud83d\udd59',
    	  'clock1030':'\ud83d\udd65',
    	  'clock11':'\ud83d\udd5a',
    	  'clock1130':'\ud83d\udd66',
    	  'clock12':'\ud83d\udd5b',
    	  'clock1230':'\ud83d\udd67',
    	  'clock130':'\ud83d\udd5c',
    	  'clock2':'\ud83d\udd51',
    	  'clock230':'\ud83d\udd5d',
    	  'clock3':'\ud83d\udd52',
    	  'clock330':'\ud83d\udd5e',
    	  'clock4':'\ud83d\udd53',
    	  'clock430':'\ud83d\udd5f',
    	  'clock5':'\ud83d\udd54',
    	  'clock530':'\ud83d\udd60',
    	  'clock6':'\ud83d\udd55',
    	  'clock630':'\ud83d\udd61',
    	  'clock7':'\ud83d\udd56',
    	  'clock730':'\ud83d\udd62',
    	  'clock8':'\ud83d\udd57',
    	  'clock830':'\ud83d\udd63',
    	  'clock9':'\ud83d\udd58',
    	  'clock930':'\ud83d\udd64',
    	  'closed_book':'\ud83d\udcd5',
    	  'closed_lock_with_key':'\ud83d\udd10',
    	  'closed_umbrella':'\ud83c\udf02',
    	  'cloud':'\u2601\ufe0f',
    	  'cloud_with_lightning':'\ud83c\udf29',
    	  'cloud_with_lightning_and_rain':'\u26c8',
    	  'cloud_with_rain':'\ud83c\udf27',
    	  'cloud_with_snow':'\ud83c\udf28',
    	  'clown_face':'\ud83e\udd21',
    	  'clubs':'\u2663\ufe0f',
    	  'cocktail':'\ud83c\udf78',
    	  'coffee':'\u2615\ufe0f',
    	  'coffin':'\u26b0\ufe0f',
    	  'cold_sweat':'\ud83d\ude30',
    	  'comet':'\u2604\ufe0f',
    	  'computer':'\ud83d\udcbb',
    	  'computer_mouse':'\ud83d\uddb1',
    	  'confetti_ball':'\ud83c\udf8a',
    	  'confounded':'\ud83d\ude16',
    	  'confused':'\ud83d\ude15',
    	  'congratulations':'\u3297\ufe0f',
    	  'construction':'\ud83d\udea7',
    	  'construction_worker_man':'\ud83d\udc77',
    	  'construction_worker_woman':'\ud83d\udc77&zwj;\u2640\ufe0f',
    	  'control_knobs':'\ud83c\udf9b',
    	  'convenience_store':'\ud83c\udfea',
    	  'cookie':'\ud83c\udf6a',
    	  'cool':'\ud83c\udd92',
    	  'policeman':'\ud83d\udc6e',
    	  'copyright':'\u00a9\ufe0f',
    	  'corn':'\ud83c\udf3d',
    	  'couch_and_lamp':'\ud83d\udecb',
    	  'couple':'\ud83d\udc6b',
    	  'couple_with_heart_woman_man':'\ud83d\udc91',
    	  'couple_with_heart_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc68',
    	  'couple_with_heart_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc69',
    	  'couplekiss_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68',
    	  'couplekiss_man_woman':'\ud83d\udc8f',
    	  'couplekiss_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc69',
    	  'cow':'\ud83d\udc2e',
    	  'cow2':'\ud83d\udc04',
    	  'cowboy_hat_face':'\ud83e\udd20',
    	  'crab':'\ud83e\udd80',
    	  'crayon':'\ud83d\udd8d',
    	  'credit_card':'\ud83d\udcb3',
    	  'crescent_moon':'\ud83c\udf19',
    	  'cricket':'\ud83c\udfcf',
    	  'crocodile':'\ud83d\udc0a',
    	  'croissant':'\ud83e\udd50',
    	  'crossed_fingers':'\ud83e\udd1e',
    	  'crossed_flags':'\ud83c\udf8c',
    	  'crossed_swords':'\u2694\ufe0f',
    	  'crown':'\ud83d\udc51',
    	  'cry':'\ud83d\ude22',
    	  'crying_cat_face':'\ud83d\ude3f',
    	  'crystal_ball':'\ud83d\udd2e',
    	  'cucumber':'\ud83e\udd52',
    	  'cupid':'\ud83d\udc98',
    	  'curly_loop':'\u27b0',
    	  'currency_exchange':'\ud83d\udcb1',
    	  'curry':'\ud83c\udf5b',
    	  'custard':'\ud83c\udf6e',
    	  'customs':'\ud83d\udec3',
    	  'cyclone':'\ud83c\udf00',
    	  'dagger':'\ud83d\udde1',
    	  'dancer':'\ud83d\udc83',
    	  'dancing_women':'\ud83d\udc6f',
    	  'dancing_men':'\ud83d\udc6f&zwj;\u2642\ufe0f',
    	  'dango':'\ud83c\udf61',
    	  'dark_sunglasses':'\ud83d\udd76',
    	  'dart':'\ud83c\udfaf',
    	  'dash':'\ud83d\udca8',
    	  'date':'\ud83d\udcc5',
    	  'deciduous_tree':'\ud83c\udf33',
    	  'deer':'\ud83e\udd8c',
    	  'department_store':'\ud83c\udfec',
    	  'derelict_house':'\ud83c\udfda',
    	  'desert':'\ud83c\udfdc',
    	  'desert_island':'\ud83c\udfdd',
    	  'desktop_computer':'\ud83d\udda5',
    	  'male_detective':'\ud83d\udd75\ufe0f',
    	  'diamond_shape_with_a_dot_inside':'\ud83d\udca0',
    	  'diamonds':'\u2666\ufe0f',
    	  'disappointed':'\ud83d\ude1e',
    	  'disappointed_relieved':'\ud83d\ude25',
    	  'dizzy':'\ud83d\udcab',
    	  'dizzy_face':'\ud83d\ude35',
    	  'do_not_litter':'\ud83d\udeaf',
    	  'dog':'\ud83d\udc36',
    	  'dog2':'\ud83d\udc15',
    	  'dollar':'\ud83d\udcb5',
    	  'dolls':'\ud83c\udf8e',
    	  'dolphin':'\ud83d\udc2c',
    	  'door':'\ud83d\udeaa',
    	  'doughnut':'\ud83c\udf69',
    	  'dove':'\ud83d\udd4a',
    	  'dragon':'\ud83d\udc09',
    	  'dragon_face':'\ud83d\udc32',
    	  'dress':'\ud83d\udc57',
    	  'dromedary_camel':'\ud83d\udc2a',
    	  'drooling_face':'\ud83e\udd24',
    	  'droplet':'\ud83d\udca7',
    	  'drum':'\ud83e\udd41',
    	  'duck':'\ud83e\udd86',
    	  'dvd':'\ud83d\udcc0',
    	  'e-mail':'\ud83d\udce7',
    	  'eagle':'\ud83e\udd85',
    	  'ear':'\ud83d\udc42',
    	  'ear_of_rice':'\ud83c\udf3e',
    	  'earth_africa':'\ud83c\udf0d',
    	  'earth_americas':'\ud83c\udf0e',
    	  'earth_asia':'\ud83c\udf0f',
    	  'egg':'\ud83e\udd5a',
    	  'eggplant':'\ud83c\udf46',
    	  'eight_pointed_black_star':'\u2734\ufe0f',
    	  'eight_spoked_asterisk':'\u2733\ufe0f',
    	  'electric_plug':'\ud83d\udd0c',
    	  'elephant':'\ud83d\udc18',
    	  'email':'\u2709\ufe0f',
    	  'end':'\ud83d\udd1a',
    	  'envelope_with_arrow':'\ud83d\udce9',
    	  'euro':'\ud83d\udcb6',
    	  'european_castle':'\ud83c\udff0',
    	  'european_post_office':'\ud83c\udfe4',
    	  'evergreen_tree':'\ud83c\udf32',
    	  'exclamation':'\u2757\ufe0f',
    	  'expressionless':'\ud83d\ude11',
    	  'eye':'\ud83d\udc41',
    	  'eye_speech_bubble':'\ud83d\udc41&zwj;\ud83d\udde8',
    	  'eyeglasses':'\ud83d\udc53',
    	  'eyes':'\ud83d\udc40',
    	  'face_with_head_bandage':'\ud83e\udd15',
    	  'face_with_thermometer':'\ud83e\udd12',
    	  'fist_oncoming':'\ud83d\udc4a',
    	  'factory':'\ud83c\udfed',
    	  'fallen_leaf':'\ud83c\udf42',
    	  'family_man_woman_boy':'\ud83d\udc6a',
    	  'family_man_boy':'\ud83d\udc68&zwj;\ud83d\udc66',
    	  'family_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_man_girl':'\ud83d\udc68&zwj;\ud83d\udc67',
    	  'family_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_man_man_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66',
    	  'family_man_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_man_man_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67',
    	  'family_man_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_man_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_man_woman_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_man_woman_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
    	  'family_man_woman_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_man_woman_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc66',
    	  'family_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc67',
    	  'family_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'family_woman_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66',
    	  'family_woman_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    	  'family_woman_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
    	  'family_woman_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    	  'family_woman_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    	  'fast_forward':'\u23e9',
    	  'fax':'\ud83d\udce0',
    	  'fearful':'\ud83d\ude28',
    	  'feet':'\ud83d\udc3e',
    	  'female_detective':'\ud83d\udd75\ufe0f&zwj;\u2640\ufe0f',
    	  'ferris_wheel':'\ud83c\udfa1',
    	  'ferry':'\u26f4',
    	  'field_hockey':'\ud83c\udfd1',
    	  'file_cabinet':'\ud83d\uddc4',
    	  'file_folder':'\ud83d\udcc1',
    	  'film_projector':'\ud83d\udcfd',
    	  'film_strip':'\ud83c\udf9e',
    	  'fire':'\ud83d\udd25',
    	  'fire_engine':'\ud83d\ude92',
    	  'fireworks':'\ud83c\udf86',
    	  'first_quarter_moon':'\ud83c\udf13',
    	  'first_quarter_moon_with_face':'\ud83c\udf1b',
    	  'fish':'\ud83d\udc1f',
    	  'fish_cake':'\ud83c\udf65',
    	  'fishing_pole_and_fish':'\ud83c\udfa3',
    	  'fist_raised':'\u270a',
    	  'fist_left':'\ud83e\udd1b',
    	  'fist_right':'\ud83e\udd1c',
    	  'flags':'\ud83c\udf8f',
    	  'flashlight':'\ud83d\udd26',
    	  'fleur_de_lis':'\u269c\ufe0f',
    	  'flight_arrival':'\ud83d\udeec',
    	  'flight_departure':'\ud83d\udeeb',
    	  'floppy_disk':'\ud83d\udcbe',
    	  'flower_playing_cards':'\ud83c\udfb4',
    	  'flushed':'\ud83d\ude33',
    	  'fog':'\ud83c\udf2b',
    	  'foggy':'\ud83c\udf01',
    	  'football':'\ud83c\udfc8',
    	  'footprints':'\ud83d\udc63',
    	  'fork_and_knife':'\ud83c\udf74',
    	  'fountain':'\u26f2\ufe0f',
    	  'fountain_pen':'\ud83d\udd8b',
    	  'four_leaf_clover':'\ud83c\udf40',
    	  'fox_face':'\ud83e\udd8a',
    	  'framed_picture':'\ud83d\uddbc',
    	  'free':'\ud83c\udd93',
    	  'fried_egg':'\ud83c\udf73',
    	  'fried_shrimp':'\ud83c\udf64',
    	  'fries':'\ud83c\udf5f',
    	  'frog':'\ud83d\udc38',
    	  'frowning':'\ud83d\ude26',
    	  'frowning_face':'\u2639\ufe0f',
    	  'frowning_man':'\ud83d\ude4d&zwj;\u2642\ufe0f',
    	  'frowning_woman':'\ud83d\ude4d',
    	  'middle_finger':'\ud83d\udd95',
    	  'fuelpump':'\u26fd\ufe0f',
    	  'full_moon':'\ud83c\udf15',
    	  'full_moon_with_face':'\ud83c\udf1d',
    	  'funeral_urn':'\u26b1\ufe0f',
    	  'game_die':'\ud83c\udfb2',
    	  'gear':'\u2699\ufe0f',
    	  'gem':'\ud83d\udc8e',
    	  'gemini':'\u264a\ufe0f',
    	  'ghost':'\ud83d\udc7b',
    	  'gift':'\ud83c\udf81',
    	  'gift_heart':'\ud83d\udc9d',
    	  'girl':'\ud83d\udc67',
    	  'globe_with_meridians':'\ud83c\udf10',
    	  'goal_net':'\ud83e\udd45',
    	  'goat':'\ud83d\udc10',
    	  'golf':'\u26f3\ufe0f',
    	  'golfing_man':'\ud83c\udfcc\ufe0f',
    	  'golfing_woman':'\ud83c\udfcc\ufe0f&zwj;\u2640\ufe0f',
    	  'gorilla':'\ud83e\udd8d',
    	  'grapes':'\ud83c\udf47',
    	  'green_apple':'\ud83c\udf4f',
    	  'green_book':'\ud83d\udcd7',
    	  'green_heart':'\ud83d\udc9a',
    	  'green_salad':'\ud83e\udd57',
    	  'grey_exclamation':'\u2755',
    	  'grey_question':'\u2754',
    	  'grimacing':'\ud83d\ude2c',
    	  'grin':'\ud83d\ude01',
    	  'grinning':'\ud83d\ude00',
    	  'guardsman':'\ud83d\udc82',
    	  'guardswoman':'\ud83d\udc82&zwj;\u2640\ufe0f',
    	  'guitar':'\ud83c\udfb8',
    	  'gun':'\ud83d\udd2b',
    	  'haircut_woman':'\ud83d\udc87',
    	  'haircut_man':'\ud83d\udc87&zwj;\u2642\ufe0f',
    	  'hamburger':'\ud83c\udf54',
    	  'hammer':'\ud83d\udd28',
    	  'hammer_and_pick':'\u2692',
    	  'hammer_and_wrench':'\ud83d\udee0',
    	  'hamster':'\ud83d\udc39',
    	  'hand':'\u270b',
    	  'handbag':'\ud83d\udc5c',
    	  'handshake':'\ud83e\udd1d',
    	  'hankey':'\ud83d\udca9',
    	  'hatched_chick':'\ud83d\udc25',
    	  'hatching_chick':'\ud83d\udc23',
    	  'headphones':'\ud83c\udfa7',
    	  'hear_no_evil':'\ud83d\ude49',
    	  'heart':'\u2764\ufe0f',
    	  'heart_decoration':'\ud83d\udc9f',
    	  'heart_eyes':'\ud83d\ude0d',
    	  'heart_eyes_cat':'\ud83d\ude3b',
    	  'heartbeat':'\ud83d\udc93',
    	  'heartpulse':'\ud83d\udc97',
    	  'hearts':'\u2665\ufe0f',
    	  'heavy_check_mark':'\u2714\ufe0f',
    	  'heavy_division_sign':'\u2797',
    	  'heavy_dollar_sign':'\ud83d\udcb2',
    	  'heavy_heart_exclamation':'\u2763\ufe0f',
    	  'heavy_minus_sign':'\u2796',
    	  'heavy_multiplication_x':'\u2716\ufe0f',
    	  'heavy_plus_sign':'\u2795',
    	  'helicopter':'\ud83d\ude81',
    	  'herb':'\ud83c\udf3f',
    	  'hibiscus':'\ud83c\udf3a',
    	  'high_brightness':'\ud83d\udd06',
    	  'high_heel':'\ud83d\udc60',
    	  'hocho':'\ud83d\udd2a',
    	  'hole':'\ud83d\udd73',
    	  'honey_pot':'\ud83c\udf6f',
    	  'horse':'\ud83d\udc34',
    	  'horse_racing':'\ud83c\udfc7',
    	  'hospital':'\ud83c\udfe5',
    	  'hot_pepper':'\ud83c\udf36',
    	  'hotdog':'\ud83c\udf2d',
    	  'hotel':'\ud83c\udfe8',
    	  'hotsprings':'\u2668\ufe0f',
    	  'hourglass':'\u231b\ufe0f',
    	  'hourglass_flowing_sand':'\u23f3',
    	  'house':'\ud83c\udfe0',
    	  'house_with_garden':'\ud83c\udfe1',
    	  'houses':'\ud83c\udfd8',
    	  'hugs':'\ud83e\udd17',
    	  'hushed':'\ud83d\ude2f',
    	  'ice_cream':'\ud83c\udf68',
    	  'ice_hockey':'\ud83c\udfd2',
    	  'ice_skate':'\u26f8',
    	  'icecream':'\ud83c\udf66',
    	  'id':'\ud83c\udd94',
    	  'ideograph_advantage':'\ud83c\ude50',
    	  'imp':'\ud83d\udc7f',
    	  'inbox_tray':'\ud83d\udce5',
    	  'incoming_envelope':'\ud83d\udce8',
    	  'tipping_hand_woman':'\ud83d\udc81',
    	  'information_source':'\u2139\ufe0f',
    	  'innocent':'\ud83d\ude07',
    	  'interrobang':'\u2049\ufe0f',
    	  'iphone':'\ud83d\udcf1',
    	  'izakaya_lantern':'\ud83c\udfee',
    	  'jack_o_lantern':'\ud83c\udf83',
    	  'japan':'\ud83d\uddfe',
    	  'japanese_castle':'\ud83c\udfef',
    	  'japanese_goblin':'\ud83d\udc7a',
    	  'japanese_ogre':'\ud83d\udc79',
    	  'jeans':'\ud83d\udc56',
    	  'joy':'\ud83d\ude02',
    	  'joy_cat':'\ud83d\ude39',
    	  'joystick':'\ud83d\udd79',
    	  'kaaba':'\ud83d\udd4b',
    	  'key':'\ud83d\udd11',
    	  'keyboard':'\u2328\ufe0f',
    	  'keycap_ten':'\ud83d\udd1f',
    	  'kick_scooter':'\ud83d\udef4',
    	  'kimono':'\ud83d\udc58',
    	  'kiss':'\ud83d\udc8b',
    	  'kissing':'\ud83d\ude17',
    	  'kissing_cat':'\ud83d\ude3d',
    	  'kissing_closed_eyes':'\ud83d\ude1a',
    	  'kissing_heart':'\ud83d\ude18',
    	  'kissing_smiling_eyes':'\ud83d\ude19',
    	  'kiwi_fruit':'\ud83e\udd5d',
    	  'koala':'\ud83d\udc28',
    	  'koko':'\ud83c\ude01',
    	  'label':'\ud83c\udff7',
    	  'large_blue_circle':'\ud83d\udd35',
    	  'large_blue_diamond':'\ud83d\udd37',
    	  'large_orange_diamond':'\ud83d\udd36',
    	  'last_quarter_moon':'\ud83c\udf17',
    	  'last_quarter_moon_with_face':'\ud83c\udf1c',
    	  'latin_cross':'\u271d\ufe0f',
    	  'laughing':'\ud83d\ude06',
    	  'leaves':'\ud83c\udf43',
    	  'ledger':'\ud83d\udcd2',
    	  'left_luggage':'\ud83d\udec5',
    	  'left_right_arrow':'\u2194\ufe0f',
    	  'leftwards_arrow_with_hook':'\u21a9\ufe0f',
    	  'lemon':'\ud83c\udf4b',
    	  'leo':'\u264c\ufe0f',
    	  'leopard':'\ud83d\udc06',
    	  'level_slider':'\ud83c\udf9a',
    	  'libra':'\u264e\ufe0f',
    	  'light_rail':'\ud83d\ude88',
    	  'link':'\ud83d\udd17',
    	  'lion':'\ud83e\udd81',
    	  'lips':'\ud83d\udc44',
    	  'lipstick':'\ud83d\udc84',
    	  'lizard':'\ud83e\udd8e',
    	  'lock':'\ud83d\udd12',
    	  'lock_with_ink_pen':'\ud83d\udd0f',
    	  'lollipop':'\ud83c\udf6d',
    	  'loop':'\u27bf',
    	  'loud_sound':'\ud83d\udd0a',
    	  'loudspeaker':'\ud83d\udce2',
    	  'love_hotel':'\ud83c\udfe9',
    	  'love_letter':'\ud83d\udc8c',
    	  'low_brightness':'\ud83d\udd05',
    	  'lying_face':'\ud83e\udd25',
    	  'm':'\u24c2\ufe0f',
    	  'mag':'\ud83d\udd0d',
    	  'mag_right':'\ud83d\udd0e',
    	  'mahjong':'\ud83c\udc04\ufe0f',
    	  'mailbox':'\ud83d\udceb',
    	  'mailbox_closed':'\ud83d\udcea',
    	  'mailbox_with_mail':'\ud83d\udcec',
    	  'mailbox_with_no_mail':'\ud83d\udced',
    	  'man':'\ud83d\udc68',
    	  'man_artist':'\ud83d\udc68&zwj;\ud83c\udfa8',
    	  'man_astronaut':'\ud83d\udc68&zwj;\ud83d\ude80',
    	  'man_cartwheeling':'\ud83e\udd38&zwj;\u2642\ufe0f',
    	  'man_cook':'\ud83d\udc68&zwj;\ud83c\udf73',
    	  'man_dancing':'\ud83d\udd7a',
    	  'man_facepalming':'\ud83e\udd26&zwj;\u2642\ufe0f',
    	  'man_factory_worker':'\ud83d\udc68&zwj;\ud83c\udfed',
    	  'man_farmer':'\ud83d\udc68&zwj;\ud83c\udf3e',
    	  'man_firefighter':'\ud83d\udc68&zwj;\ud83d\ude92',
    	  'man_health_worker':'\ud83d\udc68&zwj;\u2695\ufe0f',
    	  'man_in_tuxedo':'\ud83e\udd35',
    	  'man_judge':'\ud83d\udc68&zwj;\u2696\ufe0f',
    	  'man_juggling':'\ud83e\udd39&zwj;\u2642\ufe0f',
    	  'man_mechanic':'\ud83d\udc68&zwj;\ud83d\udd27',
    	  'man_office_worker':'\ud83d\udc68&zwj;\ud83d\udcbc',
    	  'man_pilot':'\ud83d\udc68&zwj;\u2708\ufe0f',
    	  'man_playing_handball':'\ud83e\udd3e&zwj;\u2642\ufe0f',
    	  'man_playing_water_polo':'\ud83e\udd3d&zwj;\u2642\ufe0f',
    	  'man_scientist':'\ud83d\udc68&zwj;\ud83d\udd2c',
    	  'man_shrugging':'\ud83e\udd37&zwj;\u2642\ufe0f',
    	  'man_singer':'\ud83d\udc68&zwj;\ud83c\udfa4',
    	  'man_student':'\ud83d\udc68&zwj;\ud83c\udf93',
    	  'man_teacher':'\ud83d\udc68&zwj;\ud83c\udfeb',
    	  'man_technologist':'\ud83d\udc68&zwj;\ud83d\udcbb',
    	  'man_with_gua_pi_mao':'\ud83d\udc72',
    	  'man_with_turban':'\ud83d\udc73',
    	  'tangerine':'\ud83c\udf4a',
    	  'mans_shoe':'\ud83d\udc5e',
    	  'mantelpiece_clock':'\ud83d\udd70',
    	  'maple_leaf':'\ud83c\udf41',
    	  'martial_arts_uniform':'\ud83e\udd4b',
    	  'mask':'\ud83d\ude37',
    	  'massage_woman':'\ud83d\udc86',
    	  'massage_man':'\ud83d\udc86&zwj;\u2642\ufe0f',
    	  'meat_on_bone':'\ud83c\udf56',
    	  'medal_military':'\ud83c\udf96',
    	  'medal_sports':'\ud83c\udfc5',
    	  'mega':'\ud83d\udce3',
    	  'melon':'\ud83c\udf48',
    	  'memo':'\ud83d\udcdd',
    	  'men_wrestling':'\ud83e\udd3c&zwj;\u2642\ufe0f',
    	  'menorah':'\ud83d\udd4e',
    	  'mens':'\ud83d\udeb9',
    	  'metal':'\ud83e\udd18',
    	  'metro':'\ud83d\ude87',
    	  'microphone':'\ud83c\udfa4',
    	  'microscope':'\ud83d\udd2c',
    	  'milk_glass':'\ud83e\udd5b',
    	  'milky_way':'\ud83c\udf0c',
    	  'minibus':'\ud83d\ude90',
    	  'minidisc':'\ud83d\udcbd',
    	  'mobile_phone_off':'\ud83d\udcf4',
    	  'money_mouth_face':'\ud83e\udd11',
    	  'money_with_wings':'\ud83d\udcb8',
    	  'moneybag':'\ud83d\udcb0',
    	  'monkey':'\ud83d\udc12',
    	  'monkey_face':'\ud83d\udc35',
    	  'monorail':'\ud83d\ude9d',
    	  'moon':'\ud83c\udf14',
    	  'mortar_board':'\ud83c\udf93',
    	  'mosque':'\ud83d\udd4c',
    	  'motor_boat':'\ud83d\udee5',
    	  'motor_scooter':'\ud83d\udef5',
    	  'motorcycle':'\ud83c\udfcd',
    	  'motorway':'\ud83d\udee3',
    	  'mount_fuji':'\ud83d\uddfb',
    	  'mountain':'\u26f0',
    	  'mountain_biking_man':'\ud83d\udeb5',
    	  'mountain_biking_woman':'\ud83d\udeb5&zwj;\u2640\ufe0f',
    	  'mountain_cableway':'\ud83d\udea0',
    	  'mountain_railway':'\ud83d\ude9e',
    	  'mountain_snow':'\ud83c\udfd4',
    	  'mouse':'\ud83d\udc2d',
    	  'mouse2':'\ud83d\udc01',
    	  'movie_camera':'\ud83c\udfa5',
    	  'moyai':'\ud83d\uddff',
    	  'mrs_claus':'\ud83e\udd36',
    	  'muscle':'\ud83d\udcaa',
    	  'mushroom':'\ud83c\udf44',
    	  'musical_keyboard':'\ud83c\udfb9',
    	  'musical_note':'\ud83c\udfb5',
    	  'musical_score':'\ud83c\udfbc',
    	  'mute':'\ud83d\udd07',
    	  'nail_care':'\ud83d\udc85',
    	  'name_badge':'\ud83d\udcdb',
    	  'national_park':'\ud83c\udfde',
    	  'nauseated_face':'\ud83e\udd22',
    	  'necktie':'\ud83d\udc54',
    	  'negative_squared_cross_mark':'\u274e',
    	  'nerd_face':'\ud83e\udd13',
    	  'neutral_face':'\ud83d\ude10',
    	  'new':'\ud83c\udd95',
    	  'new_moon':'\ud83c\udf11',
    	  'new_moon_with_face':'\ud83c\udf1a',
    	  'newspaper':'\ud83d\udcf0',
    	  'newspaper_roll':'\ud83d\uddde',
    	  'next_track_button':'\u23ed',
    	  'ng':'\ud83c\udd96',
    	  'no_good_man':'\ud83d\ude45&zwj;\u2642\ufe0f',
    	  'no_good_woman':'\ud83d\ude45',
    	  'night_with_stars':'\ud83c\udf03',
    	  'no_bell':'\ud83d\udd15',
    	  'no_bicycles':'\ud83d\udeb3',
    	  'no_entry':'\u26d4\ufe0f',
    	  'no_entry_sign':'\ud83d\udeab',
    	  'no_mobile_phones':'\ud83d\udcf5',
    	  'no_mouth':'\ud83d\ude36',
    	  'no_pedestrians':'\ud83d\udeb7',
    	  'no_smoking':'\ud83d\udead',
    	  'non-potable_water':'\ud83d\udeb1',
    	  'nose':'\ud83d\udc43',
    	  'notebook':'\ud83d\udcd3',
    	  'notebook_with_decorative_cover':'\ud83d\udcd4',
    	  'notes':'\ud83c\udfb6',
    	  'nut_and_bolt':'\ud83d\udd29',
    	  'o':'\u2b55\ufe0f',
    	  'o2':'\ud83c\udd7e\ufe0f',
    	  'ocean':'\ud83c\udf0a',
    	  'octopus':'\ud83d\udc19',
    	  'oden':'\ud83c\udf62',
    	  'office':'\ud83c\udfe2',
    	  'oil_drum':'\ud83d\udee2',
    	  'ok':'\ud83c\udd97',
    	  'ok_hand':'\ud83d\udc4c',
    	  'ok_man':'\ud83d\ude46&zwj;\u2642\ufe0f',
    	  'ok_woman':'\ud83d\ude46',
    	  'old_key':'\ud83d\udddd',
    	  'older_man':'\ud83d\udc74',
    	  'older_woman':'\ud83d\udc75',
    	  'om':'\ud83d\udd49',
    	  'on':'\ud83d\udd1b',
    	  'oncoming_automobile':'\ud83d\ude98',
    	  'oncoming_bus':'\ud83d\ude8d',
    	  'oncoming_police_car':'\ud83d\ude94',
    	  'oncoming_taxi':'\ud83d\ude96',
    	  'open_file_folder':'\ud83d\udcc2',
    	  'open_hands':'\ud83d\udc50',
    	  'open_mouth':'\ud83d\ude2e',
    	  'open_umbrella':'\u2602\ufe0f',
    	  'ophiuchus':'\u26ce',
    	  'orange_book':'\ud83d\udcd9',
    	  'orthodox_cross':'\u2626\ufe0f',
    	  'outbox_tray':'\ud83d\udce4',
    	  'owl':'\ud83e\udd89',
    	  'ox':'\ud83d\udc02',
    	  'package':'\ud83d\udce6',
    	  'page_facing_up':'\ud83d\udcc4',
    	  'page_with_curl':'\ud83d\udcc3',
    	  'pager':'\ud83d\udcdf',
    	  'paintbrush':'\ud83d\udd8c',
    	  'palm_tree':'\ud83c\udf34',
    	  'pancakes':'\ud83e\udd5e',
    	  'panda_face':'\ud83d\udc3c',
    	  'paperclip':'\ud83d\udcce',
    	  'paperclips':'\ud83d\udd87',
    	  'parasol_on_ground':'\u26f1',
    	  'parking':'\ud83c\udd7f\ufe0f',
    	  'part_alternation_mark':'\u303d\ufe0f',
    	  'partly_sunny':'\u26c5\ufe0f',
    	  'passenger_ship':'\ud83d\udef3',
    	  'passport_control':'\ud83d\udec2',
    	  'pause_button':'\u23f8',
    	  'peace_symbol':'\u262e\ufe0f',
    	  'peach':'\ud83c\udf51',
    	  'peanuts':'\ud83e\udd5c',
    	  'pear':'\ud83c\udf50',
    	  'pen':'\ud83d\udd8a',
    	  'pencil2':'\u270f\ufe0f',
    	  'penguin':'\ud83d\udc27',
    	  'pensive':'\ud83d\ude14',
    	  'performing_arts':'\ud83c\udfad',
    	  'persevere':'\ud83d\ude23',
    	  'person_fencing':'\ud83e\udd3a',
    	  'pouting_woman':'\ud83d\ude4e',
    	  'phone':'\u260e\ufe0f',
    	  'pick':'\u26cf',
    	  'pig':'\ud83d\udc37',
    	  'pig2':'\ud83d\udc16',
    	  'pig_nose':'\ud83d\udc3d',
    	  'pill':'\ud83d\udc8a',
    	  'pineapple':'\ud83c\udf4d',
    	  'ping_pong':'\ud83c\udfd3',
    	  'pisces':'\u2653\ufe0f',
    	  'pizza':'\ud83c\udf55',
    	  'place_of_worship':'\ud83d\uded0',
    	  'plate_with_cutlery':'\ud83c\udf7d',
    	  'play_or_pause_button':'\u23ef',
    	  'point_down':'\ud83d\udc47',
    	  'point_left':'\ud83d\udc48',
    	  'point_right':'\ud83d\udc49',
    	  'point_up':'\u261d\ufe0f',
    	  'point_up_2':'\ud83d\udc46',
    	  'police_car':'\ud83d\ude93',
    	  'policewoman':'\ud83d\udc6e&zwj;\u2640\ufe0f',
    	  'poodle':'\ud83d\udc29',
    	  'popcorn':'\ud83c\udf7f',
    	  'post_office':'\ud83c\udfe3',
    	  'postal_horn':'\ud83d\udcef',
    	  'postbox':'\ud83d\udcee',
    	  'potable_water':'\ud83d\udeb0',
    	  'potato':'\ud83e\udd54',
    	  'pouch':'\ud83d\udc5d',
    	  'poultry_leg':'\ud83c\udf57',
    	  'pound':'\ud83d\udcb7',
    	  'rage':'\ud83d\ude21',
    	  'pouting_cat':'\ud83d\ude3e',
    	  'pouting_man':'\ud83d\ude4e&zwj;\u2642\ufe0f',
    	  'pray':'\ud83d\ude4f',
    	  'prayer_beads':'\ud83d\udcff',
    	  'pregnant_woman':'\ud83e\udd30',
    	  'previous_track_button':'\u23ee',
    	  'prince':'\ud83e\udd34',
    	  'princess':'\ud83d\udc78',
    	  'printer':'\ud83d\udda8',
    	  'purple_heart':'\ud83d\udc9c',
    	  'purse':'\ud83d\udc5b',
    	  'pushpin':'\ud83d\udccc',
    	  'put_litter_in_its_place':'\ud83d\udeae',
    	  'question':'\u2753',
    	  'rabbit':'\ud83d\udc30',
    	  'rabbit2':'\ud83d\udc07',
    	  'racehorse':'\ud83d\udc0e',
    	  'racing_car':'\ud83c\udfce',
    	  'radio':'\ud83d\udcfb',
    	  'radio_button':'\ud83d\udd18',
    	  'radioactive':'\u2622\ufe0f',
    	  'railway_car':'\ud83d\ude83',
    	  'railway_track':'\ud83d\udee4',
    	  'rainbow':'\ud83c\udf08',
    	  'rainbow_flag':'\ud83c\udff3\ufe0f&zwj;\ud83c\udf08',
    	  'raised_back_of_hand':'\ud83e\udd1a',
    	  'raised_hand_with_fingers_splayed':'\ud83d\udd90',
    	  'raised_hands':'\ud83d\ude4c',
    	  'raising_hand_woman':'\ud83d\ude4b',
    	  'raising_hand_man':'\ud83d\ude4b&zwj;\u2642\ufe0f',
    	  'ram':'\ud83d\udc0f',
    	  'ramen':'\ud83c\udf5c',
    	  'rat':'\ud83d\udc00',
    	  'record_button':'\u23fa',
    	  'recycle':'\u267b\ufe0f',
    	  'red_circle':'\ud83d\udd34',
    	  'registered':'\u00ae\ufe0f',
    	  'relaxed':'\u263a\ufe0f',
    	  'relieved':'\ud83d\ude0c',
    	  'reminder_ribbon':'\ud83c\udf97',
    	  'repeat':'\ud83d\udd01',
    	  'repeat_one':'\ud83d\udd02',
    	  'rescue_worker_helmet':'\u26d1',
    	  'restroom':'\ud83d\udebb',
    	  'revolving_hearts':'\ud83d\udc9e',
    	  'rewind':'\u23ea',
    	  'rhinoceros':'\ud83e\udd8f',
    	  'ribbon':'\ud83c\udf80',
    	  'rice':'\ud83c\udf5a',
    	  'rice_ball':'\ud83c\udf59',
    	  'rice_cracker':'\ud83c\udf58',
    	  'rice_scene':'\ud83c\udf91',
    	  'right_anger_bubble':'\ud83d\uddef',
    	  'ring':'\ud83d\udc8d',
    	  'robot':'\ud83e\udd16',
    	  'rocket':'\ud83d\ude80',
    	  'rofl':'\ud83e\udd23',
    	  'roll_eyes':'\ud83d\ude44',
    	  'roller_coaster':'\ud83c\udfa2',
    	  'rooster':'\ud83d\udc13',
    	  'rose':'\ud83c\udf39',
    	  'rosette':'\ud83c\udff5',
    	  'rotating_light':'\ud83d\udea8',
    	  'round_pushpin':'\ud83d\udccd',
    	  'rowing_man':'\ud83d\udea3',
    	  'rowing_woman':'\ud83d\udea3&zwj;\u2640\ufe0f',
    	  'rugby_football':'\ud83c\udfc9',
    	  'running_man':'\ud83c\udfc3',
    	  'running_shirt_with_sash':'\ud83c\udfbd',
    	  'running_woman':'\ud83c\udfc3&zwj;\u2640\ufe0f',
    	  'sa':'\ud83c\ude02\ufe0f',
    	  'sagittarius':'\u2650\ufe0f',
    	  'sake':'\ud83c\udf76',
    	  'sandal':'\ud83d\udc61',
    	  'santa':'\ud83c\udf85',
    	  'satellite':'\ud83d\udce1',
    	  'saxophone':'\ud83c\udfb7',
    	  'school':'\ud83c\udfeb',
    	  'school_satchel':'\ud83c\udf92',
    	  'scissors':'\u2702\ufe0f',
    	  'scorpion':'\ud83e\udd82',
    	  'scorpius':'\u264f\ufe0f',
    	  'scream':'\ud83d\ude31',
    	  'scream_cat':'\ud83d\ude40',
    	  'scroll':'\ud83d\udcdc',
    	  'seat':'\ud83d\udcba',
    	  'secret':'\u3299\ufe0f',
    	  'see_no_evil':'\ud83d\ude48',
    	  'seedling':'\ud83c\udf31',
    	  'selfie':'\ud83e\udd33',
    	  'shallow_pan_of_food':'\ud83e\udd58',
    	  'shamrock':'\u2618\ufe0f',
    	  'shark':'\ud83e\udd88',
    	  'shaved_ice':'\ud83c\udf67',
    	  'sheep':'\ud83d\udc11',
    	  'shell':'\ud83d\udc1a',
    	  'shield':'\ud83d\udee1',
    	  'shinto_shrine':'\u26e9',
    	  'ship':'\ud83d\udea2',
    	  'shirt':'\ud83d\udc55',
    	  'shopping':'\ud83d\udecd',
    	  'shopping_cart':'\ud83d\uded2',
    	  'shower':'\ud83d\udebf',
    	  'shrimp':'\ud83e\udd90',
    	  'signal_strength':'\ud83d\udcf6',
    	  'six_pointed_star':'\ud83d\udd2f',
    	  'ski':'\ud83c\udfbf',
    	  'skier':'\u26f7',
    	  'skull':'\ud83d\udc80',
    	  'skull_and_crossbones':'\u2620\ufe0f',
    	  'sleeping':'\ud83d\ude34',
    	  'sleeping_bed':'\ud83d\udecc',
    	  'sleepy':'\ud83d\ude2a',
    	  'slightly_frowning_face':'\ud83d\ude41',
    	  'slightly_smiling_face':'\ud83d\ude42',
    	  'slot_machine':'\ud83c\udfb0',
    	  'small_airplane':'\ud83d\udee9',
    	  'small_blue_diamond':'\ud83d\udd39',
    	  'small_orange_diamond':'\ud83d\udd38',
    	  'small_red_triangle':'\ud83d\udd3a',
    	  'small_red_triangle_down':'\ud83d\udd3b',
    	  'smile':'\ud83d\ude04',
    	  'smile_cat':'\ud83d\ude38',
    	  'smiley':'\ud83d\ude03',
    	  'smiley_cat':'\ud83d\ude3a',
    	  'smiling_imp':'\ud83d\ude08',
    	  'smirk':'\ud83d\ude0f',
    	  'smirk_cat':'\ud83d\ude3c',
    	  'smoking':'\ud83d\udeac',
    	  'snail':'\ud83d\udc0c',
    	  'snake':'\ud83d\udc0d',
    	  'sneezing_face':'\ud83e\udd27',
    	  'snowboarder':'\ud83c\udfc2',
    	  'snowflake':'\u2744\ufe0f',
    	  'snowman':'\u26c4\ufe0f',
    	  'snowman_with_snow':'\u2603\ufe0f',
    	  'sob':'\ud83d\ude2d',
    	  'soccer':'\u26bd\ufe0f',
    	  'soon':'\ud83d\udd1c',
    	  'sos':'\ud83c\udd98',
    	  'sound':'\ud83d\udd09',
    	  'space_invader':'\ud83d\udc7e',
    	  'spades':'\u2660\ufe0f',
    	  'spaghetti':'\ud83c\udf5d',
    	  'sparkle':'\u2747\ufe0f',
    	  'sparkler':'\ud83c\udf87',
    	  'sparkles':'\u2728',
    	  'sparkling_heart':'\ud83d\udc96',
    	  'speak_no_evil':'\ud83d\ude4a',
    	  'speaker':'\ud83d\udd08',
    	  'speaking_head':'\ud83d\udde3',
    	  'speech_balloon':'\ud83d\udcac',
    	  'speedboat':'\ud83d\udea4',
    	  'spider':'\ud83d\udd77',
    	  'spider_web':'\ud83d\udd78',
    	  'spiral_calendar':'\ud83d\uddd3',
    	  'spiral_notepad':'\ud83d\uddd2',
    	  'spoon':'\ud83e\udd44',
    	  'squid':'\ud83e\udd91',
    	  'stadium':'\ud83c\udfdf',
    	  'star':'\u2b50\ufe0f',
    	  'star2':'\ud83c\udf1f',
    	  'star_and_crescent':'\u262a\ufe0f',
    	  'star_of_david':'\u2721\ufe0f',
    	  'stars':'\ud83c\udf20',
    	  'station':'\ud83d\ude89',
    	  'statue_of_liberty':'\ud83d\uddfd',
    	  'steam_locomotive':'\ud83d\ude82',
    	  'stew':'\ud83c\udf72',
    	  'stop_button':'\u23f9',
    	  'stop_sign':'\ud83d\uded1',
    	  'stopwatch':'\u23f1',
    	  'straight_ruler':'\ud83d\udccf',
    	  'strawberry':'\ud83c\udf53',
    	  'stuck_out_tongue':'\ud83d\ude1b',
    	  'stuck_out_tongue_closed_eyes':'\ud83d\ude1d',
    	  'stuck_out_tongue_winking_eye':'\ud83d\ude1c',
    	  'studio_microphone':'\ud83c\udf99',
    	  'stuffed_flatbread':'\ud83e\udd59',
    	  'sun_behind_large_cloud':'\ud83c\udf25',
    	  'sun_behind_rain_cloud':'\ud83c\udf26',
    	  'sun_behind_small_cloud':'\ud83c\udf24',
    	  'sun_with_face':'\ud83c\udf1e',
    	  'sunflower':'\ud83c\udf3b',
    	  'sunglasses':'\ud83d\ude0e',
    	  'sunny':'\u2600\ufe0f',
    	  'sunrise':'\ud83c\udf05',
    	  'sunrise_over_mountains':'\ud83c\udf04',
    	  'surfing_man':'\ud83c\udfc4',
    	  'surfing_woman':'\ud83c\udfc4&zwj;\u2640\ufe0f',
    	  'sushi':'\ud83c\udf63',
    	  'suspension_railway':'\ud83d\ude9f',
    	  'sweat':'\ud83d\ude13',
    	  'sweat_drops':'\ud83d\udca6',
    	  'sweat_smile':'\ud83d\ude05',
    	  'sweet_potato':'\ud83c\udf60',
    	  'swimming_man':'\ud83c\udfca',
    	  'swimming_woman':'\ud83c\udfca&zwj;\u2640\ufe0f',
    	  'symbols':'\ud83d\udd23',
    	  'synagogue':'\ud83d\udd4d',
    	  'syringe':'\ud83d\udc89',
    	  'taco':'\ud83c\udf2e',
    	  'tada':'\ud83c\udf89',
    	  'tanabata_tree':'\ud83c\udf8b',
    	  'taurus':'\u2649\ufe0f',
    	  'taxi':'\ud83d\ude95',
    	  'tea':'\ud83c\udf75',
    	  'telephone_receiver':'\ud83d\udcde',
    	  'telescope':'\ud83d\udd2d',
    	  'tennis':'\ud83c\udfbe',
    	  'tent':'\u26fa\ufe0f',
    	  'thermometer':'\ud83c\udf21',
    	  'thinking':'\ud83e\udd14',
    	  'thought_balloon':'\ud83d\udcad',
    	  'ticket':'\ud83c\udfab',
    	  'tickets':'\ud83c\udf9f',
    	  'tiger':'\ud83d\udc2f',
    	  'tiger2':'\ud83d\udc05',
    	  'timer_clock':'\u23f2',
    	  'tipping_hand_man':'\ud83d\udc81&zwj;\u2642\ufe0f',
    	  'tired_face':'\ud83d\ude2b',
    	  'tm':'\u2122\ufe0f',
    	  'toilet':'\ud83d\udebd',
    	  'tokyo_tower':'\ud83d\uddfc',
    	  'tomato':'\ud83c\udf45',
    	  'tongue':'\ud83d\udc45',
    	  'top':'\ud83d\udd1d',
    	  'tophat':'\ud83c\udfa9',
    	  'tornado':'\ud83c\udf2a',
    	  'trackball':'\ud83d\uddb2',
    	  'tractor':'\ud83d\ude9c',
    	  'traffic_light':'\ud83d\udea5',
    	  'train':'\ud83d\ude8b',
    	  'train2':'\ud83d\ude86',
    	  'tram':'\ud83d\ude8a',
    	  'triangular_flag_on_post':'\ud83d\udea9',
    	  'triangular_ruler':'\ud83d\udcd0',
    	  'trident':'\ud83d\udd31',
    	  'triumph':'\ud83d\ude24',
    	  'trolleybus':'\ud83d\ude8e',
    	  'trophy':'\ud83c\udfc6',
    	  'tropical_drink':'\ud83c\udf79',
    	  'tropical_fish':'\ud83d\udc20',
    	  'truck':'\ud83d\ude9a',
    	  'trumpet':'\ud83c\udfba',
    	  'tulip':'\ud83c\udf37',
    	  'tumbler_glass':'\ud83e\udd43',
    	  'turkey':'\ud83e\udd83',
    	  'turtle':'\ud83d\udc22',
    	  'tv':'\ud83d\udcfa',
    	  'twisted_rightwards_arrows':'\ud83d\udd00',
    	  'two_hearts':'\ud83d\udc95',
    	  'two_men_holding_hands':'\ud83d\udc6c',
    	  'two_women_holding_hands':'\ud83d\udc6d',
    	  'u5272':'\ud83c\ude39',
    	  'u5408':'\ud83c\ude34',
    	  'u55b6':'\ud83c\ude3a',
    	  'u6307':'\ud83c\ude2f\ufe0f',
    	  'u6708':'\ud83c\ude37\ufe0f',
    	  'u6709':'\ud83c\ude36',
    	  'u6e80':'\ud83c\ude35',
    	  'u7121':'\ud83c\ude1a\ufe0f',
    	  'u7533':'\ud83c\ude38',
    	  'u7981':'\ud83c\ude32',
    	  'u7a7a':'\ud83c\ude33',
    	  'umbrella':'\u2614\ufe0f',
    	  'unamused':'\ud83d\ude12',
    	  'underage':'\ud83d\udd1e',
    	  'unicorn':'\ud83e\udd84',
    	  'unlock':'\ud83d\udd13',
    	  'up':'\ud83c\udd99',
    	  'upside_down_face':'\ud83d\ude43',
    	  'v':'\u270c\ufe0f',
    	  'vertical_traffic_light':'\ud83d\udea6',
    	  'vhs':'\ud83d\udcfc',
    	  'vibration_mode':'\ud83d\udcf3',
    	  'video_camera':'\ud83d\udcf9',
    	  'video_game':'\ud83c\udfae',
    	  'violin':'\ud83c\udfbb',
    	  'virgo':'\u264d\ufe0f',
    	  'volcano':'\ud83c\udf0b',
    	  'volleyball':'\ud83c\udfd0',
    	  'vs':'\ud83c\udd9a',
    	  'vulcan_salute':'\ud83d\udd96',
    	  'walking_man':'\ud83d\udeb6',
    	  'walking_woman':'\ud83d\udeb6&zwj;\u2640\ufe0f',
    	  'waning_crescent_moon':'\ud83c\udf18',
    	  'waning_gibbous_moon':'\ud83c\udf16',
    	  'warning':'\u26a0\ufe0f',
    	  'wastebasket':'\ud83d\uddd1',
    	  'watch':'\u231a\ufe0f',
    	  'water_buffalo':'\ud83d\udc03',
    	  'watermelon':'\ud83c\udf49',
    	  'wave':'\ud83d\udc4b',
    	  'wavy_dash':'\u3030\ufe0f',
    	  'waxing_crescent_moon':'\ud83c\udf12',
    	  'wc':'\ud83d\udebe',
    	  'weary':'\ud83d\ude29',
    	  'wedding':'\ud83d\udc92',
    	  'weight_lifting_man':'\ud83c\udfcb\ufe0f',
    	  'weight_lifting_woman':'\ud83c\udfcb\ufe0f&zwj;\u2640\ufe0f',
    	  'whale':'\ud83d\udc33',
    	  'whale2':'\ud83d\udc0b',
    	  'wheel_of_dharma':'\u2638\ufe0f',
    	  'wheelchair':'\u267f\ufe0f',
    	  'white_check_mark':'\u2705',
    	  'white_circle':'\u26aa\ufe0f',
    	  'white_flag':'\ud83c\udff3\ufe0f',
    	  'white_flower':'\ud83d\udcae',
    	  'white_large_square':'\u2b1c\ufe0f',
    	  'white_medium_small_square':'\u25fd\ufe0f',
    	  'white_medium_square':'\u25fb\ufe0f',
    	  'white_small_square':'\u25ab\ufe0f',
    	  'white_square_button':'\ud83d\udd33',
    	  'wilted_flower':'\ud83e\udd40',
    	  'wind_chime':'\ud83c\udf90',
    	  'wind_face':'\ud83c\udf2c',
    	  'wine_glass':'\ud83c\udf77',
    	  'wink':'\ud83d\ude09',
    	  'wolf':'\ud83d\udc3a',
    	  'woman':'\ud83d\udc69',
    	  'woman_artist':'\ud83d\udc69&zwj;\ud83c\udfa8',
    	  'woman_astronaut':'\ud83d\udc69&zwj;\ud83d\ude80',
    	  'woman_cartwheeling':'\ud83e\udd38&zwj;\u2640\ufe0f',
    	  'woman_cook':'\ud83d\udc69&zwj;\ud83c\udf73',
    	  'woman_facepalming':'\ud83e\udd26&zwj;\u2640\ufe0f',
    	  'woman_factory_worker':'\ud83d\udc69&zwj;\ud83c\udfed',
    	  'woman_farmer':'\ud83d\udc69&zwj;\ud83c\udf3e',
    	  'woman_firefighter':'\ud83d\udc69&zwj;\ud83d\ude92',
    	  'woman_health_worker':'\ud83d\udc69&zwj;\u2695\ufe0f',
    	  'woman_judge':'\ud83d\udc69&zwj;\u2696\ufe0f',
    	  'woman_juggling':'\ud83e\udd39&zwj;\u2640\ufe0f',
    	  'woman_mechanic':'\ud83d\udc69&zwj;\ud83d\udd27',
    	  'woman_office_worker':'\ud83d\udc69&zwj;\ud83d\udcbc',
    	  'woman_pilot':'\ud83d\udc69&zwj;\u2708\ufe0f',
    	  'woman_playing_handball':'\ud83e\udd3e&zwj;\u2640\ufe0f',
    	  'woman_playing_water_polo':'\ud83e\udd3d&zwj;\u2640\ufe0f',
    	  'woman_scientist':'\ud83d\udc69&zwj;\ud83d\udd2c',
    	  'woman_shrugging':'\ud83e\udd37&zwj;\u2640\ufe0f',
    	  'woman_singer':'\ud83d\udc69&zwj;\ud83c\udfa4',
    	  'woman_student':'\ud83d\udc69&zwj;\ud83c\udf93',
    	  'woman_teacher':'\ud83d\udc69&zwj;\ud83c\udfeb',
    	  'woman_technologist':'\ud83d\udc69&zwj;\ud83d\udcbb',
    	  'woman_with_turban':'\ud83d\udc73&zwj;\u2640\ufe0f',
    	  'womans_clothes':'\ud83d\udc5a',
    	  'womans_hat':'\ud83d\udc52',
    	  'women_wrestling':'\ud83e\udd3c&zwj;\u2640\ufe0f',
    	  'womens':'\ud83d\udeba',
    	  'world_map':'\ud83d\uddfa',
    	  'worried':'\ud83d\ude1f',
    	  'wrench':'\ud83d\udd27',
    	  'writing_hand':'\u270d\ufe0f',
    	  'x':'\u274c',
    	  'yellow_heart':'\ud83d\udc9b',
    	  'yen':'\ud83d\udcb4',
    	  'yin_yang':'\u262f\ufe0f',
    	  'yum':'\ud83d\ude0b',
    	  'zap':'\u26a1\ufe0f',
    	  'zipper_mouth_face':'\ud83e\udd10',
    	  'zzz':'\ud83d\udca4',

    	  /* special emojis :P */
    	  'octocat':  '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
    	  'showdown': '<span style="font-family: \'Anonymous Pro\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>'
    	};

    	/**
    	 * Created by Estevao on 31-05-2015.
    	 */

    	/**
    	 * Showdown Converter class
    	 * @class
    	 * @param {object} [converterOptions]
    	 * @returns {Converter}
    	 */
    	showdown.Converter = function (converterOptions) {

    	  var
    	      /**
    	       * Options used by this converter
    	       * @private
    	       * @type {{}}
    	       */
    	      options = {},

    	      /**
    	       * Language extensions used by this converter
    	       * @private
    	       * @type {Array}
    	       */
    	      langExtensions = [],

    	      /**
    	       * Output modifiers extensions used by this converter
    	       * @private
    	       * @type {Array}
    	       */
    	      outputModifiers = [],

    	      /**
    	       * Event listeners
    	       * @private
    	       * @type {{}}
    	       */
    	      listeners = {},

    	      /**
    	       * The flavor set in this converter
    	       */
    	      setConvFlavor = setFlavor,

    	      /**
    	       * Metadata of the document
    	       * @type {{parsed: {}, raw: string, format: string}}
    	       */
    	      metadata = {
    	        parsed: {},
    	        raw: '',
    	        format: ''
    	      };

    	  _constructor();

    	  /**
    	   * Converter constructor
    	   * @private
    	   */
    	  function _constructor () {
    	    converterOptions = converterOptions || {};

    	    for (var gOpt in globalOptions) {
    	      if (globalOptions.hasOwnProperty(gOpt)) {
    	        options[gOpt] = globalOptions[gOpt];
    	      }
    	    }

    	    // Merge options
    	    if (typeof converterOptions === 'object') {
    	      for (var opt in converterOptions) {
    	        if (converterOptions.hasOwnProperty(opt)) {
    	          options[opt] = converterOptions[opt];
    	        }
    	      }
    	    } else {
    	      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +
    	      ' was passed instead.');
    	    }

    	    if (options.extensions) {
    	      showdown.helper.forEach(options.extensions, _parseExtension);
    	    }
    	  }

    	  /**
    	   * Parse extension
    	   * @param {*} ext
    	   * @param {string} [name='']
    	   * @private
    	   */
    	  function _parseExtension (ext, name) {

    	    name = name || null;
    	    // If it's a string, the extension was previously loaded
    	    if (showdown.helper.isString(ext)) {
    	      ext = showdown.helper.stdExtName(ext);
    	      name = ext;

    	      // LEGACY_SUPPORT CODE
    	      if (showdown.extensions[ext]) {
    	        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +
    	          'Please inform the developer that the extension should be updated!');
    	        legacyExtensionLoading(showdown.extensions[ext], ext);
    	        return;
    	        // END LEGACY SUPPORT CODE

    	      } else if (!showdown.helper.isUndefined(extensions[ext])) {
    	        ext = extensions[ext];

    	      } else {
    	        throw Error('Extension "' + ext + '" could not be loaded. It was either not found or is not a valid extension.');
    	      }
    	    }

    	    if (typeof ext === 'function') {
    	      ext = ext();
    	    }

    	    if (!showdown.helper.isArray(ext)) {
    	      ext = [ext];
    	    }

    	    var validExt = validate(ext, name);
    	    if (!validExt.valid) {
    	      throw Error(validExt.error);
    	    }

    	    for (var i = 0; i < ext.length; ++i) {
    	      switch (ext[i].type) {

    	        case 'lang':
    	          langExtensions.push(ext[i]);
    	          break;

    	        case 'output':
    	          outputModifiers.push(ext[i]);
    	          break;
    	      }
    	      if (ext[i].hasOwnProperty('listeners')) {
    	        for (var ln in ext[i].listeners) {
    	          if (ext[i].listeners.hasOwnProperty(ln)) {
    	            listen(ln, ext[i].listeners[ln]);
    	          }
    	        }
    	      }
    	    }

    	  }

    	  /**
    	   * LEGACY_SUPPORT
    	   * @param {*} ext
    	   * @param {string} name
    	   */
    	  function legacyExtensionLoading (ext, name) {
    	    if (typeof ext === 'function') {
    	      ext = ext(new showdown.Converter());
    	    }
    	    if (!showdown.helper.isArray(ext)) {
    	      ext = [ext];
    	    }
    	    var valid = validate(ext, name);

    	    if (!valid.valid) {
    	      throw Error(valid.error);
    	    }

    	    for (var i = 0; i < ext.length; ++i) {
    	      switch (ext[i].type) {
    	        case 'lang':
    	          langExtensions.push(ext[i]);
    	          break;
    	        case 'output':
    	          outputModifiers.push(ext[i]);
    	          break;
    	        default:// should never reach here
    	          throw Error('Extension loader error: Type unrecognized!!!');
    	      }
    	    }
    	  }

    	  /**
    	   * Listen to an event
    	   * @param {string} name
    	   * @param {function} callback
    	   */
    	  function listen (name, callback) {
    	    if (!showdown.helper.isString(name)) {
    	      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');
    	    }

    	    if (typeof callback !== 'function') {
    	      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');
    	    }

    	    if (!listeners.hasOwnProperty(name)) {
    	      listeners[name] = [];
    	    }
    	    listeners[name].push(callback);
    	  }

    	  function rTrimInputText (text) {
    	    var rsp = text.match(/^\s*/)[0].length,
    	        rgx = new RegExp('^\\s{0,' + rsp + '}', 'gm');
    	    return text.replace(rgx, '');
    	  }

    	  /**
    	   * Dispatch an event
    	   * @private
    	   * @param {string} evtName Event name
    	   * @param {string} text Text
    	   * @param {{}} options Converter Options
    	   * @param {{}} globals
    	   * @returns {string}
    	   */
    	  this._dispatch = function dispatch (evtName, text, options, globals) {
    	    if (listeners.hasOwnProperty(evtName)) {
    	      for (var ei = 0; ei < listeners[evtName].length; ++ei) {
    	        var nText = listeners[evtName][ei](evtName, text, this, options, globals);
    	        if (nText && typeof nText !== 'undefined') {
    	          text = nText;
    	        }
    	      }
    	    }
    	    return text;
    	  };

    	  /**
    	   * Listen to an event
    	   * @param {string} name
    	   * @param {function} callback
    	   * @returns {showdown.Converter}
    	   */
    	  this.listen = function (name, callback) {
    	    listen(name, callback);
    	    return this;
    	  };

    	  /**
    	   * Converts a markdown string into HTML
    	   * @param {string} text
    	   * @returns {*}
    	   */
    	  this.makeHtml = function (text) {
    	    //check if text is not falsy
    	    if (!text) {
    	      return text;
    	    }

    	    var globals = {
    	      gHtmlBlocks:     [],
    	      gHtmlMdBlocks:   [],
    	      gHtmlSpans:      [],
    	      gUrls:           {},
    	      gTitles:         {},
    	      gDimensions:     {},
    	      gListLevel:      0,
    	      hashLinkCounts:  {},
    	      langExtensions:  langExtensions,
    	      outputModifiers: outputModifiers,
    	      converter:       this,
    	      ghCodeBlocks:    [],
    	      metadata: {
    	        parsed: {},
    	        raw: '',
    	        format: ''
    	      }
    	    };

    	    // This lets us use ¨ trema as an escape char to avoid md5 hashes
    	    // The choice of character is arbitrary; anything that isn't
    	    // magic in Markdown will work.
    	    text = text.replace(/¨/g, '¨T');

    	    // Replace $ with ¨D
    	    // RegExp interprets $ as a special character
    	    // when it's in a replacement string
    	    text = text.replace(/\$/g, '¨D');

    	    // Standardize line endings
    	    text = text.replace(/\r\n/g, '\n'); // DOS to Unix
    	    text = text.replace(/\r/g, '\n'); // Mac to Unix

    	    // Stardardize line spaces
    	    text = text.replace(/\u00A0/g, '&nbsp;');

    	    if (options.smartIndentationFix) {
    	      text = rTrimInputText(text);
    	    }

    	    // Make sure text begins and ends with a couple of newlines:
    	    text = '\n\n' + text + '\n\n';

    	    // detab
    	    text = showdown.subParser('detab')(text, options, globals);

    	    /**
    	     * Strip any lines consisting only of spaces and tabs.
    	     * This makes subsequent regexs easier to write, because we can
    	     * match consecutive blank lines with /\n+/ instead of something
    	     * contorted like /[ \t]*\n+/
    	     */
    	    text = text.replace(/^[ \t]+$/mg, '');

    	    //run languageExtensions
    	    showdown.helper.forEach(langExtensions, function (ext) {
    	      text = showdown.subParser('runExtension')(ext, text, options, globals);
    	    });

    	    // run the sub parsers
    	    text = showdown.subParser('metadata')(text, options, globals);
    	    text = showdown.subParser('hashPreCodeTags')(text, options, globals);
    	    text = showdown.subParser('githubCodeBlocks')(text, options, globals);
    	    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
    	    text = showdown.subParser('hashCodeTags')(text, options, globals);
    	    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);
    	    text = showdown.subParser('blockGamut')(text, options, globals);
    	    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);
    	    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);

    	    // attacklab: Restore dollar signs
    	    text = text.replace(/¨D/g, '$$');

    	    // attacklab: Restore tremas
    	    text = text.replace(/¨T/g, '¨');

    	    // render a complete html document instead of a partial if the option is enabled
    	    text = showdown.subParser('completeHTMLDocument')(text, options, globals);

    	    // Run output modifiers
    	    showdown.helper.forEach(outputModifiers, function (ext) {
    	      text = showdown.subParser('runExtension')(ext, text, options, globals);
    	    });

    	    // update metadata
    	    metadata = globals.metadata;
    	    return text;
    	  };

    	  /**
    	   * Converts an HTML string into a markdown string
    	   * @param src
    	   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.
    	   * @returns {string}
    	   */
    	  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {

    	    // replace \r\n with \n
    	    src = src.replace(/\r\n/g, '\n');
    	    src = src.replace(/\r/g, '\n'); // old macs

    	    // due to an edge case, we need to find this: > <
    	    // to prevent removing of non silent white spaces
    	    // ex: <em>this is</em> <strong>sparta</strong>
    	    src = src.replace(/>[ \t]+</, '>¨NBSP;<');

    	    if (!HTMLParser) {
    	      if (window && window.document) {
    	        HTMLParser = window.document;
    	      } else {
    	        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');
    	      }
    	    }

    	    var doc = HTMLParser.createElement('div');
    	    doc.innerHTML = src;

    	    var globals = {
    	      preList: substitutePreCodeTags(doc)
    	    };

    	    // remove all newlines and collapse spaces
    	    clean(doc);

    	    // some stuff, like accidental reference links must now be escaped
    	    // TODO
    	    // doc.innerHTML = doc.innerHTML.replace(/\[[\S\t ]]/);

    	    var nodes = doc.childNodes,
    	        mdDoc = '';

    	    for (var i = 0; i < nodes.length; i++) {
    	      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);
    	    }

    	    function clean (node) {
    	      for (var n = 0; n < node.childNodes.length; ++n) {
    	        var child = node.childNodes[n];
    	        if (child.nodeType === 3) {
    	          if (!/\S/.test(child.nodeValue) && !/^[ ]+$/.test(child.nodeValue)) {
    	            node.removeChild(child);
    	            --n;
    	          } else {
    	            child.nodeValue = child.nodeValue.split('\n').join(' ');
    	            child.nodeValue = child.nodeValue.replace(/(\s)+/g, '$1');
    	          }
    	        } else if (child.nodeType === 1) {
    	          clean(child);
    	        }
    	      }
    	    }

    	    // find all pre tags and replace contents with placeholder
    	    // we need this so that we can remove all indentation from html
    	    // to ease up parsing
    	    function substitutePreCodeTags (doc) {

    	      var pres = doc.querySelectorAll('pre'),
    	          presPH = [];

    	      for (var i = 0; i < pres.length; ++i) {

    	        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {
    	          var content = pres[i].firstChild.innerHTML.trim(),
    	              language = pres[i].firstChild.getAttribute('data-language') || '';

    	          // if data-language attribute is not defined, then we look for class language-*
    	          if (language === '') {
    	            var classes = pres[i].firstChild.className.split(' ');
    	            for (var c = 0; c < classes.length; ++c) {
    	              var matches = classes[c].match(/^language-(.+)$/);
    	              if (matches !== null) {
    	                language = matches[1];
    	                break;
    	              }
    	            }
    	          }

    	          // unescape html entities in content
    	          content = showdown.helper.unescapeHTMLEntities(content);

    	          presPH.push(content);
    	          pres[i].outerHTML = '<precode language="' + language + '" precodenum="' + i.toString() + '"></precode>';
    	        } else {
    	          presPH.push(pres[i].innerHTML);
    	          pres[i].innerHTML = '';
    	          pres[i].setAttribute('prenum', i.toString());
    	        }
    	      }
    	      return presPH;
    	    }

    	    return mdDoc;
    	  };

    	  /**
    	   * Set an option of this Converter instance
    	   * @param {string} key
    	   * @param {*} value
    	   */
    	  this.setOption = function (key, value) {
    	    options[key] = value;
    	  };

    	  /**
    	   * Get the option of this Converter instance
    	   * @param {string} key
    	   * @returns {*}
    	   */
    	  this.getOption = function (key) {
    	    return options[key];
    	  };

    	  /**
    	   * Get the options of this Converter instance
    	   * @returns {{}}
    	   */
    	  this.getOptions = function () {
    	    return options;
    	  };

    	  /**
    	   * Add extension to THIS converter
    	   * @param {{}} extension
    	   * @param {string} [name=null]
    	   */
    	  this.addExtension = function (extension, name) {
    	    name = name || null;
    	    _parseExtension(extension, name);
    	  };

    	  /**
    	   * Use a global registered extension with THIS converter
    	   * @param {string} extensionName Name of the previously registered extension
    	   */
    	  this.useExtension = function (extensionName) {
    	    _parseExtension(extensionName);
    	  };

    	  /**
    	   * Set the flavor THIS converter should use
    	   * @param {string} name
    	   */
    	  this.setFlavor = function (name) {
    	    if (!flavor.hasOwnProperty(name)) {
    	      throw Error(name + ' flavor was not found');
    	    }
    	    var preset = flavor[name];
    	    setConvFlavor = name;
    	    for (var option in preset) {
    	      if (preset.hasOwnProperty(option)) {
    	        options[option] = preset[option];
    	      }
    	    }
    	  };

    	  /**
    	   * Get the currently set flavor of this converter
    	   * @returns {string}
    	   */
    	  this.getFlavor = function () {
    	    return setConvFlavor;
    	  };

    	  /**
    	   * Remove an extension from THIS converter.
    	   * Note: This is a costly operation. It's better to initialize a new converter
    	   * and specify the extensions you wish to use
    	   * @param {Array} extension
    	   */
    	  this.removeExtension = function (extension) {
    	    if (!showdown.helper.isArray(extension)) {
    	      extension = [extension];
    	    }
    	    for (var a = 0; a < extension.length; ++a) {
    	      var ext = extension[a];
    	      for (var i = 0; i < langExtensions.length; ++i) {
    	        if (langExtensions[i] === ext) {
    	          langExtensions.splice(i, 1);
    	        }
    	      }
    	      for (var ii = 0; ii < outputModifiers.length; ++ii) {
    	        if (outputModifiers[ii] === ext) {
    	          outputModifiers.splice(ii, 1);
    	        }
    	      }
    	    }
    	  };

    	  /**
    	   * Get all extension of THIS converter
    	   * @returns {{language: Array, output: Array}}
    	   */
    	  this.getAllExtensions = function () {
    	    return {
    	      language: langExtensions,
    	      output: outputModifiers
    	    };
    	  };

    	  /**
    	   * Get the metadata of the previously parsed document
    	   * @param raw
    	   * @returns {string|{}}
    	   */
    	  this.getMetadata = function (raw) {
    	    if (raw) {
    	      return metadata.raw;
    	    } else {
    	      return metadata.parsed;
    	    }
    	  };

    	  /**
    	   * Get the metadata format of the previously parsed document
    	   * @returns {string}
    	   */
    	  this.getMetadataFormat = function () {
    	    return metadata.format;
    	  };

    	  /**
    	   * Private: set a single key, value metadata pair
    	   * @param {string} key
    	   * @param {string} value
    	   */
    	  this._setMetadataPair = function (key, value) {
    	    metadata.parsed[key] = value;
    	  };

    	  /**
    	   * Private: set metadata format
    	   * @param {string} format
    	   */
    	  this._setMetadataFormat = function (format) {
    	    metadata.format = format;
    	  };

    	  /**
    	   * Private: set metadata raw text
    	   * @param {string} raw
    	   */
    	  this._setMetadataRaw = function (raw) {
    	    metadata.raw = raw;
    	  };
    	};

    	/**
    	 * Turn Markdown link shortcuts into XHTML <a> tags.
    	 */
    	showdown.subParser('anchors', function (text, options, globals) {

    	  text = globals.converter._dispatch('anchors.before', text, options, globals);

    	  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {
    	    if (showdown.helper.isUndefined(title)) {
    	      title = '';
    	    }
    	    linkId = linkId.toLowerCase();

    	    // Special case for explicit empty url
    	    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
    	      url = '';
    	    } else if (!url) {
    	      if (!linkId) {
    	        // lower-case and turn embedded newlines into spaces
    	        linkId = linkText.toLowerCase().replace(/ ?\n/g, ' ');
    	      }
    	      url = '#' + linkId;

    	      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {
    	        url = globals.gUrls[linkId];
    	        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {
    	          title = globals.gTitles[linkId];
    	        }
    	      } else {
    	        return wholeMatch;
    	      }
    	    }

    	    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance
    	    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);

    	    var result = '<a href="' + url + '"';

    	    if (title !== '' && title !== null) {
    	      title = title.replace(/"/g, '&quot;');
    	      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance
    	      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	      result += ' title="' + title + '"';
    	    }

    	    // optionLinksInNewWindow only applies
    	    // to external links. Hash links (#) open in same page
    	    if (options.openLinksInNewWindow && !/^#/.test(url)) {
    	      // escaped _
    	      result += ' rel="noopener noreferrer" target="¨E95Eblank"';
    	    }

    	    result += '>' + linkText + '</a>';

    	    return result;
    	  };

    	  // First, handle reference-style links: [link text] [id]
    	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag);

    	  // Next, inline-style links: [link text](url "optional title")
    	  // cases with crazy urls like ./image/cat1).png
    	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    	    writeAnchorTag);

    	  // normal cases
    	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    	    writeAnchorTag);

    	  // handle reference-style shortcuts: [link text]
    	  // These must come last in case you've also got [link test][1]
    	  // or [link test](/foo)
    	  text = text.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag);

    	  // Lastly handle GithubMentions if option is enabled
    	  if (options.ghMentions) {
    	    text = text.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function (wm, st, escape, mentions, username) {
    	      if (escape === '\\') {
    	        return st + mentions;
    	      }

    	      //check if options.ghMentionsLink is a string
    	      if (!showdown.helper.isString(options.ghMentionsLink)) {
    	        throw new Error('ghMentionsLink option must be a string');
    	      }
    	      var lnk = options.ghMentionsLink.replace(/\{u}/g, username),
    	          target = '';
    	      if (options.openLinksInNewWindow) {
    	        target = ' rel="noopener noreferrer" target="¨E95Eblank"';
    	      }
    	      return st + '<a href="' + lnk + '"' + target + '>' + mentions + '</a>';
    	    });
    	  }

    	  text = globals.converter._dispatch('anchors.after', text, options, globals);
    	  return text;
    	});

    	// url allowed chars [a-z\d_.~:/?#[]@!$&'()*+,;=-]

    	var simpleURLRegex  = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,
    	    simpleURLRegex2 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,
    	    delimUrlRegex   = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,
    	    simpleMailRegex = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,
    	    delimMailRegex  = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,

    	    replaceLink = function (options) {
    	      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {
    	        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	        var lnkTxt = link,
    	            append = '',
    	            target = '',
    	            lmc    = leadingMagicChars || '',
    	            tmc    = trailingMagicChars || '';
    	        if (/^www\./i.test(link)) {
    	          link = link.replace(/^www\./i, 'http://www.');
    	        }
    	        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
    	          append = trailingPunctuation;
    	        }
    	        if (options.openLinksInNewWindow) {
    	          target = ' rel="noopener noreferrer" target="¨E95Eblank"';
    	        }
    	        return lmc + '<a href="' + link + '"' + target + '>' + lnkTxt + '</a>' + append + tmc;
    	      };
    	    },

    	    replaceMail = function (options, globals) {
    	      return function (wholeMatch, b, mail) {
    	        var href = 'mailto:';
    	        b = b || '';
    	        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);
    	        if (options.encodeEmails) {
    	          href = showdown.helper.encodeEmailAddress(href + mail);
    	          mail = showdown.helper.encodeEmailAddress(mail);
    	        } else {
    	          href = href + mail;
    	        }
    	        return b + '<a href="' + href + '">' + mail + '</a>';
    	      };
    	    };

    	showdown.subParser('autoLinks', function (text, options, globals) {

    	  text = globals.converter._dispatch('autoLinks.before', text, options, globals);

    	  text = text.replace(delimUrlRegex, replaceLink(options));
    	  text = text.replace(delimMailRegex, replaceMail(options, globals));

    	  text = globals.converter._dispatch('autoLinks.after', text, options, globals);

    	  return text;
    	});

    	showdown.subParser('simplifiedAutoLinks', function (text, options, globals) {

    	  if (!options.simplifiedAutoLink) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);

    	  if (options.excludeTrailingPunctuationFromURLs) {
    	    text = text.replace(simpleURLRegex2, replaceLink(options));
    	  } else {
    	    text = text.replace(simpleURLRegex, replaceLink(options));
    	  }
    	  text = text.replace(simpleMailRegex, replaceMail(options, globals));

    	  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * These are all the transformations that form block-level
    	 * tags like paragraphs, headers, and list items.
    	 */
    	showdown.subParser('blockGamut', function (text, options, globals) {

    	  text = globals.converter._dispatch('blockGamut.before', text, options, globals);

    	  // we parse blockquotes first so that we can have headings and hrs
    	  // inside blockquotes
    	  text = showdown.subParser('blockQuotes')(text, options, globals);
    	  text = showdown.subParser('headers')(text, options, globals);

    	  // Do Horizontal Rules:
    	  text = showdown.subParser('horizontalRule')(text, options, globals);

    	  text = showdown.subParser('lists')(text, options, globals);
    	  text = showdown.subParser('codeBlocks')(text, options, globals);
    	  text = showdown.subParser('tables')(text, options, globals);

    	  // We already ran _HashHTMLBlocks() before, in Markdown(), but that
    	  // was to escape raw HTML in the original Markdown source. This time,
    	  // we're escaping the markup we've just created, so that we don't wrap
    	  // <p> tags around block-level tags.
    	  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
    	  text = showdown.subParser('paragraphs')(text, options, globals);

    	  text = globals.converter._dispatch('blockGamut.after', text, options, globals);

    	  return text;
    	});

    	showdown.subParser('blockQuotes', function (text, options, globals) {

    	  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);

    	  // add a couple extra lines after the text and endtext mark
    	  text = text + '\n\n';

    	  var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;

    	  if (options.splitAdjacentBlockquotes) {
    	    rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm;
    	  }

    	  text = text.replace(rgx, function (bq) {
    	    // attacklab: hack around Konqueror 3.5.4 bug:
    	    // "----------bug".replace(/^-/g,"") == "bug"
    	    bq = bq.replace(/^[ \t]*>[ \t]?/gm, ''); // trim one level of quoting

    	    // attacklab: clean up hack
    	    bq = bq.replace(/¨0/g, '');

    	    bq = bq.replace(/^[ \t]+$/gm, ''); // trim whitespace-only lines
    	    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);
    	    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse

    	    bq = bq.replace(/(^|\n)/g, '$1  ');
    	    // These leading spaces screw with <pre> content, so we need to fix that:
    	    bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function (wholeMatch, m1) {
    	      var pre = m1;
    	      // attacklab: hack around Konqueror 3.5.4 bug:
    	      pre = pre.replace(/^  /mg, '¨0');
    	      pre = pre.replace(/¨0/g, '');
    	      return pre;
    	    });

    	    return showdown.subParser('hashBlock')('<blockquote>\n' + bq + '\n</blockquote>', options, globals);
    	  });

    	  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Process Markdown `<pre><code>` blocks.
    	 */
    	showdown.subParser('codeBlocks', function (text, options, globals) {

    	  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);

    	  // sentinel workarounds for lack of \A and \Z, safari\khtml bug
    	  text += '¨0';

    	  var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
    	  text = text.replace(pattern, function (wholeMatch, m1, m2) {
    	    var codeblock = m1,
    	        nextChar = m2,
    	        end = '\n';

    	    codeblock = showdown.subParser('outdent')(codeblock, options, globals);
    	    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    	    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    	    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    	    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing newlines

    	    if (options.omitExtraWLInCodeBlocks) {
    	      end = '';
    	    }

    	    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';

    	    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;
    	  });

    	  // strip sentinel
    	  text = text.replace(/¨0/, '');

    	  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 *
    	 *   *  Backtick quotes are used for <code></code> spans.
    	 *
    	 *   *  You can use multiple backticks as the delimiters if you want to
    	 *     include literal backticks in the code span. So, this input:
    	 *
    	 *         Just type ``foo `bar` baz`` at the prompt.
    	 *
    	 *       Will translate to:
    	 *
    	 *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>
    	 *
    	 *    There's no arbitrary limit to the number of backticks you
    	 *    can use as delimters. If you need three consecutive backticks
    	 *    in your code, use four for delimiters, etc.
    	 *
    	 *  *  You can use spaces to get literal backticks at the edges:
    	 *
    	 *         ... type `` `bar` `` ...
    	 *
    	 *       Turns to:
    	 *
    	 *         ... type <code>`bar`</code> ...
    	 */
    	showdown.subParser('codeSpans', function (text, options, globals) {

    	  text = globals.converter._dispatch('codeSpans.before', text, options, globals);

    	  if (typeof (text) === 'undefined') {
    	    text = '';
    	  }
    	  text = text.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,
    	    function (wholeMatch, m1, m2, m3) {
    	      var c = m3;
    	      c = c.replace(/^([ \t]*)/g, '');	// leading whitespace
    	      c = c.replace(/[ \t]*$/g, '');	// trailing whitespace
    	      c = showdown.subParser('encodeCode')(c, options, globals);
    	      c = m1 + '<code>' + c + '</code>';
    	      c = showdown.subParser('hashHTMLSpans')(c, options, globals);
    	      return c;
    	    }
    	  );

    	  text = globals.converter._dispatch('codeSpans.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Create a full HTML document from the processed markdown
    	 */
    	showdown.subParser('completeHTMLDocument', function (text, options, globals) {

    	  if (!options.completeHTMLDocument) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);

    	  var doctype = 'html',
    	      doctypeParsed = '<!DOCTYPE HTML>\n',
    	      title = '',
    	      charset = '<meta charset="utf-8">\n',
    	      lang = '',
    	      metadata = '';

    	  if (typeof globals.metadata.parsed.doctype !== 'undefined') {
    	    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\n';
    	    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();
    	    if (doctype === 'html' || doctype === 'html5') {
    	      charset = '<meta charset="utf-8">';
    	    }
    	  }

    	  for (var meta in globals.metadata.parsed) {
    	    if (globals.metadata.parsed.hasOwnProperty(meta)) {
    	      switch (meta.toLowerCase()) {
    	        case 'doctype':
    	          break;

    	        case 'title':
    	          title = '<title>' +  globals.metadata.parsed.title + '</title>\n';
    	          break;

    	        case 'charset':
    	          if (doctype === 'html' || doctype === 'html5') {
    	            charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n';
    	          } else {
    	            charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n';
    	          }
    	          break;

    	        case 'language':
    	        case 'lang':
    	          lang = ' lang="' + globals.metadata.parsed[meta] + '"';
    	          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
    	          break;

    	        default:
    	          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
    	      }
    	    }
    	  }

    	  text = doctypeParsed + '<html' + lang + '>\n<head>\n' + title + charset + metadata + '</head>\n<body>\n' + text.trim() + '\n</body>\n</html>';

    	  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Convert all tabs to spaces
    	 */
    	showdown.subParser('detab', function (text, options, globals) {
    	  text = globals.converter._dispatch('detab.before', text, options, globals);

    	  // expand first n-1 tabs
    	  text = text.replace(/\t(?=\t)/g, '    '); // g_tab_width

    	  // replace the nth with two sentinels
    	  text = text.replace(/\t/g, '¨A¨B');

    	  // use the sentinel to anchor our regex so it doesn't explode
    	  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {
    	    var leadingText = m1,
    	        numSpaces = 4 - leadingText.length % 4;  // g_tab_width

    	    // there *must* be a better way to do this:
    	    for (var i = 0; i < numSpaces; i++) {
    	      leadingText += ' ';
    	    }

    	    return leadingText;
    	  });

    	  // clean up sentinels
    	  text = text.replace(/¨A/g, '    ');  // g_tab_width
    	  text = text.replace(/¨B/g, '');

    	  text = globals.converter._dispatch('detab.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('ellipsis', function (text, options, globals) {

    	  if (!options.ellipsis) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('ellipsis.before', text, options, globals);

    	  text = text.replace(/\.\.\./g, '…');

    	  text = globals.converter._dispatch('ellipsis.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * Turn emoji codes into emojis
    	 *
    	 * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis
    	 */
    	showdown.subParser('emoji', function (text, options, globals) {

    	  if (!options.emoji) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('emoji.before', text, options, globals);

    	  var emojiRgx = /:([\S]+?):/g;

    	  text = text.replace(emojiRgx, function (wm, emojiCode) {
    	    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {
    	      return showdown.helper.emojis[emojiCode];
    	    }
    	    return wm;
    	  });

    	  text = globals.converter._dispatch('emoji.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * Smart processing for ampersands and angle brackets that need to be encoded.
    	 */
    	showdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {
    	  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);

    	  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:
    	  // http://bumppo.net/projects/amputator/
    	  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, '&amp;');

    	  // Encode naked <'s
    	  text = text.replace(/<(?![a-z\/?$!])/gi, '&lt;');

    	  // Encode <
    	  text = text.replace(/</g, '&lt;');

    	  // Encode >
    	  text = text.replace(/>/g, '&gt;');

    	  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Returns the string, with after processing the following backslash escape sequences.
    	 *
    	 * attacklab: The polite way to do this is with the new escapeCharacters() function:
    	 *
    	 *    text = escapeCharacters(text,"\\",true);
    	 *    text = escapeCharacters(text,"`*_{}[]()>#+-.!",true);
    	 *
    	 * ...but we're sidestepping its use of the (slow) RegExp constructor
    	 * as an optimization for Firefox.  This function gets called a LOT.
    	 */
    	showdown.subParser('encodeBackslashEscapes', function (text, options, globals) {
    	  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);

    	  text = text.replace(/\\(\\)/g, showdown.helper.escapeCharactersCallback);
    	  text = text.replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g, showdown.helper.escapeCharactersCallback);

    	  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Encode/escape certain characters inside Markdown code runs.
    	 * The point is that in code, these characters are literals,
    	 * and lose their special Markdown meanings.
    	 */
    	showdown.subParser('encodeCode', function (text, options, globals) {

    	  text = globals.converter._dispatch('encodeCode.before', text, options, globals);

    	  // Encode all ampersands; HTML entities are not
    	  // entities within a Markdown code span.
    	  text = text
    	    .replace(/&/g, '&amp;')
    	  // Do the angle bracket song and dance:
    	    .replace(/</g, '&lt;')
    	    .replace(/>/g, '&gt;')
    	  // Now, escape characters that are magic in Markdown:
    	    .replace(/([*_{}\[\]\\=~-])/g, showdown.helper.escapeCharactersCallback);

    	  text = globals.converter._dispatch('encodeCode.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Within tags -- meaning between < and > -- encode [\ ` * _ ~ =] so they
    	 * don't conflict with their use in Markdown for code, italics and strong.
    	 */
    	showdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {
    	  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);

    	  // Build a regex to find HTML tags.
    	  var tags     = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,
    	      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;

    	  text = text.replace(tags, function (wholeMatch) {
    	    return wholeMatch
    	      .replace(/(.)<\/?code>(?=.)/g, '$1`')
    	      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
    	  });

    	  text = text.replace(comments, function (wholeMatch) {
    	    return wholeMatch
    	      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
    	  });

    	  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Handle github codeblocks prior to running HashHTML so that
    	 * HTML contained within the codeblock gets escaped properly
    	 * Example:
    	 * ```ruby
    	 *     def hello_world(x)
    	 *       puts "Hello, #{x}"
    	 *     end
    	 * ```
    	 */
    	showdown.subParser('githubCodeBlocks', function (text, options, globals) {

    	  // early exit if option is not enabled
    	  if (!options.ghCodeBlocks) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);

    	  text += '¨0';

    	  text = text.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function (wholeMatch, delim, language, codeblock) {
    	    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\n';

    	    // First parse the github code block
    	    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    	    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    	    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    	    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing whitespace

    	    codeblock = '<pre><code' + (language ? ' class="' + language + ' language-' + language + '"' : '') + '>' + codeblock + end + '</code></pre>';

    	    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);

    	    // Since GHCodeblocks can be false positives, we need to
    	    // store the primitive text and the parsed text in a global var,
    	    // and then return a token
    	    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
    	  });

    	  // attacklab: strip sentinel
    	  text = text.replace(/¨0/, '');

    	  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);
    	});

    	showdown.subParser('hashBlock', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashBlock.before', text, options, globals);
    	  text = text.replace(/(^\n+|\n+$)/g, '');
    	  text = '\n\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\n\n';
    	  text = globals.converter._dispatch('hashBlock.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Hash and escape <code> elements that should not be parsed as markdown
    	 */
    	showdown.subParser('hashCodeTags', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);

    	  var repFunc = function (wholeMatch, match, left, right) {
    	    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    	    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';
    	  };

    	  // Hash naked <code>
    	  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\b[^>]*>', '</code>', 'gim');

    	  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('hashElement', function (text, options, globals) {

    	  return function (wholeMatch, m1) {
    	    var blockText = m1;

    	    // Undo double lines
    	    blockText = blockText.replace(/\n\n/g, '\n');
    	    blockText = blockText.replace(/^\n/, '');

    	    // strip trailing blank lines
    	    blockText = blockText.replace(/\n+$/g, '');

    	    // Replace the element text with a marker ("¨KxK" where x is its key)
    	    blockText = '\n\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\n\n';

    	    return blockText;
    	  };
    	});

    	showdown.subParser('hashHTMLBlocks', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);

    	  var blockTags = [
    	        'pre',
    	        'div',
    	        'h1',
    	        'h2',
    	        'h3',
    	        'h4',
    	        'h5',
    	        'h6',
    	        'blockquote',
    	        'table',
    	        'dl',
    	        'ol',
    	        'ul',
    	        'script',
    	        'noscript',
    	        'form',
    	        'fieldset',
    	        'iframe',
    	        'math',
    	        'style',
    	        'section',
    	        'header',
    	        'footer',
    	        'nav',
    	        'article',
    	        'aside',
    	        'address',
    	        'audio',
    	        'canvas',
    	        'figure',
    	        'hgroup',
    	        'output',
    	        'video',
    	        'p'
    	      ],
    	      repFunc = function (wholeMatch, match, left, right) {
    	        var txt = wholeMatch;
    	        // check if this html element is marked as markdown
    	        // if so, it's contents should be parsed as markdown
    	        if (left.search(/\bmarkdown\b/) !== -1) {
    	          txt = left + globals.converter.makeHtml(match) + right;
    	        }
    	        return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
    	      };

    	  if (options.backslashEscapesHTMLTags) {
    	    // encode backslash escaped HTML tags
    	    text = text.replace(/\\<(\/?[^>]+?)>/g, function (wm, inside) {
    	      return '&lt;' + inside + '&gt;';
    	    });
    	  }

    	  // hash HTML Blocks
    	  for (var i = 0; i < blockTags.length; ++i) {

    	    var opTagPos,
    	        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\b[^>]*>)', 'im'),
    	        patLeft  = '<' + blockTags[i] + '\\b[^>]*>',
    	        patRight = '</' + blockTags[i] + '>';
    	    // 1. Look for the first position of the first opening HTML tag in the text
    	    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {

    	      // if the HTML tag is \ escaped, we need to escape it and break


    	      //2. Split the text in that position
    	      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),
    	          //3. Match recursively
    	          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');

    	      // prevent an infinite loop
    	      if (newSubText1 === subTexts[1]) {
    	        break;
    	      }
    	      text = subTexts[0].concat(newSubText1);
    	    }
    	  }
    	  // HR SPECIAL CASE
    	  text = text.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
    	    showdown.subParser('hashElement')(text, options, globals));

    	  // Special case for standalone HTML comments
    	  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {
    	    return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
    	  }, '^ {0,3}<!--', '-->', 'gm');

    	  // PHP and ASP-style processor instructions (<?...?> and <%...%>)
    	  text = text.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
    	    showdown.subParser('hashElement')(text, options, globals));

    	  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Hash span elements that should not be parsed as markdown
    	 */
    	showdown.subParser('hashHTMLSpans', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);

    	  function hashHTMLSpan (html) {
    	    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';
    	  }

    	  // Hash Self Closing tags
    	  text = text.replace(/<[^>]+?\/>/gi, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  // Hash tags without properties
    	  text = text.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  // Hash tags with properties
    	  text = text.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  // Hash self closing tags without />
    	  text = text.replace(/<[^>]+?>/gi, function (wm) {
    	    return hashHTMLSpan(wm);
    	  });

    	  /*showdown.helper.matchRecursiveRegExp(text, '<code\\b[^>]*>', '</code>', 'gi');*/

    	  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Unhash HTML spans
    	 */
    	showdown.subParser('unhashHTMLSpans', function (text, options, globals) {
    	  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);

    	  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {
    	    var repText = globals.gHtmlSpans[i],
    	        // limiter to prevent infinite loop (assume 10 as limit for recurse)
    	        limit = 0;

    	    while (/¨C(\d+)C/.test(repText)) {
    	      var num = RegExp.$1;
    	      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);
    	      if (limit === 10) {
    	        console.error('maximum nesting of 10 spans reached!!!');
    	        break;
    	      }
    	      ++limit;
    	    }
    	    text = text.replace('¨C' + i + 'C', repText);
    	  }

    	  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Hash and escape <pre><code> elements that should not be parsed as markdown
    	 */
    	showdown.subParser('hashPreCodeTags', function (text, options, globals) {
    	  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);

    	  var repFunc = function (wholeMatch, match, left, right) {
    	    // encode html entities
    	    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    	    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
    	  };

    	  // Hash <pre><code>
    	  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>', '^ {0,3}</code>\\s*</pre>', 'gim');

    	  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('headers', function (text, options, globals) {

    	  text = globals.converter._dispatch('headers.before', text, options, globals);

    	  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),

    	      // Set text-style headers:
    	      //	Header 1
    	      //	========
    	      //
    	      //	Header 2
    	      //	--------
    	      //
    	      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm,
    	      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;

    	  text = text.replace(setextRegexH1, function (wholeMatch, m1) {

    	    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
    	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
    	        hLevel = headerLevelStart,
    	        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    	    return showdown.subParser('hashBlock')(hashBlock, options, globals);
    	  });

    	  text = text.replace(setextRegexH2, function (matchFound, m1) {
    	    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
    	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
    	        hLevel = headerLevelStart + 1,
    	        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    	    return showdown.subParser('hashBlock')(hashBlock, options, globals);
    	  });

    	  // atx-style headers:
    	  //  # Header 1
    	  //  ## Header 2
    	  //  ## Header 2 with closing hashes ##
    	  //  ...
    	  //  ###### Header 6
    	  //
    	  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;

    	  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {
    	    var hText = m2;
    	    if (options.customizedHeaderId) {
    	      hText = m2.replace(/\s?\{([^{]+?)}\s*$/, '');
    	    }

    	    var span = showdown.subParser('spanGamut')(hText, options, globals),
    	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m2) + '"',
    	        hLevel = headerLevelStart - 1 + m1.length,
    	        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';

    	    return showdown.subParser('hashBlock')(header, options, globals);
    	  });

    	  function headerId (m) {
    	    var title,
    	        prefix;

    	    // It is separate from other options to allow combining prefix and customized
    	    if (options.customizedHeaderId) {
    	      var match = m.match(/\{([^{]+?)}\s*$/);
    	      if (match && match[1]) {
    	        m = match[1];
    	      }
    	    }

    	    title = m;

    	    // Prefix id to prevent causing inadvertent pre-existing style matches.
    	    if (showdown.helper.isString(options.prefixHeaderId)) {
    	      prefix = options.prefixHeaderId;
    	    } else if (options.prefixHeaderId === true) {
    	      prefix = 'section-';
    	    } else {
    	      prefix = '';
    	    }

    	    if (!options.rawPrefixHeaderId) {
    	      title = prefix + title;
    	    }

    	    if (options.ghCompatibleHeaderId) {
    	      title = title
    	        .replace(/ /g, '-')
    	        // replace previously escaped chars (&, ¨ and $)
    	        .replace(/&amp;/g, '')
    	        .replace(/¨T/g, '')
    	        .replace(/¨D/g, '')
    	        // replace rest of the chars (&~$ are repeated as they might have been escaped)
    	        // borrowed from github's redcarpet (some they should produce similar results)
    	        .replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, '')
    	        .toLowerCase();
    	    } else if (options.rawHeaderId) {
    	      title = title
    	        .replace(/ /g, '-')
    	        // replace previously escaped chars (&, ¨ and $)
    	        .replace(/&amp;/g, '&')
    	        .replace(/¨T/g, '¨')
    	        .replace(/¨D/g, '$')
    	        // replace " and '
    	        .replace(/["']/g, '-')
    	        .toLowerCase();
    	    } else {
    	      title = title
    	        .replace(/[^\w]/g, '')
    	        .toLowerCase();
    	    }

    	    if (options.rawPrefixHeaderId) {
    	      title = prefix + title;
    	    }

    	    if (globals.hashLinkCounts[title]) {
    	      title = title + '-' + (globals.hashLinkCounts[title]++);
    	    } else {
    	      globals.hashLinkCounts[title] = 1;
    	    }
    	    return title;
    	  }

    	  text = globals.converter._dispatch('headers.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Turn Markdown link shortcuts into XHTML <a> tags.
    	 */
    	showdown.subParser('horizontalRule', function (text, options, globals) {
    	  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);

    	  var key = showdown.subParser('hashBlock')('<hr />', options, globals);
    	  text = text.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key);
    	  text = text.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key);
    	  text = text.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key);

    	  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Turn Markdown image shortcuts into <img> tags.
    	 */
    	showdown.subParser('images', function (text, options, globals) {

    	  text = globals.converter._dispatch('images.before', text, options, globals);

    	  var inlineRegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
    	      crazyRegExp       = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,
    	      base64RegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
    	      referenceRegExp   = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,
    	      refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g;

    	  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {
    	    url = url.replace(/\s/g, '');
    	    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);
    	  }

    	  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {

    	    var gUrls   = globals.gUrls,
    	        gTitles = globals.gTitles,
    	        gDims   = globals.gDimensions;

    	    linkId = linkId.toLowerCase();

    	    if (!title) {
    	      title = '';
    	    }
    	    // Special case for explicit empty url
    	    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
    	      url = '';

    	    } else if (url === '' || url === null) {
    	      if (linkId === '' || linkId === null) {
    	        // lower-case and turn embedded newlines into spaces
    	        linkId = altText.toLowerCase().replace(/ ?\n/g, ' ');
    	      }
    	      url = '#' + linkId;

    	      if (!showdown.helper.isUndefined(gUrls[linkId])) {
    	        url = gUrls[linkId];
    	        if (!showdown.helper.isUndefined(gTitles[linkId])) {
    	          title = gTitles[linkId];
    	        }
    	        if (!showdown.helper.isUndefined(gDims[linkId])) {
    	          width = gDims[linkId].width;
    	          height = gDims[linkId].height;
    	        }
    	      } else {
    	        return wholeMatch;
    	      }
    	    }

    	    altText = altText
    	      .replace(/"/g, '&quot;')
    	    //altText = showdown.helper.escapeCharacters(altText, '*_', false);
    	      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	    //url = showdown.helper.escapeCharacters(url, '*_', false);
    	    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	    var result = '<img src="' + url + '" alt="' + altText + '"';

    	    if (title && showdown.helper.isString(title)) {
    	      title = title
    	        .replace(/"/g, '&quot;')
    	      //title = showdown.helper.escapeCharacters(title, '*_', false);
    	        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    	      result += ' title="' + title + '"';
    	    }

    	    if (width && height) {
    	      width  = (width === '*') ? 'auto' : width;
    	      height = (height === '*') ? 'auto' : height;

    	      result += ' width="' + width + '"';
    	      result += ' height="' + height + '"';
    	    }

    	    result += ' />';

    	    return result;
    	  }

    	  // First, handle reference-style labeled images: ![alt text][id]
    	  text = text.replace(referenceRegExp, writeImageTag);

    	  // Next, handle inline images:  ![alt text](url =<width>x<height> "optional title")

    	  // base64 encoded images
    	  text = text.replace(base64RegExp, writeImageTagBase64);

    	  // cases with crazy urls like ./image/cat1).png
    	  text = text.replace(crazyRegExp, writeImageTag);

    	  // normal cases
    	  text = text.replace(inlineRegExp, writeImageTag);

    	  // handle reference-style shortcuts: ![img text]
    	  text = text.replace(refShortcutRegExp, writeImageTag);

    	  text = globals.converter._dispatch('images.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('italicsAndBold', function (text, options, globals) {

    	  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);

    	  // it's faster to have 3 separate regexes for each case than have just one
    	  // because of backtracing, in some cases, it could lead to an exponential effect
    	  // called "catastrophic backtrace". Ominous!

    	  function parseInside (txt, left, right) {
    	    /*
    	    if (options.simplifiedAutoLink) {
    	      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    	    }
    	    */
    	    return left + txt + right;
    	  }

    	  // Parse underscores
    	  if (options.literalMidWordUnderscores) {
    	    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
    	      return parseInside (txt, '<strong><em>', '</em></strong>');
    	    });
    	    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
    	      return parseInside (txt, '<strong>', '</strong>');
    	    });
    	    text = text.replace(/\b_(\S[\s\S]*?)_\b/g, function (wm, txt) {
    	      return parseInside (txt, '<em>', '</em>');
    	    });
    	  } else {
    	    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    	    });
    	    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    	    });
    	    text = text.replace(/_([^\s_][\s\S]*?)_/g, function (wm, m) {
    	      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)
    	      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    	    });
    	  }

    	  // Now parse asterisks
    	  if (options.literalMidWordAsterisks) {
    	    text = text.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function (wm, lead, txt) {
    	      return parseInside (txt, lead + '<strong><em>', '</em></strong>');
    	    });
    	    text = text.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function (wm, lead, txt) {
    	      return parseInside (txt, lead + '<strong>', '</strong>');
    	    });
    	    text = text.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function (wm, lead, txt) {
    	      return parseInside (txt, lead + '<em>', '</em>');
    	    });
    	  } else {
    	    text = text.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    	    });
    	    text = text.replace(/\*\*(\S[\s\S]*?)\*\*/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    	    });
    	    text = text.replace(/\*([^\s*][\s\S]*?)\*/g, function (wm, m) {
    	      // !/^\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)
    	      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    	    });
    	  }


    	  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Form HTML ordered (numbered) and unordered (bulleted) lists.
    	 */
    	showdown.subParser('lists', function (text, options, globals) {

    	  /**
    	   * Process the contents of a single ordered or unordered list, splitting it
    	   * into individual list items.
    	   * @param {string} listStr
    	   * @param {boolean} trimTrailing
    	   * @returns {string}
    	   */
    	  function processListItems (listStr, trimTrailing) {
    	    // The $g_list_level global keeps track of when we're inside a list.
    	    // Each time we enter a list, we increment it; when we leave a list,
    	    // we decrement. If it's zero, we're not in a list anymore.
    	    //
    	    // We do this because when we're not inside a list, we want to treat
    	    // something like this:
    	    //
    	    //    I recommend upgrading to version
    	    //    8. Oops, now this line is treated
    	    //    as a sub-list.
    	    //
    	    // As a single paragraph, despite the fact that the second line starts
    	    // with a digit-period-space sequence.
    	    //
    	    // Whereas when we're inside a list (or sub-list), that line will be
    	    // treated as the start of a sub-list. What a kludge, huh? This is
    	    // an aspect of Markdown's syntax that's hard to parse perfectly
    	    // without resorting to mind-reading. Perhaps the solution is to
    	    // change the syntax rules such that sub-lists must start with a
    	    // starting cardinal number; e.g. "1." or "a.".
    	    globals.gListLevel++;

    	    // trim trailing blank lines:
    	    listStr = listStr.replace(/\n{2,}$/, '\n');

    	    // attacklab: add sentinel to emulate \z
    	    listStr += '¨0';

    	    var rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,
    	        isParagraphed = (/\n[ \t]*\n(?!¨0)/.test(listStr));

    	    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,
    	    // which is a syntax breaking change
    	    // activating this option reverts to old behavior
    	    if (options.disableForced4SpacesIndentedSublists) {
    	      rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm;
    	    }

    	    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {
    	      checked = (checked && checked.trim() !== '');

    	      var item = showdown.subParser('outdent')(m4, options, globals),
    	          bulletStyle = '';

    	      // Support for github tasklists
    	      if (taskbtn && options.tasklists) {
    	        bulletStyle = ' class="task-list-item" style="list-style-type: none;"';
    	        item = item.replace(/^[ \t]*\[(x|X| )?]/m, function () {
    	          var otp = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
    	          if (checked) {
    	            otp += ' checked';
    	          }
    	          otp += '>';
    	          return otp;
    	        });
    	      }

    	      // ISSUE #312
    	      // This input: - - - a
    	      // causes trouble to the parser, since it interprets it as:
    	      // <ul><li><li><li>a</li></li></li></ul>
    	      // instead of:
    	      // <ul><li>- - a</li></ul>
    	      // So, to prevent it, we will put a marker (¨A)in the beginning of the line
    	      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser
    	      item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function (wm2) {
    	        return '¨A' + wm2;
    	      });

    	      // m1 - Leading line or
    	      // Has a double return (multi paragraph) or
    	      // Has sublist
    	      if (m1 || (item.search(/\n{2,}/) > -1)) {
    	        item = showdown.subParser('githubCodeBlocks')(item, options, globals);
    	        item = showdown.subParser('blockGamut')(item, options, globals);
    	      } else {
    	        // Recursion for sub-lists:
    	        item = showdown.subParser('lists')(item, options, globals);
    	        item = item.replace(/\n$/, ''); // chomp(item)
    	        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);

    	        // Colapse double linebreaks
    	        item = item.replace(/\n\n+/g, '\n\n');
    	        if (isParagraphed) {
    	          item = showdown.subParser('paragraphs')(item, options, globals);
    	        } else {
    	          item = showdown.subParser('spanGamut')(item, options, globals);
    	        }
    	      }

    	      // now we need to remove the marker (¨A)
    	      item = item.replace('¨A', '');
    	      // we can finally wrap the line in list item tags
    	      item =  '<li' + bulletStyle + '>' + item + '</li>\n';

    	      return item;
    	    });

    	    // attacklab: strip sentinel
    	    listStr = listStr.replace(/¨0/g, '');

    	    globals.gListLevel--;

    	    if (trimTrailing) {
    	      listStr = listStr.replace(/\s+$/, '');
    	    }

    	    return listStr;
    	  }

    	  function styleStartNumber (list, listType) {
    	    // check if ol and starts by a number different than 1
    	    if (listType === 'ol') {
    	      var res = list.match(/^ *(\d+)\./);
    	      if (res && res[1] !== '1') {
    	        return ' start="' + res[1] + '"';
    	      }
    	    }
    	    return '';
    	  }

    	  /**
    	   * Check and parse consecutive lists (better fix for issue #142)
    	   * @param {string} list
    	   * @param {string} listType
    	   * @param {boolean} trimTrailing
    	   * @returns {string}
    	   */
    	  function parseConsecutiveLists (list, listType, trimTrailing) {
    	    // check if we caught 2 or more consecutive lists by mistake
    	    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa
    	    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm,
    	        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm,
    	        counterRxg = (listType === 'ul') ? olRgx : ulRgx,
    	        result = '';

    	    if (list.search(counterRxg) !== -1) {
    	      (function parseCL (txt) {
    	        var pos = txt.search(counterRxg),
    	            style = styleStartNumber(list, listType);
    	        if (pos !== -1) {
    	          // slice
    	          result += '\n\n<' + listType + style + '>\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\n';

    	          // invert counterType and listType
    	          listType = (listType === 'ul') ? 'ol' : 'ul';
    	          counterRxg = (listType === 'ul') ? olRgx : ulRgx;

    	          //recurse
    	          parseCL(txt.slice(pos));
    	        } else {
    	          result += '\n\n<' + listType + style + '>\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\n';
    	        }
    	      })(list);
    	    } else {
    	      var style = styleStartNumber(list, listType);
    	      result = '\n\n<' + listType + style + '>\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\n';
    	    }

    	    return result;
    	  }

    	  /** Start of list parsing **/
    	  text = globals.converter._dispatch('lists.before', text, options, globals);
    	  // add sentinel to hack around khtml/safari bug:
    	  // http://bugs.webkit.org/show_bug.cgi?id=11231
    	  text += '¨0';

    	  if (globals.gListLevel) {
    	    text = text.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
    	      function (wholeMatch, list, m2) {
    	        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
    	        return parseConsecutiveLists(list, listType, true);
    	      }
    	    );
    	  } else {
    	    text = text.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
    	      function (wholeMatch, m1, list, m3) {
    	        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
    	        return parseConsecutiveLists(list, listType, false);
    	      }
    	    );
    	  }

    	  // strip sentinel
    	  text = text.replace(/¨0/, '');
    	  text = globals.converter._dispatch('lists.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Parse metadata at the top of the document
    	 */
    	showdown.subParser('metadata', function (text, options, globals) {

    	  if (!options.metadata) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('metadata.before', text, options, globals);

    	  function parseMetadataContents (content) {
    	    // raw is raw so it's not changed in any way
    	    globals.metadata.raw = content;

    	    // escape chars forbidden in html attributes
    	    // double quotes
    	    content = content
    	      // ampersand first
    	      .replace(/&/g, '&amp;')
    	      // double quotes
    	      .replace(/"/g, '&quot;');

    	    content = content.replace(/\n {4}/g, ' ');
    	    content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function (wm, key, value) {
    	      globals.metadata.parsed[key] = value;
    	      return '';
    	    });
    	  }

    	  text = text.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function (wholematch, format, content) {
    	    parseMetadataContents(content);
    	    return '¨M';
    	  });

    	  text = text.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function (wholematch, format, content) {
    	    if (format) {
    	      globals.metadata.format = format;
    	    }
    	    parseMetadataContents(content);
    	    return '¨M';
    	  });

    	  text = text.replace(/¨M/g, '');

    	  text = globals.converter._dispatch('metadata.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 * Remove one level of line-leading tabs or spaces
    	 */
    	showdown.subParser('outdent', function (text, options, globals) {
    	  text = globals.converter._dispatch('outdent.before', text, options, globals);

    	  // attacklab: hack around Konqueror 3.5.4 bug:
    	  // "----------bug".replace(/^-/g,"") == "bug"
    	  text = text.replace(/^(\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width

    	  // attacklab: clean up hack
    	  text = text.replace(/¨0/g, '');

    	  text = globals.converter._dispatch('outdent.after', text, options, globals);
    	  return text;
    	});

    	/**
    	 *
    	 */
    	showdown.subParser('paragraphs', function (text, options, globals) {

    	  text = globals.converter._dispatch('paragraphs.before', text, options, globals);
    	  // Strip leading and trailing lines:
    	  text = text.replace(/^\n+/g, '');
    	  text = text.replace(/\n+$/g, '');

    	  var grafs = text.split(/\n{2,}/g),
    	      grafsOut = [],
    	      end = grafs.length; // Wrap <p> tags

    	  for (var i = 0; i < end; i++) {
    	    var str = grafs[i];
    	    // if this is an HTML marker, copy it
    	    if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
    	      grafsOut.push(str);

    	    // test for presence of characters to prevent empty lines being parsed
    	    // as paragraphs (resulting in undesired extra empty paragraphs)
    	    } else if (str.search(/\S/) >= 0) {
    	      str = showdown.subParser('spanGamut')(str, options, globals);
    	      str = str.replace(/^([ \t]*)/g, '<p>');
    	      str += '</p>';
    	      grafsOut.push(str);
    	    }
    	  }

    	  /** Unhashify HTML blocks */
    	  end = grafsOut.length;
    	  for (i = 0; i < end; i++) {
    	    var blockText = '',
    	        grafsOutIt = grafsOut[i],
    	        codeFlag = false;
    	    // if this is a marker for an html block...
    	    // use RegExp.test instead of string.search because of QML bug
    	    while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
    	      var delim = RegExp.$1,
    	          num   = RegExp.$2;

    	      if (delim === 'K') {
    	        blockText = globals.gHtmlBlocks[num];
    	      } else {
    	        // we need to check if ghBlock is a false positive
    	        if (codeFlag) {
    	          // use encoded version of all text
    	          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);
    	        } else {
    	          blockText = globals.ghCodeBlocks[num].codeblock;
    	        }
    	      }
    	      blockText = blockText.replace(/\$/g, '$$$$'); // Escape any dollar signs

    	      grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText);
    	      // Check if grafsOutIt is a pre->code
    	      if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
    	        codeFlag = true;
    	      }
    	    }
    	    grafsOut[i] = grafsOutIt;
    	  }
    	  text = grafsOut.join('\n');
    	  // Strip leading and trailing lines:
    	  text = text.replace(/^\n+/g, '');
    	  text = text.replace(/\n+$/g, '');
    	  return globals.converter._dispatch('paragraphs.after', text, options, globals);
    	});

    	/**
    	 * Run extension
    	 */
    	showdown.subParser('runExtension', function (ext, text, options, globals) {

    	  if (ext.filter) {
    	    text = ext.filter(text, globals.converter, options);

    	  } else if (ext.regex) {
    	    // TODO remove this when old extension loading mechanism is deprecated
    	    var re = ext.regex;
    	    if (!(re instanceof RegExp)) {
    	      re = new RegExp(re, 'g');
    	    }
    	    text = text.replace(re, ext.replace);
    	  }

    	  return text;
    	});

    	/**
    	 * These are all the transformations that occur *within* block-level
    	 * tags like paragraphs, headers, and list items.
    	 */
    	showdown.subParser('spanGamut', function (text, options, globals) {

    	  text = globals.converter._dispatch('spanGamut.before', text, options, globals);
    	  text = showdown.subParser('codeSpans')(text, options, globals);
    	  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);
    	  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);

    	  // Process anchor and image tags. Images must come first,
    	  // because ![foo][f] looks like an anchor.
    	  text = showdown.subParser('images')(text, options, globals);
    	  text = showdown.subParser('anchors')(text, options, globals);

    	  // Make links out of things like `<http://example.com/>`
    	  // Must come after anchors, because you can use < and >
    	  // delimiters in inline links like [this](<url>).
    	  text = showdown.subParser('autoLinks')(text, options, globals);
    	  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);
    	  text = showdown.subParser('emoji')(text, options, globals);
    	  text = showdown.subParser('underline')(text, options, globals);
    	  text = showdown.subParser('italicsAndBold')(text, options, globals);
    	  text = showdown.subParser('strikethrough')(text, options, globals);
    	  text = showdown.subParser('ellipsis')(text, options, globals);

    	  // we need to hash HTML tags inside spans
    	  text = showdown.subParser('hashHTMLSpans')(text, options, globals);

    	  // now we encode amps and angles
    	  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);

    	  // Do hard breaks
    	  if (options.simpleLineBreaks) {
    	    // GFM style hard breaks
    	    // only add line breaks if the text does not contain a block (special case for lists)
    	    if (!/\n\n¨K/.test(text)) {
    	      text = text.replace(/\n+/g, '<br />\n');
    	    }
    	  } else {
    	    // Vanilla hard breaks
    	    text = text.replace(/  +\n/g, '<br />\n');
    	  }

    	  text = globals.converter._dispatch('spanGamut.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('strikethrough', function (text, options, globals) {

    	  function parseInside (txt) {
    	    if (options.simplifiedAutoLink) {
    	      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    	    }
    	    return '<del>' + txt + '</del>';
    	  }

    	  if (options.strikethrough) {
    	    text = globals.converter._dispatch('strikethrough.before', text, options, globals);
    	    text = text.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });
    	    text = globals.converter._dispatch('strikethrough.after', text, options, globals);
    	  }

    	  return text;
    	});

    	/**
    	 * Strips link definitions from text, stores the URLs and titles in
    	 * hash references.
    	 * Link defs are in the form: ^[id]: url "optional title"
    	 */
    	showdown.subParser('stripLinkDefinitions', function (text, options, globals) {

    	  var regex       = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,
    	      base64Regex = /^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;

    	  // attacklab: sentinel workarounds for lack of \A and \Z, safari\khtml bug
    	  text += '¨0';

    	  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {

    	    // if there aren't two instances of linkId it must not be a reference link so back out
    	    linkId = linkId.toLowerCase();
    	    if (text.toLowerCase().split(linkId).length - 1 < 2) {
    	      return wholeMatch;
    	    }
    	    if (url.match(/^data:.+?\/.+?;base64,/)) {
    	      // remove newlines
    	      globals.gUrls[linkId] = url.replace(/\s/g, '');
    	    } else {
    	      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive
    	    }

    	    if (blankLines) {
    	      // Oops, found blank lines, so it's not a title.
    	      // Put back the parenthetical statement we stole.
    	      return blankLines + title;

    	    } else {
    	      if (title) {
    	        globals.gTitles[linkId] = title.replace(/"|'/g, '&quot;');
    	      }
    	      if (options.parseImgDimensions && width && height) {
    	        globals.gDimensions[linkId] = {
    	          width:  width,
    	          height: height
    	        };
    	      }
    	    }
    	    // Completely remove the definition from the text
    	    return '';
    	  };

    	  // first we try to find base64 link references
    	  text = text.replace(base64Regex, replaceFunc);

    	  text = text.replace(regex, replaceFunc);

    	  // attacklab: strip sentinel
    	  text = text.replace(/¨0/, '');

    	  return text;
    	});

    	showdown.subParser('tables', function (text, options, globals) {

    	  if (!options.tables) {
    	    return text;
    	  }

    	  var tableRgx       = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,
    	      //singeColTblRgx = /^ {0,3}\|.+\|\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n(?: {0,3}\|.+\|\n)+(?:\n\n|¨0)/gm;
    	      singeColTblRgx = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;

    	  function parseStyles (sLine) {
    	    if (/^:[ \t]*--*$/.test(sLine)) {
    	      return ' style="text-align:left;"';
    	    } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
    	      return ' style="text-align:right;"';
    	    } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
    	      return ' style="text-align:center;"';
    	    } else {
    	      return '';
    	    }
    	  }

    	  function parseHeaders (header, style) {
    	    var id = '';
    	    header = header.trim();
    	    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility
    	    if (options.tablesHeaderId || options.tableHeaderId) {
    	      id = ' id="' + header.replace(/ /g, '_').toLowerCase() + '"';
    	    }
    	    header = showdown.subParser('spanGamut')(header, options, globals);

    	    return '<th' + id + style + '>' + header + '</th>\n';
    	  }

    	  function parseCells (cell, style) {
    	    var subText = showdown.subParser('spanGamut')(cell, options, globals);
    	    return '<td' + style + '>' + subText + '</td>\n';
    	  }

    	  function buildTable (headers, cells) {
    	    var tb = '<table>\n<thead>\n<tr>\n',
    	        tblLgn = headers.length;

    	    for (var i = 0; i < tblLgn; ++i) {
    	      tb += headers[i];
    	    }
    	    tb += '</tr>\n</thead>\n<tbody>\n';

    	    for (i = 0; i < cells.length; ++i) {
    	      tb += '<tr>\n';
    	      for (var ii = 0; ii < tblLgn; ++ii) {
    	        tb += cells[i][ii];
    	      }
    	      tb += '</tr>\n';
    	    }
    	    tb += '</tbody>\n</table>\n';
    	    return tb;
    	  }

    	  function parseTable (rawTable) {
    	    var i, tableLines = rawTable.split('\n');

    	    for (i = 0; i < tableLines.length; ++i) {
    	      // strip wrong first and last column if wrapped tables are used
    	      if (/^ {0,3}\|/.test(tableLines[i])) {
    	        tableLines[i] = tableLines[i].replace(/^ {0,3}\|/, '');
    	      }
    	      if (/\|[ \t]*$/.test(tableLines[i])) {
    	        tableLines[i] = tableLines[i].replace(/\|[ \t]*$/, '');
    	      }
    	      // parse code spans first, but we only support one line code spans
    	      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);
    	    }

    	    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),
    	        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),
    	        rawCells = [],
    	        headers = [],
    	        styles = [],
    	        cells = [];

    	    tableLines.shift();
    	    tableLines.shift();

    	    for (i = 0; i < tableLines.length; ++i) {
    	      if (tableLines[i].trim() === '') {
    	        continue;
    	      }
    	      rawCells.push(
    	        tableLines[i]
    	          .split('|')
    	          .map(function (s) {
    	            return s.trim();
    	          })
    	      );
    	    }

    	    if (rawHeaders.length < rawStyles.length) {
    	      return rawTable;
    	    }

    	    for (i = 0; i < rawStyles.length; ++i) {
    	      styles.push(parseStyles(rawStyles[i]));
    	    }

    	    for (i = 0; i < rawHeaders.length; ++i) {
    	      if (showdown.helper.isUndefined(styles[i])) {
    	        styles[i] = '';
    	      }
    	      headers.push(parseHeaders(rawHeaders[i], styles[i]));
    	    }

    	    for (i = 0; i < rawCells.length; ++i) {
    	      var row = [];
    	      for (var ii = 0; ii < headers.length; ++ii) {
    	        if (showdown.helper.isUndefined(rawCells[i][ii])) ;
    	        row.push(parseCells(rawCells[i][ii], styles[ii]));
    	      }
    	      cells.push(row);
    	    }

    	    return buildTable(headers, cells);
    	  }

    	  text = globals.converter._dispatch('tables.before', text, options, globals);

    	  // find escaped pipe characters
    	  text = text.replace(/\\(\|)/g, showdown.helper.escapeCharactersCallback);

    	  // parse multi column tables
    	  text = text.replace(tableRgx, parseTable);

    	  // parse one column tables
    	  text = text.replace(singeColTblRgx, parseTable);

    	  text = globals.converter._dispatch('tables.after', text, options, globals);

    	  return text;
    	});

    	showdown.subParser('underline', function (text, options, globals) {

    	  if (!options.underline) {
    	    return text;
    	  }

    	  text = globals.converter._dispatch('underline.before', text, options, globals);

    	  if (options.literalMidWordUnderscores) {
    	    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
    	      return '<u>' + txt + '</u>';
    	    });
    	    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
    	      return '<u>' + txt + '</u>';
    	    });
    	  } else {
    	    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    	    });
    	    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
    	      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    	    });
    	  }

    	  // escape remaining underscores to prevent them being parsed by italic and bold
    	  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);

    	  text = globals.converter._dispatch('underline.after', text, options, globals);

    	  return text;
    	});

    	/**
    	 * Swap back in all the special characters we've hidden.
    	 */
    	showdown.subParser('unescapeSpecialChars', function (text, options, globals) {
    	  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);

    	  text = text.replace(/¨E(\d+)E/g, function (wholeMatch, m1) {
    	    var charCodeToReplace = parseInt(m1);
    	    return String.fromCharCode(charCodeToReplace);
    	  });

    	  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);
    	  return text;
    	});

    	showdown.subParser('makeMarkdown.blockquote', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    var children = node.childNodes,
    	        childrenLength = children.length;

    	    for (var i = 0; i < childrenLength; ++i) {
    	      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);

    	      if (innerTxt === '') {
    	        continue;
    	      }
    	      txt += innerTxt;
    	    }
    	  }
    	  // cleanup
    	  txt = txt.trim();
    	  txt = '> ' + txt.split('\n').join('\n> ');
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.codeBlock', function (node, globals) {

    	  var lang = node.getAttribute('language'),
    	      num  = node.getAttribute('precodenum');
    	  return '```' + lang + '\n' + globals.preList[num] + '\n```';
    	});

    	showdown.subParser('makeMarkdown.codeSpan', function (node) {

    	  return '`' + node.innerHTML + '`';
    	});

    	showdown.subParser('makeMarkdown.emphasis', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    txt += '*';
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '*';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {

    	  var headerMark = new Array(headerLevel + 1).join('#'),
    	      txt = '';

    	  if (node.hasChildNodes()) {
    	    txt = headerMark + ' ';
    	    var children = node.childNodes,
    	        childrenLength = children.length;

    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.hr', function () {

    	  return '---';
    	});

    	showdown.subParser('makeMarkdown.image', function (node) {

    	  var txt = '';
    	  if (node.hasAttribute('src')) {
    	    txt += '![' + node.getAttribute('alt') + '](';
    	    txt += '<' + node.getAttribute('src') + '>';
    	    if (node.hasAttribute('width') && node.hasAttribute('height')) {
    	      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');
    	    }

    	    if (node.hasAttribute('title')) {
    	      txt += ' "' + node.getAttribute('title') + '"';
    	    }
    	    txt += ')';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.links', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes() && node.hasAttribute('href')) {
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    txt = '[';
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '](';
    	    txt += '<' + node.getAttribute('href') + '>';
    	    if (node.hasAttribute('title')) {
    	      txt += ' "' + node.getAttribute('title') + '"';
    	    }
    	    txt += ')';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.list', function (node, globals, type) {

    	  var txt = '';
    	  if (!node.hasChildNodes()) {
    	    return '';
    	  }
    	  var listItems       = node.childNodes,
    	      listItemsLenght = listItems.length,
    	      listNum = node.getAttribute('start') || 1;

    	  for (var i = 0; i < listItemsLenght; ++i) {
    	    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {
    	      continue;
    	    }

    	    // define the bullet to use in list
    	    var bullet = '';
    	    if (type === 'ol') {
    	      bullet = listNum.toString() + '. ';
    	    } else {
    	      bullet = '- ';
    	    }

    	    // parse list item
    	    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);
    	    ++listNum;
    	  }

    	  // add comment at the end to prevent consecutive lists to be parsed as one
    	  txt += '\n<!-- -->\n';
    	  return txt.trim();
    	});

    	showdown.subParser('makeMarkdown.listItem', function (node, globals) {

    	  var listItemTxt = '';

    	  var children = node.childNodes,
    	      childrenLenght = children.length;

    	  for (var i = 0; i < childrenLenght; ++i) {
    	    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	  }
    	  // if it's only one liner, we need to add a newline at the end
    	  if (!/\n$/.test(listItemTxt)) {
    	    listItemTxt += '\n';
    	  } else {
    	    // it's multiparagraph, so we need to indent
    	    listItemTxt = listItemTxt
    	      .split('\n')
    	      .join('\n    ')
    	      .replace(/^ {4}$/gm, '')
    	      .replace(/\n\n+/g, '\n\n');
    	  }

    	  return listItemTxt;
    	});



    	showdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {

    	  spansOnly = spansOnly || false;

    	  var txt = '';

    	  // edge case of text without wrapper paragraph
    	  if (node.nodeType === 3) {
    	    return showdown.subParser('makeMarkdown.txt')(node, globals);
    	  }

    	  // HTML comment
    	  if (node.nodeType === 8) {
    	    return '<!--' + node.data + '-->\n\n';
    	  }

    	  // process only node elements
    	  if (node.nodeType !== 1) {
    	    return '';
    	  }

    	  var tagName = node.tagName.toLowerCase();

    	  switch (tagName) {

    	    //
    	    // BLOCKS
    	    //
    	    case 'h1':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\n\n'; }
    	      break;
    	    case 'h2':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\n\n'; }
    	      break;
    	    case 'h3':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\n\n'; }
    	      break;
    	    case 'h4':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\n\n'; }
    	      break;
    	    case 'h5':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\n\n'; }
    	      break;
    	    case 'h6':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\n\n'; }
    	      break;

    	    case 'p':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\n\n'; }
    	      break;

    	    case 'blockquote':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\n\n'; }
    	      break;

    	    case 'hr':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\n\n'; }
    	      break;

    	    case 'ol':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\n\n'; }
    	      break;

    	    case 'ul':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\n\n'; }
    	      break;

    	    case 'precode':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\n\n'; }
    	      break;

    	    case 'pre':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\n\n'; }
    	      break;

    	    case 'table':
    	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\n\n'; }
    	      break;

    	    //
    	    // SPANS
    	    //
    	    case 'code':
    	      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);
    	      break;

    	    case 'em':
    	    case 'i':
    	      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);
    	      break;

    	    case 'strong':
    	    case 'b':
    	      txt = showdown.subParser('makeMarkdown.strong')(node, globals);
    	      break;

    	    case 'del':
    	      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);
    	      break;

    	    case 'a':
    	      txt = showdown.subParser('makeMarkdown.links')(node, globals);
    	      break;

    	    case 'img':
    	      txt = showdown.subParser('makeMarkdown.image')(node, globals);
    	      break;

    	    default:
    	      txt = node.outerHTML + '\n\n';
    	  }

    	  // common normalization
    	  // TODO eventually

    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.paragraph', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	  }

    	  // some text normalization
    	  txt = txt.trim();

    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.pre', function (node, globals) {

    	  var num  = node.getAttribute('prenum');
    	  return '<pre>' + globals.preList[num] + '</pre>';
    	});

    	showdown.subParser('makeMarkdown.strikethrough', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    txt += '~~';
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '~~';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.strong', function (node, globals) {

    	  var txt = '';
    	  if (node.hasChildNodes()) {
    	    txt += '**';
    	    var children = node.childNodes,
    	        childrenLength = children.length;
    	    for (var i = 0; i < childrenLength; ++i) {
    	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    	    }
    	    txt += '**';
    	  }
    	  return txt;
    	});

    	showdown.subParser('makeMarkdown.table', function (node, globals) {

    	  var txt = '',
    	      tableArray = [[], []],
    	      headings   = node.querySelectorAll('thead>tr>th'),
    	      rows       = node.querySelectorAll('tbody>tr'),
    	      i, ii;
    	  for (i = 0; i < headings.length; ++i) {
    	    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),
    	        allign = '---';

    	    if (headings[i].hasAttribute('style')) {
    	      var style = headings[i].getAttribute('style').toLowerCase().replace(/\s/g, '');
    	      switch (style) {
    	        case 'text-align:left;':
    	          allign = ':---';
    	          break;
    	        case 'text-align:right;':
    	          allign = '---:';
    	          break;
    	        case 'text-align:center;':
    	          allign = ':---:';
    	          break;
    	      }
    	    }
    	    tableArray[0][i] = headContent.trim();
    	    tableArray[1][i] = allign;
    	  }

    	  for (i = 0; i < rows.length; ++i) {
    	    var r = tableArray.push([]) - 1,
    	        cols = rows[i].getElementsByTagName('td');

    	    for (ii = 0; ii < headings.length; ++ii) {
    	      var cellContent = ' ';
    	      if (typeof cols[ii] !== 'undefined') {
    	        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);
    	      }
    	      tableArray[r].push(cellContent);
    	    }
    	  }

    	  var cellSpacesCount = 3;
    	  for (i = 0; i < tableArray.length; ++i) {
    	    for (ii = 0; ii < tableArray[i].length; ++ii) {
    	      var strLen = tableArray[i][ii].length;
    	      if (strLen > cellSpacesCount) {
    	        cellSpacesCount = strLen;
    	      }
    	    }
    	  }

    	  for (i = 0; i < tableArray.length; ++i) {
    	    for (ii = 0; ii < tableArray[i].length; ++ii) {
    	      if (i === 1) {
    	        if (tableArray[i][ii].slice(-1) === ':') {
    	          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';
    	        } else {
    	          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');
    	        }
    	      } else {
    	        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);
    	      }
    	    }
    	    txt += '| ' + tableArray[i].join(' | ') + ' |\n';
    	  }

    	  return txt.trim();
    	});

    	showdown.subParser('makeMarkdown.tableCell', function (node, globals) {

    	  var txt = '';
    	  if (!node.hasChildNodes()) {
    	    return '';
    	  }
    	  var children = node.childNodes,
    	      childrenLength = children.length;

    	  for (var i = 0; i < childrenLength; ++i) {
    	    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);
    	  }
    	  return txt.trim();
    	});

    	showdown.subParser('makeMarkdown.txt', function (node) {

    	  var txt = node.nodeValue;

    	  // multiple spaces are collapsed
    	  txt = txt.replace(/ +/g, ' ');

    	  // replace the custom ¨NBSP; with a space
    	  txt = txt.replace(/¨NBSP;/g, ' ');

    	  // ", <, > and & should replace escaped html entities
    	  txt = showdown.helper.unescapeHTMLEntities(txt);

    	  // escape markdown magic characters
    	  // emphasis, strong and strikethrough - can appear everywhere
    	  // we also escape pipe (|) because of tables
    	  // and escape ` because of code blocks and spans
    	  txt = txt.replace(/([*_~|`])/g, '\\$1');

    	  // escape > because of blockquotes
    	  txt = txt.replace(/^(\s*)>/g, '\\$1>');

    	  // hash character, only troublesome at the beginning of a line because of headers
    	  txt = txt.replace(/^#/gm, '\\#');

    	  // horizontal rules
    	  txt = txt.replace(/^(\s*)([-=]{3,})(\s*)$/, '$1\\$2$3');

    	  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer
    	  txt = txt.replace(/^( {0,3}\d+)\./gm, '$1\\.');

    	  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)
    	  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\$2');

    	  // images and links, ] followed by ( is problematic, so we escape it
    	  txt = txt.replace(/]([\s]*)\(/g, '\\]$1\\(');

    	  // reference URIs must also be escaped
    	  txt = txt.replace(/^ {0,3}\[([\S \t]*?)]:/gm, '\\[$1]:');

    	  return txt;
    	});

    	var root = this;

    	// AMD Loader
    	if (module.exports) {
    	  module.exports = showdown;

    	// Regular Browser loader
    	} else {
    	  root.showdown = showdown;
    	}
    	}).call(commonjsGlobal);

    	
    } (showdown$1));

    var showdownExports = showdown$1.exports;
    var showdown = /*@__PURE__*/getDefaultExportFromCjs(showdownExports);

    /*
     *  big.js v6.2.1
     *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
     *  Copyright (c) 2022 Michael Mclaughlin
     *  https://github.com/MikeMcl/big.js/LICENCE.md
     */


    /************************************** EDITABLE DEFAULTS *****************************************/


      // The default values below must be integers within the stated ranges.

      /*
       * The maximum number of decimal places (DP) of the results of operations involving division:
       * div and sqrt, and pow with negative exponents.
       */
    var DP = 20,          // 0 to MAX_DP

      /*
       * The rounding mode (RM) used when rounding to the above decimal places.
       *
       *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
       *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
       *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
       *  3  Away from zero.                                  (ROUND_UP)
       */
      RM = 1,             // 0, 1, 2 or 3

      // The maximum value of DP and Big.DP.
      MAX_DP = 1E6,       // 0 to 1000000

      // The maximum magnitude of the exponent argument to the pow method.
      MAX_POWER = 1E6,    // 1 to 1000000

      /*
       * The negative exponent (NE) at and beneath which toString returns exponential notation.
       * (JavaScript numbers: -7)
       * -1000000 is the minimum recommended exponent value of a Big.
       */
      NE = -7,            // 0 to -1000000

      /*
       * The positive exponent (PE) at and above which toString returns exponential notation.
       * (JavaScript numbers: 21)
       * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
       */
      PE = 21,            // 0 to 1000000

      /*
       * When true, an error will be thrown if a primitive number is passed to the Big constructor,
       * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
       * primitive number without a loss of precision.
       */
      STRICT = false,     // true or false


    /**************************************************************************************************/


      // Error messages.
      NAME = '[big.js] ',
      INVALID = NAME + 'Invalid ',
      INVALID_DP = INVALID + 'decimal places',
      INVALID_RM = INVALID + 'rounding mode',
      DIV_BY_ZERO = NAME + 'Division by zero',

      // The shared prototype object.
      P$2 = {},
      UNDEFINED = void 0,
      NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


    /*
     * Create and return a Big constructor.
     */
    function _Big_() {

      /*
       * The Big constructor and exported function.
       * Create and return a new instance of a Big number object.
       *
       * n {number|string|Big} A numeric value.
       */
      function Big(n) {
        var x = this;

        // Enable constructor usage without new.
        if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

        // Duplicate.
        if (n instanceof Big) {
          x.s = n.s;
          x.e = n.e;
          x.c = n.c.slice();
        } else {
          if (typeof n !== 'string') {
            if (Big.strict === true && typeof n !== 'bigint') {
              throw TypeError(INVALID + 'value');
            }

            // Minus zero?
            n = n === 0 && 1 / n < 0 ? '-0' : String(n);
          }

          parse$2(x, n);
        }

        // Retain a reference to this Big constructor.
        // Shadow Big.prototype.constructor which points to Object.
        x.constructor = Big;
      }

      Big.prototype = P$2;
      Big.DP = DP;
      Big.RM = RM;
      Big.NE = NE;
      Big.PE = PE;
      Big.strict = STRICT;
      Big.roundDown = 0;
      Big.roundHalfUp = 1;
      Big.roundHalfEven = 2;
      Big.roundUp = 3;

      return Big;
    }


    /*
     * Parse the number or string value passed to a Big constructor.
     *
     * x {Big} A Big number instance.
     * n {number|string} A numeric value.
     */
    function parse$2(x, n) {
      var e, i, nl;

      if (!NUMERIC.test(n)) {
        throw Error(INVALID + 'number');
      }

      // Determine sign.
      x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

      // Decimal point?
      if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

      // Exponential form?
      if ((i = n.search(/e/i)) > 0) {

        // Determine exponent.
        if (e < 0) e = i;
        e += +n.slice(i + 1);
        n = n.substring(0, i);
      } else if (e < 0) {

        // Integer.
        e = n.length;
      }

      nl = n.length;

      // Determine leading zeros.
      for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

      if (i == nl) {

        // Zero.
        x.c = [x.e = 0];
      } else {

        // Determine trailing zeros.
        for (; nl > 0 && n.charAt(--nl) == '0';);
        x.e = e - i - 1;
        x.c = [];

        // Convert string to array of digits without leading/trailing zeros.
        for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
      }

      return x;
    }


    /*
     * Round Big x to a maximum of sd significant digits using rounding mode rm.
     *
     * x {Big} The Big to round.
     * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
     * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     * [more] {boolean} Whether the result of division was truncated.
     */
    function round$8(x, sd, rm, more) {
      var xc = x.c;

      if (rm === UNDEFINED) rm = x.constructor.RM;
      if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
        throw Error(INVALID_RM);
      }

      if (sd < 1) {
        more =
          rm === 3 && (more || !!xc[0]) || sd === 0 && (
          rm === 1 && xc[0] >= 5 ||
          rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))
        );

        xc.length = 1;

        if (more) {

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          x.e = x.e - sd + 1;
          xc[0] = 1;
        } else {

          // Zero.
          xc[0] = x.e = 0;
        }
      } else if (sd < xc.length) {

        // xc[sd] is the digit after the digit that may be rounded up.
        more =
          rm === 1 && xc[sd] >= 5 ||
          rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&
            (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||
          rm === 3 && (more || !!xc[0]);

        // Remove any digits after the required precision.
        xc.length = sd;

        // Round up?
        if (more) {

          // Rounding up may mean the previous digit has to be rounded up.
          for (; ++xc[--sd] > 9;) {
            xc[sd] = 0;
            if (sd === 0) {
              ++x.e;
              xc.unshift(1);
              break;
            }
          }
        }

        // Remove trailing zeros.
        for (sd = xc.length; !xc[--sd];) xc.pop();
      }

      return x;
    }


    /*
     * Return a string representing the value of Big x in normal or exponential notation.
     * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
     */
    function stringify(x, doExponential, isNonzero) {
      var e = x.e,
        s = x.c.join(''),
        n = s.length;

      // Exponential notation?
      if (doExponential) {
        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

      // Normal notation.
      } else if (e < 0) {
        for (; ++e;) s = '0' + s;
        s = '0.' + s;
      } else if (e > 0) {
        if (++e > n) {
          for (e -= n; e--;) s += '0';
        } else if (e < n) {
          s = s.slice(0, e) + '.' + s.slice(e);
        }
      } else if (n > 1) {
        s = s.charAt(0) + '.' + s.slice(1);
      }

      return x.s < 0 && isNonzero ? '-' + s : s;
    }


    // Prototype/instance methods


    /*
     * Return a new Big whose value is the absolute value of this Big.
     */
    P$2.abs = function () {
      var x = new this.constructor(this);
      x.s = 1;
      return x;
    };


    /*
     * Return 1 if the value of this Big is greater than the value of Big y,
     *       -1 if the value of this Big is less than the value of Big y, or
     *        0 if they have the same value.
     */
    P$2.cmp = function (y) {
      var isneg,
        x = this,
        xc = x.c,
        yc = (y = new x.constructor(y)).c,
        i = x.s,
        j = y.s,
        k = x.e,
        l = y.e;

      // Either zero?
      if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

      // Signs differ?
      if (i != j) return i;

      isneg = i < 0;

      // Compare exponents.
      if (k != l) return k > l ^ isneg ? 1 : -1;

      j = (k = xc.length) < (l = yc.length) ? k : l;

      // Compare digit by digit.
      for (i = -1; ++i < j;) {
        if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
      }

      // Compare lengths.
      return k == l ? 0 : k > l ^ isneg ? 1 : -1;
    };


    /*
     * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
     * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
     */
    P$2.div = function (y) {
      var x = this,
        Big = x.constructor,
        a = x.c,                  // dividend
        b = (y = new Big(y)).c,   // divisor
        k = x.s == y.s ? 1 : -1,
        dp = Big.DP;

      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }

      // Divisor is zero?
      if (!b[0]) {
        throw Error(DIV_BY_ZERO);
      }

      // Dividend is 0? Return +-0.
      if (!a[0]) {
        y.s = k;
        y.c = [y.e = 0];
        return y;
      }

      var bl, bt, n, cmp, ri,
        bz = b.slice(),
        ai = bl = b.length,
        al = a.length,
        r = a.slice(0, bl),   // remainder
        rl = r.length,
        q = y,                // quotient
        qc = q.c = [],
        qi = 0,
        p = dp + (q.e = x.e - y.e) + 1;    // precision of the result

      q.s = k;
      k = p < 0 ? 0 : p;

      // Create version of divisor with leading zero.
      bz.unshift(0);

      // Add zeros to make remainder as long as divisor.
      for (; rl++ < bl;) r.push(0);

      do {

        // n is how many times the divisor goes into current remainder.
        for (n = 0; n < 10; n++) {

          // Compare divisor and remainder.
          if (bl != (rl = r.length)) {
            cmp = bl > rl ? 1 : -1;
          } else {
            for (ri = -1, cmp = 0; ++ri < bl;) {
              if (b[ri] != r[ri]) {
                cmp = b[ri] > r[ri] ? 1 : -1;
                break;
              }
            }
          }

          // If divisor < remainder, subtract divisor from remainder.
          if (cmp < 0) {

            // Remainder can't be more than 1 digit longer than divisor.
            // Equalise lengths using divisor with extra leading zero?
            for (bt = rl == bl ? b : bz; rl;) {
              if (r[--rl] < bt[rl]) {
                ri = rl;
                for (; ri && !r[--ri];) r[ri] = 9;
                --r[ri];
                r[rl] += 10;
              }
              r[rl] -= bt[rl];
            }

            for (; !r[0];) r.shift();
          } else {
            break;
          }
        }

        // Add the digit n to the result array.
        qc[qi++] = cmp ? n : ++n;

        // Update the remainder.
        if (r[0] && cmp) r[rl] = a[ai] || 0;
        else r = [a[ai]];

      } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

      // Leading zero? Do not remove if result is simply zero (qi == 1).
      if (!qc[0] && qi != 1) {

        // There can't be more than one zero.
        qc.shift();
        q.e--;
        p--;
      }

      // Round?
      if (qi > p) round$8(q, p, Big.RM, r[0] !== UNDEFINED);

      return q;
    };


    /*
     * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
     */
    P$2.eq = function (y) {
      return this.cmp(y) === 0;
    };


    /*
     * Return true if the value of this Big is greater than the value of Big y, otherwise return
     * false.
     */
    P$2.gt = function (y) {
      return this.cmp(y) > 0;
    };


    /*
     * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
     * return false.
     */
    P$2.gte = function (y) {
      return this.cmp(y) > -1;
    };


    /*
     * Return true if the value of this Big is less than the value of Big y, otherwise return false.
     */
    P$2.lt = function (y) {
      return this.cmp(y) < 0;
    };


    /*
     * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
     * return false.
     */
    P$2.lte = function (y) {
      return this.cmp(y) < 1;
    };


    /*
     * Return a new Big whose value is the value of this Big minus the value of Big y.
     */
    P$2.minus = P$2.sub = function (y) {
      var i, j, t, xlty,
        x = this,
        Big = x.constructor,
        a = x.s,
        b = (y = new Big(y)).s;

      // Signs differ?
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }

      var xc = x.c.slice(),
        xe = x.e,
        yc = y.c,
        ye = y.e;

      // Either zero?
      if (!xc[0] || !yc[0]) {
        if (yc[0]) {
          y.s = -b;
        } else if (xc[0]) {
          y = new Big(x);
        } else {
          y.s = 1;
        }
        return y;
      }

      // Determine which is the bigger number. Prepend zeros to equalise exponents.
      if (a = xe - ye) {

        if (xlty = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }

        t.reverse();
        for (b = a; b--;) t.push(0);
        t.reverse();
      } else {

        // Exponents equal. Check digit by digit.
        j = ((xlty = xc.length < yc.length) ? xc : yc).length;

        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xlty = xc[b] < yc[b];
            break;
          }
        }
      }

      // x < y? Point xc to the array of the bigger number.
      if (xlty) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
      }

      /*
       * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
       * needs to start at yc.length.
       */
      if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

      // Subtract yc from xc.
      for (b = i; j > a;) {
        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i];) xc[i] = 9;
          --xc[i];
          xc[j] += 10;
        }

        xc[j] -= yc[j];
      }

      // Remove trailing zeros.
      for (; xc[--b] === 0;) xc.pop();

      // Remove leading zeros and adjust exponent accordingly.
      for (; xc[0] === 0;) {
        xc.shift();
        --ye;
      }

      if (!xc[0]) {

        // n - n = +0
        y.s = 1;

        // Result must be zero.
        xc = [ye = 0];
      }

      y.c = xc;
      y.e = ye;

      return y;
    };


    /*
     * Return a new Big whose value is the value of this Big modulo the value of Big y.
     */
    P$2.mod = function (y) {
      var ygtx,
        x = this,
        Big = x.constructor,
        a = x.s,
        b = (y = new Big(y)).s;

      if (!y.c[0]) {
        throw Error(DIV_BY_ZERO);
      }

      x.s = y.s = 1;
      ygtx = y.cmp(x) == 1;
      x.s = a;
      y.s = b;

      if (ygtx) return new Big(x);

      a = Big.DP;
      b = Big.RM;
      Big.DP = Big.RM = 0;
      x = x.div(y);
      Big.DP = a;
      Big.RM = b;

      return this.minus(x.times(y));
    };


    /*
     * Return a new Big whose value is the value of this Big negated.
     */
    P$2.neg = function () {
      var x = new this.constructor(this);
      x.s = -x.s;
      return x;
    };


    /*
     * Return a new Big whose value is the value of this Big plus the value of Big y.
     */
    P$2.plus = P$2.add = function (y) {
      var e, k, t,
        x = this,
        Big = x.constructor;

      y = new Big(y);

      // Signs differ?
      if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
      }

      var xe = x.e,
        xc = x.c,
        ye = y.e,
        yc = y.c;

      // Either zero?
      if (!xc[0] || !yc[0]) {
        if (!yc[0]) {
          if (xc[0]) {
            y = new Big(x);
          } else {
            y.s = x.s;
          }
        }
        return y;
      }

      xc = xc.slice();

      // Prepend zeros to equalise exponents.
      // Note: reverse faster than unshifts.
      if (e = xe - ye) {
        if (e > 0) {
          ye = xe;
          t = yc;
        } else {
          e = -e;
          t = xc;
        }

        t.reverse();
        for (; e--;) t.push(0);
        t.reverse();
      }

      // Point xc to the longer array.
      if (xc.length - yc.length < 0) {
        t = yc;
        yc = xc;
        xc = t;
      }

      e = yc.length;

      // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
      for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

      // No need to check for zero, as +x + +y != 0 && -x + -y != 0

      if (k) {
        xc.unshift(k);
        ++ye;
      }

      // Remove trailing zeros.
      for (e = xc.length; xc[--e] === 0;) xc.pop();

      y.c = xc;
      y.e = ye;

      return y;
    };


    /*
     * Return a Big whose value is the value of this Big raised to the power n.
     * If n is negative, round to a maximum of Big.DP decimal places using rounding
     * mode Big.RM.
     *
     * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
     */
    P$2.pow = function (n) {
      var x = this,
        one = new x.constructor('1'),
        y = one,
        isneg = n < 0;

      if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
        throw Error(INVALID + 'exponent');
      }

      if (isneg) n = -n;

      for (;;) {
        if (n & 1) y = y.times(x);
        n >>= 1;
        if (!n) break;
        x = x.times(x);
      }

      return isneg ? one.div(y) : y;
    };


    /*
     * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
     * significant digits using rounding mode rm, or Big.RM if rm is not specified.
     *
     * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P$2.prec = function (sd, rm) {
      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
        throw Error(INVALID + 'precision');
      }
      return round$8(new this.constructor(this), sd, rm);
    };


    /*
     * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
     * using rounding mode rm, or Big.RM if rm is not specified.
     * If dp is negative, round to an integer which is a multiple of 10**-dp.
     * If dp is not specified, round to 0 decimal places.
     *
     * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P$2.round = function (dp, rm) {
      if (dp === UNDEFINED) dp = 0;
      else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }
      return round$8(new this.constructor(this), dp + this.e + 1, rm);
    };


    /*
     * Return a new Big whose value is the square root of the value of this Big, rounded, if
     * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
     */
    P$2.sqrt = function () {
      var r, c, t,
        x = this,
        Big = x.constructor,
        s = x.s,
        e = x.e,
        half = new Big('0.5');

      // Zero?
      if (!x.c[0]) return new Big(x);

      // Negative?
      if (s < 0) {
        throw Error(NAME + 'No square root');
      }

      // Estimate.
      s = Math.sqrt(x + '');

      // Math.sqrt underflow/overflow?
      // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
      if (s === 0 || s === 1 / 0) {
        c = x.c.join('');
        if (!(c.length + e & 1)) c += '0';
        s = Math.sqrt(c);
        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
        r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
      } else {
        r = new Big(s + '');
      }

      e = r.e + (Big.DP += 4);

      // Newton-Raphson iteration.
      do {
        t = r;
        r = half.times(t.plus(x.div(t)));
      } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

      return round$8(r, (Big.DP -= 4) + r.e + 1, Big.RM);
    };


    /*
     * Return a new Big whose value is the value of this Big times the value of Big y.
     */
    P$2.times = P$2.mul = function (y) {
      var c,
        x = this,
        Big = x.constructor,
        xc = x.c,
        yc = (y = new Big(y)).c,
        a = xc.length,
        b = yc.length,
        i = x.e,
        j = y.e;

      // Determine sign of result.
      y.s = x.s == y.s ? 1 : -1;

      // Return signed 0 if either 0.
      if (!xc[0] || !yc[0]) {
        y.c = [y.e = 0];
        return y;
      }

      // Initialise exponent of result as x.e + y.e.
      y.e = i + j;

      // If array xc has fewer digits than yc, swap xc and yc, and lengths.
      if (a < b) {
        c = xc;
        xc = yc;
        yc = c;
        j = a;
        a = b;
        b = j;
      }

      // Initialise coefficient array of result with zeros.
      for (c = new Array(j = a + b); j--;) c[j] = 0;

      // Multiply.

      // i is initially xc.length.
      for (i = b; i--;) {
        b = 0;

        // a is yc.length.
        for (j = a + i; j > i;) {

          // Current sum of products at this digit position, plus carry.
          b = c[j] + yc[i] * xc[j - i - 1] + b;
          c[j--] = b % 10;

          // carry
          b = b / 10 | 0;
        }

        c[j] = b;
      }

      // Increment result exponent if there is a final carry, otherwise remove leading zero.
      if (b) ++y.e;
      else c.shift();

      // Remove trailing zeros.
      for (i = c.length; !c[--i];) c.pop();
      y.c = c;

      return y;
    };


    /*
     * Return a string representing the value of this Big in exponential notation rounded to dp fixed
     * decimal places using rounding mode rm, or Big.RM if rm is not specified.
     *
     * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P$2.toExponential = function (dp, rm) {
      var x = this,
        n = x.c[0];

      if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
          throw Error(INVALID_DP);
        }
        x = round$8(new x.constructor(x), ++dp, rm);
        for (; x.c.length < dp;) x.c.push(0);
      }

      return stringify(x, true, !!n);
    };


    /*
     * Return a string representing the value of this Big in normal notation rounded to dp fixed
     * decimal places using rounding mode rm, or Big.RM if rm is not specified.
     *
     * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     *
     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
     */
    P$2.toFixed = function (dp, rm) {
      var x = this,
        n = x.c[0];

      if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
          throw Error(INVALID_DP);
        }
        x = round$8(new x.constructor(x), dp + x.e + 1, rm);

        // x.e may have changed if the value is rounded up.
        for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
      }

      return stringify(x, false, !!n);
    };


    /*
     * Return a string representing the value of this Big.
     * Return exponential notation if this Big has a positive exponent equal to or greater than
     * Big.PE, or a negative exponent equal to or less than Big.NE.
     * Omit the sign for negative zero.
     */
    P$2[Symbol.for('nodejs.util.inspect.custom')] = P$2.toJSON = P$2.toString = function () {
      var x = this,
        Big = x.constructor;
      return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
    };


    /*
     * Return the value of this Big as a primitve number.
     */
    P$2.toNumber = function () {
      var n = Number(stringify(this, true, true));
      if (this.constructor.strict === true && !this.eq(n.toString())) {
        throw Error(NAME + 'Imprecise conversion');
      }
      return n;
    };


    /*
     * Return a string representing the value of this Big rounded to sd significant digits using
     * rounding mode rm, or Big.RM if rm is not specified.
     * Use exponential notation if sd is less than the number of digits necessary to represent
     * the integer part of the value in normal notation.
     *
     * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
     * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
     */
    P$2.toPrecision = function (sd, rm) {
      var x = this,
        Big = x.constructor,
        n = x.c[0];

      if (sd !== UNDEFINED) {
        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
          throw Error(INVALID + 'precision');
        }
        x = round$8(new Big(x), sd, rm);
        for (; x.c.length < sd;) x.c.push(0);
      }

      return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
    };


    /*
     * Return a string representing the value of this Big.
     * Return exponential notation if this Big has a positive exponent equal to or greater than
     * Big.PE, or a negative exponent equal to or less than Big.NE.
     * Include the sign for negative zero.
     */
    P$2.valueOf = function () {
      var x = this,
        Big = x.constructor;
      if (Big.strict === true) {
        throw Error(NAME + 'valueOf disallowed');
      }
      return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
    };


    // Export


    var Big = _Big_();

    var classnames = {exports: {}};

    /*!
    	Copyright (c) 2018 Jed Watson.
    	Licensed under the MIT License (MIT), see
    	http://jedwatson.github.io/classnames
    */

    (function (module) {
    	/* global define */

    	(function () {

    		var hasOwn = {}.hasOwnProperty;

    		function classNames() {
    			var classes = [];

    			for (var i = 0; i < arguments.length; i++) {
    				var arg = arguments[i];
    				if (!arg) continue;

    				var argType = typeof arg;

    				if (argType === 'string' || argType === 'number') {
    					classes.push(arg);
    				} else if (Array.isArray(arg)) {
    					if (arg.length) {
    						var inner = classNames.apply(null, arg);
    						if (inner) {
    							classes.push(inner);
    						}
    					}
    				} else if (argType === 'object') {
    					if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
    						classes.push(arg.toString());
    						continue;
    					}

    					for (var key in arg) {
    						if (hasOwn.call(arg, key) && arg[key]) {
    							classes.push(key);
    						}
    					}
    				}
    			}

    			return classes.join(' ');
    		}

    		if (module.exports) {
    			classNames.default = classNames;
    			module.exports = classNames;
    		} else {
    			window.classNames = classNames;
    		}
    	}()); 
    } (classnames));

    var classnamesExports = classnames.exports;
    var classNames = /*@__PURE__*/getDefaultExportFromCjs(classnamesExports);

    var n$1,l$2,u$1,t$1,r$1,o$3,f$1,e$3,c$1={},s$1=[],a$2=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function h$1(n,l){for(var u in l)n[u]=l[u];return n}function v$1(n){var l=n.parentNode;l&&l.removeChild(n);}function y$1(l,u,i){var t,r,o,f={};for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];if(arguments.length>2&&(f.children=arguments.length>3?n$1.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps)void 0===f[o]&&(f[o]=l.defaultProps[o]);return p$2(l,f,t,r,null)}function p$2(n,i,t,r,o){var f={type:n,props:i,key:t,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++u$1:o};return null==o&&null!=l$2.vnode&&l$2.vnode(f),f}function d$1(){return {current:null}}function _$2(n){return n.children}function k$2(n,l){this.props=n,this.context=l;}function b$1(n,l){if(null==l)return n.__?b$1(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?b$1(n):null}function g$2(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return g$2(n)}}function m$1(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!w$2.__r++||r$1!==l$2.debounceRendering)&&((r$1=l$2.debounceRendering)||o$3)(w$2);}function w$2(){var n,l,u,i,r,o,e,c;for(t$1.sort(f$1);n=t$1.shift();)n.__d&&(l=t$1.length,i=void 0,r=void 0,e=(o=(u=n).__v).__e,(c=u.__P)&&(i=[],(r=h$1({},o)).__v=o.__v+1,L$1(c,o,r,u.__n,void 0!==c.ownerSVGElement,null!=o.__h?[e]:null,i,null==e?b$1(o):e,o.__h),M$1(i,o),o.__e!=e&&g$2(o)),t$1.length>l&&t$1.sort(f$1));w$2.__r=0;}function x$2(n,l,u,i,t,r,o,f,e,a){var h,v,y,d,k,g,m,w=i&&i.__k||s$1,x=w.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(d=u.__k[h]=null==(d=l[h])||"boolean"==typeof d||"function"==typeof d?null:"string"==typeof d||"number"==typeof d||"bigint"==typeof d?p$2(null,d,null,null,d):Array.isArray(d)?p$2(_$2,{children:d},null,null,null):d.__b>0?p$2(d.type,d.props,d.key,d.ref?d.ref:null,d.__v):d)){if(d.__=u,d.__b=u.__b+1,null===(y=w[h])||y&&d.key==y.key&&d.type===y.type)w[h]=void 0;else for(v=0;v<x;v++){if((y=w[v])&&d.key==y.key&&d.type===y.type){w[v]=void 0;break}y=null;}L$1(n,d,y=y||c$1,t,r,o,f,e,a),k=d.__e,(v=d.ref)&&y.ref!=v&&(m||(m=[]),y.ref&&m.push(y.ref,null,d),m.push(v,d.__c||k,d)),null!=k?(null==g&&(g=k),"function"==typeof d.type&&d.__k===y.__k?d.__d=e=A$2(d,e,n):e=C$1(n,d,y,w,k,e),"function"==typeof u.type&&(u.__d=e)):e&&y.__e==e&&e.parentNode!=n&&(e=b$1(y));}for(u.__e=g,h=x;h--;)null!=w[h]&&("function"==typeof u.type&&null!=w[h].__e&&w[h].__e==u.__d&&(u.__d=$$1(i).nextSibling),S(w[h],w[h]));if(m)for(h=0;h<m.length;h++)O$1(m[h],m[++h],m[++h]);}function A$2(n,l,u){for(var i,t=n.__k,r=0;t&&r<t.length;r++)(i=t[r])&&(i.__=n,l="function"==typeof i.type?A$2(i,l,u):C$1(u,i,i,t,i.__e,l));return l}function P$1(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){P$1(n,l);}):l.push(n)),l}function C$1(n,l,u,i,t,r){var o,f,e;if(void 0!==l.__d)o=l.__d,l.__d=void 0;else if(null==u||t!=r||null==t.parentNode)n:if(null==r||r.parentNode!==n)n.appendChild(t),o=null;else {for(f=r,e=0;(f=f.nextSibling)&&e<i.length;e+=1)if(f==t)break n;n.insertBefore(t,r),o=r;}return void 0!==o?o:t.nextSibling}function $$1(n){var l,u,i;if(null==n.type||"string"==typeof n.type)return n.__e;if(n.__k)for(l=n.__k.length-1;l>=0;l--)if((u=n.__k[l])&&(i=$$1(u)))return i;return null}function H$1(n,l,u,i,t){var r;for(r in u)"children"===r||"key"===r||r in l||T$2(n,r,null,u[r],i);for(r in l)t&&"function"!=typeof l[r]||"children"===r||"key"===r||"value"===r||"checked"===r||u[r]===l[r]||T$2(n,r,l[r],u[r],i);}function I$1(n,l,u){"-"===l[0]?n.setProperty(l,null==u?"":u):n[l]=null==u?"":"number"!=typeof u||a$2.test(l)?u:u+"px";}function T$2(n,l,u,i,t){var r;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||I$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||I$1(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])r=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?i||n.addEventListener(l,r?z$2:j$2,r):n.removeEventListener(l,r?z$2:j$2,r);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==l&&"height"!==l&&"href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null==u||!1===u&&"-"!==l[4]?n.removeAttribute(l):n.setAttribute(l,u));}}function j$2(n){return this.l[n.type+!1](l$2.event?l$2.event(n):n)}function z$2(n){return this.l[n.type+!0](l$2.event?l$2.event(n):n)}function L$1(n,u,i,t,r,o,f,e,c){var s,a,v,y,p,d,b,g,m,w,A,P,C,$,H,I=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,o=[e]),(s=l$2.__b)&&s(u);try{n:if("function"==typeof I){if(g=u.props,m=(s=I.contextType)&&t[s.__c],w=s?m?m.props.value:s.__:t,i.__c?b=(a=u.__c=i.__c).__=a.__E:("prototype"in I&&I.prototype.render?u.__c=a=new I(g,w):(u.__c=a=new k$2(g,w),a.constructor=I,a.render=q$2),m&&m.sub(a),a.props=g,a.state||(a.state={}),a.context=w,a.__n=t,v=a.__d=!0,a.__h=[],a._sb=[]),null==a.__s&&(a.__s=a.state),null!=I.getDerivedStateFromProps&&(a.__s==a.state&&(a.__s=h$1({},a.__s)),h$1(a.__s,I.getDerivedStateFromProps(g,a.__s))),y=a.props,p=a.state,a.__v=u,v)null==I.getDerivedStateFromProps&&null!=a.componentWillMount&&a.componentWillMount(),null!=a.componentDidMount&&a.__h.push(a.componentDidMount);else {if(null==I.getDerivedStateFromProps&&g!==y&&null!=a.componentWillReceiveProps&&a.componentWillReceiveProps(g,w),!a.__e&&null!=a.shouldComponentUpdate&&!1===a.shouldComponentUpdate(g,a.__s,w)||u.__v===i.__v){for(u.__v!==i.__v&&(a.props=g,a.state=a.__s,a.__d=!1),a.__e=!1,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),A=0;A<a._sb.length;A++)a.__h.push(a._sb[A]);a._sb=[],a.__h.length&&f.push(a);break n}null!=a.componentWillUpdate&&a.componentWillUpdate(g,a.__s,w),null!=a.componentDidUpdate&&a.__h.push(function(){a.componentDidUpdate(y,p,d);});}if(a.context=w,a.props=g,a.__P=n,P=l$2.__r,C=0,"prototype"in I&&I.prototype.render){for(a.state=a.__s,a.__d=!1,P&&P(u),s=a.render(a.props,a.state,a.context),$=0;$<a._sb.length;$++)a.__h.push(a._sb[$]);a._sb=[];}else do{a.__d=!1,P&&P(u),s=a.render(a.props,a.state,a.context),a.state=a.__s;}while(a.__d&&++C<25);a.state=a.__s,null!=a.getChildContext&&(t=h$1(h$1({},t),a.getChildContext())),v||null==a.getSnapshotBeforeUpdate||(d=a.getSnapshotBeforeUpdate(y,p)),H=null!=s&&s.type===_$2&&null==s.key?s.props.children:s,x$2(n,Array.isArray(H)?H:[H],u,i,t,r,o,f,e,c),a.base=u.__e,u.__h=null,a.__h.length&&f.push(a),b&&(a.__E=a.__=null),a.__e=!1;}else null==o&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=N$1(i.__e,u,i,t,r,o,f,c);(s=l$2.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=o)&&(u.__e=e,u.__h=!!c,o[o.indexOf(e)]=null),l$2.__e(n,u,i);}}function M$1(n,u){l$2.__c&&l$2.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$2.__e(n,u.__v);}});}function N$1(l,u,i,t,r,o,f,e){var s,a,h,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(r=!0),null!=o)for(;_<o.length;_++)if((s=o[_])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,o[_]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=r?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),o=null,e=!1;}if(null===d)y===p||e&&l.data===p||(l.data=p);else {if(o=o&&n$1.call(l.childNodes),a=(y=i.props||c$1).dangerouslySetInnerHTML,h=p.dangerouslySetInnerHTML,!e){if(null!=o)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(h||a)&&(h&&(a&&h.__html==a.__html||h.__html===l.innerHTML)||(l.innerHTML=h&&h.__html||""));}if(H$1(l,p,y,r,e),h)u.__k=[];else if(_=u.props.children,x$2(l,Array.isArray(_)?_:[_],u,i,t,r&&"foreignObject"!==d,o,f,o?o[0]:i.__k&&b$1(i,0),e),null!=o)for(_=o.length;_--;)null!=o[_]&&v$1(o[_]);e||("value"in p&&void 0!==(_=p.value)&&(_!==l.value||"progress"===d&&!_||"option"===d&&_!==y.value)&&T$2(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&T$2(l,"checked",_,y.checked,!1));}return l}function O$1(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$2.__e(n,i);}}function S(n,u,i){var t,r;if(l$2.unmount&&l$2.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||O$1(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$2.__e(n,u);}t.base=t.__P=null,n.__c=void 0;}if(t=n.__k)for(r=0;r<t.length;r++)t[r]&&S(t[r],u,i||"function"!=typeof n.type);i||null==n.__e||v$1(n.__e),n.__=n.__e=n.__d=void 0;}function q$2(n,l,u){return this.constructor(n,u)}function B$2(u,i,t){var r,o,f;l$2.__&&l$2.__(u,i),o=(r="function"==typeof t)?null:t&&t.__k||i.__k,f=[],L$1(i,u=(!r&&t||i).__k=y$1(_$2,null,[u]),o||c$1,c$1,void 0!==i.ownerSVGElement,!r&&t?[t]:o?null:i.firstChild?n$1.call(i.childNodes):null,f,!r&&t?t:o?o.__e:i.firstChild,r),M$1(f,u);}function D$1(n,l){B$2(n,l,D$1);}function E$1(l,u,i){var t,r,o,f=h$1({},l.props);for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];return arguments.length>2&&(f.children=arguments.length>3?n$1.call(arguments,2):i),p$2(l.type,f,t||l.key,r||l.ref,null)}function F$2(n,l){var u={__c:l="__cC"+e$3++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(function(n){n.__e=!0,m$1(n);});},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n$1=s$1.slice,l$2={__e:function(n,l,u,i){for(var t,r,o;l=l.__;)if((t=l.__c)&&!t.__)try{if((r=t.constructor)&&null!=r.getDerivedStateFromError&&(t.setState(r.getDerivedStateFromError(n)),o=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),o=t.__d),o)return t.__E=t}catch(l){n=l;}throw n}},u$1=0,k$2.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h$1({},this.state),"function"==typeof n&&(n=n(h$1({},u),this.props)),n&&h$1(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),m$1(this));},k$2.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),m$1(this));},k$2.prototype.render=_$2,t$1=[],o$3="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,f$1=function(n,l){return n.__v.__b-l.__v.__b},w$2.__r=0,e$3=0;

    var _$1=0;function o$2(o,e,n,t,f,l){var s,u,a={};for(u in e)"ref"==u?s=e[u]:a[u]=e[u];var i={type:o,props:a,key:n,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--_$1,__source:f,__self:l};if("function"==typeof o&&(s=o.defaultProps))for(u in s)void 0===a[u]&&(a[u]=s[u]);return l$2.vnode&&l$2.vnode(i),i}

    var t,r,u,i$1,o$1=0,f=[],c=[],e$2=l$2.__b,a$1=l$2.__r,v=l$2.diffed,l$1=l$2.__c,m=l$2.unmount;function d(t,u){l$2.__h&&l$2.__h(r,t,o$1||u),o$1=0;var i=r.__H||(r.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t]}function h(n){return o$1=1,s(B$1,n)}function s(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B$1(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}));}],o.__c=r,!r.u)){var f=function(n,t,r){if(!o.__c.__H)return !0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return !n.__N}))return !c||c.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0);}}),!(!i&&o.__c.props===n)&&(!c||c.call(this,n,t,r))};r.u=!0;var c=r.shouldComponentUpdate,e=r.componentWillUpdate;r.componentWillUpdate=function(n,t,r){if(this.__e){var u=c;c=void 0,f(n,t,r),c=u;}e&&e.call(this,n,t,r);},r.shouldComponentUpdate=f;}return o.__N||o.__}function p$1(u,i){var o=d(t++,3);!l$2.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r.__H.__h.push(o));}function y(u,i){var o=d(t++,4);!l$2.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r.__h.push(o));}function _(n){return o$1=5,F$1(function(){return {current:n}},[])}function A$1(n,t,r){o$1=6,y(function(){return "function"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n));}function F$1(n,r){var u=d(t++,7);return z$1(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T$1(n,t){return o$1=8,F$1(function(){return n},t)}function q$1(n){var u=r.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r)),u.props.value):n.__}function x$1(t,r){l$2.useDebugValue&&l$2.useDebugValue(r?r(t):t);}function V$1(){var n=d(t++,11);if(!n.__){for(var u=r.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__="P"+i[0]+"-"+i[1]++;}return n.__}function b(){for(var t;t=f.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k$1),t.__H.__h.forEach(w$1),t.__H.__h=[];}catch(r){t.__H.__h=[],l$2.__e(r,t.__v);}}l$2.__b=function(n){r=null,e$2&&e$2(n);},l$2.__r=function(n){a$1&&a$1(n),t=0;var i=(r=n.__c).__H;i&&(u===r?(i.__h=[],r.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0;})):(i.__h.forEach(k$1),i.__h.forEach(w$1),i.__h=[])),u=r;},l$2.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i$1===l$2.requestAnimationFrame||((i$1=l$2.requestAnimationFrame)||j$1)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c;})),u=r=null;},l$2.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k$1),t.__h=t.__h.filter(function(n){return !n.__||w$1(n)});}catch(u){r.some(function(n){n.__h&&(n.__h=[]);}),r=[],l$2.__e(u,t.__v);}}),l$1&&l$1(t,r);},l$2.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k$1(n);}catch(n){r=n;}}),u.__H=void 0,r&&l$2.__e(r,u.__v));};var g$1="function"==typeof requestAnimationFrame;function j$1(n){var t,r=function(){clearTimeout(u),g$1&&cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);g$1&&(t=requestAnimationFrame(r));}function k$1(n){var t=r,u=n.__c;"function"==typeof u&&(n.__c=void 0,u()),r=t;}function w$1(n){var t=r;n.__c=n.__(),r=t;}function z$1(n,t){return !n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function B$1(n,t){return "function"==typeof t?t(n):t}

    function g(n,t){for(var e in t)n[e]=t[e];return n}function C(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function E(n,t){return n===t&&(0!==n||1/n==1/t)||n!=n&&t!=t}function w(n){this.props=n;}function x(n,e){function r(n){var t=this.props.ref,r=t==n.ref;return !r&&t&&(t.call?t(null):t.current=null),e?!e(this.props,n)||!r:C(this.props,n)}function u(e){return this.shouldComponentUpdate=r,y$1(n,e)}return u.displayName="Memo("+(n.displayName||n.name)+")",u.prototype.isReactComponent=!0,u.__f=!0,u}(w.prototype=new k$2).isPureReactComponent=!0,w.prototype.shouldComponentUpdate=function(n,t){return C(this.props,n)||C(this.state,t)};var R=l$2.__b;l$2.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),R&&R(n);};var N="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function k(n){function t(t){var e=g({},t);return delete e.ref,n(e,t.ref||null)}return t.$$typeof=N,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t}var A=function(n,t){return null==n?null:P$1(P$1(n).map(t))},O={map:A,forEach:A,count:function(n){return n?P$1(n).length:0},only:function(n){var t=P$1(n);if(1!==t.length)throw "Children.only";return t[0]},toArray:P$1},T=l$2.__e;l$2.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);T(n,t,e,r);};var I=l$2.unmount;function L(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),n.__c.__H=null),null!=(n=g({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return L(n,t,e)})),n}function U(n,t,e){return n&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return U(n,t,e)}),n.__c&&n.__c.__P===t&&(n.__e&&e.insertBefore(n.__e,n.__d),n.__c.__e=!0,n.__c.__P=e)),n}function D(){this.__u=0,this.t=null,this.__b=null;}function F(n){var t=n.__.__c;return t&&t.__a&&t.__a(n)}function M(n){var e,r,u;function o(o){if(e||(e=n()).then(function(n){r=n.default||n;},function(n){u=n;}),u)throw u;if(!r)throw e;return y$1(r,o)}return o.displayName="Lazy",o.__f=!0,o}function V(){this.u=null,this.o=null;}l$2.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),I&&I(n);},(D.prototype=new k$2).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=F(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=U(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();)t.forceUpdate();}},c=!0===t.__h;r.__u++||c||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i);},D.prototype.componentWillUnmount=function(){this.t=[];},D.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=L(this.__b,r,o.__O=o.__P);}this.__b=null;}var i=e.__a&&y$1(_$2,null,n.fallback);return i&&(i.__h=null),[y$1(_$2,null,e.__a?null:n.children),i]};var W=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};function P(n){return this.getChildContext=function(){return n.context},n.children}function j(n){var e=this,r=n.i;e.componentWillUnmount=function(){B$2(null,e.l),e.l=null,e.i=null;},e.i&&e.i!==r&&e.componentWillUnmount(),n.__v?(e.l||(e.i=r,e.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(n){this.childNodes.push(n),e.i.appendChild(n);},insertBefore:function(n,t){this.childNodes.push(n),e.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.i.removeChild(n);}}),B$2(y$1(P,{context:e.context},n.__v),e.l)):e.l&&e.componentWillUnmount();}function z(n,e){var r=y$1(j,{__v:n,i:e});return r.containerInfo=e,r}(V.prototype=new k$2).__a=function(n){var t=this,e=F(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),W(t,n,r)):u();};e?e(o):o();}},V.prototype.render=function(n){this.u=null,this.o=new Map;var t=P$1(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},V.prototype.componentDidUpdate=V.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){W(n,e,t);});};var B="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,H=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,Z=/^on(Ani|Tra|Tou|BeforeInp|Compo)/,Y=/[A-Z0-9]/g,$="undefined"!=typeof document,q=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/:/fil|che|ra/).test(n)};function G(n,t,e){return null==t.__k&&(t.textContent=""),B$2(n,t),"function"==typeof e&&e(),n?n.__c:null}function J(n,t,e){return D$1(n,t),"function"==typeof e&&e(),n?n.__c:null}k$2.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(t){Object.defineProperty(k$2.prototype,t,{configurable:!0,get:function(){return this["UNSAFE_"+t]},set:function(n){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:n});}});});var K=l$2.event;function Q(){}function X(){return this.cancelBubble}function nn(){return this.defaultPrevented}l$2.event=function(n){return K&&(n=K(n)),n.persist=Q,n.isPropagationStopped=X,n.isDefaultPrevented=nn,n.nativeEvent=n};var tn,en={enumerable:!1,configurable:!0,get:function(){return this.class}},rn=l$2.vnode;l$2.vnode=function(n){"string"==typeof n.type&&function(n){var t=n.props,e=n.type,u={};for(var o in t){var i=t[o];if(!("value"===o&&"defaultValue"in t&&null==i||$&&"children"===o&&"noscript"===e||"class"===o||"className"===o)){var l=o.toLowerCase();"defaultValue"===o&&"value"in t&&null==t.value?o="value":"download"===o&&!0===i?i="":"ondoubleclick"===l?o="ondblclick":"onchange"!==l||"input"!==e&&"textarea"!==e||q(t.type)?"onfocus"===l?o="onfocusin":"onblur"===l?o="onfocusout":Z.test(o)?o=l:-1===e.indexOf("-")&&H.test(o)?o=o.replace(Y,"-$&").toLowerCase():null===i&&(i=void 0):l=o="oninput","oninput"===l&&u[o=l]&&(o="oninputCapture"),u[o]=i;}}"select"==e&&u.multiple&&Array.isArray(u.value)&&(u.value=P$1(t.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value);})),"select"==e&&null!=u.defaultValue&&(u.value=P$1(t.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value;})),t.class&&!t.className?(u.class=t.class,Object.defineProperty(u,"className",en)):(t.className&&!t.class||t.class&&t.className)&&(u.class=u.className=t.className),n.props=u;}(n),n.$$typeof=B,rn&&rn(n);};var un=l$2.__r;l$2.__r=function(n){un&&un(n),tn=n.__c;};var on=l$2.diffed;l$2.diffed=function(n){on&&on(n);var t=n.props,e=n.__e;null!=e&&"textarea"===n.type&&"value"in t&&t.value!==e.value&&(e.value=null==t.value?"":t.value),tn=null;};var ln={ReactCurrentDispatcher:{current:{readContext:function(n){return tn.__n[n.__c].props.value}}}};function fn(n){return y$1.bind(null,n)}function an(n){return !!n&&n.$$typeof===B}function sn(n){return an(n)?E$1.apply(null,arguments):n}function hn(n){return !!n.__k&&(B$2(null,n),!0)}function vn(n){return n&&(n.base||1===n.nodeType&&n)||null}var dn=function(n,t){return n(t)},pn=function(n,t){return n(t)},mn=_$2;function yn(n){n();}function _n(n){return n}function bn(){return [!1,yn]}var Sn=y;function gn(n,t){var e=t(),r=h({h:{__:e,v:t}}),u=r[0].h,o=r[1];return y(function(){u.__=e,u.v=t,E(u.__,t())||o({h:u});},[n,e,t]),p$1(function(){return E(u.__,u.v())||o({h:u}),n(function(){E(u.__,u.v())||o({h:u});})},[n]),e}var Cn={useState:h,useId:V$1,useReducer:s,useEffect:p$1,useLayoutEffect:y,useInsertionEffect:Sn,useTransition:bn,useDeferredValue:_n,useSyncExternalStore:gn,startTransition:yn,useRef:_,useImperativeHandle:A$1,useMemo:F$1,useCallback:T$1,useContext:q$1,useDebugValue:x$1,version:"17.0.2",Children:O,render:G,hydrate:J,unmountComponentAtNode:hn,createPortal:z,createElement:y$1,createContext:F$2,createFactory:fn,cloneElement:sn,createRef:d$1,Fragment:_$2,isValidElement:an,findDOMNode:vn,Component:k$2,PureComponent:w,memo:x,forwardRef:k,flushSync:pn,unstable_batchedUpdates:dn,StrictMode:mn,Suspense:D,SuspenseList:V,lazy:M,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:ln};

    var HOOKS = [
        "onChange",
        "onClose",
        "onDayCreate",
        "onDestroy",
        "onKeyDown",
        "onMonthChange",
        "onOpen",
        "onParseConfig",
        "onReady",
        "onValueUpdate",
        "onYearChange",
        "onPreCalendarPosition",
    ];
    var defaults = {
        _disable: [],
        allowInput: false,
        allowInvalidPreload: false,
        altFormat: "F j, Y",
        altInput: false,
        altInputClass: "form-control input",
        animate: typeof window === "object" &&
            window.navigator.userAgent.indexOf("MSIE") === -1,
        ariaDateFormat: "F j, Y",
        autoFillDefaultTime: true,
        clickOpens: true,
        closeOnSelect: true,
        conjunction: ", ",
        dateFormat: "Y-m-d",
        defaultHour: 12,
        defaultMinute: 0,
        defaultSeconds: 0,
        disable: [],
        disableMobile: false,
        enableSeconds: false,
        enableTime: false,
        errorHandler: function (err) {
            return typeof console !== "undefined" && console.warn(err);
        },
        getWeek: function (givenDate) {
            var date = new Date(givenDate.getTime());
            date.setHours(0, 0, 0, 0);
            date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
            var week1 = new Date(date.getFullYear(), 0, 4);
            return (1 +
                Math.round(((date.getTime() - week1.getTime()) / 86400000 -
                    3 +
                    ((week1.getDay() + 6) % 7)) /
                    7));
        },
        hourIncrement: 1,
        ignoredFocusElements: [],
        inline: false,
        locale: "default",
        minuteIncrement: 5,
        mode: "single",
        monthSelectorType: "dropdown",
        nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
        noCalendar: false,
        now: new Date(),
        onChange: [],
        onClose: [],
        onDayCreate: [],
        onDestroy: [],
        onKeyDown: [],
        onMonthChange: [],
        onOpen: [],
        onParseConfig: [],
        onReady: [],
        onValueUpdate: [],
        onYearChange: [],
        onPreCalendarPosition: [],
        plugins: [],
        position: "auto",
        positionElement: undefined,
        prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
        shorthandCurrentMonth: false,
        showMonths: 1,
        static: false,
        time_24hr: false,
        weekNumbers: false,
        wrap: false,
    };

    var english = {
        weekdays: {
            shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            longhand: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
            ],
        },
        months: {
            shorthand: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
            ],
            longhand: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
            ],
        },
        daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        firstDayOfWeek: 0,
        ordinal: function (nth) {
            var s = nth % 100;
            if (s > 3 && s < 21)
                return "th";
            switch (s % 10) {
                case 1:
                    return "st";
                case 2:
                    return "nd";
                case 3:
                    return "rd";
                default:
                    return "th";
            }
        },
        rangeSeparator: " to ",
        weekAbbreviation: "Wk",
        scrollTitle: "Scroll to increment",
        toggleTitle: "Click to toggle",
        amPM: ["AM", "PM"],
        yearAriaLabel: "Year",
        monthAriaLabel: "Month",
        hourAriaLabel: "Hour",
        minuteAriaLabel: "Minute",
        time_24hr: false,
    };

    var pad = function (number, length) {
        if (length === void 0) { length = 2; }
        return ("000" + number).slice(length * -1);
    };
    var int = function (bool) { return (bool === true ? 1 : 0); };
    function debounce(fn, wait) {
        var t;
        return function () {
            var _this = this;
            var args = arguments;
            clearTimeout(t);
            t = setTimeout(function () { return fn.apply(_this, args); }, wait);
        };
    }
    var arrayify = function (obj) {
        return obj instanceof Array ? obj : [obj];
    };

    function toggleClass(elem, className, bool) {
        if (bool === true)
            return elem.classList.add(className);
        elem.classList.remove(className);
    }
    function createElement(tag, className, content) {
        var e = window.document.createElement(tag);
        className = className || "";
        content = content || "";
        e.className = className;
        if (content !== undefined)
            e.textContent = content;
        return e;
    }
    function clearNode(node) {
        while (node.firstChild)
            node.removeChild(node.firstChild);
    }
    function findParent(node, condition) {
        if (condition(node))
            return node;
        else if (node.parentNode)
            return findParent(node.parentNode, condition);
        return undefined;
    }
    function createNumberInput(inputClassName, opts) {
        var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
        if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
            numInput.type = "number";
        }
        else {
            numInput.type = "text";
            numInput.pattern = "\\d*";
        }
        if (opts !== undefined)
            for (var key in opts)
                numInput.setAttribute(key, opts[key]);
        wrapper.appendChild(numInput);
        wrapper.appendChild(arrowUp);
        wrapper.appendChild(arrowDown);
        return wrapper;
    }
    function getEventTarget(event) {
        try {
            if (typeof event.composedPath === "function") {
                var path = event.composedPath();
                return path[0];
            }
            return event.target;
        }
        catch (error) {
            return event.target;
        }
    }

    var doNothing = function () { return undefined; };
    var monthToStr = function (monthNumber, shorthand, locale) { return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber]; };
    var revFormat = {
        D: doNothing,
        F: function (dateObj, monthName, locale) {
            dateObj.setMonth(locale.months.longhand.indexOf(monthName));
        },
        G: function (dateObj, hour) {
            dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
        },
        H: function (dateObj, hour) {
            dateObj.setHours(parseFloat(hour));
        },
        J: function (dateObj, day) {
            dateObj.setDate(parseFloat(day));
        },
        K: function (dateObj, amPM, locale) {
            dateObj.setHours((dateObj.getHours() % 12) +
                12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
        },
        M: function (dateObj, shortMonth, locale) {
            dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
        },
        S: function (dateObj, seconds) {
            dateObj.setSeconds(parseFloat(seconds));
        },
        U: function (_, unixSeconds) { return new Date(parseFloat(unixSeconds) * 1000); },
        W: function (dateObj, weekNum, locale) {
            var weekNumber = parseInt(weekNum);
            var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
            date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
            return date;
        },
        Y: function (dateObj, year) {
            dateObj.setFullYear(parseFloat(year));
        },
        Z: function (_, ISODate) { return new Date(ISODate); },
        d: function (dateObj, day) {
            dateObj.setDate(parseFloat(day));
        },
        h: function (dateObj, hour) {
            dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
        },
        i: function (dateObj, minutes) {
            dateObj.setMinutes(parseFloat(minutes));
        },
        j: function (dateObj, day) {
            dateObj.setDate(parseFloat(day));
        },
        l: doNothing,
        m: function (dateObj, month) {
            dateObj.setMonth(parseFloat(month) - 1);
        },
        n: function (dateObj, month) {
            dateObj.setMonth(parseFloat(month) - 1);
        },
        s: function (dateObj, seconds) {
            dateObj.setSeconds(parseFloat(seconds));
        },
        u: function (_, unixMillSeconds) {
            return new Date(parseFloat(unixMillSeconds));
        },
        w: doNothing,
        y: function (dateObj, year) {
            dateObj.setFullYear(2000 + parseFloat(year));
        },
    };
    var tokenRegex$1 = {
        D: "",
        F: "",
        G: "(\\d\\d|\\d)",
        H: "(\\d\\d|\\d)",
        J: "(\\d\\d|\\d)\\w+",
        K: "",
        M: "",
        S: "(\\d\\d|\\d)",
        U: "(.+)",
        W: "(\\d\\d|\\d)",
        Y: "(\\d{4})",
        Z: "(.+)",
        d: "(\\d\\d|\\d)",
        h: "(\\d\\d|\\d)",
        i: "(\\d\\d|\\d)",
        j: "(\\d\\d|\\d)",
        l: "",
        m: "(\\d\\d|\\d)",
        n: "(\\d\\d|\\d)",
        s: "(\\d\\d|\\d)",
        u: "(.+)",
        w: "(\\d\\d|\\d)",
        y: "(\\d{2})",
    };
    var formats = {
        Z: function (date) { return date.toISOString(); },
        D: function (date, locale, options) {
            return locale.weekdays.shorthand[formats.w(date, locale, options)];
        },
        F: function (date, locale, options) {
            return monthToStr(formats.n(date, locale, options) - 1, false, locale);
        },
        G: function (date, locale, options) {
            return pad(formats.h(date, locale, options));
        },
        H: function (date) { return pad(date.getHours()); },
        J: function (date, locale) {
            return locale.ordinal !== undefined
                ? date.getDate() + locale.ordinal(date.getDate())
                : date.getDate();
        },
        K: function (date, locale) { return locale.amPM[int(date.getHours() > 11)]; },
        M: function (date, locale) {
            return monthToStr(date.getMonth(), true, locale);
        },
        S: function (date) { return pad(date.getSeconds()); },
        U: function (date) { return date.getTime() / 1000; },
        W: function (date, _, options) {
            return options.getWeek(date);
        },
        Y: function (date) { return pad(date.getFullYear(), 4); },
        d: function (date) { return pad(date.getDate()); },
        h: function (date) { return (date.getHours() % 12 ? date.getHours() % 12 : 12); },
        i: function (date) { return pad(date.getMinutes()); },
        j: function (date) { return date.getDate(); },
        l: function (date, locale) {
            return locale.weekdays.longhand[date.getDay()];
        },
        m: function (date) { return pad(date.getMonth() + 1); },
        n: function (date) { return date.getMonth() + 1; },
        s: function (date) { return date.getSeconds(); },
        u: function (date) { return date.getTime(); },
        w: function (date) { return date.getDay(); },
        y: function (date) { return String(date.getFullYear()).substring(2); },
    };

    var createDateFormatter = function (_a) {
        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
        return function (dateObj, frmt, overrideLocale) {
            var locale = overrideLocale || l10n;
            if (config.formatDate !== undefined && !isMobile) {
                return config.formatDate(dateObj, frmt, locale);
            }
            return frmt
                .split("")
                .map(function (c, i, arr) {
                return formats[c] && arr[i - 1] !== "\\"
                    ? formats[c](dateObj, locale, config)
                    : c !== "\\"
                        ? c
                        : "";
            })
                .join("");
        };
    };
    var createDateParser = function (_a) {
        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
        return function (date, givenFormat, timeless, customLocale) {
            if (date !== 0 && !date)
                return undefined;
            var locale = customLocale || l10n;
            var parsedDate;
            var dateOrig = date;
            if (date instanceof Date)
                parsedDate = new Date(date.getTime());
            else if (typeof date !== "string" &&
                date.toFixed !== undefined)
                parsedDate = new Date(date);
            else if (typeof date === "string") {
                var format = givenFormat || (config || defaults).dateFormat;
                var datestr = String(date).trim();
                if (datestr === "today") {
                    parsedDate = new Date();
                    timeless = true;
                }
                else if (config && config.parseDate) {
                    parsedDate = config.parseDate(date, format);
                }
                else if (/Z$/.test(datestr) ||
                    /GMT$/.test(datestr)) {
                    parsedDate = new Date(date);
                }
                else {
                    var matched = void 0, ops = [];
                    for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
                        var token = format[i];
                        var isBackSlash = token === "\\";
                        var escaped = format[i - 1] === "\\" || isBackSlash;
                        if (tokenRegex$1[token] && !escaped) {
                            regexStr += tokenRegex$1[token];
                            var match = new RegExp(regexStr).exec(date);
                            if (match && (matched = true)) {
                                ops[token !== "Y" ? "push" : "unshift"]({
                                    fn: revFormat[token],
                                    val: match[++matchIndex],
                                });
                            }
                        }
                        else if (!isBackSlash)
                            regexStr += ".";
                    }
                    parsedDate =
                        !config || !config.noCalendar
                            ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)
                            : new Date(new Date().setHours(0, 0, 0, 0));
                    ops.forEach(function (_a) {
                        var fn = _a.fn, val = _a.val;
                        return (parsedDate = fn(parsedDate, val, locale) || parsedDate);
                    });
                    parsedDate = matched ? parsedDate : undefined;
                }
            }
            if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
                config.errorHandler(new Error("Invalid date provided: " + dateOrig));
                return undefined;
            }
            if (timeless === true)
                parsedDate.setHours(0, 0, 0, 0);
            return parsedDate;
        };
    };
    function compareDates(date1, date2, timeless) {
        if (timeless === void 0) { timeless = true; }
        if (timeless !== false) {
            return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -
                new Date(date2.getTime()).setHours(0, 0, 0, 0));
        }
        return date1.getTime() - date2.getTime();
    }
    var isBetween = function (ts, ts1, ts2) {
        return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
    };
    var calculateSecondsSinceMidnight = function (hours, minutes, seconds) {
        return hours * 3600 + minutes * 60 + seconds;
    };
    var parseSeconds = function (secondsSinceMidnight) {
        var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
        return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
    };
    var duration = {
        DAY: 86400000,
    };
    function getDefaultHours(config) {
        var hours = config.defaultHour;
        var minutes = config.defaultMinute;
        var seconds = config.defaultSeconds;
        if (config.minDate !== undefined) {
            var minHour = config.minDate.getHours();
            var minMinutes = config.minDate.getMinutes();
            var minSeconds = config.minDate.getSeconds();
            if (hours < minHour) {
                hours = minHour;
            }
            if (hours === minHour && minutes < minMinutes) {
                minutes = minMinutes;
            }
            if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
                seconds = config.minDate.getSeconds();
        }
        if (config.maxDate !== undefined) {
            var maxHr = config.maxDate.getHours();
            var maxMinutes = config.maxDate.getMinutes();
            hours = Math.min(hours, maxHr);
            if (hours === maxHr)
                minutes = Math.min(maxMinutes, minutes);
            if (hours === maxHr && minutes === maxMinutes)
                seconds = config.maxDate.getSeconds();
        }
        return { hours: hours, minutes: minutes, seconds: seconds };
    }

    if (typeof Object.assign !== "function") {
        Object.assign = function (target) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!target) {
                throw TypeError("Cannot convert undefined or null to object");
            }
            var _loop_1 = function (source) {
                if (source) {
                    Object.keys(source).forEach(function (key) { return (target[key] = source[key]); });
                }
            };
            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
                var source = args_1[_a];
                _loop_1(source);
            }
            return target;
        };
    }

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };
    var DEBOUNCED_CHANGE_MS = 300;
    function FlatpickrInstance(element, instanceConfig) {
        var self = {
            config: __assign(__assign({}, defaults), flatpickr.defaultConfig),
            l10n: english,
        };
        self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
        self._handlers = [];
        self.pluginElements = [];
        self.loadedPlugins = [];
        self._bind = bind;
        self._setHoursFromDate = setHoursFromDate;
        self._positionCalendar = positionCalendar;
        self.changeMonth = changeMonth;
        self.changeYear = changeYear;
        self.clear = clear;
        self.close = close;
        self.onMouseOver = onMouseOver;
        self._createElement = createElement;
        self.createDay = createDay;
        self.destroy = destroy;
        self.isEnabled = isEnabled;
        self.jumpToDate = jumpToDate;
        self.updateValue = updateValue;
        self.open = open;
        self.redraw = redraw;
        self.set = set;
        self.setDate = setDate;
        self.toggle = toggle;
        function setupHelperFunctions() {
            self.utils = {
                getDaysInMonth: function (month, yr) {
                    if (month === void 0) { month = self.currentMonth; }
                    if (yr === void 0) { yr = self.currentYear; }
                    if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))
                        return 29;
                    return self.l10n.daysInMonth[month];
                },
            };
        }
        function init() {
            self.element = self.input = element;
            self.isOpen = false;
            parseConfig();
            setupLocale();
            setupInputs();
            setupDates();
            setupHelperFunctions();
            if (!self.isMobile)
                build();
            bindEvents();
            if (self.selectedDates.length || self.config.noCalendar) {
                if (self.config.enableTime) {
                    setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
                }
                updateValue(false);
            }
            setCalendarWidth();
            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            if (!self.isMobile && isSafari) {
                positionCalendar();
            }
            triggerEvent("onReady");
        }
        function getClosestActiveElement() {
            var _a;
            return (((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode())
                .activeElement || document.activeElement);
        }
        function bindToInstance(fn) {
            return fn.bind(self);
        }
        function setCalendarWidth() {
            var config = self.config;
            if (config.weekNumbers === false && config.showMonths === 1) {
                return;
            }
            else if (config.noCalendar !== true) {
                window.requestAnimationFrame(function () {
                    if (self.calendarContainer !== undefined) {
                        self.calendarContainer.style.visibility = "hidden";
                        self.calendarContainer.style.display = "block";
                    }
                    if (self.daysContainer !== undefined) {
                        var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
                        self.daysContainer.style.width = daysWidth + "px";
                        self.calendarContainer.style.width =
                            daysWidth +
                                (self.weekWrapper !== undefined
                                    ? self.weekWrapper.offsetWidth
                                    : 0) +
                                "px";
                        self.calendarContainer.style.removeProperty("visibility");
                        self.calendarContainer.style.removeProperty("display");
                    }
                });
            }
        }
        function updateTime(e) {
            if (self.selectedDates.length === 0) {
                var defaultDate = self.config.minDate === undefined ||
                    compareDates(new Date(), self.config.minDate) >= 0
                    ? new Date()
                    : new Date(self.config.minDate.getTime());
                var defaults = getDefaultHours(self.config);
                defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());
                self.selectedDates = [defaultDate];
                self.latestSelectedDateObj = defaultDate;
            }
            if (e !== undefined && e.type !== "blur") {
                timeWrapper(e);
            }
            var prevValue = self._input.value;
            setHoursFromInputs();
            updateValue();
            if (self._input.value !== prevValue) {
                self._debouncedChange();
            }
        }
        function ampm2military(hour, amPM) {
            return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);
        }
        function military2ampm(hour) {
            switch (hour % 24) {
                case 0:
                case 12:
                    return 12;
                default:
                    return hour % 12;
            }
        }
        function setHoursFromInputs() {
            if (self.hourElement === undefined || self.minuteElement === undefined)
                return;
            var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined
                ? (parseInt(self.secondElement.value, 10) || 0) % 60
                : 0;
            if (self.amPM !== undefined) {
                hours = ampm2military(hours, self.amPM.textContent);
            }
            var limitMinHours = self.config.minTime !== undefined ||
                (self.config.minDate &&
                    self.minDateHasTime &&
                    self.latestSelectedDateObj &&
                    compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===
                        0);
            var limitMaxHours = self.config.maxTime !== undefined ||
                (self.config.maxDate &&
                    self.maxDateHasTime &&
                    self.latestSelectedDateObj &&
                    compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===
                        0);
            if (self.config.maxTime !== undefined &&
                self.config.minTime !== undefined &&
                self.config.minTime > self.config.maxTime) {
                var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
                var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
                var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
                if (currentTime > maxBound && currentTime < minBound) {
                    var result = parseSeconds(minBound);
                    hours = result[0];
                    minutes = result[1];
                    seconds = result[2];
                }
            }
            else {
                if (limitMaxHours) {
                    var maxTime = self.config.maxTime !== undefined
                        ? self.config.maxTime
                        : self.config.maxDate;
                    hours = Math.min(hours, maxTime.getHours());
                    if (hours === maxTime.getHours())
                        minutes = Math.min(minutes, maxTime.getMinutes());
                    if (minutes === maxTime.getMinutes())
                        seconds = Math.min(seconds, maxTime.getSeconds());
                }
                if (limitMinHours) {
                    var minTime = self.config.minTime !== undefined
                        ? self.config.minTime
                        : self.config.minDate;
                    hours = Math.max(hours, minTime.getHours());
                    if (hours === minTime.getHours() && minutes < minTime.getMinutes())
                        minutes = minTime.getMinutes();
                    if (minutes === minTime.getMinutes())
                        seconds = Math.max(seconds, minTime.getSeconds());
                }
            }
            setHours(hours, minutes, seconds);
        }
        function setHoursFromDate(dateObj) {
            var date = dateObj || self.latestSelectedDateObj;
            if (date && date instanceof Date) {
                setHours(date.getHours(), date.getMinutes(), date.getSeconds());
            }
        }
        function setHours(hours, minutes, seconds) {
            if (self.latestSelectedDateObj !== undefined) {
                self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
            }
            if (!self.hourElement || !self.minuteElement || self.isMobile)
                return;
            self.hourElement.value = pad(!self.config.time_24hr
                ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)
                : hours);
            self.minuteElement.value = pad(minutes);
            if (self.amPM !== undefined)
                self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
            if (self.secondElement !== undefined)
                self.secondElement.value = pad(seconds);
        }
        function onYearInput(event) {
            var eventTarget = getEventTarget(event);
            var year = parseInt(eventTarget.value) + (event.delta || 0);
            if (year / 1000 > 1 ||
                (event.key === "Enter" && !/[^\d]/.test(year.toString()))) {
                changeYear(year);
            }
        }
        function bind(element, event, handler, options) {
            if (event instanceof Array)
                return event.forEach(function (ev) { return bind(element, ev, handler, options); });
            if (element instanceof Array)
                return element.forEach(function (el) { return bind(el, event, handler, options); });
            element.addEventListener(event, handler, options);
            self._handlers.push({
                remove: function () { return element.removeEventListener(event, handler, options); },
            });
        }
        function triggerChange() {
            triggerEvent("onChange");
        }
        function bindEvents() {
            if (self.config.wrap) {
                ["open", "close", "toggle", "clear"].forEach(function (evt) {
                    Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {
                        return bind(el, "click", self[evt]);
                    });
                });
            }
            if (self.isMobile) {
                setupMobile();
                return;
            }
            var debouncedResize = debounce(onResize, 50);
            self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
            if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
                bind(self.daysContainer, "mouseover", function (e) {
                    if (self.config.mode === "range")
                        onMouseOver(getEventTarget(e));
                });
            bind(self._input, "keydown", onKeyDown);
            if (self.calendarContainer !== undefined) {
                bind(self.calendarContainer, "keydown", onKeyDown);
            }
            if (!self.config.inline && !self.config.static)
                bind(window, "resize", debouncedResize);
            if (window.ontouchstart !== undefined)
                bind(window.document, "touchstart", documentClick);
            else
                bind(window.document, "mousedown", documentClick);
            bind(window.document, "focus", documentClick, { capture: true });
            if (self.config.clickOpens === true) {
                bind(self._input, "focus", self.open);
                bind(self._input, "click", self.open);
            }
            if (self.daysContainer !== undefined) {
                bind(self.monthNav, "click", onMonthNavClick);
                bind(self.monthNav, ["keyup", "increment"], onYearInput);
                bind(self.daysContainer, "click", selectDate);
            }
            if (self.timeContainer !== undefined &&
                self.minuteElement !== undefined &&
                self.hourElement !== undefined) {
                var selText = function (e) {
                    return getEventTarget(e).select();
                };
                bind(self.timeContainer, ["increment"], updateTime);
                bind(self.timeContainer, "blur", updateTime, { capture: true });
                bind(self.timeContainer, "click", timeIncrement);
                bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
                if (self.secondElement !== undefined)
                    bind(self.secondElement, "focus", function () { return self.secondElement && self.secondElement.select(); });
                if (self.amPM !== undefined) {
                    bind(self.amPM, "click", function (e) {
                        updateTime(e);
                    });
                }
            }
            if (self.config.allowInput) {
                bind(self._input, "blur", onBlur);
            }
        }
        function jumpToDate(jumpDate, triggerChange) {
            var jumpTo = jumpDate !== undefined
                ? self.parseDate(jumpDate)
                : self.latestSelectedDateObj ||
                    (self.config.minDate && self.config.minDate > self.now
                        ? self.config.minDate
                        : self.config.maxDate && self.config.maxDate < self.now
                            ? self.config.maxDate
                            : self.now);
            var oldYear = self.currentYear;
            var oldMonth = self.currentMonth;
            try {
                if (jumpTo !== undefined) {
                    self.currentYear = jumpTo.getFullYear();
                    self.currentMonth = jumpTo.getMonth();
                }
            }
            catch (e) {
                e.message = "Invalid date supplied: " + jumpTo;
                self.config.errorHandler(e);
            }
            if (triggerChange && self.currentYear !== oldYear) {
                triggerEvent("onYearChange");
                buildMonthSwitch();
            }
            if (triggerChange &&
                (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
                triggerEvent("onMonthChange");
            }
            self.redraw();
        }
        function timeIncrement(e) {
            var eventTarget = getEventTarget(e);
            if (~eventTarget.className.indexOf("arrow"))
                incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
        }
        function incrementNumInput(e, delta, inputElem) {
            var target = e && getEventTarget(e);
            var input = inputElem ||
                (target && target.parentNode && target.parentNode.firstChild);
            var event = createEvent("increment");
            event.delta = delta;
            input && input.dispatchEvent(event);
        }
        function build() {
            var fragment = window.document.createDocumentFragment();
            self.calendarContainer = createElement("div", "flatpickr-calendar");
            self.calendarContainer.tabIndex = -1;
            if (!self.config.noCalendar) {
                fragment.appendChild(buildMonthNav());
                self.innerContainer = createElement("div", "flatpickr-innerContainer");
                if (self.config.weekNumbers) {
                    var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
                    self.innerContainer.appendChild(weekWrapper);
                    self.weekNumbers = weekNumbers;
                    self.weekWrapper = weekWrapper;
                }
                self.rContainer = createElement("div", "flatpickr-rContainer");
                self.rContainer.appendChild(buildWeekdays());
                if (!self.daysContainer) {
                    self.daysContainer = createElement("div", "flatpickr-days");
                    self.daysContainer.tabIndex = -1;
                }
                buildDays();
                self.rContainer.appendChild(self.daysContainer);
                self.innerContainer.appendChild(self.rContainer);
                fragment.appendChild(self.innerContainer);
            }
            if (self.config.enableTime) {
                fragment.appendChild(buildTime());
            }
            toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
            toggleClass(self.calendarContainer, "animate", self.config.animate === true);
            toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
            self.calendarContainer.appendChild(fragment);
            var customAppend = self.config.appendTo !== undefined &&
                self.config.appendTo.nodeType !== undefined;
            if (self.config.inline || self.config.static) {
                self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
                if (self.config.inline) {
                    if (!customAppend && self.element.parentNode)
                        self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
                    else if (self.config.appendTo !== undefined)
                        self.config.appendTo.appendChild(self.calendarContainer);
                }
                if (self.config.static) {
                    var wrapper = createElement("div", "flatpickr-wrapper");
                    if (self.element.parentNode)
                        self.element.parentNode.insertBefore(wrapper, self.element);
                    wrapper.appendChild(self.element);
                    if (self.altInput)
                        wrapper.appendChild(self.altInput);
                    wrapper.appendChild(self.calendarContainer);
                }
            }
            if (!self.config.static && !self.config.inline)
                (self.config.appendTo !== undefined
                    ? self.config.appendTo
                    : window.document.body).appendChild(self.calendarContainer);
        }
        function createDay(className, date, _dayNumber, i) {
            var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
            dayElement.dateObj = date;
            dayElement.$i = i;
            dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
            if (className.indexOf("hidden") === -1 &&
                compareDates(date, self.now) === 0) {
                self.todayDateElem = dayElement;
                dayElement.classList.add("today");
                dayElement.setAttribute("aria-current", "date");
            }
            if (dateIsEnabled) {
                dayElement.tabIndex = -1;
                if (isDateSelected(date)) {
                    dayElement.classList.add("selected");
                    self.selectedDateElem = dayElement;
                    if (self.config.mode === "range") {
                        toggleClass(dayElement, "startRange", self.selectedDates[0] &&
                            compareDates(date, self.selectedDates[0], true) === 0);
                        toggleClass(dayElement, "endRange", self.selectedDates[1] &&
                            compareDates(date, self.selectedDates[1], true) === 0);
                        if (className === "nextMonthDay")
                            dayElement.classList.add("inRange");
                    }
                }
            }
            else {
                dayElement.classList.add("flatpickr-disabled");
            }
            if (self.config.mode === "range") {
                if (isDateInRange(date) && !isDateSelected(date))
                    dayElement.classList.add("inRange");
            }
            if (self.weekNumbers &&
                self.config.showMonths === 1 &&
                className !== "prevMonthDay" &&
                i % 7 === 6) {
                self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
            }
            triggerEvent("onDayCreate", dayElement);
            return dayElement;
        }
        function focusOnDayElem(targetNode) {
            targetNode.focus();
            if (self.config.mode === "range")
                onMouseOver(targetNode);
        }
        function getFirstAvailableDay(delta) {
            var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
            var endMonth = delta > 0 ? self.config.showMonths : -1;
            for (var m = startMonth; m != endMonth; m += delta) {
                var month = self.daysContainer.children[m];
                var startIndex = delta > 0 ? 0 : month.children.length - 1;
                var endIndex = delta > 0 ? month.children.length : -1;
                for (var i = startIndex; i != endIndex; i += delta) {
                    var c = month.children[i];
                    if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
                        return c;
                }
            }
            return undefined;
        }
        function getNextAvailableDay(current, delta) {
            var givenMonth = current.className.indexOf("Month") === -1
                ? current.dateObj.getMonth()
                : self.currentMonth;
            var endMonth = delta > 0 ? self.config.showMonths : -1;
            var loopDelta = delta > 0 ? 1 : -1;
            for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
                var month = self.daysContainer.children[m];
                var startIndex = givenMonth - self.currentMonth === m
                    ? current.$i + delta
                    : delta < 0
                        ? month.children.length - 1
                        : 0;
                var numMonthDays = month.children.length;
                for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
                    var c = month.children[i];
                    if (c.className.indexOf("hidden") === -1 &&
                        isEnabled(c.dateObj) &&
                        Math.abs(current.$i - i) >= Math.abs(delta))
                        return focusOnDayElem(c);
                }
            }
            self.changeMonth(loopDelta);
            focusOnDay(getFirstAvailableDay(loopDelta), 0);
            return undefined;
        }
        function focusOnDay(current, offset) {
            var activeElement = getClosestActiveElement();
            var dayFocused = isInView(activeElement || document.body);
            var startElem = current !== undefined
                ? current
                : dayFocused
                    ? activeElement
                    : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)
                        ? self.selectedDateElem
                        : self.todayDateElem !== undefined && isInView(self.todayDateElem)
                            ? self.todayDateElem
                            : getFirstAvailableDay(offset > 0 ? 1 : -1);
            if (startElem === undefined) {
                self._input.focus();
            }
            else if (!dayFocused) {
                focusOnDayElem(startElem);
            }
            else {
                getNextAvailableDay(startElem, offset);
            }
        }
        function buildMonthDays(year, month) {
            var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
            var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
            var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
            var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
            for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
                days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
            }
            for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
                days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
            }
            for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&
                (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
                days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
            }
            var dayContainer = createElement("div", "dayContainer");
            dayContainer.appendChild(days);
            return dayContainer;
        }
        function buildDays() {
            if (self.daysContainer === undefined) {
                return;
            }
            clearNode(self.daysContainer);
            if (self.weekNumbers)
                clearNode(self.weekNumbers);
            var frag = document.createDocumentFragment();
            for (var i = 0; i < self.config.showMonths; i++) {
                var d = new Date(self.currentYear, self.currentMonth, 1);
                d.setMonth(self.currentMonth + i);
                frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
            }
            self.daysContainer.appendChild(frag);
            self.days = self.daysContainer.firstChild;
            if (self.config.mode === "range" && self.selectedDates.length === 1) {
                onMouseOver();
            }
        }
        function buildMonthSwitch() {
            if (self.config.showMonths > 1 ||
                self.config.monthSelectorType !== "dropdown")
                return;
            var shouldBuildMonth = function (month) {
                if (self.config.minDate !== undefined &&
                    self.currentYear === self.config.minDate.getFullYear() &&
                    month < self.config.minDate.getMonth()) {
                    return false;
                }
                return !(self.config.maxDate !== undefined &&
                    self.currentYear === self.config.maxDate.getFullYear() &&
                    month > self.config.maxDate.getMonth());
            };
            self.monthsDropdownContainer.tabIndex = -1;
            self.monthsDropdownContainer.innerHTML = "";
            for (var i = 0; i < 12; i++) {
                if (!shouldBuildMonth(i))
                    continue;
                var month = createElement("option", "flatpickr-monthDropdown-month");
                month.value = new Date(self.currentYear, i).getMonth().toString();
                month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
                month.tabIndex = -1;
                if (self.currentMonth === i) {
                    month.selected = true;
                }
                self.monthsDropdownContainer.appendChild(month);
            }
        }
        function buildMonth() {
            var container = createElement("div", "flatpickr-month");
            var monthNavFragment = window.document.createDocumentFragment();
            var monthElement;
            if (self.config.showMonths > 1 ||
                self.config.monthSelectorType === "static") {
                monthElement = createElement("span", "cur-month");
            }
            else {
                self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
                self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
                bind(self.monthsDropdownContainer, "change", function (e) {
                    var target = getEventTarget(e);
                    var selectedMonth = parseInt(target.value, 10);
                    self.changeMonth(selectedMonth - self.currentMonth);
                    triggerEvent("onMonthChange");
                });
                buildMonthSwitch();
                monthElement = self.monthsDropdownContainer;
            }
            var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
            var yearElement = yearInput.getElementsByTagName("input")[0];
            yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
            if (self.config.minDate) {
                yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
            }
            if (self.config.maxDate) {
                yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
                yearElement.disabled =
                    !!self.config.minDate &&
                        self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
            }
            var currentMonth = createElement("div", "flatpickr-current-month");
            currentMonth.appendChild(monthElement);
            currentMonth.appendChild(yearInput);
            monthNavFragment.appendChild(currentMonth);
            container.appendChild(monthNavFragment);
            return {
                container: container,
                yearElement: yearElement,
                monthElement: monthElement,
            };
        }
        function buildMonths() {
            clearNode(self.monthNav);
            self.monthNav.appendChild(self.prevMonthNav);
            if (self.config.showMonths) {
                self.yearElements = [];
                self.monthElements = [];
            }
            for (var m = self.config.showMonths; m--;) {
                var month = buildMonth();
                self.yearElements.push(month.yearElement);
                self.monthElements.push(month.monthElement);
                self.monthNav.appendChild(month.container);
            }
            self.monthNav.appendChild(self.nextMonthNav);
        }
        function buildMonthNav() {
            self.monthNav = createElement("div", "flatpickr-months");
            self.yearElements = [];
            self.monthElements = [];
            self.prevMonthNav = createElement("span", "flatpickr-prev-month");
            self.prevMonthNav.innerHTML = self.config.prevArrow;
            self.nextMonthNav = createElement("span", "flatpickr-next-month");
            self.nextMonthNav.innerHTML = self.config.nextArrow;
            buildMonths();
            Object.defineProperty(self, "_hidePrevMonthArrow", {
                get: function () { return self.__hidePrevMonthArrow; },
                set: function (bool) {
                    if (self.__hidePrevMonthArrow !== bool) {
                        toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
                        self.__hidePrevMonthArrow = bool;
                    }
                },
            });
            Object.defineProperty(self, "_hideNextMonthArrow", {
                get: function () { return self.__hideNextMonthArrow; },
                set: function (bool) {
                    if (self.__hideNextMonthArrow !== bool) {
                        toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
                        self.__hideNextMonthArrow = bool;
                    }
                },
            });
            self.currentYearElement = self.yearElements[0];
            updateNavigationCurrentMonth();
            return self.monthNav;
        }
        function buildTime() {
            self.calendarContainer.classList.add("hasTime");
            if (self.config.noCalendar)
                self.calendarContainer.classList.add("noCalendar");
            var defaults = getDefaultHours(self.config);
            self.timeContainer = createElement("div", "flatpickr-time");
            self.timeContainer.tabIndex = -1;
            var separator = createElement("span", "flatpickr-time-separator", ":");
            var hourInput = createNumberInput("flatpickr-hour", {
                "aria-label": self.l10n.hourAriaLabel,
            });
            self.hourElement = hourInput.getElementsByTagName("input")[0];
            var minuteInput = createNumberInput("flatpickr-minute", {
                "aria-label": self.l10n.minuteAriaLabel,
            });
            self.minuteElement = minuteInput.getElementsByTagName("input")[0];
            self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
            self.hourElement.value = pad(self.latestSelectedDateObj
                ? self.latestSelectedDateObj.getHours()
                : self.config.time_24hr
                    ? defaults.hours
                    : military2ampm(defaults.hours));
            self.minuteElement.value = pad(self.latestSelectedDateObj
                ? self.latestSelectedDateObj.getMinutes()
                : defaults.minutes);
            self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
            self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
            self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
            self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
            self.hourElement.setAttribute("maxlength", "2");
            self.minuteElement.setAttribute("min", "0");
            self.minuteElement.setAttribute("max", "59");
            self.minuteElement.setAttribute("maxlength", "2");
            self.timeContainer.appendChild(hourInput);
            self.timeContainer.appendChild(separator);
            self.timeContainer.appendChild(minuteInput);
            if (self.config.time_24hr)
                self.timeContainer.classList.add("time24hr");
            if (self.config.enableSeconds) {
                self.timeContainer.classList.add("hasSeconds");
                var secondInput = createNumberInput("flatpickr-second");
                self.secondElement = secondInput.getElementsByTagName("input")[0];
                self.secondElement.value = pad(self.latestSelectedDateObj
                    ? self.latestSelectedDateObj.getSeconds()
                    : defaults.seconds);
                self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
                self.secondElement.setAttribute("min", "0");
                self.secondElement.setAttribute("max", "59");
                self.secondElement.setAttribute("maxlength", "2");
                self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
                self.timeContainer.appendChild(secondInput);
            }
            if (!self.config.time_24hr) {
                self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj
                    ? self.hourElement.value
                    : self.config.defaultHour) > 11)]);
                self.amPM.title = self.l10n.toggleTitle;
                self.amPM.tabIndex = -1;
                self.timeContainer.appendChild(self.amPM);
            }
            return self.timeContainer;
        }
        function buildWeekdays() {
            if (!self.weekdayContainer)
                self.weekdayContainer = createElement("div", "flatpickr-weekdays");
            else
                clearNode(self.weekdayContainer);
            for (var i = self.config.showMonths; i--;) {
                var container = createElement("div", "flatpickr-weekdaycontainer");
                self.weekdayContainer.appendChild(container);
            }
            updateWeekdays();
            return self.weekdayContainer;
        }
        function updateWeekdays() {
            if (!self.weekdayContainer) {
                return;
            }
            var firstDayOfWeek = self.l10n.firstDayOfWeek;
            var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
            if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
                weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
            }
            for (var i = self.config.showMonths; i--;) {
                self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
            }
        }
        function buildWeeks() {
            self.calendarContainer.classList.add("hasWeeks");
            var weekWrapper = createElement("div", "flatpickr-weekwrapper");
            weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
            var weekNumbers = createElement("div", "flatpickr-weeks");
            weekWrapper.appendChild(weekNumbers);
            return {
                weekWrapper: weekWrapper,
                weekNumbers: weekNumbers,
            };
        }
        function changeMonth(value, isOffset) {
            if (isOffset === void 0) { isOffset = true; }
            var delta = isOffset ? value : value - self.currentMonth;
            if ((delta < 0 && self._hidePrevMonthArrow === true) ||
                (delta > 0 && self._hideNextMonthArrow === true))
                return;
            self.currentMonth += delta;
            if (self.currentMonth < 0 || self.currentMonth > 11) {
                self.currentYear += self.currentMonth > 11 ? 1 : -1;
                self.currentMonth = (self.currentMonth + 12) % 12;
                triggerEvent("onYearChange");
                buildMonthSwitch();
            }
            buildDays();
            triggerEvent("onMonthChange");
            updateNavigationCurrentMonth();
        }
        function clear(triggerChangeEvent, toInitial) {
            if (triggerChangeEvent === void 0) { triggerChangeEvent = true; }
            if (toInitial === void 0) { toInitial = true; }
            self.input.value = "";
            if (self.altInput !== undefined)
                self.altInput.value = "";
            if (self.mobileInput !== undefined)
                self.mobileInput.value = "";
            self.selectedDates = [];
            self.latestSelectedDateObj = undefined;
            if (toInitial === true) {
                self.currentYear = self._initialDate.getFullYear();
                self.currentMonth = self._initialDate.getMonth();
            }
            if (self.config.enableTime === true) {
                var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
                setHours(hours, minutes, seconds);
            }
            self.redraw();
            if (triggerChangeEvent)
                triggerEvent("onChange");
        }
        function close() {
            self.isOpen = false;
            if (!self.isMobile) {
                if (self.calendarContainer !== undefined) {
                    self.calendarContainer.classList.remove("open");
                }
                if (self._input !== undefined) {
                    self._input.classList.remove("active");
                }
            }
            triggerEvent("onClose");
        }
        function destroy() {
            if (self.config !== undefined)
                triggerEvent("onDestroy");
            for (var i = self._handlers.length; i--;) {
                self._handlers[i].remove();
            }
            self._handlers = [];
            if (self.mobileInput) {
                if (self.mobileInput.parentNode)
                    self.mobileInput.parentNode.removeChild(self.mobileInput);
                self.mobileInput = undefined;
            }
            else if (self.calendarContainer && self.calendarContainer.parentNode) {
                if (self.config.static && self.calendarContainer.parentNode) {
                    var wrapper = self.calendarContainer.parentNode;
                    wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
                    if (wrapper.parentNode) {
                        while (wrapper.firstChild)
                            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
                        wrapper.parentNode.removeChild(wrapper);
                    }
                }
                else
                    self.calendarContainer.parentNode.removeChild(self.calendarContainer);
            }
            if (self.altInput) {
                self.input.type = "text";
                if (self.altInput.parentNode)
                    self.altInput.parentNode.removeChild(self.altInput);
                delete self.altInput;
            }
            if (self.input) {
                self.input.type = self.input._type;
                self.input.classList.remove("flatpickr-input");
                self.input.removeAttribute("readonly");
            }
            [
                "_showTimeInput",
                "latestSelectedDateObj",
                "_hideNextMonthArrow",
                "_hidePrevMonthArrow",
                "__hideNextMonthArrow",
                "__hidePrevMonthArrow",
                "isMobile",
                "isOpen",
                "selectedDateElem",
                "minDateHasTime",
                "maxDateHasTime",
                "days",
                "daysContainer",
                "_input",
                "_positionElement",
                "innerContainer",
                "rContainer",
                "monthNav",
                "todayDateElem",
                "calendarContainer",
                "weekdayContainer",
                "prevMonthNav",
                "nextMonthNav",
                "monthsDropdownContainer",
                "currentMonthElement",
                "currentYearElement",
                "navigationCurrentMonth",
                "selectedDateElem",
                "config",
            ].forEach(function (k) {
                try {
                    delete self[k];
                }
                catch (_) { }
            });
        }
        function isCalendarElem(elem) {
            return self.calendarContainer.contains(elem);
        }
        function documentClick(e) {
            if (self.isOpen && !self.config.inline) {
                var eventTarget_1 = getEventTarget(e);
                var isCalendarElement = isCalendarElem(eventTarget_1);
                var isInput = eventTarget_1 === self.input ||
                    eventTarget_1 === self.altInput ||
                    self.element.contains(eventTarget_1) ||
                    (e.path &&
                        e.path.indexOf &&
                        (~e.path.indexOf(self.input) ||
                            ~e.path.indexOf(self.altInput)));
                var lostFocus = !isInput &&
                    !isCalendarElement &&
                    !isCalendarElem(e.relatedTarget);
                var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {
                    return elem.contains(eventTarget_1);
                });
                if (lostFocus && isIgnored) {
                    if (self.config.allowInput) {
                        self.setDate(self._input.value, false, self.config.altInput
                            ? self.config.altFormat
                            : self.config.dateFormat);
                    }
                    if (self.timeContainer !== undefined &&
                        self.minuteElement !== undefined &&
                        self.hourElement !== undefined &&
                        self.input.value !== "" &&
                        self.input.value !== undefined) {
                        updateTime();
                    }
                    self.close();
                    if (self.config &&
                        self.config.mode === "range" &&
                        self.selectedDates.length === 1)
                        self.clear(false);
                }
            }
        }
        function changeYear(newYear) {
            if (!newYear ||
                (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||
                (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))
                return;
            var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
            self.currentYear = newYearNum || self.currentYear;
            if (self.config.maxDate &&
                self.currentYear === self.config.maxDate.getFullYear()) {
                self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
            }
            else if (self.config.minDate &&
                self.currentYear === self.config.minDate.getFullYear()) {
                self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
            }
            if (isNewYear) {
                self.redraw();
                triggerEvent("onYearChange");
                buildMonthSwitch();
            }
        }
        function isEnabled(date, timeless) {
            var _a;
            if (timeless === void 0) { timeless = true; }
            var dateToCheck = self.parseDate(date, undefined, timeless);
            if ((self.config.minDate &&
                dateToCheck &&
                compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||
                (self.config.maxDate &&
                    dateToCheck &&
                    compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))
                return false;
            if (!self.config.enable && self.config.disable.length === 0)
                return true;
            if (dateToCheck === undefined)
                return false;
            var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
            for (var i = 0, d = void 0; i < array.length; i++) {
                d = array[i];
                if (typeof d === "function" &&
                    d(dateToCheck))
                    return bool;
                else if (d instanceof Date &&
                    dateToCheck !== undefined &&
                    d.getTime() === dateToCheck.getTime())
                    return bool;
                else if (typeof d === "string") {
                    var parsed = self.parseDate(d, undefined, true);
                    return parsed && parsed.getTime() === dateToCheck.getTime()
                        ? bool
                        : !bool;
                }
                else if (typeof d === "object" &&
                    dateToCheck !== undefined &&
                    d.from &&
                    d.to &&
                    dateToCheck.getTime() >= d.from.getTime() &&
                    dateToCheck.getTime() <= d.to.getTime())
                    return bool;
            }
            return !bool;
        }
        function isInView(elem) {
            if (self.daysContainer !== undefined)
                return (elem.className.indexOf("hidden") === -1 &&
                    elem.className.indexOf("flatpickr-disabled") === -1 &&
                    self.daysContainer.contains(elem));
            return false;
        }
        function onBlur(e) {
            var isInput = e.target === self._input;
            var valueChanged = self._input.value.trimEnd() !== getDateStr();
            if (isInput &&
                valueChanged &&
                !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
                self.setDate(self._input.value, true, e.target === self.altInput
                    ? self.config.altFormat
                    : self.config.dateFormat);
            }
        }
        function onKeyDown(e) {
            var eventTarget = getEventTarget(e);
            var isInput = self.config.wrap
                ? element.contains(eventTarget)
                : eventTarget === self._input;
            var allowInput = self.config.allowInput;
            var allowKeydown = self.isOpen && (!allowInput || !isInput);
            var allowInlineKeydown = self.config.inline && isInput && !allowInput;
            if (e.keyCode === 13 && isInput) {
                if (allowInput) {
                    self.setDate(self._input.value, true, eventTarget === self.altInput
                        ? self.config.altFormat
                        : self.config.dateFormat);
                    self.close();
                    return eventTarget.blur();
                }
                else {
                    self.open();
                }
            }
            else if (isCalendarElem(eventTarget) ||
                allowKeydown ||
                allowInlineKeydown) {
                var isTimeObj = !!self.timeContainer &&
                    self.timeContainer.contains(eventTarget);
                switch (e.keyCode) {
                    case 13:
                        if (isTimeObj) {
                            e.preventDefault();
                            updateTime();
                            focusAndClose();
                        }
                        else
                            selectDate(e);
                        break;
                    case 27:
                        e.preventDefault();
                        focusAndClose();
                        break;
                    case 8:
                    case 46:
                        if (isInput && !self.config.allowInput) {
                            e.preventDefault();
                            self.clear();
                        }
                        break;
                    case 37:
                    case 39:
                        if (!isTimeObj && !isInput) {
                            e.preventDefault();
                            var activeElement = getClosestActiveElement();
                            if (self.daysContainer !== undefined &&
                                (allowInput === false ||
                                    (activeElement && isInView(activeElement)))) {
                                var delta_1 = e.keyCode === 39 ? 1 : -1;
                                if (!e.ctrlKey)
                                    focusOnDay(undefined, delta_1);
                                else {
                                    e.stopPropagation();
                                    changeMonth(delta_1);
                                    focusOnDay(getFirstAvailableDay(1), 0);
                                }
                            }
                        }
                        else if (self.hourElement)
                            self.hourElement.focus();
                        break;
                    case 38:
                    case 40:
                        e.preventDefault();
                        var delta = e.keyCode === 40 ? 1 : -1;
                        if ((self.daysContainer &&
                            eventTarget.$i !== undefined) ||
                            eventTarget === self.input ||
                            eventTarget === self.altInput) {
                            if (e.ctrlKey) {
                                e.stopPropagation();
                                changeYear(self.currentYear - delta);
                                focusOnDay(getFirstAvailableDay(1), 0);
                            }
                            else if (!isTimeObj)
                                focusOnDay(undefined, delta * 7);
                        }
                        else if (eventTarget === self.currentYearElement) {
                            changeYear(self.currentYear - delta);
                        }
                        else if (self.config.enableTime) {
                            if (!isTimeObj && self.hourElement)
                                self.hourElement.focus();
                            updateTime(e);
                            self._debouncedChange();
                        }
                        break;
                    case 9:
                        if (isTimeObj) {
                            var elems = [
                                self.hourElement,
                                self.minuteElement,
                                self.secondElement,
                                self.amPM,
                            ]
                                .concat(self.pluginElements)
                                .filter(function (x) { return x; });
                            var i = elems.indexOf(eventTarget);
                            if (i !== -1) {
                                var target = elems[i + (e.shiftKey ? -1 : 1)];
                                e.preventDefault();
                                (target || self._input).focus();
                            }
                        }
                        else if (!self.config.noCalendar &&
                            self.daysContainer &&
                            self.daysContainer.contains(eventTarget) &&
                            e.shiftKey) {
                            e.preventDefault();
                            self._input.focus();
                        }
                        break;
                }
            }
            if (self.amPM !== undefined && eventTarget === self.amPM) {
                switch (e.key) {
                    case self.l10n.amPM[0].charAt(0):
                    case self.l10n.amPM[0].charAt(0).toLowerCase():
                        self.amPM.textContent = self.l10n.amPM[0];
                        setHoursFromInputs();
                        updateValue();
                        break;
                    case self.l10n.amPM[1].charAt(0):
                    case self.l10n.amPM[1].charAt(0).toLowerCase():
                        self.amPM.textContent = self.l10n.amPM[1];
                        setHoursFromInputs();
                        updateValue();
                        break;
                }
            }
            if (isInput || isCalendarElem(eventTarget)) {
                triggerEvent("onKeyDown", e);
            }
        }
        function onMouseOver(elem, cellClass) {
            if (cellClass === void 0) { cellClass = "flatpickr-day"; }
            if (self.selectedDates.length !== 1 ||
                (elem &&
                    (!elem.classList.contains(cellClass) ||
                        elem.classList.contains("flatpickr-disabled"))))
                return;
            var hoverDate = elem
                ? elem.dateObj.getTime()
                : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
            var containsDisabled = false;
            var minRange = 0, maxRange = 0;
            for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
                if (!isEnabled(new Date(t), true)) {
                    containsDisabled =
                        containsDisabled || (t > rangeStartDate && t < rangeEndDate);
                    if (t < initialDate && (!minRange || t > minRange))
                        minRange = t;
                    else if (t > initialDate && (!maxRange || t < maxRange))
                        maxRange = t;
                }
            }
            var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
            hoverableCells.forEach(function (dayElem) {
                var date = dayElem.dateObj;
                var timestamp = date.getTime();
                var outOfRange = (minRange > 0 && timestamp < minRange) ||
                    (maxRange > 0 && timestamp > maxRange);
                if (outOfRange) {
                    dayElem.classList.add("notAllowed");
                    ["inRange", "startRange", "endRange"].forEach(function (c) {
                        dayElem.classList.remove(c);
                    });
                    return;
                }
                else if (containsDisabled && !outOfRange)
                    return;
                ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {
                    dayElem.classList.remove(c);
                });
                if (elem !== undefined) {
                    elem.classList.add(hoverDate <= self.selectedDates[0].getTime()
                        ? "startRange"
                        : "endRange");
                    if (initialDate < hoverDate && timestamp === initialDate)
                        dayElem.classList.add("startRange");
                    else if (initialDate > hoverDate && timestamp === initialDate)
                        dayElem.classList.add("endRange");
                    if (timestamp >= minRange &&
                        (maxRange === 0 || timestamp <= maxRange) &&
                        isBetween(timestamp, initialDate, hoverDate))
                        dayElem.classList.add("inRange");
                }
            });
        }
        function onResize() {
            if (self.isOpen && !self.config.static && !self.config.inline)
                positionCalendar();
        }
        function open(e, positionElement) {
            if (positionElement === void 0) { positionElement = self._positionElement; }
            if (self.isMobile === true) {
                if (e) {
                    e.preventDefault();
                    var eventTarget = getEventTarget(e);
                    if (eventTarget) {
                        eventTarget.blur();
                    }
                }
                if (self.mobileInput !== undefined) {
                    self.mobileInput.focus();
                    self.mobileInput.click();
                }
                triggerEvent("onOpen");
                return;
            }
            else if (self._input.disabled || self.config.inline) {
                return;
            }
            var wasOpen = self.isOpen;
            self.isOpen = true;
            if (!wasOpen) {
                self.calendarContainer.classList.add("open");
                self._input.classList.add("active");
                triggerEvent("onOpen");
                positionCalendar(positionElement);
            }
            if (self.config.enableTime === true && self.config.noCalendar === true) {
                if (self.config.allowInput === false &&
                    (e === undefined ||
                        !self.timeContainer.contains(e.relatedTarget))) {
                    setTimeout(function () { return self.hourElement.select(); }, 50);
                }
            }
        }
        function minMaxDateSetter(type) {
            return function (date) {
                var dateObj = (self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat));
                var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
                if (dateObj !== undefined) {
                    self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] =
                        dateObj.getHours() > 0 ||
                            dateObj.getMinutes() > 0 ||
                            dateObj.getSeconds() > 0;
                }
                if (self.selectedDates) {
                    self.selectedDates = self.selectedDates.filter(function (d) { return isEnabled(d); });
                    if (!self.selectedDates.length && type === "min")
                        setHoursFromDate(dateObj);
                    updateValue();
                }
                if (self.daysContainer) {
                    redraw();
                    if (dateObj !== undefined)
                        self.currentYearElement[type] = dateObj.getFullYear().toString();
                    else
                        self.currentYearElement.removeAttribute(type);
                    self.currentYearElement.disabled =
                        !!inverseDateObj &&
                            dateObj !== undefined &&
                            inverseDateObj.getFullYear() === dateObj.getFullYear();
                }
            };
        }
        function parseConfig() {
            var boolOpts = [
                "wrap",
                "weekNumbers",
                "allowInput",
                "allowInvalidPreload",
                "clickOpens",
                "time_24hr",
                "enableTime",
                "noCalendar",
                "altInput",
                "shorthandCurrentMonth",
                "inline",
                "static",
                "enableSeconds",
                "disableMobile",
            ];
            var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
            var formats = {};
            self.config.parseDate = userConfig.parseDate;
            self.config.formatDate = userConfig.formatDate;
            Object.defineProperty(self.config, "enable", {
                get: function () { return self.config._enable; },
                set: function (dates) {
                    self.config._enable = parseDateRules(dates);
                },
            });
            Object.defineProperty(self.config, "disable", {
                get: function () { return self.config._disable; },
                set: function (dates) {
                    self.config._disable = parseDateRules(dates);
                },
            });
            var timeMode = userConfig.mode === "time";
            if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
                var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
                formats.dateFormat =
                    userConfig.noCalendar || timeMode
                        ? "H:i" + (userConfig.enableSeconds ? ":S" : "")
                        : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
            }
            if (userConfig.altInput &&
                (userConfig.enableTime || timeMode) &&
                !userConfig.altFormat) {
                var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
                formats.altFormat =
                    userConfig.noCalendar || timeMode
                        ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K")
                        : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
            }
            Object.defineProperty(self.config, "minDate", {
                get: function () { return self.config._minDate; },
                set: minMaxDateSetter("min"),
            });
            Object.defineProperty(self.config, "maxDate", {
                get: function () { return self.config._maxDate; },
                set: minMaxDateSetter("max"),
            });
            var minMaxTimeSetter = function (type) { return function (val) {
                self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
            }; };
            Object.defineProperty(self.config, "minTime", {
                get: function () { return self.config._minTime; },
                set: minMaxTimeSetter("min"),
            });
            Object.defineProperty(self.config, "maxTime", {
                get: function () { return self.config._maxTime; },
                set: minMaxTimeSetter("max"),
            });
            if (userConfig.mode === "time") {
                self.config.noCalendar = true;
                self.config.enableTime = true;
            }
            Object.assign(self.config, formats, userConfig);
            for (var i = 0; i < boolOpts.length; i++)
                self.config[boolOpts[i]] =
                    self.config[boolOpts[i]] === true ||
                        self.config[boolOpts[i]] === "true";
            HOOKS.filter(function (hook) { return self.config[hook] !== undefined; }).forEach(function (hook) {
                self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
            });
            self.isMobile =
                !self.config.disableMobile &&
                    !self.config.inline &&
                    self.config.mode === "single" &&
                    !self.config.disable.length &&
                    !self.config.enable &&
                    !self.config.weekNumbers &&
                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            for (var i = 0; i < self.config.plugins.length; i++) {
                var pluginConf = self.config.plugins[i](self) || {};
                for (var key in pluginConf) {
                    if (HOOKS.indexOf(key) > -1) {
                        self.config[key] = arrayify(pluginConf[key])
                            .map(bindToInstance)
                            .concat(self.config[key]);
                    }
                    else if (typeof userConfig[key] === "undefined")
                        self.config[key] = pluginConf[key];
                }
            }
            if (!userConfig.altInputClass) {
                self.config.altInputClass =
                    getInputElem().className + " " + self.config.altInputClass;
            }
            triggerEvent("onParseConfig");
        }
        function getInputElem() {
            return self.config.wrap
                ? element.querySelector("[data-input]")
                : element;
        }
        function setupLocale() {
            if (typeof self.config.locale !== "object" &&
                typeof flatpickr.l10ns[self.config.locale] === "undefined")
                self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
            self.l10n = __assign(__assign({}, flatpickr.l10ns.default), (typeof self.config.locale === "object"
                ? self.config.locale
                : self.config.locale !== "default"
                    ? flatpickr.l10ns[self.config.locale]
                    : undefined));
            tokenRegex$1.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
            tokenRegex$1.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
            tokenRegex$1.M = "(" + self.l10n.months.shorthand.join("|") + ")";
            tokenRegex$1.F = "(" + self.l10n.months.longhand.join("|") + ")";
            tokenRegex$1.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
            var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
            if (userConfig.time_24hr === undefined &&
                flatpickr.defaultConfig.time_24hr === undefined) {
                self.config.time_24hr = self.l10n.time_24hr;
            }
            self.formatDate = createDateFormatter(self);
            self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
        }
        function positionCalendar(customPositionElement) {
            if (typeof self.config.position === "function") {
                return void self.config.position(self, customPositionElement);
            }
            if (self.calendarContainer === undefined)
                return;
            triggerEvent("onPreCalendarPosition");
            var positionElement = customPositionElement || self._positionElement;
            var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (function (acc, child) { return acc + child.offsetHeight; }), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" ||
                (configPosVertical !== "below" &&
                    distanceFromBottom < calendarHeight &&
                    inputBounds.top > calendarHeight);
            var top = window.pageYOffset +
                inputBounds.top +
                (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
            toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
            toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
            if (self.config.inline)
                return;
            var left = window.pageXOffset + inputBounds.left;
            var isCenter = false;
            var isRight = false;
            if (configPosHorizontal === "center") {
                left -= (calendarWidth - inputBounds.width) / 2;
                isCenter = true;
            }
            else if (configPosHorizontal === "right") {
                left -= calendarWidth - inputBounds.width;
                isRight = true;
            }
            toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
            toggleClass(self.calendarContainer, "arrowCenter", isCenter);
            toggleClass(self.calendarContainer, "arrowRight", isRight);
            var right = window.document.body.offsetWidth -
                (window.pageXOffset + inputBounds.right);
            var rightMost = left + calendarWidth > window.document.body.offsetWidth;
            var centerMost = right + calendarWidth > window.document.body.offsetWidth;
            toggleClass(self.calendarContainer, "rightMost", rightMost);
            if (self.config.static)
                return;
            self.calendarContainer.style.top = top + "px";
            if (!rightMost) {
                self.calendarContainer.style.left = left + "px";
                self.calendarContainer.style.right = "auto";
            }
            else if (!centerMost) {
                self.calendarContainer.style.left = "auto";
                self.calendarContainer.style.right = right + "px";
            }
            else {
                var doc = getDocumentStyleSheet();
                if (doc === undefined)
                    return;
                var bodyWidth = window.document.body.offsetWidth;
                var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
                var centerBefore = ".flatpickr-calendar.centerMost:before";
                var centerAfter = ".flatpickr-calendar.centerMost:after";
                var centerIndex = doc.cssRules.length;
                var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
                toggleClass(self.calendarContainer, "rightMost", false);
                toggleClass(self.calendarContainer, "centerMost", true);
                doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
                self.calendarContainer.style.left = centerLeft + "px";
                self.calendarContainer.style.right = "auto";
            }
        }
        function getDocumentStyleSheet() {
            var editableSheet = null;
            for (var i = 0; i < document.styleSheets.length; i++) {
                var sheet = document.styleSheets[i];
                if (!sheet.cssRules)
                    continue;
                try {
                    sheet.cssRules;
                }
                catch (err) {
                    continue;
                }
                editableSheet = sheet;
                break;
            }
            return editableSheet != null ? editableSheet : createStyleSheet();
        }
        function createStyleSheet() {
            var style = document.createElement("style");
            document.head.appendChild(style);
            return style.sheet;
        }
        function redraw() {
            if (self.config.noCalendar || self.isMobile)
                return;
            buildMonthSwitch();
            updateNavigationCurrentMonth();
            buildDays();
        }
        function focusAndClose() {
            self._input.focus();
            if (window.navigator.userAgent.indexOf("MSIE") !== -1 ||
                navigator.msMaxTouchPoints !== undefined) {
                setTimeout(self.close, 0);
            }
            else {
                self.close();
            }
        }
        function selectDate(e) {
            e.preventDefault();
            e.stopPropagation();
            var isSelectable = function (day) {
                return day.classList &&
                    day.classList.contains("flatpickr-day") &&
                    !day.classList.contains("flatpickr-disabled") &&
                    !day.classList.contains("notAllowed");
            };
            var t = findParent(getEventTarget(e), isSelectable);
            if (t === undefined)
                return;
            var target = t;
            var selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));
            var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||
                selectedDate.getMonth() >
                    self.currentMonth + self.config.showMonths - 1) &&
                self.config.mode !== "range";
            self.selectedDateElem = target;
            if (self.config.mode === "single")
                self.selectedDates = [selectedDate];
            else if (self.config.mode === "multiple") {
                var selectedIndex = isDateSelected(selectedDate);
                if (selectedIndex)
                    self.selectedDates.splice(parseInt(selectedIndex), 1);
                else
                    self.selectedDates.push(selectedDate);
            }
            else if (self.config.mode === "range") {
                if (self.selectedDates.length === 2) {
                    self.clear(false, false);
                }
                self.latestSelectedDateObj = selectedDate;
                self.selectedDates.push(selectedDate);
                if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
                    self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
            }
            setHoursFromInputs();
            if (shouldChangeMonth) {
                var isNewYear = self.currentYear !== selectedDate.getFullYear();
                self.currentYear = selectedDate.getFullYear();
                self.currentMonth = selectedDate.getMonth();
                if (isNewYear) {
                    triggerEvent("onYearChange");
                    buildMonthSwitch();
                }
                triggerEvent("onMonthChange");
            }
            updateNavigationCurrentMonth();
            buildDays();
            updateValue();
            if (!shouldChangeMonth &&
                self.config.mode !== "range" &&
                self.config.showMonths === 1)
                focusOnDayElem(target);
            else if (self.selectedDateElem !== undefined &&
                self.hourElement === undefined) {
                self.selectedDateElem && self.selectedDateElem.focus();
            }
            if (self.hourElement !== undefined)
                self.hourElement !== undefined && self.hourElement.focus();
            if (self.config.closeOnSelect) {
                var single = self.config.mode === "single" && !self.config.enableTime;
                var range = self.config.mode === "range" &&
                    self.selectedDates.length === 2 &&
                    !self.config.enableTime;
                if (single || range) {
                    focusAndClose();
                }
            }
            triggerChange();
        }
        var CALLBACKS = {
            locale: [setupLocale, updateWeekdays],
            showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
            minDate: [jumpToDate],
            maxDate: [jumpToDate],
            positionElement: [updatePositionElement],
            clickOpens: [
                function () {
                    if (self.config.clickOpens === true) {
                        bind(self._input, "focus", self.open);
                        bind(self._input, "click", self.open);
                    }
                    else {
                        self._input.removeEventListener("focus", self.open);
                        self._input.removeEventListener("click", self.open);
                    }
                },
            ],
        };
        function set(option, value) {
            if (option !== null && typeof option === "object") {
                Object.assign(self.config, option);
                for (var key in option) {
                    if (CALLBACKS[key] !== undefined)
                        CALLBACKS[key].forEach(function (x) { return x(); });
                }
            }
            else {
                self.config[option] = value;
                if (CALLBACKS[option] !== undefined)
                    CALLBACKS[option].forEach(function (x) { return x(); });
                else if (HOOKS.indexOf(option) > -1)
                    self.config[option] = arrayify(value);
            }
            self.redraw();
            updateValue(true);
        }
        function setSelectedDate(inputDate, format) {
            var dates = [];
            if (inputDate instanceof Array)
                dates = inputDate.map(function (d) { return self.parseDate(d, format); });
            else if (inputDate instanceof Date || typeof inputDate === "number")
                dates = [self.parseDate(inputDate, format)];
            else if (typeof inputDate === "string") {
                switch (self.config.mode) {
                    case "single":
                    case "time":
                        dates = [self.parseDate(inputDate, format)];
                        break;
                    case "multiple":
                        dates = inputDate
                            .split(self.config.conjunction)
                            .map(function (date) { return self.parseDate(date, format); });
                        break;
                    case "range":
                        dates = inputDate
                            .split(self.l10n.rangeSeparator)
                            .map(function (date) { return self.parseDate(date, format); });
                        break;
                }
            }
            else
                self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
            self.selectedDates = (self.config.allowInvalidPreload
                ? dates
                : dates.filter(function (d) { return d instanceof Date && isEnabled(d, false); }));
            if (self.config.mode === "range")
                self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
        }
        function setDate(date, triggerChange, format) {
            if (triggerChange === void 0) { triggerChange = false; }
            if (format === void 0) { format = self.config.dateFormat; }
            if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))
                return self.clear(triggerChange);
            setSelectedDate(date, format);
            self.latestSelectedDateObj =
                self.selectedDates[self.selectedDates.length - 1];
            self.redraw();
            jumpToDate(undefined, triggerChange);
            setHoursFromDate();
            if (self.selectedDates.length === 0) {
                self.clear(false);
            }
            updateValue(triggerChange);
            if (triggerChange)
                triggerEvent("onChange");
        }
        function parseDateRules(arr) {
            return arr
                .slice()
                .map(function (rule) {
                if (typeof rule === "string" ||
                    typeof rule === "number" ||
                    rule instanceof Date) {
                    return self.parseDate(rule, undefined, true);
                }
                else if (rule &&
                    typeof rule === "object" &&
                    rule.from &&
                    rule.to)
                    return {
                        from: self.parseDate(rule.from, undefined),
                        to: self.parseDate(rule.to, undefined),
                    };
                return rule;
            })
                .filter(function (x) { return x; });
        }
        function setupDates() {
            self.selectedDates = [];
            self.now = self.parseDate(self.config.now) || new Date();
            var preloadedDate = self.config.defaultDate ||
                ((self.input.nodeName === "INPUT" ||
                    self.input.nodeName === "TEXTAREA") &&
                    self.input.placeholder &&
                    self.input.value === self.input.placeholder
                    ? null
                    : self.input.value);
            if (preloadedDate)
                setSelectedDate(preloadedDate, self.config.dateFormat);
            self._initialDate =
                self.selectedDates.length > 0
                    ? self.selectedDates[0]
                    : self.config.minDate &&
                        self.config.minDate.getTime() > self.now.getTime()
                        ? self.config.minDate
                        : self.config.maxDate &&
                            self.config.maxDate.getTime() < self.now.getTime()
                            ? self.config.maxDate
                            : self.now;
            self.currentYear = self._initialDate.getFullYear();
            self.currentMonth = self._initialDate.getMonth();
            if (self.selectedDates.length > 0)
                self.latestSelectedDateObj = self.selectedDates[0];
            if (self.config.minTime !== undefined)
                self.config.minTime = self.parseDate(self.config.minTime, "H:i");
            if (self.config.maxTime !== undefined)
                self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
            self.minDateHasTime =
                !!self.config.minDate &&
                    (self.config.minDate.getHours() > 0 ||
                        self.config.minDate.getMinutes() > 0 ||
                        self.config.minDate.getSeconds() > 0);
            self.maxDateHasTime =
                !!self.config.maxDate &&
                    (self.config.maxDate.getHours() > 0 ||
                        self.config.maxDate.getMinutes() > 0 ||
                        self.config.maxDate.getSeconds() > 0);
        }
        function setupInputs() {
            self.input = getInputElem();
            if (!self.input) {
                self.config.errorHandler(new Error("Invalid input element specified"));
                return;
            }
            self.input._type = self.input.type;
            self.input.type = "text";
            self.input.classList.add("flatpickr-input");
            self._input = self.input;
            if (self.config.altInput) {
                self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
                self._input = self.altInput;
                self.altInput.placeholder = self.input.placeholder;
                self.altInput.disabled = self.input.disabled;
                self.altInput.required = self.input.required;
                self.altInput.tabIndex = self.input.tabIndex;
                self.altInput.type = "text";
                self.input.setAttribute("type", "hidden");
                if (!self.config.static && self.input.parentNode)
                    self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
            }
            if (!self.config.allowInput)
                self._input.setAttribute("readonly", "readonly");
            updatePositionElement();
        }
        function updatePositionElement() {
            self._positionElement = self.config.positionElement || self._input;
        }
        function setupMobile() {
            var inputType = self.config.enableTime
                ? self.config.noCalendar
                    ? "time"
                    : "datetime-local"
                : "date";
            self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
            self.mobileInput.tabIndex = 1;
            self.mobileInput.type = inputType;
            self.mobileInput.disabled = self.input.disabled;
            self.mobileInput.required = self.input.required;
            self.mobileInput.placeholder = self.input.placeholder;
            self.mobileFormatStr =
                inputType === "datetime-local"
                    ? "Y-m-d\\TH:i:S"
                    : inputType === "date"
                        ? "Y-m-d"
                        : "H:i:S";
            if (self.selectedDates.length > 0) {
                self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
            }
            if (self.config.minDate)
                self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
            if (self.config.maxDate)
                self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
            if (self.input.getAttribute("step"))
                self.mobileInput.step = String(self.input.getAttribute("step"));
            self.input.type = "hidden";
            if (self.altInput !== undefined)
                self.altInput.type = "hidden";
            try {
                if (self.input.parentNode)
                    self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
            }
            catch (_a) { }
            bind(self.mobileInput, "change", function (e) {
                self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
                triggerEvent("onChange");
                triggerEvent("onClose");
            });
        }
        function toggle(e) {
            if (self.isOpen === true)
                return self.close();
            self.open(e);
        }
        function triggerEvent(event, data) {
            if (self.config === undefined)
                return;
            var hooks = self.config[event];
            if (hooks !== undefined && hooks.length > 0) {
                for (var i = 0; hooks[i] && i < hooks.length; i++)
                    hooks[i](self.selectedDates, self.input.value, self, data);
            }
            if (event === "onChange") {
                self.input.dispatchEvent(createEvent("change"));
                self.input.dispatchEvent(createEvent("input"));
            }
        }
        function createEvent(name) {
            var e = document.createEvent("Event");
            e.initEvent(name, true, true);
            return e;
        }
        function isDateSelected(date) {
            for (var i = 0; i < self.selectedDates.length; i++) {
                var selectedDate = self.selectedDates[i];
                if (selectedDate instanceof Date &&
                    compareDates(selectedDate, date) === 0)
                    return "" + i;
            }
            return false;
        }
        function isDateInRange(date) {
            if (self.config.mode !== "range" || self.selectedDates.length < 2)
                return false;
            return (compareDates(date, self.selectedDates[0]) >= 0 &&
                compareDates(date, self.selectedDates[1]) <= 0);
        }
        function updateNavigationCurrentMonth() {
            if (self.config.noCalendar || self.isMobile || !self.monthNav)
                return;
            self.yearElements.forEach(function (yearElement, i) {
                var d = new Date(self.currentYear, self.currentMonth, 1);
                d.setMonth(self.currentMonth + i);
                if (self.config.showMonths > 1 ||
                    self.config.monthSelectorType === "static") {
                    self.monthElements[i].textContent =
                        monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
                }
                else {
                    self.monthsDropdownContainer.value = d.getMonth().toString();
                }
                yearElement.value = d.getFullYear().toString();
            });
            self._hidePrevMonthArrow =
                self.config.minDate !== undefined &&
                    (self.currentYear === self.config.minDate.getFullYear()
                        ? self.currentMonth <= self.config.minDate.getMonth()
                        : self.currentYear < self.config.minDate.getFullYear());
            self._hideNextMonthArrow =
                self.config.maxDate !== undefined &&
                    (self.currentYear === self.config.maxDate.getFullYear()
                        ? self.currentMonth + 1 > self.config.maxDate.getMonth()
                        : self.currentYear > self.config.maxDate.getFullYear());
        }
        function getDateStr(specificFormat) {
            var format = specificFormat ||
                (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
            return self.selectedDates
                .map(function (dObj) { return self.formatDate(dObj, format); })
                .filter(function (d, i, arr) {
                return self.config.mode !== "range" ||
                    self.config.enableTime ||
                    arr.indexOf(d) === i;
            })
                .join(self.config.mode !== "range"
                ? self.config.conjunction
                : self.l10n.rangeSeparator);
        }
        function updateValue(triggerChange) {
            if (triggerChange === void 0) { triggerChange = true; }
            if (self.mobileInput !== undefined && self.mobileFormatStr) {
                self.mobileInput.value =
                    self.latestSelectedDateObj !== undefined
                        ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)
                        : "";
            }
            self.input.value = getDateStr(self.config.dateFormat);
            if (self.altInput !== undefined) {
                self.altInput.value = getDateStr(self.config.altFormat);
            }
            if (triggerChange !== false)
                triggerEvent("onValueUpdate");
        }
        function onMonthNavClick(e) {
            var eventTarget = getEventTarget(e);
            var isPrevMonth = self.prevMonthNav.contains(eventTarget);
            var isNextMonth = self.nextMonthNav.contains(eventTarget);
            if (isPrevMonth || isNextMonth) {
                changeMonth(isPrevMonth ? -1 : 1);
            }
            else if (self.yearElements.indexOf(eventTarget) >= 0) {
                eventTarget.select();
            }
            else if (eventTarget.classList.contains("arrowUp")) {
                self.changeYear(self.currentYear + 1);
            }
            else if (eventTarget.classList.contains("arrowDown")) {
                self.changeYear(self.currentYear - 1);
            }
        }
        function timeWrapper(e) {
            e.preventDefault();
            var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
            if (self.amPM !== undefined && eventTarget === self.amPM) {
                self.amPM.textContent =
                    self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
            }
            var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta ||
                (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);
            var newValue = curValue + step * delta;
            if (typeof input.value !== "undefined" && input.value.length === 2) {
                var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
                if (newValue < min) {
                    newValue =
                        max +
                            newValue +
                            int(!isHourElem) +
                            (int(isHourElem) && int(!self.amPM));
                    if (isMinuteElem)
                        incrementNumInput(undefined, -1, self.hourElement);
                }
                else if (newValue > max) {
                    newValue =
                        input === self.hourElement ? newValue - max - int(!self.amPM) : min;
                    if (isMinuteElem)
                        incrementNumInput(undefined, 1, self.hourElement);
                }
                if (self.amPM &&
                    isHourElem &&
                    (step === 1
                        ? newValue + curValue === 23
                        : Math.abs(newValue - curValue) > step)) {
                    self.amPM.textContent =
                        self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
                }
                input.value = pad(newValue);
            }
        }
        init();
        return self;
    }
    function _flatpickr(nodeList, config) {
        var nodes = Array.prototype.slice
            .call(nodeList)
            .filter(function (x) { return x instanceof HTMLElement; });
        var instances = [];
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            try {
                if (node.getAttribute("data-fp-omit") !== null)
                    continue;
                if (node._flatpickr !== undefined) {
                    node._flatpickr.destroy();
                    node._flatpickr = undefined;
                }
                node._flatpickr = FlatpickrInstance(node, config || {});
                instances.push(node._flatpickr);
            }
            catch (e) {
                console.error(e);
            }
        }
        return instances.length === 1 ? instances[0] : instances;
    }
    if (typeof HTMLElement !== "undefined" &&
        typeof HTMLCollection !== "undefined" &&
        typeof NodeList !== "undefined") {
        HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
            return _flatpickr(this, config);
        };
        HTMLElement.prototype.flatpickr = function (config) {
            return _flatpickr([this], config);
        };
    }
    var flatpickr = function (selector, config) {
        if (typeof selector === "string") {
            return _flatpickr(window.document.querySelectorAll(selector), config);
        }
        else if (selector instanceof Node) {
            return _flatpickr([selector], config);
        }
        else {
            return _flatpickr(selector, config);
        }
    };
    flatpickr.defaultConfig = {};
    flatpickr.l10ns = {
        en: __assign({}, english),
        default: __assign({}, english),
    };
    flatpickr.localize = function (l10n) {
        flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
    };
    flatpickr.setDefaults = function (config) {
        flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
    };
    flatpickr.parseDate = createDateParser({});
    flatpickr.formatDate = createDateFormatter({});
    flatpickr.compareDates = compareDates;
    if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
        jQuery.fn.flatpickr = function (config) {
            return _flatpickr(this, config);
        };
    }
    Date.prototype.fp_incr = function (days) {
        return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
    };
    if (typeof window !== "undefined") {
        window.flatpickr = flatpickr;
    }

    var e$1,o={};function n(r,t,e){if(3===r.nodeType){var o="textContent"in r?r.textContent:r.nodeValue||"";if(!1!==n.options.trim){var a=0===t||t===e.length-1;if((!(o=o.match(/^[\s\n]+$/g)&&"all"!==n.options.trim?" ":o.replace(/(^[\s\n]+|[\s\n]+$)/g,"all"===n.options.trim||a?"":" "))||" "===o)&&e.length>1&&a)return null}return o}if(1!==r.nodeType)return null;var p=String(r.nodeName).toLowerCase();if("script"===p&&!n.options.allowScripts)return null;var l,s,u=n.h(p,function(r){var t=r&&r.length;if(!t)return null;for(var e={},o=0;o<t;o++){var a=r[o],i=a.name,p=a.value;"on"===i.substring(0,2)&&n.options.allowEvents&&(p=new Function(p)),e[i]=p;}return e}(r.attributes),(s=(l=r.childNodes)&&Array.prototype.map.call(l,n).filter(i))&&s.length?s:null);return n.visitor&&n.visitor(u),u}var a,i=function(r){return r},p={};function l(r){var t=(r.type||"").toLowerCase(),e=l.map;e&&e.hasOwnProperty(t)?(r.type=e[t],r.props=Object.keys(r.props||{}).reduce(function(t,e){var o;return t[(o=e,o.replace(/-(.)/g,function(r,t){return t.toUpperCase()}))]=r.props[e],t},{})):r.type=t.replace(/[^a-z0-9-]/i,"");}var Markup = (function(t){function i(){t.apply(this,arguments);}return t&&(i.__proto__=t),(i.prototype=Object.create(t&&t.prototype)).constructor=i,i.setReviver=function(r){a=r;},i.prototype.shouldComponentUpdate=function(r){var t=this.props;return r.wrap!==t.wrap||r.type!==t.type||r.markup!==t.markup},i.prototype.setComponents=function(r){if(this.map={},r)for(var t in r)if(r.hasOwnProperty(t)){var e=t.replace(/([A-Z]+)([A-Z][a-z0-9])|([a-z0-9]+)([A-Z])/g,"$1$3-$2$4").toLowerCase();this.map[e]=r[t];}},i.prototype.render=function(t){var i=t.wrap;void 0===i&&(i=!0);var s,u=t.type,c=t.markup,m=t.components,v=t.reviver,f=t.onError,d=t["allow-scripts"],h=t["allow-events"],y=t.trim,w=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&-1===t.indexOf(o)&&(e[o]=r[o]);return e}(t,["wrap","type","markup","components","reviver","onError","allow-scripts","allow-events","trim"]),C=v||this.reviver||this.constructor.prototype.reviver||a||y$1;this.setComponents(m);var g={allowScripts:d,allowEvents:h,trim:y};try{s=function(r,t,a,i,s){var u=function(r,t){var o,n,a,i,p="html"===t?"text/html":"application/xml";"html"===t?(i="body",a="<!DOCTYPE html>\n<html><body>"+r+"</body></html>"):(i="xml",a='<?xml version="1.0" encoding="UTF-8"?>\n<xml>'+r+"</xml>");try{o=(new DOMParser).parseFromString(a,p);}catch(r){n=r;}if(o||"html"!==t||((o=e$1||(e$1=function(){if(document.implementation&&document.implementation.createHTMLDocument)return document.implementation.createHTMLDocument("");var r=document.createElement("iframe");return r.style.cssText="position:absolute; left:0; top:-999em; width:1px; height:1px; overflow:hidden;",r.setAttribute("sandbox","allow-forms"),document.body.appendChild(r),r.contentWindow.document}())).open(),o.write(a),o.close()),o){var l=o.getElementsByTagName(i)[0],s=l.firstChild;return r&&!s&&(l.error="Document parse failed."),s&&"parsererror"===String(s.nodeName).toLowerCase()&&(s.removeChild(s.firstChild),s.removeChild(s.lastChild),l.error=s.textContent||s.nodeValue||n||"Unknown error",l.removeChild(s)),l}}(r,t);if(u&&u.error)throw new Error(u.error);var c=u&&u.body||u;l.map=i||p;var m=c&&function(r,t,e,a){return n.visitor=t,n.h=e,n.options=a||o,n(r)}(c,l,a,s);return l.map=null,m&&m.props&&m.props.children||null}(c,u,C,this.map,g);}catch(r){f?f({error:r}):"undefined"!=typeof console&&console.error&&console.error("preact-markup: "+r);}if(!1===i)return s||null;var x=w.hasOwnProperty("className")?"className":"class",b=w[x];return b?b.splice?b.splice(0,0,"markup"):"string"==typeof b?w[x]+=" markup":"object"==typeof b&&(b.markup=!0):w[x]="markup",C("div",w,s||null)},i}(k$2));

    const CLASS_PATTERN = /^class[ {]/;


    /**
     * @param {function} fn
     *
     * @return {boolean}
     */
    function isClass(fn) {
      return CLASS_PATTERN.test(fn.toString());
    }

    /**
     * @param {any} obj
     *
     * @return {boolean}
     */
    function isArray$2(obj) {
      return Array.isArray(obj);
    }

    /**
     * @param {any} obj
     * @param {string} prop
     *
     * @return {boolean}
     */
    function hasOwnProp(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    /**
     * @typedef {import('./index').InjectAnnotated } InjectAnnotated
     */

    /**
     * @template T
     *
     * @params {[...string[], T] | ...string[], T} args
     *
     * @return {T & InjectAnnotated}
     */
    function annotate(...args) {

      if (args.length === 1 && isArray$2(args[0])) {
        args = args[0];
      }

      args = [ ...args ];

      const fn = args.pop();

      fn.$inject = args;

      return fn;
    }


    // Current limitations:
    // - can't put into "function arg" comments
    // function /* (no parenthesis like this) */ (){}
    // function abc( /* xx (no parenthesis like this) */ a, b) {}
    //
    // Just put the comment before function or inside:
    // /* (((this is fine))) */ function(a, b) {}
    // function abc(a) { /* (((this is fine))) */}
    //
    // - can't reliably auto-annotate constructor; we'll match the
    // first constructor(...) pattern found which may be the one
    // of a nested class, too.

    const CONSTRUCTOR_ARGS = /constructor\s*[^(]*\(\s*([^)]*)\)/m;
    const FN_ARGS = /^(?:async\s+)?(?:function\s*[^(]*)?(?:\(\s*([^)]*)\)|(\w+))/m;
    const FN_ARG = /\/\*([^*]*)\*\//m;

    /**
     * @param {unknown} fn
     *
     * @return {string[]}
     */
    function parseAnnotations(fn) {

      if (typeof fn !== 'function') {
        throw new Error(`Cannot annotate "${fn}". Expected a function!`);
      }

      const match = fn.toString().match(isClass(fn) ? CONSTRUCTOR_ARGS : FN_ARGS);

      // may parse class without constructor
      if (!match) {
        return [];
      }

      const args = match[1] || match[2];

      return args && args.split(',').map(arg => {
        const argMatch = arg.match(FN_ARG);
        return (argMatch && argMatch[1] || arg).trim();
      }) || [];
    }

    /**
     * @typedef { import('./index').ModuleDeclaration } ModuleDeclaration
     * @typedef { import('./index').ModuleDefinition } ModuleDefinition
     * @typedef { import('./index').InjectorContext } InjectorContext
     */

    /**
     * Create a new injector with the given modules.
     *
     * @param {ModuleDefinition[]} modules
     * @param {InjectorContext} [parent]
     */
    function Injector(modules, parent) {
      parent = parent || {
        get: function(name, strict) {
          currentlyResolving.push(name);

          if (strict === false) {
            return null;
          } else {
            throw error(`No provider for "${ name }"!`);
          }
        }
      };

      const currentlyResolving = [];
      const providers = this._providers = Object.create(parent._providers || null);
      const instances = this._instances = Object.create(null);

      const self = instances.injector = this;

      const error = function(msg) {
        const stack = currentlyResolving.join(' -> ');
        currentlyResolving.length = 0;
        return new Error(stack ? `${ msg } (Resolving: ${ stack })` : msg);
      };

      /**
       * Return a named service.
       *
       * @param {string} name
       * @param {boolean} [strict=true] if false, resolve missing services to null
       *
       * @return {any}
       */
      function get(name, strict) {
        if (!providers[name] && name.indexOf('.') !== -1) {
          const parts = name.split('.');
          let pivot = get(parts.shift());

          while (parts.length) {
            pivot = pivot[parts.shift()];
          }

          return pivot;
        }

        if (hasOwnProp(instances, name)) {
          return instances[name];
        }

        if (hasOwnProp(providers, name)) {
          if (currentlyResolving.indexOf(name) !== -1) {
            currentlyResolving.push(name);
            throw error('Cannot resolve circular dependency!');
          }

          currentlyResolving.push(name);
          instances[name] = providers[name][0](providers[name][1]);
          currentlyResolving.pop();

          return instances[name];
        }

        return parent.get(name, strict);
      }

      function fnDef(fn, locals) {

        if (typeof locals === 'undefined') {
          locals = {};
        }

        if (typeof fn !== 'function') {
          if (isArray$2(fn)) {
            fn = annotate(fn.slice());
          } else {
            throw error(`Cannot invoke "${ fn }". Expected a function!`);
          }
        }

        const inject = fn.$inject || parseAnnotations(fn);
        const dependencies = inject.map(dep => {
          if (hasOwnProp(locals, dep)) {
            return locals[dep];
          } else {
            return get(dep);
          }
        });

        return {
          fn: fn,
          dependencies: dependencies
        };
      }

      function instantiate(Type) {
        const {
          fn,
          dependencies
        } = fnDef(Type);

        // instantiate var args constructor
        const Constructor = Function.prototype.bind.apply(fn, [ null ].concat(dependencies));

        return new Constructor();
      }

      function invoke(func, context, locals) {
        const {
          fn,
          dependencies
        } = fnDef(func, locals);

        return fn.apply(context, dependencies);
      }

      /**
       * @param {Injector} childInjector
       *
       * @return {Function}
       */
      function createPrivateInjectorFactory(childInjector) {
        return annotate(key => childInjector.get(key));
      }

      /**
       * @param {ModuleDefinition[]} modules
       * @param {string[]} [forceNewInstances]
       *
       * @return {Injector}
       */
      function createChild(modules, forceNewInstances) {
        if (forceNewInstances && forceNewInstances.length) {
          const fromParentModule = Object.create(null);
          const matchedScopes = Object.create(null);

          const privateInjectorsCache = [];
          const privateChildInjectors = [];
          const privateChildFactories = [];

          let provider;
          let cacheIdx;
          let privateChildInjector;
          let privateChildInjectorFactory;

          for (let name in providers) {
            provider = providers[name];

            if (forceNewInstances.indexOf(name) !== -1) {
              if (provider[2] === 'private') {
                cacheIdx = privateInjectorsCache.indexOf(provider[3]);
                if (cacheIdx === -1) {
                  privateChildInjector = provider[3].createChild([], forceNewInstances);
                  privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);
                  privateInjectorsCache.push(provider[3]);
                  privateChildInjectors.push(privateChildInjector);
                  privateChildFactories.push(privateChildInjectorFactory);
                  fromParentModule[name] = [ privateChildInjectorFactory, name, 'private', privateChildInjector ];
                } else {
                  fromParentModule[name] = [ privateChildFactories[cacheIdx], name, 'private', privateChildInjectors[cacheIdx] ];
                }
              } else {
                fromParentModule[name] = [ provider[2], provider[1] ];
              }
              matchedScopes[name] = true;
            }

            if ((provider[2] === 'factory' || provider[2] === 'type') && provider[1].$scope) {
              /* jshint -W083 */
              forceNewInstances.forEach(scope => {
                if (provider[1].$scope.indexOf(scope) !== -1) {
                  fromParentModule[name] = [ provider[2], provider[1] ];
                  matchedScopes[scope] = true;
                }
              });
            }
          }

          forceNewInstances.forEach(scope => {
            if (!matchedScopes[scope]) {
              throw new Error('No provider for "' + scope + '". Cannot use provider from the parent!');
            }
          });

          modules.unshift(fromParentModule);
        }

        return new Injector(modules, self);
      }

      const factoryMap = {
        factory: invoke,
        type: instantiate,
        value: function(value) {
          return value;
        }
      };

      /**
       * @param {ModuleDefinition} moduleDefinition
       * @param {Injector} injector
       */
      function createInitializer(moduleDefinition, injector) {

        const initializers = moduleDefinition.__init__ || [];

        return function() {
          initializers.forEach(initializer => {

            // eagerly resolve component (fn or string)
            if (typeof initializer === 'string') {
              injector.get(initializer);
            } else {
              injector.invoke(initializer);
            }
          });
        };
      }

      /**
       * @param {ModuleDefinition} moduleDefinition
       */
      function loadModule(moduleDefinition) {

        const moduleExports = moduleDefinition.__exports__;

        // private module
        if (moduleExports) {
          const nestedModules = moduleDefinition.__modules__;

          const clonedModule = Object.keys(moduleDefinition).reduce((clonedModule, key) => {

            if (key !== '__exports__' && key !== '__modules__' && key !== '__init__' && key !== '__depends__') {
              clonedModule[key] = moduleDefinition[key];
            }

            return clonedModule;
          }, Object.create(null));

          const childModules = (nestedModules || []).concat(clonedModule);

          const privateInjector = createChild(childModules);
          const getFromPrivateInjector = annotate(function(key) {
            return privateInjector.get(key);
          });

          moduleExports.forEach(function(key) {
            providers[key] = [ getFromPrivateInjector, key, 'private', privateInjector ];
          });

          // ensure child injector initializes
          const initializers = (moduleDefinition.__init__ || []).slice();

          initializers.unshift(function() {
            privateInjector.init();
          });

          moduleDefinition = Object.assign({}, moduleDefinition, {
            __init__: initializers
          });

          return createInitializer(moduleDefinition, privateInjector);
        }

        // normal module
        Object.keys(moduleDefinition).forEach(function(key) {

          if (key === '__init__' || key === '__depends__') {
            return;
          }

          if (moduleDefinition[key][2] === 'private') {
            providers[key] = moduleDefinition[key];
            return;
          }

          const type = moduleDefinition[key][0];
          const value = moduleDefinition[key][1];

          providers[key] = [ factoryMap[type], arrayUnwrap(type, value), type ];
        });

        return createInitializer(moduleDefinition, self);
      }

      /**
       * @param {ModuleDefinition[]} moduleDefinitions
       * @param {ModuleDefinition} moduleDefinition
       *
       * @return {ModuleDefinition[]}
       */
      function resolveDependencies(moduleDefinitions, moduleDefinition) {

        if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
          return moduleDefinitions;
        }

        moduleDefinitions = (moduleDefinition.__depends__ || []).reduce(resolveDependencies, moduleDefinitions);

        if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
          return moduleDefinitions;
        }

        return moduleDefinitions.concat(moduleDefinition);
      }

      /**
       * @param {ModuleDefinition[]} moduleDefinitions
       *
       * @return { () => void } initializerFn
       */
      function bootstrap(moduleDefinitions) {

        const initializers = moduleDefinitions
          .reduce(resolveDependencies, [])
          .map(loadModule);

        let initialized = false;

        return function() {

          if (initialized) {
            return;
          }

          initialized = true;

          initializers.forEach(initializer => initializer());
        };
      }

      // public API
      this.get = get;
      this.invoke = invoke;
      this.instantiate = instantiate;
      this.createChild = createChild;

      // setup
      this.init = bootstrap(modules);
    }


    // helpers ///////////////

    function arrayUnwrap(type, value) {
      if (type !== 'value' && isArray$2(value)) {
        value = annotate(value.slice());
      }

      return value;
    }

    class FeelExpressionLanguage {
      constructor(eventBus) {
        this._eventBus = eventBus;
      }

      /**
       * Determines if the given string is a FEEL expression.
       *
       * @param {string} value
       * @returns {boolean}
       *
       */
      isExpression(value) {
        return isString$3(value) && value.startsWith('=');
      }

      /**
       * Retrieve variable names from a given FEEL expression.
       *
       * @param {string} expression
       * @param {object} [options]
       * @param {string} [options.type]
       *
       * @returns {string[]}
       */
      getVariableNames(expression, options = {}) {
        const {
          type = 'expression'
        } = options;
        if (!this.isExpression(expression)) {
          return [];
        }
        if (type === 'unaryTest') {
          return this._getUnaryVariableNames(expression);
        } else if (type === 'expression') {
          return this._getExpressionVariableNames(expression);
        }
        throw new Error('Unknown expression type: ' + options.type);
      }

      /**
       * Evaluate an expression.
       *
       * @param {string} expression
       * @param {import('../../types').Data} [data]
       *
       * @returns {any}
       */
      evaluate(expression, data = {}) {
        if (!expression) {
          return null;
        }
        if (!isString$3(expression) || !expression.startsWith('=')) {
          return null;
        }
        try {
          const result = evaluate$2(expression.slice(1), data);
          return result;
        } catch (error) {
          this._eventBus.fire('error', {
            error
          });
          return null;
        }
      }
      _getExpressionVariableNames(expression) {
        const tree = parseExpressions$1(expression);
        const cursor = tree.cursor();
        const variables = new Set();
        do {
          const node = cursor.node;
          if (node.type.name === 'VariableName') {
            variables.add(expression.slice(node.from, node.to));
          }
        } while (cursor.next());
        return Array.from(variables);
      }
      _getUnaryVariableNames(unaryTest) {
        const tree = parseUnaryTests$1(unaryTest);
        const cursor = tree.cursor();
        const variables = new Set();
        do {
          const node = cursor.node;
          if (node.type.name === 'VariableName') {
            variables.add(unaryTest.slice(node.from, node.to));
          }
        } while (cursor.next());
        return Array.from(variables);
      }
    }
    FeelExpressionLanguage.$inject = ['eventBus'];

    class FeelersTemplating {
      constructor() {}
      isTemplate(value) {
        return isString$3(value) && (value.startsWith('=') || /{{/.test(value));
      }

      /**
       * Evaluate a template.
       *
       * @param {string} template
       * @param {Object<string, any>} context
       * @param {Object} options
       * @param {boolean} [options.debug = false]
       * @param {boolean} [options.strict = false]
       * @param {Function} [options.buildDebugString]
       *
       * @returns
       */
      evaluate(template, context = {}, options = {}) {
        const {
          debug = false,
          strict = false,
          buildDebugString = err => ' {{⚠}} '
        } = options;
        return evaluate(template, context, {
          debug,
          strict,
          buildDebugString
        });
      }
    }
    FeelersTemplating.$inject = [];

    /**
     * @typedef {object} Condition
     * @property {string} [hide]
     */

    class ConditionChecker {
      constructor(formFieldRegistry, eventBus) {
        this._formFieldRegistry = formFieldRegistry;
        this._eventBus = eventBus;
      }

      /**
       * For given data, remove properties based on condition.
       *
       * @param {Object<string, any>} properties
       * @param {Object<string, any>} data
       */
      applyConditions(properties, data = {}) {
        const conditions = this._getConditions();
        const newProperties = {
          ...properties
        };
        for (const {
          key,
          condition
        } of conditions) {
          const shouldRemove = this._checkHideCondition(condition, data);
          if (shouldRemove) {
            delete newProperties[key];
          }
        }
        return newProperties;
      }

      /**
       * Check if given condition is met. Returns null for invalid/missing conditions.
       *
       * @param {string} condition
       * @param {import('../../types').Data} [data]
       *
       * @returns {boolean|null}
       */
      check(condition, data = {}) {
        if (!condition) {
          return null;
        }
        if (!isString$3(condition) || !condition.startsWith('=')) {
          return null;
        }
        try {
          // cut off initial '='
          const result = unaryTest(condition.slice(1), data);
          return result;
        } catch (error) {
          this._eventBus.fire('error', {
            error
          });
          return null;
        }
      }

      /**
       * Check if hide condition is met.
       *
       * @param {Condition} condition
       * @param {Object<string, any>} data
       * @returns {boolean}
       */
      _checkHideCondition(condition, data) {
        if (!condition.hide) {
          return false;
        }
        const result = this.check(condition.hide, data);
        return result === true;
      }
      _getConditions() {
        const formFields = this._formFieldRegistry.getAll();
        return formFields.reduce((conditions, formField) => {
          const {
            key,
            conditional: condition
          } = formField;
          if (key && condition) {
            return [...conditions, {
              key,
              condition
            }];
          }
          return conditions;
        }, []);
      }
    }
    ConditionChecker.$inject = ['formFieldRegistry', 'eventBus'];

    var ExpressionLanguageModule = {
      __init__: ['expressionLanguage', 'templating', 'conditionChecker'],
      expressionLanguage: ['type', FeelExpressionLanguage],
      templating: ['type', FeelersTemplating],
      conditionChecker: ['type', ConditionChecker]
    };

    // bootstrap showdown to support github flavored markdown
    showdown.setFlavor('github');
    class MarkdownRenderer {
      constructor() {
        this._converter = new showdown.Converter();
      }

      /**
       * Render markdown to HTML.
       *
       * @param {string} markdown - The markdown to render
       *
       * @returns {string} HTML
       */
      render(markdown) {
        return this._converter.makeHtml(markdown);
      }
    }
    MarkdownRenderer.$inject = [];

    var MarkdownModule = {
      __init__: ['markdownRenderer'],
      markdownRenderer: ['type', MarkdownRenderer]
    };

    var FN_REF$1 = '__fn';
    var DEFAULT_PRIORITY$3 = 1000;
    var slice$2 = Array.prototype.slice;

    /**
     * A general purpose event bus.
     *
     * This component is used to communicate across a diagram instance.
     * Other parts of a diagram can use it to listen to and broadcast events.
     *
     *
     * ## Registering for Events
     *
     * The event bus provides the {@link EventBus#on} and {@link EventBus#once}
     * methods to register for events. {@link EventBus#off} can be used to
     * remove event registrations. Listeners receive an instance of {@link Event}
     * as the first argument. It allows them to hook into the event execution.
     *
     * ```javascript
     *
     * // listen for event
     * eventBus.on('foo', function(event) {
     *
     *   // access event type
     *   event.type; // 'foo'
     *
     *   // stop propagation to other listeners
     *   event.stopPropagation();
     *
     *   // prevent event default
     *   event.preventDefault();
     * });
     *
     * // listen for event with custom payload
     * eventBus.on('bar', function(event, payload) {
     *   console.log(payload);
     * });
     *
     * // listen for event returning value
     * eventBus.on('foobar', function(event) {
     *
     *   // stop event propagation + prevent default
     *   return false;
     *
     *   // stop event propagation + return custom result
     *   return {
     *     complex: 'listening result'
     *   };
     * });
     *
     *
     * // listen with custom priority (default=1000, higher is better)
     * eventBus.on('priorityfoo', 1500, function(event) {
     *   console.log('invoked first!');
     * });
     *
     *
     * // listen for event and pass the context (`this`)
     * eventBus.on('foobar', function(event) {
     *   this.foo();
     * }, this);
     * ```
     *
     *
     * ## Emitting Events
     *
     * Events can be emitted via the event bus using {@link EventBus#fire}.
     *
     * ```javascript
     *
     * // false indicates that the default action
     * // was prevented by listeners
     * if (eventBus.fire('foo') === false) {
     *   console.log('default has been prevented!');
     * };
     *
     *
     * // custom args + return value listener
     * eventBus.on('sum', function(event, a, b) {
     *   return a + b;
     * });
     *
     * // you can pass custom arguments + retrieve result values.
     * var sum = eventBus.fire('sum', 1, 2);
     * console.log(sum); // 3
     * ```
     */
    function EventBus$1() {
      this._listeners = {};

      // cleanup on destroy on lowest priority to allow
      // message passing until the bitter end
      this.on('diagram.destroy', 1, this._destroy, this);
    }

    /**
     * Register an event listener for events with the given name.
     *
     * The callback will be invoked with `event, ...additionalArguments`
     * that have been passed to {@link EventBus#fire}.
     *
     * Returning false from a listener will prevent the events default action
     * (if any is specified). To stop an event from being processed further in
     * other listeners execute {@link Event#stopPropagation}.
     *
     * Returning anything but `undefined` from a listener will stop the listener propagation.
     *
     * @param {string|Array<string>} events
     * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
     * @param {Function} callback
     * @param {Object} [that] Pass context (`this`) to the callback
     */
    EventBus$1.prototype.on = function (events, priority, callback, that) {
      events = isArray$5(events) ? events : [events];
      if (isFunction(priority)) {
        that = callback;
        callback = priority;
        priority = DEFAULT_PRIORITY$3;
      }
      if (!isNumber$3(priority)) {
        throw new Error('priority must be a number');
      }
      var actualCallback = callback;
      if (that) {
        actualCallback = bind$2(callback, that);

        // make sure we remember and are able to remove
        // bound callbacks via {@link #off} using the original
        // callback
        actualCallback[FN_REF$1] = callback[FN_REF$1] || callback;
      }
      var self = this;
      events.forEach(function (e) {
        self._addListener(e, {
          priority: priority,
          callback: actualCallback,
          next: null
        });
      });
    };

    /**
     * Register an event listener that is executed only once.
     *
     * @param {string} event the event name to register for
     * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
     * @param {Function} callback the callback to execute
     * @param {Object} [that] Pass context (`this`) to the callback
     */
    EventBus$1.prototype.once = function (event, priority, callback, that) {
      var self = this;
      if (isFunction(priority)) {
        that = callback;
        callback = priority;
        priority = DEFAULT_PRIORITY$3;
      }
      if (!isNumber$3(priority)) {
        throw new Error('priority must be a number');
      }
      function wrappedCallback() {
        wrappedCallback.__isTomb = true;
        var result = callback.apply(that, arguments);
        self.off(event, wrappedCallback);
        return result;
      }

      // make sure we remember and are able to remove
      // bound callbacks via {@link #off} using the original
      // callback
      wrappedCallback[FN_REF$1] = callback;
      this.on(event, priority, wrappedCallback);
    };

    /**
     * Removes event listeners by event and callback.
     *
     * If no callback is given, all listeners for a given event name are being removed.
     *
     * @param {string|Array<string>} events
     * @param {Function} [callback]
     */
    EventBus$1.prototype.off = function (events, callback) {
      events = isArray$5(events) ? events : [events];
      var self = this;
      events.forEach(function (event) {
        self._removeListener(event, callback);
      });
    };

    /**
     * Create an EventBus event.
     *
     * @param {Object} data
     *
     * @return {Object} event, recognized by the eventBus
     */
    EventBus$1.prototype.createEvent = function (data) {
      var event = new InternalEvent$1();
      event.init(data);
      return event;
    };

    /**
     * Fires a named event.
     *
     * @example
     *
     * // fire event by name
     * events.fire('foo');
     *
     * // fire event object with nested type
     * var event = { type: 'foo' };
     * events.fire(event);
     *
     * // fire event with explicit type
     * var event = { x: 10, y: 20 };
     * events.fire('element.moved', event);
     *
     * // pass additional arguments to the event
     * events.on('foo', function(event, bar) {
     *   alert(bar);
     * });
     *
     * events.fire({ type: 'foo' }, 'I am bar!');
     *
     * @param {string} [name] the optional event name
     * @param {Object} [event] the event object
     * @param {...Object} additional arguments to be passed to the callback functions
     *
     * @return {boolean} the events return value, if specified or false if the
     *                   default action was prevented by listeners
     */
    EventBus$1.prototype.fire = function (type, data) {
      var event, firstListener, returnValue, args;
      args = slice$2.call(arguments);
      if (typeof type === 'object') {
        data = type;
        type = data.type;
      }
      if (!type) {
        throw new Error('no event type specified');
      }
      firstListener = this._listeners[type];
      if (!firstListener) {
        return;
      }

      // we make sure we fire instances of our home made
      // events here. We wrap them only once, though
      if (data instanceof InternalEvent$1) {
        // we are fine, we alread have an event
        event = data;
      } else {
        event = this.createEvent(data);
      }

      // ensure we pass the event as the first parameter
      args[0] = event;

      // original event type (in case we delegate)
      var originalType = event.type;

      // update event type before delegation
      if (type !== originalType) {
        event.type = type;
      }
      try {
        returnValue = this._invokeListeners(event, args, firstListener);
      } finally {
        // reset event type after delegation
        if (type !== originalType) {
          event.type = originalType;
        }
      }

      // set the return value to false if the event default
      // got prevented and no other return value exists
      if (returnValue === undefined && event.defaultPrevented) {
        returnValue = false;
      }
      return returnValue;
    };
    EventBus$1.prototype.handleError = function (error) {
      return this.fire('error', {
        error: error
      }) === false;
    };
    EventBus$1.prototype._destroy = function () {
      this._listeners = {};
    };
    EventBus$1.prototype._invokeListeners = function (event, args, listener) {
      var returnValue;
      while (listener) {
        // handle stopped propagation
        if (event.cancelBubble) {
          break;
        }
        returnValue = this._invokeListener(event, args, listener);
        listener = listener.next;
      }
      return returnValue;
    };
    EventBus$1.prototype._invokeListener = function (event, args, listener) {
      var returnValue;
      if (listener.callback.__isTomb) {
        return returnValue;
      }
      try {
        // returning false prevents the default action
        returnValue = invokeFunction$1(listener.callback, args);

        // stop propagation on return value
        if (returnValue !== undefined) {
          event.returnValue = returnValue;
          event.stopPropagation();
        }

        // prevent default on return false
        if (returnValue === false) {
          event.preventDefault();
        }
      } catch (error) {
        if (!this.handleError(error)) {
          console.error('unhandled error in event listener', error);
          throw error;
        }
      }
      return returnValue;
    };

    /*
     * Add new listener with a certain priority to the list
     * of listeners (for the given event).
     *
     * The semantics of listener registration / listener execution are
     * first register, first serve: New listeners will always be inserted
     * after existing listeners with the same priority.
     *
     * Example: Inserting two listeners with priority 1000 and 1300
     *
     *    * before: [ 1500, 1500, 1000, 1000 ]
     *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]
     *
     * @param {string} event
     * @param {Object} listener { priority, callback }
     */
    EventBus$1.prototype._addListener = function (event, newListener) {
      var listener = this._getListeners(event),
        previousListener;

      // no prior listeners
      if (!listener) {
        this._setListeners(event, newListener);
        return;
      }

      // ensure we order listeners by priority from
      // 0 (high) to n > 0 (low)
      while (listener) {
        if (listener.priority < newListener.priority) {
          newListener.next = listener;
          if (previousListener) {
            previousListener.next = newListener;
          } else {
            this._setListeners(event, newListener);
          }
          return;
        }
        previousListener = listener;
        listener = listener.next;
      }

      // add new listener to back
      previousListener.next = newListener;
    };
    EventBus$1.prototype._getListeners = function (name) {
      return this._listeners[name];
    };
    EventBus$1.prototype._setListeners = function (name, listener) {
      this._listeners[name] = listener;
    };
    EventBus$1.prototype._removeListener = function (event, callback) {
      var listener = this._getListeners(event),
        nextListener,
        previousListener,
        listenerCallback;
      if (!callback) {
        // clear listeners
        this._setListeners(event, null);
        return;
      }
      while (listener) {
        nextListener = listener.next;
        listenerCallback = listener.callback;
        if (listenerCallback === callback || listenerCallback[FN_REF$1] === callback) {
          if (previousListener) {
            previousListener.next = nextListener;
          } else {
            // new first listener
            this._setListeners(event, nextListener);
          }
        }
        previousListener = listener;
        listener = nextListener;
      }
    };

    /**
     * A event that is emitted via the event bus.
     */
    function InternalEvent$1() {}
    InternalEvent$1.prototype.stopPropagation = function () {
      this.cancelBubble = true;
    };
    InternalEvent$1.prototype.preventDefault = function () {
      this.defaultPrevented = true;
    };
    InternalEvent$1.prototype.init = function (data) {
      assign$1(this, data || {});
    };

    /**
     * Invoke function. Be fast...
     *
     * @param {Function} fn
     * @param {Array<Object>} args
     *
     * @return {Any}
     */
    function invokeFunction$1(fn, args) {
      return fn.apply(null, args);
    }

    function countDecimals(number) {
      const num = Big(number);
      if (num.toString() === num.toFixed(0)) return 0;
      return num.toFixed().split('.')[1].length || 0;
    }
    function isValidNumber(value) {
      return (typeof value === 'number' || typeof value === 'string') && value !== '' && !isNaN(Number(value));
    }
    function willKeyProduceValidNumber(key, previousValue, caretIndex, selectionWidth, decimalDigits) {
      // Dot and comma are both treated as dot
      previousValue = previousValue.replace(',', '.');
      const isFirstDot = !previousValue.includes('.') && (key === '.' || key === ',');
      const isFirstMinus = !previousValue.includes('-') && key === '-' && caretIndex === 0;
      const keypressIsNumeric = /^[0-9]$/i.test(key);
      const dotIndex = previousValue === undefined ? -1 : previousValue.indexOf('.');

      // If the caret is positioned after a dot, and the current decimal digits count is equal or greater to the maximum, disallow the key press
      const overflowsDecimalSpace = typeof decimalDigits === 'number' && selectionWidth === 0 && dotIndex !== -1 && previousValue.includes('.') && previousValue.split('.')[1].length >= decimalDigits && caretIndex > dotIndex;
      const keypressIsAllowedChar = keypressIsNumeric || decimalDigits !== 0 && isFirstDot || isFirstMinus;
      return keypressIsAllowedChar && !overflowsDecimalSpace;
    }
    function isNullEquivalentValue(value) {
      return value === undefined || value === null || value === '';
    }

    const EMAIL_PATTERN = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    const PHONE_PATTERN = /(\+|00)(297|93|244|1264|358|355|376|971|54|374|1684|1268|61|43|994|257|32|229|226|880|359|973|1242|387|590|375|501|1441|591|55|1246|673|975|267|236|1|61|41|56|86|225|237|243|242|682|57|269|238|506|53|5999|61|1345|357|420|49|253|1767|45|1809|1829|1849|213|593|20|291|212|34|372|251|358|679|500|33|298|691|241|44|995|44|233|350|224|590|220|245|240|30|1473|299|502|594|1671|592|852|504|385|509|36|62|44|91|246|353|98|964|354|972|39|1876|44|962|81|76|77|254|996|855|686|1869|82|383|965|856|961|231|218|1758|423|94|266|370|352|371|853|590|212|377|373|261|960|52|692|389|223|356|95|382|976|1670|258|222|1664|596|230|265|60|262|264|687|227|672|234|505|683|31|47|977|674|64|968|92|507|64|51|63|680|675|48|1787|1939|850|351|595|970|689|974|262|40|7|250|966|249|221|65|500|4779|677|232|503|378|252|508|381|211|239|597|421|386|46|268|1721|248|963|1649|235|228|66|992|690|993|670|676|1868|216|90|688|886|255|256|380|598|1|998|3906698|379|1784|58|1284|1340|84|678|681|685|967|27|260|263)(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{4,20}$/;
    class Validator {
      validateField(field, value) {
        const {
          type,
          validate
        } = field;
        let errors = [];
        if (type === 'number') {
          const {
            decimalDigits,
            increment
          } = field;
          if (value === 'NaN') {
            errors = [...errors, 'Value is not a number.'];
          } else if (value) {
            if (decimalDigits >= 0 && countDecimals(value) > decimalDigits) {
              errors = [...errors, 'Value is expected to ' + (decimalDigits === 0 ? 'be an integer' : `have at most ${decimalDigits} decimal digit${decimalDigits > 1 ? 's' : ''}`) + '.'];
            }
            if (increment) {
              const bigValue = Big(value);
              const bigIncrement = Big(increment);
              const offset = bigValue.mod(bigIncrement);
              if (offset.cmp(0) !== 0) {
                const previousValue = bigValue.minus(offset);
                const nextValue = previousValue.plus(bigIncrement);
                errors = [...errors, `Please select a valid value, the two nearest valid values are ${previousValue} and ${nextValue}.`];
              }
            }
          }
        }
        if (!validate) {
          return errors;
        }
        if (validate.pattern && value && !new RegExp(validate.pattern).test(value)) {
          errors = [...errors, `Field must match pattern ${validate.pattern}.`];
        }
        if (validate.required) {
          const isUncheckedCheckbox = type === 'checkbox' && value === false;
          const isUnsetValue = isNil(value) || value === '';
          const isEmptyMultiselect = Array.isArray(value) && value.length === 0;
          if (isUncheckedCheckbox || isUnsetValue || isEmptyMultiselect) {
            errors = [...errors, 'Field is required.'];
          }
        }
        if ('min' in validate && (value || value === 0) && value < validate.min) {
          errors = [...errors, `Field must have minimum value of ${validate.min}.`];
        }
        if ('max' in validate && (value || value === 0) && value > validate.max) {
          errors = [...errors, `Field must have maximum value of ${validate.max}.`];
        }
        if ('minLength' in validate && value && value.trim().length < validate.minLength) {
          errors = [...errors, `Field must have minimum length of ${validate.minLength}.`];
        }
        if ('maxLength' in validate && value && value.trim().length > validate.maxLength) {
          errors = [...errors, `Field must have maximum length of ${validate.maxLength}.`];
        }
        if ('validationType' in validate && value && validate.validationType === 'phone' && !PHONE_PATTERN.test(value)) {
          errors = [...errors, 'Field must be a valid  international phone number. (e.g. +4930664040900)'];
        }
        if ('validationType' in validate && value && validate.validationType === 'email' && !EMAIL_PATTERN.test(value)) {
          errors = [...errors, 'Field must be a valid email.'];
        }
        return errors;
      }
    }
    Validator.$inject = [];

    class FormFieldRegistry {
      constructor(eventBus) {
        this._eventBus = eventBus;
        this._formFields = {};
        eventBus.on('form.clear', () => this.clear());
        this._ids = new Ids([32, 36, 1]);
        this._keys = new Ids([32, 36, 1]);
      }
      add(formField) {
        const {
          id
        } = formField;
        if (this._formFields[id]) {
          throw new Error(`form field with ID ${id} already exists`);
        }
        this._eventBus.fire('formField.add', {
          formField
        });
        this._formFields[id] = formField;
      }
      remove(formField) {
        const {
          id
        } = formField;
        if (!this._formFields[id]) {
          return;
        }
        this._eventBus.fire('formField.remove', {
          formField
        });
        delete this._formFields[id];
      }
      get(id) {
        return this._formFields[id];
      }
      getAll() {
        return Object.values(this._formFields);
      }
      forEach(callback) {
        this.getAll().forEach(formField => callback(formField));
      }
      clear() {
        this._formFields = {};
        this._ids.clear();
        this._keys.clear();
      }
    }
    FormFieldRegistry.$inject = ['eventBus'];

    /**
     * @typedef { { id: String, components: Array<String> } } FormRow
     * @typedef { { formFieldId: String, rows: Array<FormRow> } } FormRows
     */

    /**
     * Maintains the Form layout in a given structure, for example
     *
     *  [
     *    {
     *      formFieldId: 'FormField_1',
     *      rows: [
     *        { id: 'Row_1', components: [ 'Text_1', 'Textdield_1', ... ]  }
     *      ]
     *    }
     *  ]
     *
     */
    class FormLayouter {
      constructor(eventBus) {
        /** @type Array<FormRows>  */
        this._rows = [];
        this._ids = new Ids([32, 36, 1]);
        this._eventBus = eventBus;
      }

      /**
       * @param {FormRow} row
       */
      addRow(formFieldId, row) {
        let rowsPerComponent = this._rows.find(r => r.formFieldId === formFieldId);
        if (!rowsPerComponent) {
          rowsPerComponent = {
            formFieldId,
            rows: []
          };
          this._rows.push(rowsPerComponent);
        }
        rowsPerComponent.rows.push(row);
      }

      /**
       * @param {String} id
       * @returns {FormRow}
       */
      getRow(id) {
        const rows = allRows(this._rows);
        return rows.find(r => r.id === id);
      }

      /**
       * @param {any} formField
       * @returns {FormRow}
       */
      getRowForField(formField) {
        return allRows(this._rows).find(r => {
          const {
            components
          } = r;
          return components.includes(formField.id);
        });
      }

      /**
       * @param {String} formFieldId
       * @returns { Array<FormRow> }
       */
      getRows(formFieldId) {
        const rowsForField = this._rows.find(r => formFieldId === r.formFieldId);
        if (!rowsForField) {
          return [];
        }
        return rowsForField.rows;
      }

      /**
       * @returns {string}
       */
      nextRowId() {
        return this._ids.nextPrefixed('Row_');
      }

      /**
       * @param {any} formField
       */
      calculateLayout(formField) {
        const {
          type,
          components
        } = formField;
        if (type !== 'default' || !components) {
          return;
        }

        // (1) calculate rows order (by component order)
        const rowsInOrder = groupByRow(components, this._ids);
        Object.entries(rowsInOrder).forEach(([id, components]) => {
          // (2) add fields to rows
          this.addRow(formField.id, {
            id: id,
            components: components.map(c => c.id)
          });
        });

        // (3) traverse through nested components
        components.forEach(field => this.calculateLayout(field));

        // (4) fire event to notify interested parties
        this._eventBus.fire('form.layoutCalculated', {
          rows: this._rows
        });
      }
      clear() {
        this._rows = [];
        this._ids.clear();

        // fire event to notify interested parties
        this._eventBus.fire('form.layoutCleared');
      }
    }
    FormLayouter.$inject = ['eventBus'];

    // helpers //////

    function groupByRow(components, ids) {
      return groupBy(components, c => {
        // mitigate missing row by creating new (handle legacy)
        const {
          layout
        } = c;
        if (!layout || !layout.row) {
          return ids.nextPrefixed('Row_');
        }
        return layout.row;
      });
    }

    /**
     * @param {Array<FormRows>} formRows
     * @returns {Array<FormRow>}
     */
    function allRows(formRows) {
      return flatten$3(formRows.map(c => c.rows));
    }

    // config  ///////////////////

    const MINUTES_IN_DAY = 60 * 24;
    const DATETIME_SUBTYPES = {
      DATE: 'date',
      TIME: 'time',
      DATETIME: 'datetime'
    };
    const TIME_SERIALISING_FORMATS = {
      UTC_OFFSET: 'utc_offset',
      UTC_NORMALIZED: 'utc_normalized',
      NO_TIMEZONE: 'no_timezone'
    };
    const DATETIME_SUBTYPE_PATH = ['subtype'];
    const DATE_LABEL_PATH = ['dateLabel'];

    function createInjector$1(bootstrapModules) {
      const injector = new Injector(bootstrapModules);
      injector.init();
      return injector;
    }

    /**
     * @param {string?} prefix
     *
     * @returns Element
     */
    function createFormContainer(prefix = 'fjs') {
      const container = document.createElement('div');
      container.classList.add(`${prefix}-container`);
      return container;
    }
    function findErrors(errors, path) {
      return errors[pathStringify(path)];
    }
    function pathStringify(path) {
      if (!path) {
        return '';
      }
      return path.join('.');
    }
    const indices = {};
    function generateIndexForType(type) {
      if (type in indices) {
        indices[type]++;
      } else {
        indices[type] = 1;
      }
      return indices[type];
    }
    function generateIdForType(type) {
      return `${type}${generateIndexForType(type)}`;
    }

    /**
     * @template T
     * @param {T} data
     * @param {(this: any, key: string, value: any) => any} [replacer]
     * @return {T}
     */
    function clone$2(data, replacer) {
      return JSON.parse(JSON.stringify(data, replacer));
    }

    class Importer {
      /**
       * @constructor
       * @param { import('../core').FormFieldRegistry } formFieldRegistry
       * @param { import('../render/FormFields').default } formFields
       * @param { import('../core').FormLayouter } formLayouter
       */
      constructor(formFieldRegistry, formFields, formLayouter) {
        this._formFieldRegistry = formFieldRegistry;
        this._formFields = formFields;
        this._formLayouter = formLayouter;
      }

      /**
       * Import schema adding `id`, `_parent` and `_path`
       * information to each field and adding it to the
       * form field registry.
       *
       * @param {any} schema
       * @param {any} [data]
       *
       * @return { { warnings: Array<any>, schema: any, data: any } }
       */
      importSchema(schema, data = {}) {
        // TODO: Add warnings - https://github.com/bpmn-io/form-js/issues/289
        const warnings = [];
        try {
          this._formLayouter.clear();
          const importedSchema = this.importFormField(clone$2(schema)),
            initializedData = this.initializeFieldValues(clone$2(data));
          this._formLayouter.calculateLayout(clone$2(importedSchema));
          return {
            warnings,
            schema: importedSchema,
            data: initializedData
          };
        } catch (err) {
          err.warnings = warnings;
          throw err;
        }
      }

      /**
       * @param {any} formField
       * @param {string} [parentId]
       *
       * @return {any} importedField
       */
      importFormField(formField, parentId) {
        const {
          components,
          key,
          type,
          id = generateIdForType(type)
        } = formField;
        if (parentId) {
          // set form field parent
          formField._parent = parentId;
        }
        if (!this._formFields.get(type)) {
          throw new Error(`form field of type <${type}> not supported`);
        }
        if (key) {
          // validate <key> uniqueness
          if (this._formFieldRegistry._keys.assigned(key)) {
            throw new Error(`form field with key <${key}> already exists`);
          }
          this._formFieldRegistry._keys.claim(key, formField);

          // TODO: buttons should not have key
          if (type !== 'button') {
            // set form field path
            formField._path = [key];
          }
        }
        if (id) {
          // validate <id> uniqueness
          if (this._formFieldRegistry._ids.assigned(id)) {
            throw new Error(`form field with id <${id}> already exists`);
          }
          this._formFieldRegistry._ids.claim(id, formField);
        }

        // set form field ID
        formField.id = id;
        this._formFieldRegistry.add(formField);
        if (components) {
          this.importFormFields(components, id);
        }
        return formField;
      }
      importFormFields(components, parentId) {
        components.forEach(component => {
          this.importFormField(component, parentId);
        });
      }

      /**
       * @param {Object} data
       *
       * @return {Object} initializedData
       */
      initializeFieldValues(data) {
        return this._formFieldRegistry.getAll().reduce((initializedData, formField) => {
          const {
            defaultValue,
            _path,
            type
          } = formField;

          // try to get value from data
          // if unavailable - try to get default value from form field
          // if unavailable - get empty value from form field

          if (_path) {
            const fieldImplementation = this._formFields.get(type);
            let valueData = get$1(data, _path);
            if (!isUndefined$3(valueData) && fieldImplementation.sanitizeValue) {
              valueData = fieldImplementation.sanitizeValue({
                formField,
                data,
                value: valueData
              });
            }
            const initializedFieldValue = !isUndefined$3(valueData) ? valueData : !isUndefined$3(defaultValue) ? defaultValue : fieldImplementation.emptyValue;
            initializedData = {
              ...initializedData,
              [_path[0]]: initializedFieldValue
            };
          }
          return initializedData;
        }, data);
      }
    }
    Importer.$inject = ['formFieldRegistry', 'formFields', 'formLayouter'];

    var importModule = {
      importer: ['type', Importer]
    };

    function formFieldClasses(type, {
      errors = [],
      disabled = false
    } = {}) {
      if (!type) {
        throw new Error('type required');
      }
      return classNames('fjs-form-field', `fjs-form-field-${type}`, {
        'fjs-has-errors': errors.length > 0,
        'fjs-disabled': disabled
      });
    }
    function gridColumnClasses(formField) {
      const {
        layout = {}
      } = formField;
      const {
        columns
      } = layout;
      return classNames('fjs-layout-column', `cds--col${columns ? '-lg-' + columns : ''}`,
      // always fall back to top-down on smallest screens
      'cds--col-sm-16', 'cds--col-md-16');
    }
    function prefixId(id, formId) {
      if (formId) {
        return `fjs-form-${formId}-${id}`;
      }
      return `fjs-form-${id}`;
    }

    const type$b = 'button';
    function Button(props) {
      const {
        disabled,
        field
      } = props;
      const {
        action = 'submit'
      } = field;
      return o$2("div", {
        class: formFieldClasses(type$b),
        children: o$2("button", {
          class: "fjs-button",
          type: action,
          disabled: disabled,
          children: field.label
        })
      });
    }
    Button.create = (options = {}) => ({
      action: 'submit',
      ...options
    });
    Button.type = type$b;
    Button.label = 'Button';
    Button.keyed = true;
    Button.group = 'action';

    const FormRenderContext = F$2({
      Empty: props => {
        return null;
      },
      Children: props => {
        return o$2("div", {
          class: props.class,
          children: props.children
        });
      },
      Element: props => {
        return o$2("div", {
          class: props.class,
          children: props.children
        });
      },
      Row: props => {
        return o$2("div", {
          class: props.class,
          children: props.children
        });
      },
      Column: props => {
        if (props.field.type === 'default') {
          return props.children;
        }
        return o$2("div", {
          class: props.class,
          children: props.children
        });
      }
    });
    var FormRenderContext$1 = FormRenderContext;

    /**
     * @param {string} type
     * @param {boolean} [strict]
     *
     * @returns {any}
     */
    function getService(type, strict) {}
    const FormContext = F$2({
      getService,
      formId: null
    });
    var FormContext$1 = FormContext;

    function Description(props) {
      const {
        description
      } = props;
      if (!description) {
        return null;
      }
      return o$2("div", {
        class: "fjs-form-field-description",
        children: description
      });
    }

    function Errors(props) {
      const {
        errors
      } = props;
      if (!errors.length) {
        return null;
      }
      return o$2("div", {
        class: "fjs-form-field-error",
        children: o$2("ul", {
          children: errors.map(error => {
            return o$2("li", {
              children: error
            });
          })
        })
      });
    }

    function Label(props) {
      const {
        id,
        label,
        collapseOnEmpty = true,
        required = false
      } = props;
      return o$2("label", {
        for: id,
        class: classNames('fjs-form-field-label', {
          'fjs-incollapsible-label': !collapseOnEmpty
        }, props['class']),
        children: [props.children, label || '', required && o$2("span", {
          class: "fjs-asterix",
          children: "*"
        })]
      });
    }

    const type$a = 'checkbox';
    function Checkbox(props) {
      const {
        disabled,
        errors = [],
        field,
        value = false
      } = props;
      const {
        description,
        id,
        label,
        validate = {}
      } = field;
      const {
        required
      } = validate;
      const onChange = ({
        target
      }) => {
        props.onChange({
          field,
          value: target.checked
        });
      };
      const {
        formId
      } = q$1(FormContext$1);
      return o$2("div", {
        class: classNames(formFieldClasses(type$a, {
          errors,
          disabled
        }), {
          'fjs-checked': value
        }),
        children: [o$2(Label, {
          id: prefixId(id, formId),
          label: label,
          required: required,
          children: o$2("input", {
            checked: value,
            class: "fjs-input",
            disabled: disabled,
            id: prefixId(id, formId),
            type: "checkbox",
            onChange: onChange
          })
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Checkbox.create = (options = {}) => ({
      ...options
    });
    Checkbox.type = type$a;
    Checkbox.label = 'Checkbox';
    Checkbox.keyed = true;
    Checkbox.emptyValue = false;
    Checkbox.sanitizeValue = ({
      value
    }) => value === true;
    Checkbox.group = 'selection';

    // parses the options data from the provided form field and form data
    function getValuesData(formField, formData) {
      const {
        valuesKey,
        values
      } = formField;
      return valuesKey ? get$1(formData, [valuesKey]) : values;
    }

    // transforms the provided options into a normalized format, trimming invalid options
    function normalizeValuesData(valuesData) {
      return valuesData.filter(_isValueSomething).map(v => _normalizeValueData(v)).filter(v => v);
    }
    function _normalizeValueData(valueData) {
      if (_isAllowedValue(valueData)) {
        // if a primitive is provided, use it as label and value
        return {
          value: valueData,
          label: `${valueData}`
        };
      }
      if (typeof valueData === 'object') {
        if (!valueData.label && _isAllowedValue(valueData.value)) {
          // if no label is provided, use the value as label
          return {
            value: valueData.value,
            label: `${valueData.value}`
          };
        }
        if (_isValueSomething(valueData.value) && _isAllowedValue(valueData.label)) {
          // if both value and label are provided, use them as is, in this scenario, the value may also be an object
          return valueData;
        }
      }
      return null;
    }
    function _isAllowedValue(value) {
      return _isReadableType(value) && _isValueSomething(value);
    }
    function _isReadableType(value) {
      return ['number', 'string', 'boolean'].includes(typeof value);
    }
    function _isValueSomething(value) {
      return value || value === 0 || value === false;
    }

    function useService(type, strict) {
      const {
        getService
      } = q$1(FormContext$1);
      return getService(type, strict);
    }

    /**
     * @enum { String }
     */
    const LOAD_STATES = {
      LOADING: 'loading',
      LOADED: 'loaded',
      ERROR: 'error'
    };

    /**
     * @typedef {Object} ValuesGetter
     * @property {Object[]} values - The values data
     * @property {(LOAD_STATES)} state - The values data's loading state, to use for conditional rendering
     */

    /**
     * A hook to load values for single and multiselect components.
     *
     * @param {Object} field - The form field to handle values for
     * @return {ValuesGetter} valuesGetter - A values getter object providing loading state and values
     */
    function useValuesAsync (field) {
      const {
        valuesKey,
        values: staticValues
      } = field;
      const [valuesGetter, setValuesGetter] = h({
        values: [],
        error: undefined,
        state: LOAD_STATES.LOADING
      });
      const initialData = useService('form')._getState().initialData;
      p$1(() => {
        let values = [];

        // dynamic values
        if (valuesKey !== undefined) {
          const keyedValues = (initialData || {})[valuesKey];
          if (keyedValues && Array.isArray(keyedValues)) {
            values = keyedValues;
          }
        }

        // static values
        else if (staticValues !== undefined) {
          values = Array.isArray(staticValues) ? staticValues : [];
        } else {
          setValuesGetter(buildErrorState('No values source defined in the form definition'));
          return;
        }

        // normalize data to support primitives and partially defined objects
        values = normalizeValuesData(values);
        setValuesGetter(buildLoadedState(values));
      }, [valuesKey, staticValues, initialData]);
      return valuesGetter;
    }
    const buildErrorState = error => ({
      values: [],
      error,
      state: LOAD_STATES.ERROR
    });
    const buildLoadedState = values => ({
      values,
      error: undefined,
      state: LOAD_STATES.LOADED
    });

    const ENTER_KEYDOWN_EVENT = new KeyboardEvent('keydown', {
      code: 'Enter',
      key: 'Enter',
      charCode: 13,
      keyCode: 13,
      view: window,
      bubbles: true
    });
    function focusRelevantFlatpickerDay(flatpickrInstance) {
      if (!flatpickrInstance) return;
      !flatpickrInstance.isOpen && flatpickrInstance.open();
      const container = flatpickrInstance.calendarContainer;
      const dayToFocus = container.querySelector('.flatpickr-day.selected') || container.querySelector('.flatpickr-day.today') || container.querySelector('.flatpickr-day');
      dayToFocus && dayToFocus.focus();
    }
    function formatTime(use24h, minutes) {
      if (minutes === null) return null;
      const wrappedMinutes = minutes % (24 * 60);
      const minute = minutes % 60;
      let hour = Math.floor(wrappedMinutes / 60);
      if (use24h) {
        return _getZeroPaddedString(hour) + ':' + _getZeroPaddedString(minute);
      }
      hour = hour % 12 || 12;
      const isPM = wrappedMinutes >= 12 * 60;
      return _getZeroPaddedString(hour) + ':' + _getZeroPaddedString(minute) + ' ' + (isPM ? 'PM' : 'AM');
    }
    function parseInputTime(stringTime) {
      let workingString = stringTime.toLowerCase();
      const is12h = workingString.includes('am') || workingString.includes('pm');
      if (is12h) {
        const isPM = workingString.includes('pm');
        const digits = workingString.match(/\d+/g);
        const displayHour = parseInt(digits && digits[0]);
        const minute = parseInt(digits && digits[1]) || 0;
        const isValidDisplayHour = isNumber$3(displayHour) && displayHour >= 1 && displayHour <= 12;
        const isValidMinute = minute >= 0 && minute <= 59;
        if (!isValidDisplayHour || !isValidMinute) return null;
        const hour = displayHour % 12 + (isPM ? 12 : 0);
        return hour * 60 + minute;
      } else {
        const digits = workingString.match(/\d+/g);
        const hour = parseInt(digits && digits[0]);
        const minute = parseInt(digits && digits[1]);
        const isValidHour = isNumber$3(hour) && hour >= 0 && hour <= 23;
        const isValidMinute = isNumber$3(minute) && minute >= 0 && minute <= 59;
        if (!isValidHour || !isValidMinute) return null;
        return hour * 60 + minute;
      }
    }
    function serializeTime(minutes, offset, timeSerializingFormat) {
      if (timeSerializingFormat === TIME_SERIALISING_FORMATS.UTC_NORMALIZED) {
        const normalizedMinutes = (minutes + offset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
        return _getZeroPaddedString(Math.floor(normalizedMinutes / 60)) + ':' + _getZeroPaddedString(normalizedMinutes % 60) + 'Z';
      }
      const baseTime = _getZeroPaddedString(Math.floor(minutes / 60)) + ':' + _getZeroPaddedString(minutes % 60);
      const addUTCOffset = timeSerializingFormat === TIME_SERIALISING_FORMATS.UTC_OFFSET;
      return baseTime + (addUTCOffset ? formatTimezoneOffset(offset) : '');
    }
    function parseIsoTime(isoTimeString) {
      if (!isoTimeString) return null;
      const parseBasicMinutes = timeString => {
        const timeSegments = timeString.split(':');
        const hour = parseInt(timeSegments[0]);
        const minute = timeSegments.length > 1 ? parseInt(timeSegments[1]) : 0;
        if (isNaN(hour) || hour < 0 || hour > 24 || isNaN(minute) || minute < 0 || minute > 60) return null;
        return hour * 60 + minute;
      };
      const localOffset = new Date().getTimezoneOffset();

      // Parse normalized time
      if (isoTimeString.includes('Z')) {
        isoTimeString = isoTimeString.replace('Z', '');
        const minutes = parseBasicMinutes(isoTimeString);
        if (minutes === null) return null;
        return (minutes - localOffset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
      }

      // Parse offset positive time
      else if (isoTimeString.includes('+')) {
        const [timeString, offsetString] = isoTimeString.split('+');
        const minutes = parseBasicMinutes(timeString);
        let inboundOffset = parseBasicMinutes(offsetString);
        if (minutes === null || inboundOffset === null) return null;

        // The offset is flipped for consistency with javascript
        inboundOffset = -inboundOffset;
        return (minutes + inboundOffset - localOffset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
      }

      // Parse offset negative time
      else if (isoTimeString.includes('-')) {
        const [timeString, offsetString] = isoTimeString.split('-');
        const minutes = parseBasicMinutes(timeString);
        let inboundOffset = parseBasicMinutes(offsetString);
        if (minutes === null || inboundOffset === null) return null;
        return (minutes + inboundOffset - localOffset + MINUTES_IN_DAY) % MINUTES_IN_DAY;
      }

      // Default to local parsing
      else {
        return parseBasicMinutes(isoTimeString);
      }
    }
    function serializeDate(date) {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();
      if (month.length < 2) month = '0' + month;
      if (day.length < 2) day = '0' + day;
      return [year, month, day].join('-');
    }

    // this method is used to make the `new Date(value)` parsing behavior stricter
    function isDateTimeInputInformationSufficient(value) {
      if (!value || typeof value !== 'string') return false;
      const segments = value.split('T');
      if (segments.length != 2) return false;
      const dateNumbers = segments[0].split('-');
      if (dateNumbers.length != 3) return false;
      return true;
    }

    // this method checks if the date isn't a datetime, or a partial date
    function isDateInputInformationMatching(value) {
      if (!value || typeof value !== 'string') return false;
      if (value.includes('T')) return false;
      const dateNumbers = value.split('-');
      if (dateNumbers.length != 3) return false;
      return true;
    }
    function serializeDateTime(date, time, timeSerializingFormat) {
      const workingDate = new Date();
      workingDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
      workingDate.setHours(Math.floor(time / 60), time % 60, 0, 0);
      if (timeSerializingFormat === TIME_SERIALISING_FORMATS.UTC_NORMALIZED) {
        const timezoneOffsetMinutes = workingDate.getTimezoneOffset();
        const dayOffset = time + timezoneOffsetMinutes < 0 ? -1 : time + timezoneOffsetMinutes > MINUTES_IN_DAY ? 1 : 0;

        // Apply the date rollover pre-emptively
        workingDate.setHours(workingDate.getHours() + dayOffset * 24);
      }
      return serializeDate(workingDate) + 'T' + serializeTime(time, workingDate.getTimezoneOffset(), timeSerializingFormat);
    }
    function formatTimezoneOffset(minutes) {
      return _getSignedPaddedHours(minutes) + ':' + _getZeroPaddedString(Math.abs(minutes % 60));
    }
    function isInvalidDateString(value) {
      return isNaN(new Date(Date.parse(value)).getTime());
    }
    function _getSignedPaddedHours(minutes) {
      if (minutes > 0) {
        return '-' + _getZeroPaddedString(Math.floor(minutes / 60));
      } else {
        return '+' + _getZeroPaddedString(Math.floor((0 - minutes) / 60));
      }
    }
    function _getZeroPaddedString(time) {
      return time.toString().padStart(2, '0');
    }

    function sanitizeDateTimePickerValue(options) {
      const {
        formField,
        value
      } = options;
      const {
        subtype
      } = formField;
      if (typeof value !== 'string') return null;
      if (subtype === DATETIME_SUBTYPES.DATE && (isInvalidDateString(value) || !isDateInputInformationMatching(value))) return null;
      if (subtype === DATETIME_SUBTYPES.TIME && parseIsoTime(value) === null) return null;
      if (subtype === DATETIME_SUBTYPES.DATETIME && (isInvalidDateString(value) || !isDateTimeInputInformationSufficient(value))) return null;
      return value;
    }
    function sanitizeSingleSelectValue(options) {
      const {
        formField,
        data,
        value
      } = options;
      try {
        const validValues = normalizeValuesData(getValuesData(formField, data)).map(v => v.value);
        return validValues.includes(value) ? value : null;
      } catch (error) {
        // use default value in case of formatting error
        // TODO(@Skaiir): log a warning when this happens - https://github.com/bpmn-io/form-js/issues/289
        return null;
      }
    }
    function sanitizeMultiSelectValue(options) {
      const {
        formField,
        data,
        value
      } = options;
      try {
        const validValues = normalizeValuesData(getValuesData(formField, data)).map(v => v.value);
        return value.filter(v => validValues.includes(v));
      } catch (error) {
        // use default value in case of formatting error
        // TODO(@Skaiir): log a warning when this happens - https://github.com/bpmn-io/form-js/issues/289
        return [];
      }
    }

    const type$9 = 'checklist';
    function Checklist(props) {
      const {
        disabled,
        errors = [],
        field,
        value = []
      } = props;
      const {
        description,
        id,
        label,
        validate = {}
      } = field;
      const {
        required
      } = validate;
      const toggleCheckbox = v => {
        let newValue = [...value];
        if (!newValue.includes(v)) {
          newValue.push(v);
        } else {
          newValue = newValue.filter(x => x != v);
        }
        props.onChange({
          field,
          value: newValue
        });
      };
      const {
        state: loadState,
        values: options
      } = useValuesAsync(field);
      const {
        formId
      } = q$1(FormContext$1);
      return o$2("div", {
        class: classNames(formFieldClasses(type$9, {
          errors,
          disabled
        })),
        children: [o$2(Label, {
          label: label,
          required: required
        }), loadState == LOAD_STATES.LOADED && options.map((v, index) => {
          return o$2(Label, {
            id: prefixId(`${id}-${index}`, formId),
            label: v.label,
            class: classNames({
              'fjs-checked': value.includes(v.value)
            }),
            required: false,
            children: o$2("input", {
              checked: value.includes(v.value),
              class: "fjs-input",
              disabled: disabled,
              id: prefixId(`${id}-${index}`, formId),
              type: "checkbox",
              onClick: () => toggleCheckbox(v.value)
            })
          }, `${id}-${index}`);
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Checklist.create = (options = {}) => {
      const defaults = {};

      // provide default values if valuesKey isn't set
      if (!options.valuesKey) {
        defaults.values = [{
          label: 'Value',
          value: 'value'
        }];
      }
      return {
        ...defaults,
        ...options
      };
    };
    Checklist.type = type$9;
    Checklist.label = 'Checklist';
    Checklist.keyed = true;
    Checklist.emptyValue = [];
    Checklist.sanitizeValue = sanitizeMultiSelectValue;
    Checklist.group = 'selection';

    /**
     * Returns the conditionally filtered data of a form reactively.
     * Memoised to minimize re-renders
     *
     */
    function useFilteredFormData() {
      const {
        initialData,
        data
      } = useService('form')._getState();
      const conditionChecker = useService('conditionChecker', false);
      return F$1(() => {
        const newData = conditionChecker ? conditionChecker.applyConditions(data, data) : data;
        return {
          ...initialData,
          ...newData
        };
      }, [conditionChecker, data, initialData]);
    }

    /**
     * Evaluate if condition is met reactively based on the conditionChecker and form data.
     *
     * @param {string | undefined} condition
     *
     * @returns {boolean} true if condition is met or no condition or condition checker exists
     */
    function useCondition(condition) {
      const conditionChecker = useService('conditionChecker', false);
      const filteredData = useFilteredFormData();
      return F$1(() => {
        return conditionChecker ? conditionChecker.check(condition, filteredData) : null;
      }, [conditionChecker, condition, filteredData]);
    }

    /**
     * Evaluate a string reactively based on the expressionLanguage and form data.
     * If the string is not an expression, it is returned as is.
     * Memoised to minimize re-renders.
     *
     * @param {string} value
     *
     */
    function useExpressionEvaluation(value) {
      const formData = useFilteredFormData();
      const expressionLanguage = useService('expressionLanguage');
      return F$1(() => {
        if (expressionLanguage && expressionLanguage.isExpression(value)) {
          return expressionLanguage.evaluate(value, formData);
        }
        return value;
      }, [expressionLanguage, formData, value]);
    }

    function useKeyDownAction(targetKey, action, listenerElement = window) {
      function downHandler({
        key
      }) {
        if (key === targetKey) {
          action();
        }
      }
      p$1(() => {
        listenerElement.addEventListener('keydown', downHandler);
        return () => {
          listenerElement.removeEventListener('keydown', downHandler);
        };
      });
    }

    /**
     * Template a string reactively based on form data. If the string is not a template, it is returned as is.
     * Memoised to minimize re-renders
     *
     * @param {string} value
     * @param {Object} options
     * @param {boolean} [options.debug = false]
     * @param {boolean} [options.strict = false]
     * @param {Function} [options.buildDebugString]
     *
     */
    function useTemplateEvaluation(value, options) {
      const filteredData = useFilteredFormData();
      const templating = useService('templating');
      return F$1(() => {
        if (templating.isTemplate(value)) {
          return templating.evaluate(value, filteredData, options);
        }
        return value;
      }, [filteredData, templating, value, options]);
    }

    const noop$1 = () => false;
    function FormField(props) {
      const {
        field,
        onChange
      } = props;
      const {
        _path
      } = field;
      const formFields = useService('formFields'),
        form = useService('form');
      const {
        data,
        errors,
        properties
      } = form._getState();
      const {
        Element,
        Empty,
        Column
      } = q$1(FormRenderContext$1);
      const FormFieldComponent = formFields.get(field.type);
      if (!FormFieldComponent) {
        throw new Error(`cannot render field <${field.type}>`);
      }
      const value = get$1(data, _path);
      const fieldErrors = findErrors(errors, _path);
      const disabled = properties.readOnly || field.disabled || false;
      const hidden = useCondition(field.conditional && field.conditional.hide || null);
      if (hidden) {
        return o$2(Empty, {});
      }
      return o$2(Column, {
        field: field,
        class: gridColumnClasses(field),
        children: o$2(Element, {
          class: "fjs-element",
          field: field,
          children: o$2(FormFieldComponent, {
            ...props,
            disabled: disabled,
            errors: fieldErrors,
            onChange: disabled ? noop$1 : onChange,
            value: value
          })
        })
      });
    }

    function Default(props) {
      const {
        Children,
        Empty,
        Row
      } = q$1(FormRenderContext$1);
      const {
        field
      } = props;
      const {
        id,
        components = []
      } = field;
      const formLayouter = useService('formLayouter');
      const formFieldRegistry = useService('formFieldRegistry');
      const rows = formLayouter.getRows(id);
      return o$2(Children, {
        class: "fjs-vertical-layout fjs-children cds--grid cds--grid--condensed",
        field: field,
        children: [rows.map(row => {
          const {
            components = []
          } = row;
          if (!components.length) {
            return null;
          }
          return o$2(Row, {
            row: row,
            class: "fjs-layout-row cds--row",
            children: components.map(id => {
              const childField = formFieldRegistry.get(id);
              if (!childField) {
                return null;
              }
              return y$1(FormField, {
                ...props,
                key: childField.id,
                field: childField
              });
            })
          });
        }), components.length ? null : o$2(Empty, {})]
      });
    }
    Default.create = (options = {}) => ({
      components: [],
      ...options
    });
    Default.type = 'default';
    Default.keyed = false;
    Default.label = null;
    Default.group = null;

    function _extends$j() { _extends$j = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$j.apply(this, arguments); }
    var CalendarIcon = (({
      styles = {},
      ...props
    }) => /*#__PURE__*/Cn.createElement("svg", _extends$j({
      width: "14",
      height: "15",
      viewBox: "0 0 28 30",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props), /*#__PURE__*/Cn.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "currentColor",
      d: "M19 2H9V0H7v2H2a2 2 0 00-2 2v24a2 2 0 002 2h24a2 2 0 002-2V4a2 2 0 00-2-2h-5V0h-2v2zM7 7V4H2v5h24V4h-5v3h-2V4H9v3H7zm-5 4v17h24V11H2z"
    })));

    function InputAdorner(props) {
      const {
        pre = null,
        post = null,
        rootRef,
        inputRef,
        children,
        disabled,
        hasErrors
      } = props;
      const onAdornmentClick = () => inputRef && inputRef.current && inputRef.current.focus();
      return o$2("div", {
        class: classNames('fjs-input-group', {
          'fjs-disabled': disabled
        }, {
          'hasErrors': hasErrors
        }),
        ref: rootRef,
        children: [pre !== null && o$2("span", {
          class: "fjs-input-adornment border-right border-radius-left",
          onClick: onAdornmentClick,
          children: [" ", isString$3(pre) ? o$2("span", {
            class: "fjs-input-adornment-text",
            children: pre
          }) : pre, " "]
        }), children, post !== null && o$2("span", {
          class: "fjs-input-adornment border-left border-radius-right",
          onClick: onAdornmentClick,
          children: [" ", isString$3(post) ? o$2("span", {
            class: "fjs-input-adornment-text",
            children: post
          }) : post, " "]
        })]
      });
    }

    function Datepicker(props) {
      const {
        id,
        label,
        collapseLabelOnEmpty,
        formId,
        required,
        disabled,
        disallowPassedDates,
        date,
        setDate
      } = props;
      const dateInputRef = _();
      const focusScopeRef = _();
      const [flatpickrInstance, setFlatpickrInstance] = h(null);
      const [isInputDirty, setIsInputDirty] = h(false);
      const [forceFocusCalendar, setForceFocusCalendar] = h(false);

      // shorts the date value back to the source
      p$1(() => {
        if (!flatpickrInstance || !flatpickrInstance.config) return;
        flatpickrInstance.setDate(date, true);
        setIsInputDirty(false);
      }, [flatpickrInstance, date.toString()]);
      p$1(() => {
        if (!forceFocusCalendar) return;
        focusRelevantFlatpickerDay(flatpickrInstance);
        setForceFocusCalendar(false);
      }, [flatpickrInstance, forceFocusCalendar]);

      // setup flatpickr instance
      p$1(() => {
        let config = {
          allowInput: true,
          dateFormat: 'm/d/Y',
          static: true,
          clickOpens: false,
          // TODO: support dates prior to 1900 (https://github.com/bpmn-io/form-js/issues/533)
          minDate: disallowPassedDates ? 'today' : '01/01/1900',
          errorHandler: () => {/* do nothing, we expect the values to sometimes be erronous and we don't want warnings polluting the console */}
        };
        const instance = flatpickr(dateInputRef.current, config);
        setFlatpickrInstance(instance);
        const onCalendarFocusOut = e => {
          if (!instance.calendarContainer.contains(e.relatedTarget) && e.relatedTarget != dateInputRef.current) {
            instance.close();
          }
        };

        // remove dirty tag to have mouse day selection prioritize input blur
        const onCalendarMouseDown = e => {
          if (e.target.classList.contains('flatpickr-day')) {
            setIsInputDirty(false);
          }
        };

        // when the dropdown of the datepickr opens, we register a few event handlers to re-implement some of the
        // flatpicker logic that was lost when setting allowInput to true
        instance.config.onOpen = [() => instance.calendarContainer.addEventListener('focusout', onCalendarFocusOut), () => instance.calendarContainer.addEventListener('mousedown', onCalendarMouseDown)];
        instance.config.onClose = [() => instance.calendarContainer.removeEventListener('focusout', onCalendarFocusOut), () => instance.calendarContainer.removeEventListener('mousedown', onCalendarMouseDown)];
      }, [disallowPassedDates]);

      // onChange is updated dynamically, so not to re-render the flatpicker every time it changes
      p$1(() => {
        if (!flatpickrInstance || !flatpickrInstance.config) return;
        flatpickrInstance.config.onChange = [date => setDate(new Date(date)), () => setIsInputDirty(false)];
      }, [flatpickrInstance, setDate]);
      const onInputKeyDown = T$1(e => {
        if (!flatpickrInstance) return;
        if (e.code === 'Escape') {
          flatpickrInstance.close();
        }
        if (e.code === 'ArrowDown') {
          if (isInputDirty) {
            // trigger an enter keypress to submit the new input, then focus calendar day on the next render cycle
            dateInputRef.current.dispatchEvent(ENTER_KEYDOWN_EVENT);
            setIsInputDirty(false);
            setForceFocusCalendar(true);
          } else {
            // focus calendar day immediately
            focusRelevantFlatpickerDay(flatpickrInstance);
          }
          e.preventDefault();
        }
        if (e.code === 'Enter') {
          setIsInputDirty(false);
        }
      }, [flatpickrInstance, isInputDirty]);
      const onInputFocus = T$1(e => {
        if (!flatpickrInstance || focusScopeRef.current.contains(e.relatedTarget)) return;
        flatpickrInstance.open();
      }, [flatpickrInstance]);

      // simulate an enter press on blur to make sure the date value is submitted in all scenarios
      const onInputBlur = T$1(e => {
        if (!isInputDirty || e.relatedTarget && e.relatedTarget.classList.contains('flatpickr-day')) return;
        dateInputRef.current.dispatchEvent(ENTER_KEYDOWN_EVENT);
        setIsInputDirty(false);
      }, [isInputDirty]);
      const fullId = `${prefixId(id, formId)}--date`;
      return o$2("div", {
        class: "fjs-datetime-subsection",
        children: [o$2(Label, {
          id: fullId,
          label: label,
          collapseOnEmpty: collapseLabelOnEmpty,
          required: required
        }), o$2(InputAdorner, {
          pre: o$2(CalendarIcon, {}),
          disabled: disabled,
          rootRef: focusScopeRef,
          inputRef: dateInputRef,
          children: o$2("div", {
            class: "fjs-datepicker",
            style: {
              width: '100%'
            },
            children: o$2("input", {
              ref: dateInputRef,
              type: "text",
              id: fullId,
              class: 'fjs-input',
              disabled: disabled,
              placeholder: "mm/dd/yyyy",
              autoComplete: "off",
              onFocus: onInputFocus,
              onKeyDown: onInputKeyDown,
              onMouseDown: e => !flatpickrInstance.isOpen && flatpickrInstance.open(),
              onBlur: onInputBlur,
              onInput: e => setIsInputDirty(true),
              "data-input": true
            })
          })
        })]
      });
    }

    function _extends$i() { _extends$i = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$i.apply(this, arguments); }
    var ClockIcon = (({
      styles = {},
      ...props
    }) => /*#__PURE__*/Cn.createElement("svg", _extends$i({
      width: "16",
      height: "16",
      viewBox: "0 0 28 29",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, props), /*#__PURE__*/Cn.createElement("path", {
      fill: "currentColor",
      d: "M13 14.41L18.59 20 20 18.59l-5-5.01V5h-2v9.41z"
    }), /*#__PURE__*/Cn.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "currentColor",
      d: "M6.222 25.64A14 14 0 1021.778 2.36 14 14 0 006.222 25.64zM7.333 4.023a12 12 0 1113.334 19.955A12 12 0 017.333 4.022z"
    })));

    const DEFAULT_LABEL_GETTER = value => value;
    const NOOP = () => {};
    function DropdownList(props) {
      const {
        listenerElement = window,
        values = [],
        getLabel = DEFAULT_LABEL_GETTER,
        onValueSelected = NOOP,
        height = 235,
        emptyListMessage = 'No results',
        initialFocusIndex = 0
      } = props;
      const [mouseControl, setMouseControl] = h(false);
      const [focusedValueIndex, setFocusedValueIndex] = h(initialFocusIndex);
      const [smoothScrolling, setSmoothScrolling] = h(false);
      const dropdownContainer = _();
      const mouseScreenPos = _();
      const focusedItem = F$1(() => values.length ? values[focusedValueIndex] : null, [focusedValueIndex, values]);
      const changeFocusedValueIndex = T$1(delta => {
        setFocusedValueIndex(x => Math.min(Math.max(0, x + delta), values.length - 1));
      }, [values.length]);
      p$1(() => {
        if (focusedValueIndex === 0) return;
        if (!focusedValueIndex || !values.length) {
          setFocusedValueIndex(0);
        } else if (focusedValueIndex >= values.length) {
          setFocusedValueIndex(values.length - 1);
        }
      }, [focusedValueIndex, values.length]);
      useKeyDownAction('ArrowUp', () => {
        if (values.length) {
          changeFocusedValueIndex(-1);
          setMouseControl(false);
        }
      }, listenerElement);
      useKeyDownAction('ArrowDown', () => {
        if (values.length) {
          changeFocusedValueIndex(1);
          setMouseControl(false);
        }
      }, listenerElement);
      useKeyDownAction('Enter', () => {
        if (focusedItem) {
          onValueSelected(focusedItem);
        }
      }, listenerElement);
      p$1(() => {
        const individualEntries = dropdownContainer.current.children;
        if (individualEntries.length && !mouseControl) {
          individualEntries[focusedValueIndex].scrollIntoView({
            block: 'nearest',
            inline: 'nearest'
          });
        }
      }, [focusedValueIndex, mouseControl]);
      p$1(() => {
        setSmoothScrolling(true);
      }, []);
      const onMouseMovedInKeyboardMode = (event, valueIndex) => {
        const userMovedCursor = !mouseScreenPos.current || mouseScreenPos.current.x !== event.screenX && mouseScreenPos.current.y !== event.screenY;
        if (userMovedCursor) {
          mouseScreenPos.current = {
            x: event.screenX,
            y: event.screenY
          };
          setMouseControl(true);
          setFocusedValueIndex(valueIndex);
        }
      };
      return o$2("div", {
        ref: dropdownContainer,
        tabIndex: -1,
        class: "fjs-dropdownlist",
        onMouseDown: e => e.preventDefault(),
        style: {
          maxHeight: height,
          scrollBehavior: smoothScrolling ? 'smooth' : 'auto'
        },
        children: [values.length > 0 && values.map((v, i) => {
          return o$2("div", {
            class: classNames('fjs-dropdownlist-item', {
              'focused': focusedValueIndex === i
            }),
            onMouseMove: mouseControl ? undefined : e => onMouseMovedInKeyboardMode(e, i),
            onMouseEnter: mouseControl ? () => setFocusedValueIndex(i) : undefined,
            onMouseDown: e => onValueSelected(v),
            children: getLabel(v)
          });
        }), !values.length && o$2("div", {
          class: "fjs-dropdownlist-empty",
          children: emptyListMessage
        })]
      });
    }

    function Timepicker(props) {
      const {
        id,
        label,
        collapseLabelOnEmpty,
        formId,
        required,
        disabled,
        use24h = false,
        timeInterval,
        time,
        setTime
      } = props;
      const timeInputRef = _();
      const [dropdownIsOpen, setDropdownIsOpen] = h(false);
      const useDropdown = F$1(() => timeInterval !== 1, [timeInterval]);
      const [rawValue, setRawValue] = h('');

      // populates values from source
      p$1(() => {
        if (time === null) {
          setRawValue('');
          return;
        }
        const intervalAdjustedTime = time - time % timeInterval;
        setRawValue(formatTime(use24h, intervalAdjustedTime));
        if (intervalAdjustedTime != time) {
          setTime(intervalAdjustedTime);
        }
      }, [time, setTime, use24h, timeInterval]);
      const propagateRawToMinute = T$1(newRawValue => {
        const localRawValue = newRawValue || rawValue;

        // If no raw value exists, set the minute to null
        if (!localRawValue) {
          setTime(null);
          return;
        }
        const minutes = parseInputTime(localRawValue);

        // If raw string couldn't be parsed, clean everything up
        if (!isNumber$3(minutes)) {
          setRawValue('');
          setTime(null);
          return;
        }

        // Enforce the minutes to match the timeInterval
        const correctedMinutes = minutes - minutes % timeInterval;

        // Enforce the raw text to be formatted properly
        setRawValue(formatTime(use24h, correctedMinutes));
        setTime(correctedMinutes);
      }, [rawValue, timeInterval, use24h, setTime]);
      const timeOptions = F$1(() => {
        const minutesInDay = 24 * 60;
        const intervalCount = Math.floor(minutesInDay / timeInterval);
        return [...Array(intervalCount).keys()].map(intervalIndex => formatTime(use24h, intervalIndex * timeInterval));
      }, [timeInterval, use24h]);
      const initialFocusIndex = F$1(() => {
        // if there are no options, there will not be any focusing
        if (!timeOptions || !timeInterval) return null;

        // if there is a set minute value, we focus it in the dropdown
        if (time) return time / timeInterval;
        const cacheTime = parseInputTime(rawValue);

        // if there is a valid value in the input cache, we try and focus close to it
        if (cacheTime) {
          const flooredCacheTime = cacheTime - cacheTime % timeInterval;
          return flooredCacheTime / timeInterval;
        }

        // If there is no set value, simply focus the middle of the dropdown (12:00)
        return Math.floor(timeOptions.length / 2);
      }, [rawValue, time, timeInterval, timeOptions]);
      const onInputKeyDown = e => {
        switch (e.key) {
          case 'ArrowUp':
            e.preventDefault();
            break;
          case 'ArrowDown':
            useDropdown && setDropdownIsOpen(true);
            e.preventDefault();
            break;
          case 'Escape':
            useDropdown && setDropdownIsOpen(false);
            break;
          case 'Enter':
            !dropdownIsOpen && propagateRawToMinute();
            break;
        }
      };
      const onInputBlur = e => {
        setDropdownIsOpen(false);
        propagateRawToMinute();
      };
      const onDropdownValueSelected = value => {
        setDropdownIsOpen(false);
        propagateRawToMinute(value);
      };
      const fullId = `${prefixId(id, formId)}--time`;
      return o$2("div", {
        class: "fjs-datetime-subsection",
        children: [o$2(Label, {
          id: fullId,
          label: label,
          collapseOnEmpty: collapseLabelOnEmpty,
          required: required
        }), o$2(InputAdorner, {
          pre: o$2(ClockIcon, {}),
          inputRef: timeInputRef,
          disabled: disabled,
          children: o$2("div", {
            class: "fjs-timepicker fjs-timepicker-anchor",
            children: [o$2("input", {
              ref: timeInputRef,
              type: "text",
              id: fullId,
              class: "fjs-input",
              value: rawValue,
              disabled: disabled,
              placeholder: use24h ? 'hh:mm' : 'hh:mm ?m',
              autoComplete: "off",
              onFocus: () => useDropdown && setDropdownIsOpen(true),
              onClick: () => useDropdown && setDropdownIsOpen(true)

              // @ts-ignore
              ,
              onInput: e => {
                setRawValue(e.target.value);
                useDropdown && setDropdownIsOpen(false);
              },
              onBlur: onInputBlur,
              onKeyDown: onInputKeyDown,
              "data-input": true
            }), dropdownIsOpen && o$2(DropdownList, {
              values: timeOptions,
              height: 150,
              onValueSelected: onDropdownValueSelected,
              listenerElement: timeInputRef.current,
              initialFocusIndex: initialFocusIndex
            })]
          })
        })]
      });
    }

    const type$8 = 'datetime';
    function Datetime(props) {
      const {
        disabled,
        errors = [],
        field,
        onChange,
        value = ''
      } = props;
      const {
        description,
        id,
        dateLabel,
        timeLabel,
        validate = {},
        subtype,
        use24h,
        disallowPassedDates,
        timeInterval,
        timeSerializingFormat
      } = field;
      const {
        required
      } = validate;
      const {
        formId
      } = q$1(FormContext$1);
      const getNullDateTime = () => ({
        date: new Date(Date.parse(null)),
        time: null
      });
      const [dateTime, setDateTime] = h(getNullDateTime());
      const [dateTimeUpdateRequest, setDateTimeUpdateRequest] = h(null);
      const isValidDate = date => date && !isNaN(date.getTime());
      const isValidTime = time => !isNaN(parseInt(time));
      const useDatePicker = F$1(() => subtype === DATETIME_SUBTYPES.DATE || subtype === DATETIME_SUBTYPES.DATETIME, [subtype]);
      const useTimePicker = F$1(() => subtype === DATETIME_SUBTYPES.TIME || subtype === DATETIME_SUBTYPES.DATETIME, [subtype]);
      p$1(() => {
        let {
          date,
          time
        } = getNullDateTime();
        switch (subtype) {
          case DATETIME_SUBTYPES.DATE:
            {
              date = new Date(Date.parse(value));
              break;
            }
          case DATETIME_SUBTYPES.TIME:
            {
              time = parseIsoTime(value);
              break;
            }
          case DATETIME_SUBTYPES.DATETIME:
            {
              date = new Date(Date.parse(value));
              time = isValidDate(date) ? 60 * date.getHours() + date.getMinutes() : null;
              break;
            }
        }
        setDateTime({
          date,
          time
        });
      }, [subtype, value]);
      const computeAndSetState = T$1(({
        date,
        time
      }) => {
        let newDateTimeValue = null;
        if (subtype === DATETIME_SUBTYPES.DATE && isValidDate(date)) {
          newDateTimeValue = serializeDate(date);
        } else if (subtype === DATETIME_SUBTYPES.TIME && isValidTime(time)) {
          newDateTimeValue = serializeTime(time, new Date().getTimezoneOffset(), timeSerializingFormat);
        } else if (subtype === DATETIME_SUBTYPES.DATETIME && isValidDate(date) && isValidTime(time)) {
          newDateTimeValue = serializeDateTime(date, time, timeSerializingFormat);
        }
        onChange({
          value: newDateTimeValue,
          field
        });
      }, [field, onChange, subtype, timeSerializingFormat]);
      p$1(() => {
        if (dateTimeUpdateRequest) {
          if (dateTimeUpdateRequest.refreshOnly) {
            computeAndSetState(dateTime);
          } else {
            const newDateTime = {
              ...dateTime,
              ...dateTimeUpdateRequest
            };
            setDateTime(newDateTime);
            computeAndSetState(newDateTime);
          }
          setDateTimeUpdateRequest(null);
        }
      }, [computeAndSetState, dateTime, dateTimeUpdateRequest]);
      p$1(() => {
        setDateTimeUpdateRequest({
          refreshOnly: true
        });
      }, [timeSerializingFormat]);
      const allErrors = F$1(() => {
        if (required || subtype !== DATETIME_SUBTYPES.DATETIME) return errors;
        const isOnlyOneFieldSet = isValidDate(dateTime.date) && !isValidTime(dateTime.time) || !isValidDate(dateTime.date) && isValidTime(dateTime.time);
        return isOnlyOneFieldSet ? ['Date and time must both be entered.', ...errors] : errors;
      }, [required, subtype, dateTime, errors]);
      const setDate = T$1(date => {
        setDateTimeUpdateRequest(prev => prev ? {
          ...prev,
          date
        } : {
          date
        });
      }, []);
      const setTime = T$1(time => {
        setDateTimeUpdateRequest(prev => prev ? {
          ...prev,
          time
        } : {
          time
        });
      }, []);
      const datePickerProps = {
        id,
        label: dateLabel,
        collapseLabelOnEmpty: !timeLabel,
        formId,
        required,
        disabled,
        disallowPassedDates,
        date: dateTime.date,
        setDate
      };
      const timePickerProps = {
        id,
        label: timeLabel,
        collapseLabelOnEmpty: !dateLabel,
        formId,
        required,
        disabled,
        use24h,
        timeInterval,
        time: dateTime.time,
        setTime
      };
      return o$2("div", {
        class: formFieldClasses(type$8, {
          errors: allErrors,
          disabled
        }),
        children: [o$2("div", {
          class: classNames('fjs-vertical-group'),
          children: [useDatePicker && o$2(Datepicker, {
            ...datePickerProps
          }), useTimePicker && useDatePicker && o$2("div", {
            class: "fjs-datetime-separator"
          }), useTimePicker && o$2(Timepicker, {
            ...timePickerProps
          })]
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: allErrors
        })]
      });
    }
    Datetime.create = (options = {}) => {
      const defaults = {};
      set$2(defaults, DATETIME_SUBTYPE_PATH, DATETIME_SUBTYPES.DATE);
      set$2(defaults, DATE_LABEL_PATH, 'Date');
      return {
        ...defaults,
        ...options
      };
    };
    Datetime.type = type$8;
    Datetime.keyed = true;
    Datetime.emptyValue = null;
    Datetime.sanitizeValue = sanitizeDateTimePickerValue;
    Datetime.label = 'Date time';
    Datetime.group = 'basic-input';

    /**
     * This file must not be changed or exchanged.
     *
     * @see http://bpmn.io/license for more information.
     */
    function Logo() {
      return o$2("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 14.02 5.57",
        width: "53",
        height: "21",
        style: "vertical-align:middle",
        children: [o$2("path", {
          fill: "currentColor",
          d: "M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"
        }), o$2("path", {
          fill: "currentColor",
          d: "M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"
        })]
      });
    }
    function Lightbox(props) {
      const {
        open
      } = props;
      if (!open) {
        return null;
      }
      return o$2("div", {
        class: "fjs-powered-by-lightbox",
        style: "z-index: 100; position: fixed; top: 0; left: 0;right: 0; bottom: 0",
        children: [o$2("div", {
          class: "backdrop",
          style: "width: 100%; height: 100%; background: rgba(40 40 40 / 20%)",
          onClick: props.onBackdropClick
        }), o$2("div", {
          class: "notice",
          style: "position: absolute; left: 50%; top: 40%; transform: translate(-50%); width: 260px; padding: 10px; background: white; box-shadow: 0  1px 4px rgba(0 0 0 / 30%); font-family: Helvetica, Arial, sans-serif; font-size: 14px; display: flex; line-height: 1.3",
          children: [o$2("a", {
            href: "https://bpmn.io",
            target: "_blank",
            rel: "noopener",
            style: "margin: 15px 20px 15px 10px; align-self: center; color: #404040",
            children: o$2(Logo, {})
          }), o$2("span", {
            children: ["Web-based tooling for BPMN, DMN, and forms powered by ", o$2("a", {
              href: "https://bpmn.io",
              target: "_blank",
              rel: "noopener",
              children: "bpmn.io"
            }), "."]
          })]
        })]
      });
    }
    function Link(props) {
      return o$2("div", {
        class: "fjs-powered-by fjs-form-field",
        style: "text-align: right",
        children: o$2("a", {
          href: "https://bpmn.io",
          target: "_blank",
          rel: "noopener",
          class: "fjs-powered-by-link",
          title: "Powered by bpmn.io",
          style: "color: #404040",
          onClick: props.onClick,
          children: o$2(Logo, {})
        })
      });
    }
    function PoweredBy(props) {
      const [open, setOpen] = h(false);
      function toggleOpen(open) {
        return event => {
          event.preventDefault();
          setOpen(open);
        };
      }
      return o$2(_$2, {
        children: [z(o$2(Lightbox, {
          open: open,
          onBackdropClick: toggleOpen(false)
        }), document.body), o$2(Link, {
          onClick: toggleOpen(true)
        })]
      });
    }

    const noop = () => {};
    function FormComponent(props) {
      const form = useService('form');
      const {
        schema
      } = form._getState();
      const {
        onSubmit = noop,
        onReset = noop,
        onChange = noop
      } = props;
      const handleSubmit = event => {
        event.preventDefault();
        onSubmit();
      };
      const handleReset = event => {
        event.preventDefault();
        onReset();
      };
      return o$2("form", {
        class: "fjs-form",
        onSubmit: handleSubmit,
        onReset: handleReset,
        noValidate: true,
        children: [o$2(FormField, {
          field: schema,
          onChange: onChange
        }), o$2(PoweredBy, {})]
      });
    }

    const NODE_TYPE_TEXT = 3,
      NODE_TYPE_ELEMENT = 1;
    const ALLOWED_NODES = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'em', 'a', 'p', 'div', 'ul', 'ol', 'li', 'hr', 'blockquote', 'img', 'pre', 'code', 'br', 'strong'];
    const ALLOWED_ATTRIBUTES = ['align', 'alt', 'class', 'href', 'id', 'name', 'rel', 'target', 'src'];
    const ALLOWED_URI_PATTERN = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i; // eslint-disable-line no-useless-escape
    const ALLOWED_IMAGE_SRC_PATTERN = /^(https?|data):.*/i; // eslint-disable-line no-useless-escape
    const ATTR_WHITESPACE_PATTERN = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g; // eslint-disable-line no-control-regex

    const FORM_ELEMENT = document.createElement('form');

    /**
     * Sanitize a HTML string and return the cleaned, safe version.
     *
     * @param {string} html
     * @return {string}
     */

    // see https://github.com/developit/snarkdown/issues/70
    function sanitizeHTML(html) {
      const doc = new DOMParser().parseFromString(`<!DOCTYPE html>\n<html><body><div>${html}`, 'text/html');
      doc.normalize();
      const element = doc.body.firstChild;
      if (element) {
        sanitizeNode( /** @type Element */element);
        return new XMLSerializer().serializeToString(element);
      } else {
        // handle the case that document parsing
        // does not work at all, due to HTML gibberish
        return '';
      }
    }

    /**
     * Sanitizes an image source to ensure we only allow for data URI and links
     * that start with http(s).
     *
     * Note: Most browsers anyway do not support script execution in <img> elements.
     *
     * @param {string} src
     * @returns {string}
     */
    function sanitizeImageSource(src) {
      const valid = ALLOWED_IMAGE_SRC_PATTERN.test(src);
      return valid ? src : '';
    }

    /**
     * Recursively sanitize a HTML node, potentially
     * removing it, its children or attributes.
     *
     * Inspired by https://github.com/developit/snarkdown/issues/70
     * and https://github.com/cure53/DOMPurify. Simplified
     * for our use-case.
     *
     * @param {Element} node
     */
    function sanitizeNode(node) {
      // allow text nodes
      if (node.nodeType === NODE_TYPE_TEXT) {
        return;
      }

      // disallow all other nodes but Element
      if (node.nodeType !== NODE_TYPE_ELEMENT) {
        return node.remove();
      }
      const lcTag = node.tagName.toLowerCase();

      // disallow non-whitelisted tags
      if (!ALLOWED_NODES.includes(lcTag)) {
        return node.remove();
      }
      const attributes = node.attributes;

      // clean attributes
      for (let i = attributes.length; i--;) {
        const attribute = attributes[i];
        const name = attribute.name;
        const lcName = name.toLowerCase();

        // normalize node value
        const value = attribute.value.trim();
        node.removeAttribute(name);
        const valid = isValidAttribute(lcTag, lcName, value);
        if (valid) {
          node.setAttribute(name, value);
        }
      }

      // force noopener on target="_blank" links
      if (lcTag === 'a' && node.getAttribute('target') === '_blank' && node.getAttribute('rel') !== 'noopener') {
        node.setAttribute('rel', 'noopener');
      }
      for (let i = node.childNodes.length; i--;) {
        sanitizeNode( /** @type Element */node.childNodes[i]);
      }
    }

    /**
     * Validates attributes for validity.
     *
     * @param {string} lcTag
     * @param {string} lcName
     * @param {string} value
     * @return {boolean}
     */
    function isValidAttribute(lcTag, lcName, value) {
      // disallow most attributes based on whitelist
      if (!ALLOWED_ATTRIBUTES.includes(lcName)) {
        return false;
      }

      // disallow "DOM clobbering" / polution of document and wrapping form elements
      if ((lcName === 'id' || lcName === 'name') && (value in document || value in FORM_ELEMENT)) {
        return false;
      }
      if (lcName === 'target' && value !== '_blank') {
        return false;
      }

      // allow valid url links only
      if (lcName === 'href' && !ALLOWED_URI_PATTERN.test(value.replace(ATTR_WHITESPACE_PATTERN, ''))) {
        return false;
      }
      return true;
    }

    function _extends$h() { _extends$h = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$h.apply(this, arguments); }
    var ImagePlaceholder = (({
      styles = {},
      ...props
    }) => /*#__PURE__*/Cn.createElement("svg", _extends$h({
      width: "64",
      height: "64",
      viewBox: "0 0 1280 1280",
      xmlns: "http://www.w3.org/2000/svg",
      fillRule: "evenodd",
      clipRule: "evenodd",
      strokeLinejoin: "round",
      strokeMiterlimit: "2"
    }, props), /*#__PURE__*/Cn.createElement("path", {
      fill: "#e5e9ed",
      d: "M0 0h1280v1280H0z"
    }), /*#__PURE__*/Cn.createElement("path", {
      d: "M910 410H370v470h540V410zm-57.333 57.333v355.334H427.333V467.333h425.334z",
      fill: "#cad3db"
    }), /*#__PURE__*/Cn.createElement("path", {
      d: "M810 770H480v-60l100-170 130 170 100-65v125z",
      fill: "#cad3db"
    }), /*#__PURE__*/Cn.createElement("circle", {
      cx: "750",
      cy: "550",
      r: "50",
      fill: "#cad3db",
      transform: "translate(10 10)"
    })));

    const type$7 = 'image';
    function Image(props) {
      const {
        field
      } = props;
      const {
        alt,
        id,
        source
      } = field;
      const evaluatedImageSource = useExpressionEvaluation(source);
      const safeSource = F$1(() => sanitizeImageSource(evaluatedImageSource), [evaluatedImageSource]);
      const altText = useExpressionEvaluation(alt);
      const {
        formId
      } = q$1(FormContext$1);
      return o$2("div", {
        class: formFieldClasses(type$7),
        children: o$2("div", {
          class: "fjs-image-container",
          children: [safeSource && o$2("img", {
            alt: altText,
            src: safeSource,
            class: "fjs-image",
            id: prefixId(id, formId)
          }), !safeSource && o$2("div", {
            class: "fjs-image-placeholder",
            children: o$2(ImagePlaceholder, {
              alt: "This is an image placeholder"
            })
          })]
        })
      });
    }
    Image.create = (options = {}) => ({
      ...options
    });
    Image.type = type$7;
    Image.keyed = false;
    Image.label = 'Image view';
    Image.group = 'presentation';

    function _extends$g() { _extends$g = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$g.apply(this, arguments); }
    var AngelDownIcon = (({
      styles = {},
      ...props
    }) => /*#__PURE__*/Cn.createElement("svg", _extends$g({
      xmlns: "http://www.w3.org/2000/svg",
      width: "8",
      height: "8"
    }, props), /*#__PURE__*/Cn.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: ".5",
      d: "M7.75 1.336L4 6.125.258 1.335 0 1.54l4 5.125L8 1.54zm0 0"
    })));

    function _extends$f() { _extends$f = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$f.apply(this, arguments); }
    var AngelUpIcon = (({
      styles = {},
      ...props
    }) => /*#__PURE__*/Cn.createElement("svg", _extends$f({
      xmlns: "http://www.w3.org/2000/svg",
      width: "8",
      height: "8"
    }, props), /*#__PURE__*/Cn.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: ".5",
      d: "M7.75 6.664L4 1.875.258 6.665 0 6.46l4-5.125L8 6.46zm0 0"
    })));

    const type$6 = 'number';
    function Numberfield(props) {
      const {
        disabled,
        errors = [],
        field,
        value,
        onChange
      } = props;
      const {
        description,
        id,
        label,
        appearance = {},
        validate = {},
        decimalDigits,
        serializeToString = false,
        increment: incrementValue
      } = field;
      const {
        prefixAdorner,
        suffixAdorner
      } = appearance;
      const {
        required
      } = validate;
      const inputRef = _();
      const [stringValueCache, setStringValueCache] = h('');

      // checks whether the value currently in the form data is practically different from the one in the input field cache
      // this allows us to guarantee the field always displays valid form data, but without auto-simplifying values like 1.000 to 1
      const cacheValueMatchesState = F$1(() => Numberfield.sanitizeValue({
        value,
        formField: field
      }) === Numberfield.sanitizeValue({
        value: stringValueCache,
        formField: field
      }), [stringValueCache, value, field]);
      const displayValue = F$1(() => {
        if (value === 'NaN') return 'NaN';
        if (stringValueCache === '-') return '-';
        return cacheValueMatchesState ? stringValueCache : value || value === 0 ? Big(value).toFixed() : '';
      }, [stringValueCache, value, cacheValueMatchesState]);
      const arrowIncrementValue = F$1(() => {
        if (incrementValue) return Big(incrementValue);
        if (decimalDigits) return Big(`1e-${decimalDigits}`);
        return Big('1');
      }, [decimalDigits, incrementValue]);
      const setValue = T$1(stringValue => {
        if (isNullEquivalentValue(stringValue)) {
          setStringValueCache('');
          onChange({
            field,
            value: null
          });
          return;
        }

        // treat commas as dots
        stringValue = stringValue.replaceAll(',', '.');
        if (stringValue === '-') {
          setStringValueCache('-');
          return;
        }
        if (isNaN(Number(stringValue))) {
          setStringValueCache('NaN');
          onChange({
            field,
            value: 'NaN'
          });
          return;
        }
        setStringValueCache(stringValue);
        onChange({
          field,
          value: serializeToString ? stringValue : Number(stringValue)
        });
      }, [field, onChange, serializeToString]);
      const increment = () => {
        const base = isValidNumber(value) ? Big(value) : Big(0);
        const stepFlooredValue = base.minus(base.mod(arrowIncrementValue));

        // note: toFixed() behaves differently in big.js
        setValue(stepFlooredValue.plus(arrowIncrementValue).toFixed());
      };
      const decrement = () => {
        const base = isValidNumber(value) ? Big(value) : Big(0);
        const offset = base.mod(arrowIncrementValue);
        if (offset.cmp(0) === 0) {
          // if we're already on a valid step, decrement
          setValue(base.minus(arrowIncrementValue).toFixed());
        } else {
          // otherwise floor to the step
          const stepFlooredValue = base.minus(base.mod(arrowIncrementValue));
          setValue(stepFlooredValue.toFixed());
        }
      };
      const onKeyDown = e => {
        // delete the NaN state all at once on backspace or delete
        if (value === 'NaN' && (e.code === 'Backspace' || e.code === 'Delete')) {
          setValue(null);
          e.preventDefault();
          return;
        }
        if (e.code === 'ArrowUp') {
          increment();
          e.preventDefault();
          return;
        }
        if (e.code === 'ArrowDown') {
          decrement();
          e.preventDefault();
          return;
        }
      };

      // intercept key presses which would lead to an invalid number
      const onKeyPress = e => {
        const caretIndex = inputRef.current.selectionStart;
        const selectionWidth = inputRef.current.selectionStart - inputRef.current.selectionEnd;
        const previousValue = inputRef.current.value;
        if (!willKeyProduceValidNumber(e.key, previousValue, caretIndex, selectionWidth, decimalDigits)) {
          e.preventDefault();
        }
      };
      const {
        formId
      } = q$1(FormContext$1);
      return o$2("div", {
        class: formFieldClasses(type$6, {
          errors,
          disabled
        }),
        children: [o$2(Label, {
          id: prefixId(id, formId),
          label: label,
          required: required
        }), o$2(InputAdorner, {
          disabled: disabled,
          pre: prefixAdorner,
          post: suffixAdorner,
          children: o$2("div", {
            class: classNames('fjs-vertical-group', {
              'fjs-disabled': disabled
            }, {
              'hasErrors': errors.length
            }),
            children: [o$2("input", {
              ref: inputRef,
              class: "fjs-input",
              disabled: disabled,
              id: prefixId(id, formId),
              onKeyDown: onKeyDown,
              onKeyPress: onKeyPress

              // @ts-ignore
              ,
              onInput: e => setValue(e.target.value),
              type: "text",
              autoComplete: "off",
              step: arrowIncrementValue,
              value: displayValue
            }), o$2("div", {
              class: classNames('fjs-number-arrow-container', {
                'fjs-disabled': disabled
              }),
              children: [o$2("button", {
                class: "fjs-number-arrow-up",
                type: "button",
                "aria-label": "Increment",
                onClick: () => increment(),
                tabIndex: -1,
                children: o$2(AngelUpIcon, {})
              }), o$2("div", {
                class: "fjs-number-arrow-separator"
              }), o$2("button", {
                class: "fjs-number-arrow-down",
                type: "button",
                "aria-label": "Decrement",
                onClick: () => decrement(),
                tabIndex: -1,
                children: o$2(AngelDownIcon, {})
              })]
            })]
          })
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Numberfield.create = (options = {}) => ({
      ...options
    });
    Numberfield.sanitizeValue = ({
      value,
      formField
    }) => {
      // null state is allowed
      if (isNullEquivalentValue(value)) return null;

      // if data cannot be parsed as a valid number, go into invalid NaN state
      if (!isValidNumber(value)) return 'NaN';

      // otherwise parse to formatting type
      return formField.serializeToString ? value.toString() : Number(value);
    };
    Numberfield.type = type$6;
    Numberfield.keyed = true;
    Numberfield.label = 'Number';
    Numberfield.emptyValue = null;
    Numberfield.group = 'basic-input';

    const type$5 = 'radio';
    function Radio(props) {
      const {
        disabled,
        errors = [],
        field,
        value
      } = props;
      const {
        description,
        id,
        label,
        validate = {}
      } = field;
      const {
        required
      } = validate;
      const onChange = v => {
        props.onChange({
          field,
          value: v
        });
      };
      const {
        state: loadState,
        values: options
      } = useValuesAsync(field);
      const {
        formId
      } = q$1(FormContext$1);
      return o$2("div", {
        class: formFieldClasses(type$5, {
          errors,
          disabled
        }),
        children: [o$2(Label, {
          label: label,
          required: required
        }), loadState == LOAD_STATES.LOADED && options.map((option, index) => {
          return o$2(Label, {
            id: prefixId(`${id}-${index}`, formId),
            label: option.label,
            class: classNames({
              'fjs-checked': option.value === value
            }),
            required: false,
            children: o$2("input", {
              checked: option.value === value,
              class: "fjs-input",
              disabled: disabled,
              id: prefixId(`${id}-${index}`, formId),
              type: "radio",
              onClick: () => onChange(option.value)
            })
          }, `${id}-${index}`);
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Radio.create = function (options = {}) {
      const defaults = {};

      // provide default values if valuesKey isn't set
      if (!options.valuesKey) {
        defaults.values = [{
          label: 'Value',
          value: 'value'
        }];
      }
      return {
        ...defaults,
        ...options
      };
    };
    Radio.type = type$5;
    Radio.label = 'Radio';
    Radio.keyed = true;
    Radio.emptyValue = null;
    Radio.sanitizeValue = sanitizeSingleSelectValue;
    Radio.group = 'selection';

    function _extends$e() { _extends$e = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$e.apply(this, arguments); }
    var XMarkIcon = (({
      styles = {},
      ...props
    }) => /*#__PURE__*/Cn.createElement("svg", _extends$e({
      xmlns: "http://www.w3.org/2000/svg",
      width: "8",
      height: "8"
    }, props), /*#__PURE__*/Cn.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: ".5",
      d: "M4 3.766L7.43.336l.234.234L4.234 4l3.43 3.43-.234.234L4 4.234.57 7.664.336 7.43 3.766 4 .336.57.57.336zm0 0"
    })));

    function SearchableSelect(props) {
      const {
        id,
        disabled,
        errors,
        field,
        value
      } = props;
      const {
        formId
      } = q$1(FormContext$1);
      const [filter, setFilter] = h('');
      const [isDropdownExpanded, setIsDropdownExpanded] = h(false);
      const [shouldApplyFilter, setShouldApplyFilter] = h(true);
      const [isEscapeClosed, setIsEscapeClose] = h(false);
      const searchbarRef = _();
      const {
        state: loadState,
        values: options
      } = useValuesAsync(field);

      // We cache a map of option values to their index so that we don't need to search the whole options array every time to correlate the label
      const valueToOptionMap = F$1(() => Object.assign({}, ...options.map((o, x) => ({
        [o.value]: options[x]
      }))), [options]);
      const valueLabel = F$1(() => value && valueToOptionMap[value] && valueToOptionMap[value].label || '', [value, valueToOptionMap]);

      // whenever we change the underlying value, set the label to it
      p$1(() => {
        setFilter(valueLabel);
      }, [valueLabel]);
      const filteredOptions = F$1(() => {
        if (loadState === LOAD_STATES.LOADED) {
          return shouldApplyFilter ? options.filter(o => o.label && o.value && o.label.toLowerCase().includes(filter.toLowerCase())) : options;
        }
        return [];
      }, [filter, loadState, options, shouldApplyFilter]);
      const onChange = ({
        target
      }) => {
        setIsEscapeClose(false);
        setIsDropdownExpanded(true);
        setShouldApplyFilter(true);
        setFilter(target.value || '');
      };
      const setValue = T$1(option => {
        setFilter(option && option.label || '');
        props.onChange({
          value: option && option.value || null,
          field
        });
      }, [field, props]);
      const onInputKeyDown = T$1(keyDownEvent => {
        switch (keyDownEvent.key) {
          case 'ArrowUp':
            keyDownEvent.preventDefault();
            break;
          case 'ArrowDown':
            {
              if (!isDropdownExpanded) {
                setIsDropdownExpanded(true);
                setShouldApplyFilter(false);
              }
              keyDownEvent.preventDefault();
              break;
            }
          case 'Escape':
            setIsEscapeClose(true);
            break;
          case 'Enter':
            if (isEscapeClosed) {
              setIsEscapeClose(false);
            }
            break;
        }
      }, [isDropdownExpanded, isEscapeClosed]);
      const displayState = F$1(() => {
        const ds = {};
        ds.componentReady = !disabled && loadState === LOAD_STATES.LOADED;
        ds.displayCross = ds.componentReady && value !== null && value !== undefined;
        ds.displayDropdown = !disabled && isDropdownExpanded && !isEscapeClosed;
        return ds;
      }, [disabled, isDropdownExpanded, isEscapeClosed, loadState, value]);
      const onAngelMouseDown = T$1(e => {
        setIsEscapeClose(false);
        setIsDropdownExpanded(!isDropdownExpanded);
        const searchbar = searchbarRef.current;
        isDropdownExpanded ? searchbar.blur() : searchbar.focus();
        e.preventDefault();
      }, [isDropdownExpanded]);
      return o$2(_$2, {
        children: [o$2("div", {
          id: prefixId(`${id}`, formId),
          class: classNames('fjs-input-group', {
            'disabled': disabled
          }, {
            'hasErrors': errors.length
          }),
          children: [o$2("input", {
            disabled: disabled,
            class: "fjs-input",
            ref: searchbarRef,
            id: prefixId(`${id}-search`, formId),
            onChange: onChange,
            type: "text",
            value: filter,
            placeholder: 'Search',
            autoComplete: "off",
            onKeyDown: e => onInputKeyDown(e),
            onMouseDown: () => {
              setIsEscapeClose(false);
              setIsDropdownExpanded(true);
              setShouldApplyFilter(false);
            },
            onFocus: () => {
              setIsDropdownExpanded(true);
              setShouldApplyFilter(false);
            },
            onBlur: () => {
              setIsDropdownExpanded(false);
              setFilter(valueLabel);
            }
          }), displayState.displayCross && o$2("span", {
            class: "fjs-select-cross",
            onMouseDown: e => {
              setValue(null);
              e.preventDefault();
            },
            children: [o$2(XMarkIcon, {}), " "]
          }), o$2("span", {
            class: "fjs-select-arrow",
            onMouseDown: e => onAngelMouseDown(e),
            children: displayState.displayDropdown ? o$2(AngelUpIcon, {}) : o$2(AngelDownIcon, {})
          })]
        }), o$2("div", {
          class: "fjs-select-anchor",
          children: displayState.displayDropdown && o$2(DropdownList, {
            values: filteredOptions,
            getLabel: o => o.label,
            onValueSelected: o => {
              setValue(o);
              setIsDropdownExpanded(false);
            },
            listenerElement: searchbarRef.current
          })
        })]
      });
    }

    function SimpleSelect(props) {
      const {
        id,
        disabled,
        errors,
        field,
        value
      } = props;
      const {
        formId
      } = q$1(FormContext$1);
      const [isDropdownExpanded, setIsDropdownExpanded] = h(false);
      const selectRef = _();
      const {
        state: loadState,
        values: options
      } = useValuesAsync(field);

      // We cache a map of option values to their index so that we don't need to search the whole options array every time to correlate the label
      const valueToOptionMap = F$1(() => Object.assign({}, ...options.map((o, x) => ({
        [o.value]: options[x]
      }))), [options]);
      const valueLabel = F$1(() => value && valueToOptionMap[value] && valueToOptionMap[value].label || '', [value, valueToOptionMap]);
      const setValue = T$1(option => {
        props.onChange({
          value: option && option.value || null,
          field
        });
      }, [field, props]);
      const displayState = F$1(() => {
        const ds = {};
        ds.componentReady = !disabled && loadState === LOAD_STATES.LOADED;
        ds.displayCross = ds.componentReady && value !== null && value !== undefined;
        ds.displayDropdown = !disabled && isDropdownExpanded;
        return ds;
      }, [disabled, isDropdownExpanded, loadState, value]);
      const onMouseDown = T$1(e => {
        const select = selectRef.current;
        setIsDropdownExpanded(!isDropdownExpanded);
        if (isDropdownExpanded) {
          select.blur();
        } else {
          select.focus();
        }
        e.preventDefault();
      }, [isDropdownExpanded]);
      const initialFocusIndex = F$1(() => value && findIndex(options, o => o.value === value) || 0, [options, value]);
      return o$2(_$2, {
        children: [o$2("div", {
          ref: selectRef,
          id: prefixId(`${id}`, formId),
          class: classNames('fjs-input-group', {
            'disabled': disabled
          }, {
            'hasErrors': errors.length
          }),
          onFocus: () => setIsDropdownExpanded(true),
          onBlur: () => setIsDropdownExpanded(false),
          onMouseDown: e => onMouseDown(e),
          tabIndex: disabled ? undefined : 0,
          children: [o$2("div", {
            class: classNames('fjs-select-display', {
              'fjs-select-placeholder': !value
            }),
            id: prefixId(`${id}-display`, formId),
            children: valueLabel || 'Select'
          }), displayState.displayCross && o$2("span", {
            class: "fjs-select-cross",
            onMouseDown: e => {
              setValue(null);
              e.stopPropagation();
            },
            children: o$2(XMarkIcon, {})
          }), o$2("span", {
            class: "fjs-select-arrow",
            children: displayState.displayDropdown ? o$2(AngelUpIcon, {}) : o$2(AngelDownIcon, {})
          })]
        }), o$2("div", {
          class: "fjs-select-anchor",
          children: displayState.displayDropdown && o$2(DropdownList, {
            values: options,
            getLabel: o => o.label,
            initialFocusIndex: initialFocusIndex,
            onValueSelected: o => {
              setValue(o);
              setIsDropdownExpanded(false);
            },
            listenerElement: selectRef.current
          })
        })]
      });
    }

    const type$4 = 'select';
    function Select(props) {
      const {
        disabled,
        errors = [],
        field,
        onChange,
        value
      } = props;
      const {
        description,
        id,
        label,
        searchable = false,
        validate = {}
      } = field;
      const {
        required
      } = validate;
      const {
        formId
      } = q$1(FormContext$1);
      const selectProps = F$1(() => ({
        id,
        disabled,
        errors,
        field,
        value,
        onChange
      }), [disabled, errors, field, id, value, onChange]);
      return o$2("div", {
        class: formFieldClasses(type$4, {
          errors,
          disabled
        }),
        children: [o$2(Label, {
          id: prefixId(id, formId),
          label: label,
          required: required
        }), searchable ? o$2(SearchableSelect, {
          ...selectProps
        }) : o$2(SimpleSelect, {
          ...selectProps
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Select.create = (options = {}) => {
      const defaults = {};

      // provide default values if valuesKey isn't set
      if (!options.valuesKey) {
        defaults.values = [{
          label: 'Value',
          value: 'value'
        }];
      }
      return {
        ...defaults,
        ...options
      };
    };
    Select.type = type$4;
    Select.label = 'Select';
    Select.keyed = true;
    Select.emptyValue = null;
    Select.sanitizeValue = sanitizeSingleSelectValue;
    Select.group = 'selection';

    const type$3 = 'taglist';
    function Taglist(props) {
      const {
        disabled,
        errors = [],
        field,
        value: values = []
      } = props;
      const {
        description,
        id,
        label,
        validate = {}
      } = field;
      const {
        required
      } = validate;
      const {
        formId
      } = q$1(FormContext$1);
      const [filter, setFilter] = h('');
      const [filteredOptions, setFilteredOptions] = h([]);
      const [isDropdownExpanded, setIsDropdownExpanded] = h(false);
      const [hasOptionsLeft, setHasOptionsLeft] = h(true);
      const [isEscapeClosed, setIsEscapeClose] = h(false);
      const searchbarRef = _();
      const {
        state: loadState,
        values: options
      } = useValuesAsync(field);

      // We cache a map of option values to their index so that we don't need to search the whole options array every time to correlate the label
      const valueToOptionMap = F$1(() => Object.assign({}, ...options.map((o, x) => ({
        [o.value]: options[x]
      }))), [options]);

      // Usage of stringify is necessary here because we want this effect to only trigger when there is a value change to the array
      p$1(() => {
        if (loadState === LOAD_STATES.LOADED) {
          setFilteredOptions(options.filter(o => o.label && o.value && o.label.toLowerCase().includes(filter.toLowerCase()) && !values.includes(o.value)));
        } else {
          setFilteredOptions([]);
        }
      }, [filter, JSON.stringify(values), options, loadState]);
      p$1(() => {
        setHasOptionsLeft(options.length > values.length);
      }, [options.length, values.length]);
      const onFilterChange = ({
        target
      }) => {
        setIsEscapeClose(false);
        setFilter(target.value);
      };
      const selectValue = value => {
        if (filter) {
          setFilter('');
        }

        // Ensure values cannot be double selected due to latency
        if (values.at(-1) === value) {
          return;
        }
        props.onChange({
          value: [...values, value],
          field
        });
      };
      const deselectValue = value => {
        props.onChange({
          value: values.filter(v => v != value),
          field
        });
      };
      const onInputKeyDown = e => {
        switch (e.key) {
          case 'ArrowUp':
          case 'ArrowDown':
            // We do not want the cursor to seek in the search field when we press up and down
            e.preventDefault();
            break;
          case 'Backspace':
            if (!filter && values.length) {
              deselectValue(values[values.length - 1]);
            }
            break;
          case 'Escape':
            setIsEscapeClose(true);
            break;
          case 'Enter':
            if (isEscapeClosed) {
              setIsEscapeClose(false);
            }
            break;
        }
      };
      const onTagRemoveClick = (event, value) => {
        const {
          target
        } = event;
        deselectValue(value);

        // restore focus if there is no next sibling to focus
        const nextTag = target.closest('.fjs-taglist-tag').nextSibling;
        if (!nextTag) {
          searchbarRef.current.focus();
        }
      };
      const shouldDisplayDropdown = F$1(() => !disabled && loadState === LOAD_STATES.LOADED && isDropdownExpanded && !isEscapeClosed, [disabled, isDropdownExpanded, isEscapeClosed, loadState]);
      return o$2("div", {
        class: formFieldClasses(type$3, {
          errors,
          disabled
        }),
        children: [o$2(Label, {
          label: label,
          required: required,
          id: prefixId(`${id}-search`, formId)
        }), o$2("div", {
          class: classNames('fjs-taglist', {
            'fjs-disabled': disabled
          }),
          children: [loadState === LOAD_STATES.LOADED && o$2("div", {
            class: "fjs-taglist-tags",
            children: values.map(v => {
              return o$2("div", {
                class: classNames('fjs-taglist-tag', {
                  'fjs-disabled': disabled
                }),
                onMouseDown: e => e.preventDefault(),
                children: [o$2("span", {
                  class: "fjs-taglist-tag-label",
                  children: valueToOptionMap[v] ? valueToOptionMap[v].label : `unexpected value{${v}}`
                }), !disabled && o$2("button", {
                  type: "button",
                  title: "Remove tag",
                  class: "fjs-taglist-tag-remove",
                  onClick: event => onTagRemoveClick(event, v),
                  children: o$2(XMarkIcon, {})
                })]
              });
            })
          }), o$2("input", {
            disabled: disabled,
            class: "fjs-taglist-input",
            ref: searchbarRef,
            id: prefixId(`${id}-search`, formId),
            onChange: onFilterChange,
            type: "text",
            value: filter,
            placeholder: disabled ? '' : 'Search',
            autoComplete: "off",
            onKeyDown: e => onInputKeyDown(e),
            onMouseDown: () => setIsEscapeClose(false),
            onFocus: () => setIsDropdownExpanded(true),
            onBlur: () => {
              setIsDropdownExpanded(false);
              setFilter('');
            }
          })]
        }), o$2("div", {
          class: "fjs-taglist-anchor",
          children: shouldDisplayDropdown && o$2(DropdownList, {
            values: filteredOptions,
            getLabel: o => o.label,
            onValueSelected: o => selectValue(o.value),
            emptyListMessage: hasOptionsLeft ? 'No results' : 'All values selected',
            listenerElement: searchbarRef.current
          })
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Taglist.create = (options = {}) => {
      const defaults = {};

      // provide default values if valuesKey isn't set
      if (!options.valuesKey) {
        defaults.values = [{
          label: 'Value',
          value: 'value'
        }];
      }
      return {
        ...defaults,
        ...options
      };
    };
    Taglist.type = type$3;
    Taglist.label = 'Tag list';
    Taglist.keyed = true;
    Taglist.emptyValue = [];
    Taglist.sanitizeValue = sanitizeMultiSelectValue;
    Taglist.group = 'selection';

    const type$2 = 'text';
    function Text$1(props) {
      const {
        field,
        disableLinks
      } = props;
      const {
        text = '',
        strict = false
      } = field;
      const markdownRenderer = useService('markdownRenderer');

      // feelers => pure markdown
      const markdown = useTemplateEvaluation(text, {
        debug: true,
        strict
      });

      // markdown => safe HTML
      const safeHtml = F$1(() => {
        const html = markdownRenderer.render(markdown);
        return sanitizeHTML(html);
      }, [markdownRenderer, markdown]);
      const componentOverrides = F$1(() => disableLinks ? {
        'a': DisabledLink
      } : {}, [disableLinks]);
      return o$2("div", {
        class: formFieldClasses(type$2),
        children: o$2(Markup, {
          markup: safeHtml,
          components: componentOverrides,
          trim: false
        })
      });
    }
    Text$1.create = (options = {}) => ({
      text: '# Text',
      ...options
    });
    Text$1.type = type$2;
    Text$1.keyed = false;
    Text$1.group = 'presentation';
    Text$1.label = 'Text view';
    function DisabledLink({
      href,
      children
    }) {
      return o$2("a", {
        class: "fjs-disabled-link",
        href: href,
        tabIndex: -1,
        children: children
      });
    }

    const type$1 = 'textfield';
    function Textfield(props) {
      const {
        disabled,
        errors = [],
        field,
        value = ''
      } = props;
      const {
        description,
        id,
        label,
        appearance = {},
        validate = {}
      } = field;
      const {
        prefixAdorner,
        suffixAdorner
      } = appearance;
      const {
        required
      } = validate;
      const onChange = ({
        target
      }) => {
        props.onChange({
          field,
          value: target.value
        });
      };
      const {
        formId
      } = q$1(FormContext$1);
      return o$2("div", {
        class: formFieldClasses(type$1, {
          errors,
          disabled
        }),
        children: [o$2(Label, {
          id: prefixId(id, formId),
          label: label,
          required: required
        }), o$2(InputAdorner, {
          disabled: disabled,
          pre: prefixAdorner,
          post: suffixAdorner,
          children: o$2("input", {
            class: "fjs-input",
            disabled: disabled,
            id: prefixId(id, formId),
            onInput: onChange,
            type: "text",
            value: value
          })
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Textfield.create = (options = {}) => ({
      ...options
    });
    Textfield.type = type$1;
    Textfield.label = 'Text field';
    Textfield.keyed = true;
    Textfield.emptyValue = '';
    Textfield.sanitizeValue = ({
      value
    }) => isArray$5(value) || isObject(value) ? '' : String(value);
    Textfield.group = 'basic-input';

    const type = 'textarea';
    function Textarea(props) {
      const {
        disabled,
        errors = [],
        field,
        value = ''
      } = props;
      const {
        description,
        id,
        label,
        validate = {}
      } = field;
      const {
        required
      } = validate;
      const textareaRef = _();
      const onInput = ({
        target
      }) => {
        props.onChange({
          field,
          value: target.value
        });
      };
      const autoSizeTextarea = T$1(textarea => {
        // Ensures the textarea shrinks back, and improves resizing behavior consistency
        textarea.style.height = '0px';
        const computed = window.getComputedStyle(textarea);
        const calculatedHeight = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + textarea.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));
        const minHeight = 75;
        const maxHeight = 350;
        const displayHeight = Math.max(Math.min(calculatedHeight, maxHeight), minHeight);
        textarea.style.height = `${displayHeight}px`;

        // Overflow is hidden by default to hide scrollbar flickering
        textarea.style.overflow = calculatedHeight > maxHeight ? 'visible' : 'hidden';
      }, []);
      p$1(() => {
        autoSizeTextarea(textareaRef.current);
      }, [autoSizeTextarea, value]);
      const {
        formId
      } = q$1(FormContext$1);
      return o$2("div", {
        class: formFieldClasses(type, {
          errors,
          disabled
        }),
        children: [o$2(Label, {
          id: prefixId(id, formId),
          label: label,
          required: required
        }), o$2("textarea", {
          class: "fjs-textarea",
          disabled: disabled,
          id: prefixId(id, formId),
          onInput: onInput,
          value: value,
          ref: textareaRef
        }), o$2(Description, {
          description: description
        }), o$2(Errors, {
          errors: errors
        })]
      });
    }
    Textarea.create = (options = {}) => ({
      ...options
    });
    Textarea.type = type;
    Textarea.label = 'Text area';
    Textarea.keyed = true;
    Textarea.emptyValue = '';
    Textarea.sanitizeValue = ({
      value
    }) => isArray$5(value) || isObject(value) ? '' : String(value);
    Textarea.group = 'basic-input';

    const formFields = [Button, Checkbox, Checklist, Default, Image, Numberfield, Datetime, Radio, Select, Taglist, Text$1, Textfield, Textarea];

    class FormFields {
      constructor() {
        this._formFields = {};
        formFields.forEach(formField => {
          this.register(formField.type, formField);
        });
      }
      register(type, formField) {
        this._formFields[type] = formField;
      }
      get(type) {
        return this._formFields[type];
      }
    }

    function Renderer(config, eventBus, form, injector) {
      const App = () => {
        const [state, setState] = h(form._getState());
        const formContext = {
          getService(type, strict = true) {
            return injector.get(type, strict);
          },
          formId: form._id
        };
        eventBus.on('changed', newState => {
          setState(newState);
        });
        const onChange = T$1(update => form._update(update), [form]);
        const {
          properties
        } = state;
        const {
          readOnly
        } = properties;
        const onSubmit = T$1(() => {
          if (!readOnly) {
            form.submit();
          }
        }, [form, readOnly]);
        const onReset = T$1(() => form.reset(), [form]);
        const {
          schema
        } = state;
        if (!schema) {
          return null;
        }
        return o$2(FormContext$1.Provider, {
          value: formContext,
          children: o$2(FormComponent, {
            onChange: onChange,
            onSubmit: onSubmit,
            onReset: onReset
          })
        });
      };
      const {
        container
      } = config;
      eventBus.on('form.init', () => {
        B$2(o$2(App, {}), container);
      });
      eventBus.on('form.destroy', () => {
        B$2(null, container);
      });
    }
    Renderer.$inject = ['config.renderer', 'eventBus', 'form', 'injector'];

    var renderModule = {
      __init__: ['formFields', 'renderer'],
      formFields: ['type', FormFields],
      renderer: ['type', Renderer]
    };

    var core = {
      __depends__: [importModule, renderModule],
      eventBus: ['type', EventBus$1],
      formFieldRegistry: ['type', FormFieldRegistry],
      formLayouter: ['type', FormLayouter],
      validator: ['type', Validator]
    };

    /**
     * @typedef { import('./types').Injector } Injector
     * @typedef { import('./types').Data } Data
     * @typedef { import('./types').Errors } Errors
     * @typedef { import('./types').Schema } Schema
     * @typedef { import('./types').FormProperties } FormProperties
     * @typedef { import('./types').FormProperty } FormProperty
     * @typedef { import('./types').FormEvent } FormEvent
     * @typedef { import('./types').FormOptions } FormOptions
     *
     * @typedef { {
     *   data: Data,
     *   initialData: Data,
     *   errors: Errors,
     *   properties: FormProperties,
     *   schema: Schema
     * } } State
     *
     * @typedef { (type:FormEvent, priority:number, handler:Function) => void } OnEventWithPriority
     * @typedef { (type:FormEvent, handler:Function) => void } OnEventWithOutPriority
     * @typedef { OnEventWithPriority & OnEventWithOutPriority } OnEventType
     */

    const ids$2 = new Ids([32, 36, 1]);

    /**
     * The form.
     */
    class Form {
      /**
       * @constructor
       * @param {FormOptions} options
       */
      constructor(options = {}) {
        /**
         * @public
         * @type {OnEventType}
         */
        this.on = this._onEvent;

        /**
         * @public
         * @type {String}
         */
        this._id = ids$2.next();

        /**
         * @private
         * @type {Element}
         */
        this._container = createFormContainer();
        const {
          container,
          injector = this._createInjector(options, this._container),
          properties = {}
        } = options;

        /**
         * @private
         * @type {State}
         */
        this._state = {
          initialData: null,
          data: null,
          properties,
          errors: {},
          schema: null
        };
        this.get = injector.get;
        this.invoke = injector.invoke;
        this.get('eventBus').fire('form.init');
        if (container) {
          this.attachTo(container);
        }
      }
      clear() {
        // clear form services
        this._emit('diagram.clear');

        // clear diagram services (e.g. EventBus)
        this._emit('form.clear');
      }

      /**
       * Destroy the form, removing it from DOM,
       * if attached.
       */
      destroy() {
        // destroy form services
        this.get('eventBus').fire('form.destroy');

        // destroy diagram services (e.g. EventBus)
        this.get('eventBus').fire('diagram.destroy');
        this._detach(false);
      }

      /**
       * Open a form schema with the given initial data.
       *
       * @param {Schema} schema
       * @param {Data} [data]
       *
       * @return Promise<{ warnings: Array<any> }>
       */
      importSchema(schema, data = {}) {
        return new Promise((resolve, reject) => {
          try {
            this.clear();
            const {
              schema: importedSchema,
              data: initializedData,
              warnings
            } = this.get('importer').importSchema(schema, data);
            this._setState({
              data: initializedData,
              errors: {},
              schema: importedSchema,
              initialData: clone$2(initializedData)
            });
            this._emit('import.done', {
              warnings
            });
            return resolve({
              warnings
            });
          } catch (error) {
            this._emit('import.done', {
              error,
              warnings: error.warnings || []
            });
            return reject(error);
          }
        });
      }

      /**
       * Submit the form, triggering all field validations.
       *
       * @returns { { data: Data, errors: Errors } }
       */
      submit() {
        const {
          properties
        } = this._getState();
        if (properties.readOnly) {
          throw new Error('form is read-only');
        }
        const data = this._getSubmitData();
        const errors = this.validate();
        const filteredErrors = this._applyConditions(errors, data);
        const result = {
          data,
          errors: filteredErrors
        };
        this._emit('submit', result);
        return result;
      }
      reset() {
        this._emit('reset');
        this._setState({
          data: clone$2(this._state.initialData),
          errors: {}
        });
      }

      /**
       * @returns {Errors}
       */
      validate() {
        const formFieldRegistry = this.get('formFieldRegistry'),
          validator = this.get('validator');
        const {
          data
        } = this._getState();
        const errors = formFieldRegistry.getAll().reduce((errors, field) => {
          const {
            disabled,
            _path
          } = field;
          if (disabled) {
            return errors;
          }
          const value = get$1(data, _path);
          const fieldErrors = validator.validateField(field, value);
          return set$2(errors, [pathStringify(_path)], fieldErrors.length ? fieldErrors : undefined);
        }, /** @type {Errors} */{});
        this._setState({
          errors
        });
        return errors;
      }

      /**
       * @param {Element|string} parentNode
       */
      attachTo(parentNode) {
        if (!parentNode) {
          throw new Error('parentNode required');
        }
        this.detach();
        if (isString$3(parentNode)) {
          parentNode = document.querySelector(parentNode);
        }
        const container = this._container;
        parentNode.appendChild(container);
        this._emit('attach');
      }
      detach() {
        this._detach();
      }

      /**
       * @private
       *
       * @param {boolean} [emit]
       */
      _detach(emit = true) {
        const container = this._container,
          parentNode = container.parentNode;
        if (!parentNode) {
          return;
        }
        if (emit) {
          this._emit('detach');
        }
        parentNode.removeChild(container);
      }

      /**
       * @param {FormProperty} property
       * @param {any} value
       */
      setProperty(property, value) {
        const properties = set$2(this._getState().properties, [property], value);
        this._setState({
          properties
        });
      }

      /**
       * @param {FormEvent} type
       * @param {Function} handler
       */
      off(type, handler) {
        this.get('eventBus').off(type, handler);
      }

      /**
       * @private
       *
       * @param {FormOptions} options
       * @param {Element} container
       *
       * @returns {Injector}
       */
      _createInjector(options, container) {
        const {
          additionalModules = [],
          modules = this._getModules()
        } = options;
        const config = {
          renderer: {
            container
          }
        };
        return createInjector$1([{
          config: ['value', config]
        }, {
          form: ['value', this]
        }, core, ...modules, ...additionalModules]);
      }

      /**
       * @private
       */
      _emit(type, data) {
        this.get('eventBus').fire(type, data);
      }

      /**
       * @internal
       *
       * @param { { add?: boolean, field: any, remove?: number, value?: any } } update
       */
      _update(update) {
        const {
          field,
          value
        } = update;
        const {
          _path
        } = field;
        let {
          data,
          errors
        } = this._getState();
        const validator = this.get('validator');
        const fieldErrors = validator.validateField(field, value);
        set$2(data, _path, value);
        set$2(errors, [pathStringify(_path)], fieldErrors.length ? fieldErrors : undefined);
        this._setState({
          data: clone$2(data),
          errors: clone$2(errors)
        });
      }

      /**
       * @internal
       */
      _getState() {
        return this._state;
      }

      /**
       * @internal
       */
      _setState(state) {
        this._state = {
          ...this._state,
          ...state
        };
        this._emit('changed', this._getState());
      }

      /**
      * @internal
      */
      _getModules() {
        return [ExpressionLanguageModule, MarkdownModule];
      }

      /**
       * @internal
       */
      _onEvent(type, priority, handler) {
        this.get('eventBus').on(type, priority, handler);
      }

      /**
       * @internal
       */
      _getSubmitData() {
        const formFieldRegistry = this.get('formFieldRegistry');
        const formData = this._getState().data;
        const submitData = formFieldRegistry.getAll().reduce((previous, field) => {
          const {
            disabled,
            _path
          } = field;

          // do not submit disabled form fields
          if (disabled || !_path) {
            return previous;
          }
          const value = get$1(formData, _path);
          return {
            ...previous,
            [_path[0]]: value
          };
        }, {});
        const filteredSubmitData = this._applyConditions(submitData, formData);
        return filteredSubmitData;
      }

      /**
       * @internal
       */
      _applyConditions(toFilter, data) {
        const conditionChecker = this.get('conditionChecker');
        return conditionChecker.applyConditions(toFilter, data);
      }
    }

    function e(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}));}

    /**
     * @typedef {import('../util/Types').Axis} Axis
     * @typedef {import('../util/Types').Point} Point
     * @typedef {import('../util/Types').Rect} Rect
     */

    /**
     * Computes the distance between two points.
     *
     * @param {Point} a
     * @param {Point} b
     *
     * @return {number} The distance between the two points.
     */
    function pointDistance(a, b) {
      if (!a || !b) {
        return -1;
      }

      return Math.sqrt(
        Math.pow(a.x - b.x, 2) +
        Math.pow(a.y - b.y, 2)
      );
    }


    /**
     * Returns true if the point r is on the line between p and q.
     *
     * @param {Point} p
     * @param {Point} q
     * @param {Point} r
     * @param {number} [accuracy=5] The accuracy with which to check (lower is better).
     *
     * @return {boolean}
     */
    function pointsOnLine(p, q, r, accuracy) {

      if (typeof accuracy === 'undefined') {
        accuracy = 5;
      }

      if (!p || !q || !r) {
        return false;
      }

      var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),
          dist = pointDistance(p, q);

      // @see http://stackoverflow.com/a/907491/412190
      return Math.abs(val / dist) <= accuracy;
    }


    var ALIGNED_THRESHOLD = 2;

    /**
     * Check whether two points are horizontally or vertically aligned.
     *
     * @param {Point[]|Point} a
     * @param {Point} [b]
     *
     * @return {string|boolean} If and how the two points are aligned ('h', 'v' or `false`).
     */
    function pointsAligned(a, b) {
      var points = Array.from(arguments).flat();

      const axisMap = {
        'x': 'v',
        'y': 'h'
      };

      for (const [ axis, orientation ] of Object.entries(axisMap)) {
        if (pointsAlignedOnAxis(axis, points)) {
          return orientation;
        }
      }

      return false;
    }

    /**
     * @param {Axis} axis
     * @param {Point[]} points
     *
     * @return {boolean}
     */
    function pointsAlignedOnAxis(axis, points) {
      const referencePoint = points[0];

      return every(points, function(point) {
        return Math.abs(referencePoint[axis] - point[axis]) <= ALIGNED_THRESHOLD;
      });
    }

    /**
     * Returns true if the point p is inside the rectangle rect
     *
     * @param {Point} p
     * @param {Rect} rect
     * @param {number} tolerance
     *
     * @return {boolean}
     */
    function pointInRect(p, rect, tolerance) {
      tolerance = tolerance || 0;

      return p.x > rect.x - tolerance &&
             p.y > rect.y - tolerance &&
             p.x < rect.x + rect.width + tolerance &&
             p.y < rect.y + rect.height + tolerance;
    }

    /**
     * This file contains source code adapted from Snap.svg (licensed Apache-2.0).
     *
     * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js
     */

    /* eslint no-fallthrough: "off" */

    var p2s = /,?([a-z]),?/gi,
        toFloat = parseFloat,
        math = Math,
        PI = math.PI,
        mmin = math.min,
        mmax = math.max,
        pow = math.pow,
        abs$4 = math.abs,
        pathCommand = /([a-z])[\s,]*((-?\d*\.?\d*(?:e[-+]?\d+)?[\s]*,?[\s]*)+)/ig,
        pathValues = /(-?\d*\.?\d*(?:e[-+]?\d+)?)[\s]*,?[\s]*/ig;

    var isArray$1 = Array.isArray || function(o) { return o instanceof Array; };

    function hasProperty(obj, property) {
      return Object.prototype.hasOwnProperty.call(obj, property);
    }

    function clone$1(obj) {

      if (typeof obj == 'function' || Object(obj) !== obj) {
        return obj;
      }

      var res = new obj.constructor;

      for (var key in obj) {
        if (hasProperty(obj, key)) {
          res[key] = clone$1(obj[key]);
        }
      }

      return res;
    }

    function repush(array, item) {
      for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {
        return array.push(array.splice(i, 1)[0]);
      }
    }

    function cacher(f) {

      function newf() {

        var arg = Array.prototype.slice.call(arguments, 0),
            args = arg.join('\u2400'),
            cache = newf.cache = newf.cache || {},
            count = newf.count = newf.count || [];

        if (hasProperty(cache, args)) {
          repush(count, args);
          return cache[args];
        }

        count.length >= 1e3 && delete cache[count.shift()];
        count.push(args);
        cache[args] = f.apply(0, arg);

        return cache[args];
      }
      return newf;
    }

    function parsePathString(pathString) {

      if (!pathString) {
        return null;
      }

      var pth = paths(pathString);

      if (pth.arr) {
        return clone$1(pth.arr);
      }

      var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },
          data = [];

      if (isArray$1(pathString) && isArray$1(pathString[0])) { // rough assumption
        data = clone$1(pathString);
      }

      if (!data.length) {

        String(pathString).replace(pathCommand, function(a, b, c) {
          var params = [],
              name = b.toLowerCase();

          c.replace(pathValues, function(a, b) {
            b && params.push(+b);
          });

          if (name == 'm' && params.length > 2) {
            data.push([b].concat(params.splice(0, 2)));
            name = 'l';
            b = b == 'm' ? 'l' : 'L';
          }

          while (params.length >= paramCounts[name]) {
            data.push([b].concat(params.splice(0, paramCounts[name])));
            if (!paramCounts[name]) {
              break;
            }
          }
        });
      }

      data.toString = paths.toString;
      pth.arr = clone$1(data);

      return data;
    }

    function paths(ps) {
      var p = paths.ps = paths.ps || {};

      if (p[ps]) {
        p[ps].sleep = 100;
      } else {
        p[ps] = {
          sleep: 100
        };
      }

      setTimeout(function() {
        for (var key in p) {
          if (hasProperty(p, key) && key != ps) {
            p[key].sleep--;
            !p[key].sleep && delete p[key];
          }
        }
      });

      return p[ps];
    }

    function rectBBox(x, y, width, height) {

      if (arguments.length === 1) {
        y = x.y;
        width = x.width;
        height = x.height;
        x = x.x;
      }

      return {
        x: x,
        y: y,
        width: width,
        height: height,
        x2: x + width,
        y2: y + height
      };
    }

    function pathToString() {
      return this.join(',').replace(p2s, '$1');
    }

    function pathClone(pathArray) {
      var res = clone$1(pathArray);
      res.toString = pathToString;
      return res;
    }

    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
      var t1 = 1 - t,
          t13 = pow(t1, 3),
          t12 = pow(t1, 2),
          t2 = t * t,
          t3 = t2 * t,
          x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,
          y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;

      return {
        x: fixError(x),
        y: fixError(y)
      };
    }

    function bezierBBox(points) {

      var bbox = curveBBox.apply(null, points);

      return rectBBox(
        bbox.x0,
        bbox.y0,
        bbox.x1 - bbox.x0,
        bbox.y1 - bbox.y0
      );
    }

    function isPointInsideBBox$2(bbox, x, y) {
      return x >= bbox.x &&
        x <= bbox.x + bbox.width &&
        y >= bbox.y &&
        y <= bbox.y + bbox.height;
    }

    function isBBoxIntersect(bbox1, bbox2) {
      bbox1 = rectBBox(bbox1);
      bbox2 = rectBBox(bbox2);
      return isPointInsideBBox$2(bbox2, bbox1.x, bbox1.y)
        || isPointInsideBBox$2(bbox2, bbox1.x2, bbox1.y)
        || isPointInsideBBox$2(bbox2, bbox1.x, bbox1.y2)
        || isPointInsideBBox$2(bbox2, bbox1.x2, bbox1.y2)
        || isPointInsideBBox$2(bbox1, bbox2.x, bbox2.y)
        || isPointInsideBBox$2(bbox1, bbox2.x2, bbox2.y)
        || isPointInsideBBox$2(bbox1, bbox2.x, bbox2.y2)
        || isPointInsideBBox$2(bbox1, bbox2.x2, bbox2.y2)
        || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x
            || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)
        && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y
            || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
    }

    function base3(t, p1, p2, p3, p4) {
      var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,
          t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
      return t * t2 - 3 * p1 + 3 * p2;
    }

    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {

      if (z == null) {
        z = 1;
      }

      z = z > 1 ? 1 : z < 0 ? 0 : z;

      var z2 = z / 2,
          n = 12,
          Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],
          Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],
          sum = 0;

      for (var i = 0; i < n; i++) {
        var ct = z2 * Tvalues[i] + z2,
            xbase = base3(ct, x1, x2, x3, x4),
            ybase = base3(ct, y1, y2, y3, y4),
            comb = xbase * xbase + ybase * ybase;

        sum += Cvalues[i] * math.sqrt(comb);
      }

      return z2 * sum;
    }


    function intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {

      if (
        mmax(x1, x2) < mmin(x3, x4) ||
          mmin(x1, x2) > mmax(x3, x4) ||
          mmax(y1, y2) < mmin(y3, y4) ||
          mmin(y1, y2) > mmax(y3, y4)
      ) {
        return;
      }

      var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),
          ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),
          denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

      if (!denominator) {
        return;
      }

      var px = fixError(nx / denominator),
          py = fixError(ny / denominator),
          px2 = +px.toFixed(2),
          py2 = +py.toFixed(2);

      if (
        px2 < +mmin(x1, x2).toFixed(2) ||
          px2 > +mmax(x1, x2).toFixed(2) ||
          px2 < +mmin(x3, x4).toFixed(2) ||
          px2 > +mmax(x3, x4).toFixed(2) ||
          py2 < +mmin(y1, y2).toFixed(2) ||
          py2 > +mmax(y1, y2).toFixed(2) ||
          py2 < +mmin(y3, y4).toFixed(2) ||
          py2 > +mmax(y3, y4).toFixed(2)
      ) {
        return;
      }

      return { x: px, y: py };
    }

    function fixError(number) {
      return Math.round(number * 100000000000) / 100000000000;
    }

    function findBezierIntersections(bez1, bez2, justCount) {
      var bbox1 = bezierBBox(bez1),
          bbox2 = bezierBBox(bez2);

      if (!isBBoxIntersect(bbox1, bbox2)) {
        return justCount ? 0 : [];
      }

      // As an optimization, lines will have only 1 segment

      var l1 = bezlen.apply(0, bez1),
          l2 = bezlen.apply(0, bez2),
          n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,
          n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,
          dots1 = [],
          dots2 = [],
          xy = {},
          res = justCount ? 0 : [];

      for (var i = 0; i < n1 + 1; i++) {
        var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));
        dots1.push({ x: p.x, y: p.y, t: i / n1 });
      }

      for (i = 0; i < n2 + 1; i++) {
        p = findDotsAtSegment.apply(0, bez2.concat(i / n2));
        dots2.push({ x: p.x, y: p.y, t: i / n2 });
      }

      for (i = 0; i < n1; i++) {

        for (var j = 0; j < n2; j++) {
          var di = dots1[i],
              di1 = dots1[i + 1],
              dj = dots2[j],
              dj1 = dots2[j + 1],
              ci = abs$4(di1.x - di.x) < .01 ? 'y' : 'x',
              cj = abs$4(dj1.x - dj.x) < .01 ? 'y' : 'x',
              is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),
              key;

          if (is) {
            key = is.x.toFixed(9) + '#' + is.y.toFixed(9);

            if (xy[key]) {
              continue;
            }

            xy[key] = true;

            var t1 = di.t + abs$4((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),
                t2 = dj.t + abs$4((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);

            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {

              if (justCount) {
                res++;
              } else {
                res.push({
                  x: is.x,
                  y: is.y,
                  t1: t1,
                  t2: t2
                });
              }
            }
          }
        }
      }

      return res;
    }


    /**
     * Find or counts the intersections between two SVG paths.
     *
     * Returns a number in counting mode and a list of intersections otherwise.
     *
     * A single intersection entry contains the intersection coordinates (x, y)
     * as well as additional information regarding the intersecting segments
     * on each path (segment1, segment2) and the relative location of the
     * intersection on these segments (t1, t2).
     *
     * The path may be an SVG path string or a list of path components
     * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.
     *
     * @example
     *
     * var intersections = findPathIntersections(
     *   'M0,0L100,100',
     *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]
     * );
     *
     * // intersections = [
     * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }
     * // ]
     *
     * @param {String|Array<PathDef>} path1
     * @param {String|Array<PathDef>} path2
     * @param {Boolean} [justCount=false]
     *
     * @return {Array<Intersection>|Number}
     */
    function findPathIntersections(path1, path2, justCount) {
      path1 = pathToCurve(path1);
      path2 = pathToCurve(path2);

      var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,
          res = justCount ? 0 : [];

      for (var i = 0, ii = path1.length; i < ii; i++) {
        var pi = path1[i];

        if (pi[0] == 'M') {
          x1 = x1m = pi[1];
          y1 = y1m = pi[2];
        } else {

          if (pi[0] == 'C') {
            bez1 = [x1, y1].concat(pi.slice(1));
            x1 = bez1[6];
            y1 = bez1[7];
          } else {
            bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
            x1 = x1m;
            y1 = y1m;
          }

          for (var j = 0, jj = path2.length; j < jj; j++) {
            var pj = path2[j];

            if (pj[0] == 'M') {
              x2 = x2m = pj[1];
              y2 = y2m = pj[2];
            } else {

              if (pj[0] == 'C') {
                bez2 = [x2, y2].concat(pj.slice(1));
                x2 = bez2[6];
                y2 = bez2[7];
              } else {
                bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
                x2 = x2m;
                y2 = y2m;
              }

              var intr = findBezierIntersections(bez1, bez2, justCount);

              if (justCount) {
                res += intr;
              } else {

                for (var k = 0, kk = intr.length; k < kk; k++) {
                  intr[k].segment1 = i;
                  intr[k].segment2 = j;
                  intr[k].bez1 = bez1;
                  intr[k].bez2 = bez2;
                }

                res = res.concat(intr);
              }
            }
          }
        }
      }

      return res;
    }


    function pathToAbsolute(pathArray) {
      var pth = paths(pathArray);

      if (pth.abs) {
        return pathClone(pth.abs);
      }

      if (!isArray$1(pathArray) || !isArray$1(pathArray && pathArray[0])) { // rough assumption
        pathArray = parsePathString(pathArray);
      }

      if (!pathArray || !pathArray.length) {
        return [['M', 0, 0]];
      }

      var res = [],
          x = 0,
          y = 0,
          mx = 0,
          my = 0,
          start = 0,
          pa0;

      if (pathArray[0][0] == 'M') {
        x = +pathArray[0][1];
        y = +pathArray[0][2];
        mx = x;
        my = y;
        start++;
        res[0] = ['M', x, y];
      }

      for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
        res.push(r = []);
        pa = pathArray[i];
        pa0 = pa[0];

        if (pa0 != pa0.toUpperCase()) {
          r[0] = pa0.toUpperCase();

          switch (r[0]) {
          case 'A':
            r[1] = pa[1];
            r[2] = pa[2];
            r[3] = pa[3];
            r[4] = pa[4];
            r[5] = pa[5];
            r[6] = +pa[6] + x;
            r[7] = +pa[7] + y;
            break;
          case 'V':
            r[1] = +pa[1] + y;
            break;
          case 'H':
            r[1] = +pa[1] + x;
            break;
          case 'M':
            mx = +pa[1] + x;
            my = +pa[2] + y;
          default:
            for (var j = 1, jj = pa.length; j < jj; j++) {
              r[j] = +pa[j] + ((j % 2) ? x : y);
            }
          }
        } else {
          for (var k = 0, kk = pa.length; k < kk; k++) {
            r[k] = pa[k];
          }
        }
        pa0 = pa0.toUpperCase();

        switch (r[0]) {
        case 'Z':
          x = +mx;
          y = +my;
          break;
        case 'H':
          x = r[1];
          break;
        case 'V':
          y = r[1];
          break;
        case 'M':
          mx = r[r.length - 2];
          my = r[r.length - 1];
        default:
          x = r[r.length - 2];
          y = r[r.length - 1];
        }
      }

      res.toString = pathToString;
      pth.abs = pathClone(res);

      return res;
    }

    function isLine(bez) {
      return (
        bez[0] === bez[2] &&
        bez[1] === bez[3] &&
        bez[4] === bez[6] &&
        bez[5] === bez[7]
      );
    }

    function lineToCurve(x1, y1, x2, y2) {
      return [
        x1, y1, x2,
        y2, x2, y2
      ];
    }

    function qubicToCurve(x1, y1, ax, ay, x2, y2) {
      var _13 = 1 / 3,
          _23 = 2 / 3;

      return [
        _13 * x1 + _23 * ax,
        _13 * y1 + _23 * ay,
        _13 * x2 + _23 * ax,
        _13 * y2 + _23 * ay,
        x2,
        y2
      ];
    }

    function arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {

      // for more information of where this math came from visit:
      // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
      var _120 = PI * 120 / 180,
          rad = PI / 180 * (+angle || 0),
          res = [],
          xy,
          rotate = cacher(function(x, y, rad) {
            var X = x * math.cos(rad) - y * math.sin(rad),
                Y = x * math.sin(rad) + y * math.cos(rad);

            return { x: X, y: Y };
          });

      if (!recursive) {
        xy = rotate(x1, y1, -rad);
        x1 = xy.x;
        y1 = xy.y;
        xy = rotate(x2, y2, -rad);
        x2 = xy.x;
        y2 = xy.y;

        var x = (x1 - x2) / 2,
            y = (y1 - y2) / 2;

        var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);

        if (h > 1) {
          h = math.sqrt(h);
          rx = h * rx;
          ry = h * ry;
        }

        var rx2 = rx * rx,
            ry2 = ry * ry,
            k = (large_arc_flag == sweep_flag ? -1 : 1) *
                math.sqrt(abs$4((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
            cx = k * rx * y / ry + (x1 + x2) / 2,
            cy = k * -ry * x / rx + (y1 + y2) / 2,
            f1 = math.asin(((y1 - cy) / ry).toFixed(9)),
            f2 = math.asin(((y2 - cy) / ry).toFixed(9));

        f1 = x1 < cx ? PI - f1 : f1;
        f2 = x2 < cx ? PI - f2 : f2;
        f1 < 0 && (f1 = PI * 2 + f1);
        f2 < 0 && (f2 = PI * 2 + f2);

        if (sweep_flag && f1 > f2) {
          f1 = f1 - PI * 2;
        }
        if (!sweep_flag && f2 > f1) {
          f2 = f2 - PI * 2;
        }
      } else {
        f1 = recursive[0];
        f2 = recursive[1];
        cx = recursive[2];
        cy = recursive[3];
      }

      var df = f2 - f1;

      if (abs$4(df) > _120) {
        var f2old = f2,
            x2old = x2,
            y2old = y2;

        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
        x2 = cx + rx * math.cos(f2);
        y2 = cy + ry * math.sin(f2);
        res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
      }

      df = f2 - f1;

      var c1 = math.cos(f1),
          s1 = math.sin(f1),
          c2 = math.cos(f2),
          s2 = math.sin(f2),
          t = math.tan(df / 4),
          hx = 4 / 3 * rx * t,
          hy = 4 / 3 * ry * t,
          m1 = [x1, y1],
          m2 = [x1 + hx * s1, y1 - hy * c1],
          m3 = [x2 + hx * s2, y2 - hy * c2],
          m4 = [x2, y2];

      m2[0] = 2 * m1[0] - m2[0];
      m2[1] = 2 * m1[1] - m2[1];

      if (recursive) {
        return [m2, m3, m4].concat(res);
      } else {
        res = [m2, m3, m4].concat(res).join().split(',');
        var newres = [];

        for (var i = 0, ii = res.length; i < ii; i++) {
          newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
        }

        return newres;
      }
    }

    // Returns bounding box of cubic bezier curve.
    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
    // Original version: NISHIO Hirokazu
    // Modifications: https://github.com/timo22345
    function curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {
      var tvalues = [],
          bounds = [[], []],
          a, b, c, t, t1, t2, b2ac, sqrtb2ac;

      for (var i = 0; i < 2; ++i) {

        if (i == 0) {
          b = 6 * x0 - 12 * x1 + 6 * x2;
          a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
          c = 3 * x1 - 3 * x0;
        } else {
          b = 6 * y0 - 12 * y1 + 6 * y2;
          a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
          c = 3 * y1 - 3 * y0;
        }

        if (abs$4(a) < 1e-12) {

          if (abs$4(b) < 1e-12) {
            continue;
          }

          t = -c / b;

          if (0 < t && t < 1) {
            tvalues.push(t);
          }

          continue;
        }

        b2ac = b * b - 4 * c * a;
        sqrtb2ac = math.sqrt(b2ac);

        if (b2ac < 0) {
          continue;
        }

        t1 = (-b + sqrtb2ac) / (2 * a);

        if (0 < t1 && t1 < 1) {
          tvalues.push(t1);
        }

        t2 = (-b - sqrtb2ac) / (2 * a);

        if (0 < t2 && t2 < 1) {
          tvalues.push(t2);
        }
      }

      var j = tvalues.length,
          jlen = j,
          mt;

      while (j--) {
        t = tvalues[j];
        mt = 1 - t;
        bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);
        bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);
      }

      bounds[0][jlen] = x0;
      bounds[1][jlen] = y0;
      bounds[0][jlen + 1] = x3;
      bounds[1][jlen + 1] = y3;
      bounds[0].length = bounds[1].length = jlen + 2;

      return {
        x0: mmin.apply(0, bounds[0]),
        y0: mmin.apply(0, bounds[1]),
        x1: mmax.apply(0, bounds[0]),
        y1: mmax.apply(0, bounds[1])
      };
    }

    function pathToCurve(path) {

      var pth = paths(path);

      // return cached curve, if existing
      if (pth.curve) {
        return pathClone(pth.curve);
      }

      var curvedPath = pathToAbsolute(path),
          attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },
          processPath = function(path, d, pathCommand) {
            var nx, ny;

            if (!path) {
              return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
            }

            !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);

            switch (path[0]) {
            case 'M':
              d.X = path[1];
              d.Y = path[2];
              break;
            case 'A':
              path = ['C'].concat(arcToCurve.apply(0, [d.x, d.y].concat(path.slice(1))));
              break;
            case 'S':
              if (pathCommand == 'C' || pathCommand == 'S') {

                // In 'S' case we have to take into account, if the previous command is C/S.
                nx = d.x * 2 - d.bx;

                // And reflect the previous
                ny = d.y * 2 - d.by;

                // command's control point relative to the current point.
              }
              else {

                // or some else or nothing
                nx = d.x;
                ny = d.y;
              }
              path = ['C', nx, ny].concat(path.slice(1));
              break;
            case 'T':
              if (pathCommand == 'Q' || pathCommand == 'T') {

                // In 'T' case we have to take into account, if the previous command is Q/T.
                d.qx = d.x * 2 - d.qx;

                // And make a reflection similar
                d.qy = d.y * 2 - d.qy;

                // to case 'S'.
              }
              else {

                // or something else or nothing
                d.qx = d.x;
                d.qy = d.y;
              }
              path = ['C'].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]));
              break;
            case 'Q':
              d.qx = path[1];
              d.qy = path[2];
              path = ['C'].concat(qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]));
              break;
            case 'L':
              path = ['C'].concat(lineToCurve(d.x, d.y, path[1], path[2]));
              break;
            case 'H':
              path = ['C'].concat(lineToCurve(d.x, d.y, path[1], d.y));
              break;
            case 'V':
              path = ['C'].concat(lineToCurve(d.x, d.y, d.x, path[1]));
              break;
            case 'Z':
              path = ['C'].concat(lineToCurve(d.x, d.y, d.X, d.Y));
              break;
            }

            return path;
          },

          fixArc = function(pp, i) {

            if (pp[i].length > 7) {
              pp[i].shift();
              var pi = pp[i];

              while (pi.length) {
                pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved
                pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
              }

              pp.splice(i, 1);
              ii = curvedPath.length;
            }
          },

          pathCommands = [], // path commands of original path p
          pfirst = '', // temporary holder for original path command
          pathCommand = ''; // holder for previous path command of original path

      for (var i = 0, ii = curvedPath.length; i < ii; i++) {
        curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command

        if (pfirst != 'C') // C is not saved yet, because it may be result of conversion
        {
          pathCommands[i] = pfirst; // Save current path command
          i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand
        }
        curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath

        if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command
        // which may produce multiple C:s
        // so we have to make sure that C is also C in original path

        fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands

        var seg = curvedPath[i],
            seglen = seg.length;

        attrs.x = seg[seglen - 2];
        attrs.y = seg[seglen - 1];
        attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
        attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
      }

      // cache curve
      pth.curve = pathClone(curvedPath);

      return curvedPath;
    }

    var intersect = findPathIntersections;

    var intersectPaths = /*@__PURE__*/getDefaultExportFromCjs(intersect);

    /**
     * @typedef {import('../core/Types').ElementLike} Element
     * @typedef {import('../core/Types').ConnectionLike} Connection
     *
     * @typedef {import('../util/Types').DirectionTRBL} DirectionTRBL
     * @typedef {import('../util/Types').Point} Point
     * @typedef {import('../util/Types').Rect} Rect
     * @typedef {import('../util/Types').RectTRBL} RectTRBL
     */

    function roundBounds(bounds) {
      return {
        x: Math.round(bounds.x),
        y: Math.round(bounds.y),
        width: Math.round(bounds.width),
        height: Math.round(bounds.height)
      };
    }


    function roundPoint(point) {

      return {
        x: Math.round(point.x),
        y: Math.round(point.y)
      };
    }


    /**
     * Convert the given bounds to a { top, left, bottom, right } descriptor.
     *
     * @param {Point|Rect} bounds
     *
     * @return {RectTRBL}
     */
    function asTRBL(bounds) {
      return {
        top: bounds.y,
        right: bounds.x + (bounds.width || 0),
        bottom: bounds.y + (bounds.height || 0),
        left: bounds.x
      };
    }


    /**
     * Convert a { top, left, bottom, right } to an objects bounds.
     *
     * @param {RectTRBL} trbl
     *
     * @return {Rect}
     */
    function asBounds(trbl) {
      return {
        x: trbl.left,
        y: trbl.top,
        width: trbl.right - trbl.left,
        height: trbl.bottom - trbl.top
      };
    }


    /**
     * Get the mid of the given bounds or point.
     *
     * @param {Point|Rect} bounds
     *
     * @return {Point}
     */
    function getBoundsMid(bounds) {
      return roundPoint({
        x: bounds.x + (bounds.width || 0) / 2,
        y: bounds.y + (bounds.height || 0) / 2
      });
    }


    /**
     * Get the mid of the given Connection.
     *
     * @param {Connection} connection
     *
     * @return {Point}
     */
    function getConnectionMid(connection) {
      var waypoints = connection.waypoints;

      // calculate total length and length of each segment
      var parts = waypoints.reduce(function(parts, point, index) {

        var lastPoint = waypoints[index - 1];

        if (lastPoint) {
          var lastPart = parts[parts.length - 1];

          var startLength = lastPart && lastPart.endLength || 0;
          var length = distance(lastPoint, point);

          parts.push({
            start: lastPoint,
            end: point,
            startLength: startLength,
            endLength: startLength + length,
            length: length
          });
        }

        return parts;
      }, []);

      var totalLength = parts.reduce(function(length, part) {
        return length + part.length;
      }, 0);

      // find which segement contains middle point
      var midLength = totalLength / 2;

      var i = 0;
      var midSegment = parts[i];

      while (midSegment.endLength < midLength) {
        midSegment = parts[++i];
      }

      // calculate relative position on mid segment
      var segmentProgress = (midLength - midSegment.startLength) / midSegment.length;

      var midPoint = {
        x: midSegment.start.x + (midSegment.end.x - midSegment.start.x) * segmentProgress,
        y: midSegment.start.y + (midSegment.end.y - midSegment.start.y) * segmentProgress
      };

      return midPoint;
    }


    /**
     * Get the mid of the given Element.
     *
     * @param {Element} element
     *
     * @return {Point}
     */
    function getMid(element) {
      if (isConnection$9(element)) {
        return getConnectionMid(element);
      }

      return getBoundsMid(element);
    }

    // orientation utils //////////////////////

    /**
     * Get orientation of the given rectangle with respect to
     * the reference rectangle.
     *
     * A padding (positive or negative) may be passed to influence
     * horizontal / vertical orientation and intersection.
     *
     * @param {Rect} rect
     * @param {Rect} reference
     * @param {Point|number} padding
     *
     * @return {DirectionTRBL} the orientation; one of top, top-left, left, ..., bottom, right or intersect.
     */
    function getOrientation(rect, reference, padding) {

      padding = padding || 0;

      // make sure we can use an object, too
      // for individual { x, y } padding
      if (!isObject(padding)) {
        padding = { x: padding, y: padding };
      }


      var rectOrientation = asTRBL(rect),
          referenceOrientation = asTRBL(reference);

      var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,
          right = rectOrientation.left - padding.x >= referenceOrientation.right,
          bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,
          left = rectOrientation.right + padding.x <= referenceOrientation.left;

      var vertical = top ? 'top' : (bottom ? 'bottom' : null),
          horizontal = left ? 'left' : (right ? 'right' : null);

      if (horizontal && vertical) {
        return vertical + '-' + horizontal;
      } else {
        return horizontal || vertical || 'intersect';
      }
    }


    // intersection utils //////////////////////

    /**
     * Get intersection between an element and a line path.
     *
     * @param {string} elementPath
     * @param {string} linePath
     * @param {boolean} cropStart Whether to crop start or end.
     *
     * @return {Point}
     */
    function getElementLineIntersection(elementPath, linePath, cropStart) {

      var intersections = getIntersections(elementPath, linePath);

      // recognize intersections
      // only one -> choose
      // two close together -> choose first
      // two or more distinct -> pull out appropriate one
      // none -> ok (fallback to point itself)
      if (intersections.length === 1) {
        return roundPoint(intersections[0]);
      } else if (intersections.length === 2 && pointDistance(intersections[0], intersections[1]) < 1) {
        return roundPoint(intersections[0]);
      } else if (intersections.length > 1) {

        // sort by intersections based on connection segment +
        // distance from start
        intersections = sortBy(intersections, function(i) {
          var distance = Math.floor(i.t2 * 100) || 1;

          distance = 100 - distance;

          distance = (distance < 10 ? '0' : '') + distance;

          // create a sort string that makes sure we sort
          // line segment ASC + line segment position DESC (for cropStart)
          // line segment ASC + line segment position ASC (for cropEnd)
          return i.segment2 + '#' + distance;
        });

        return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);
      }

      return null;
    }


    function getIntersections(a, b) {
      return intersectPaths(a, b);
    }

    // helpers //////////////////////

    function distance(a, b) {
      return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    }

    function isConnection$9(element) {
      return !!element.waypoints;
    }

    function center(bounds) {
      return {
        x: bounds.x + (bounds.width / 2),
        y: bounds.y + (bounds.height / 2)
      };
    }


    function delta(a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    }

    /**
     * Get the logarithm of x with base 10.
     *
     * @param {number} x
     */
    function log10(x) {
      return Math.log(x) / Math.log(10);
    }

    /**
     * @typedef { import('../model/Types').Element } Element
     * @typedef { import('../model/Types').ModdleElement } ModdleElement
     */

    /**
     * Is an element of the given BPMN type?
     *
     * @param  {Element|ModdleElement} element
     * @param  {string} type
     *
     * @return {boolean}
     */
    function is$2(element, type) {
      var bo = getBusinessObject(element);

      return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);
    }


    /**
     * Return true if element has any of the given types.
     *
     * @param {Element|ModdleElement} element
     * @param {string[]} types
     *
     * @return {boolean}
     */
    function isAny(element, types) {
      return some(types, function(t) {
        return is$2(element, t);
      });
    }

    /**
     * Return the business object for a given element.
     *
     * @param {Element|ModdleElement} element
     *
     * @return {ModdleElement}
     */
    function getBusinessObject(element) {
      return (element && element.businessObject) || element;
    }

    /**
     * Return the di object for a given element.
     *
     * @param {Element} element
     *
     * @return {ModdleElement}
     */
    function getDi(element) {
      return element && element.di;
    }

    /**
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     *
     * @typedef {import('../model/Types').Element} Element
     * @typedef {import('../model/Types').ModdleElement} ModdleElement
     */

    var DEFAULT_LABEL_SIZE$1 = {
      width: 90,
      height: 20
    };

    var FLOW_LABEL_INDENT = 15;


    /**
     * Return true if the given semantic has an external label.
     *
     * @param {Element} semantic
     *
     * @return {boolean}
     */
    function isLabelExternal(semantic) {
      return is$2(semantic, 'bpmn:Event') ||
             is$2(semantic, 'bpmn:Gateway') ||
             is$2(semantic, 'bpmn:DataStoreReference') ||
             is$2(semantic, 'bpmn:DataObjectReference') ||
             is$2(semantic, 'bpmn:DataInput') ||
             is$2(semantic, 'bpmn:DataOutput') ||
             is$2(semantic, 'bpmn:SequenceFlow') ||
             is$2(semantic, 'bpmn:MessageFlow') ||
             is$2(semantic, 'bpmn:Group');
    }

    /**
     * Return true if the given element has an external label.
     *
     * @param {Element} element
     *
     * @return {boolean}
     */
    function hasExternalLabel(element) {
      return isLabel$3(element.label);
    }

    /**
     * Get the position of a sequence flow label.
     *
     * @param  {Point[]} waypoints
     *
     * @return {Point}
     */
    function getFlowLabelPosition(waypoints) {

      // get the waypoints mid
      var mid = waypoints.length / 2 - 1;

      var first = waypoints[Math.floor(mid)];
      var second = waypoints[Math.ceil(mid + 0.01)];

      // get position
      var position = getWaypointsMid(waypoints);

      // calculate angle
      var angle = Math.atan((second.y - first.y) / (second.x - first.x));

      var x = position.x,
          y = position.y;

      if (Math.abs(angle) < Math.PI / 2) {
        y -= FLOW_LABEL_INDENT;
      } else {
        x += FLOW_LABEL_INDENT;
      }

      return { x: x, y: y };
    }


    /**
     * Get the middle of a number of waypoints.
     *
     * @param  {Point[]} waypoints
     *
     * @return {Point}
     */
    function getWaypointsMid(waypoints) {

      var mid = waypoints.length / 2 - 1;

      var first = waypoints[Math.floor(mid)];
      var second = waypoints[Math.ceil(mid + 0.01)];

      return {
        x: first.x + (second.x - first.x) / 2,
        y: first.y + (second.y - first.y) / 2
      };
    }

    /**
     * Get the middle of the external label of an element.
     *
     * @param {Element} element
     *
     * @return {Point}
     */
    function getExternalLabelMid(element) {

      if (element.waypoints) {
        return getFlowLabelPosition(element.waypoints);
      } else if (is$2(element, 'bpmn:Group')) {
        return {
          x: element.x + element.width / 2,
          y: element.y + DEFAULT_LABEL_SIZE$1.height / 2
        };
      } else {
        return {
          x: element.x + element.width / 2,
          y: element.y + element.height + DEFAULT_LABEL_SIZE$1.height / 2
        };
      }
    }


    /**
     * Return the bounds of an elements label, parsed from the elements DI or
     * generated from its bounds.
     *
     * @param {ModdleElement} di
     * @param {Element} element
     *
     * @return {Rect}
     */
    function getExternalLabelBounds(di, element) {

      var mid,
          size,
          bounds,
          label = di.label;

      if (label && label.bounds) {
        bounds = label.bounds;

        size = {
          width: Math.max(DEFAULT_LABEL_SIZE$1.width, bounds.width),
          height: bounds.height
        };

        mid = {
          x: bounds.x + bounds.width / 2,
          y: bounds.y + bounds.height / 2
        };
      } else {

        mid = getExternalLabelMid(element);

        size = DEFAULT_LABEL_SIZE$1;
      }

      return assign$1({
        x: mid.x - size.width / 2,
        y: mid.y - size.height / 2
      }, size);
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isLabel$3(element) {
      return element && !!element.labelTarget;
    }

    /**
     * @typedef {import('../core/Types').ElementLike} ElementLike
     * @typedef {import('../core/EventBus').default} EventBus
     * @typedef {import('./CommandStack').CommandContext} CommandContext
     *
     * @typedef {string|string[]} Events
     * @typedef { (context: CommandContext) => ElementLike[] | void } HandlerFunction
     * @typedef { (context: CommandContext) => void } ComposeHandlerFunction
     */

    var DEFAULT_PRIORITY$2 = 1000;

    /**
     * A utility that can be used to plug into the command execution for
     * extension and/or validation.
     *
     * @class
     * @constructor
     *
     * @example
     *
     * ```javascript
     * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';
     *
     * class CommandLogger extends CommandInterceptor {
     *   constructor(eventBus) {
     *     super(eventBus);
     *
     *   this.preExecute('shape.create', (event) => {
     *     console.log('commandStack.shape-create.preExecute', event);
     *   });
     * }
     * ```
     *
     * @param {EventBus} eventBus
     */
    function CommandInterceptor(eventBus) {

      /**
       * @type {EventBus}
       */
      this._eventBus = eventBus;
    }

    CommandInterceptor.$inject = [ 'eventBus' ];

    function unwrapEvent(fn, that) {
      return function(event) {
        return fn.call(that || null, event.context, event.command, event);
      };
    }


    /**
     * Intercept a command during one of the phases.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {string} [hook] phase to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.on = function(events, hook, priority, handlerFn, unwrap, that) {

      if (isFunction(hook) || isNumber$3(hook)) {
        that = unwrap;
        unwrap = handlerFn;
        handlerFn = priority;
        priority = hook;
        hook = null;
      }

      if (isFunction(priority)) {
        that = unwrap;
        unwrap = handlerFn;
        handlerFn = priority;
        priority = DEFAULT_PRIORITY$2;
      }

      if (isObject(unwrap)) {
        that = unwrap;
        unwrap = false;
      }

      if (!isFunction(handlerFn)) {
        throw new Error('handlerFn must be a function');
      }

      if (!isArray$5(events)) {
        events = [ events ];
      }

      var eventBus = this._eventBus;

      forEach$1(events, function(event) {

        // concat commandStack(.event)?(.hook)?
        var fullEvent = [ 'commandStack', event, hook ].filter(function(e) { return e; }).join('.');

        eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);
      });
    };

    /**
     * Add a <canExecute> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.canExecute = createHook('canExecute');

    /**
     * Add a <preExecute> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.preExecute = createHook('preExecute');

    /**
     * Add a <preExecuted> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.preExecuted = createHook('preExecuted');

    /**
     * Add a <execute> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.execute = createHook('execute');

    /**
     * Add a <executed> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.executed = createHook('executed');

    /**
     * Add a <postExecute> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.postExecute = createHook('postExecute');

    /**
     * Add a <postExecuted> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.postExecuted = createHook('postExecuted');

    /**
     * Add a <revert> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.revert = createHook('revert');

    /**
     * Add a <reverted> phase of command interceptor.
     *
     * @param {Events} [events] command(s) to intercept
     * @param {number} [priority]
     * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
     * @param {boolean} [unwrap] whether the event should be unwrapped
     * @param {any} [that]
     */
    CommandInterceptor.prototype.reverted = createHook('reverted');

    /*
     * Add prototype methods for each phase of command execution (e.g. execute,
     * revert).
     *
     * @param {string} hook
     *
     * @return { (
     *   events?: Events,
     *   priority?: number,
     *   handlerFn: ComposeHandlerFunction|HandlerFunction,
     *   unwrap?: boolean
     * ) => any }
     */
    function createHook(hook) {

      /**
       * @this {CommandInterceptor}
       *
       * @param {Events} [events]
       * @param {number} [priority]
       * @param {ComposeHandlerFunction|HandlerFunction} handlerFn
       * @param {boolean} [unwrap]
       * @param {any} [that]
       */
      const hookFn = function(events, priority, handlerFn, unwrap, that) {

        if (isFunction(events) || isNumber$3(events)) {
          that = unwrap;
          unwrap = handlerFn;
          handlerFn = priority;
          priority = events;
          events = null;
        }

        this.on(events, hook, priority, handlerFn, unwrap, that);
      };

      return hookFn;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     *
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
     */

    var ALIGNMENTS = [
      'top',
      'bottom',
      'left',
      'right'
    ];

    var ELEMENT_LABEL_DISTANCE$1 = 10;

    /**
     * A component that makes sure that external labels are added
     * together with respective elements and properly updated (DI wise)
     * during move.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function AdaptiveLabelPositioningBehavior(eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);

      this.postExecuted([
        'connection.create',
        'connection.layout',
        'connection.updateWaypoints'
      ], function(event) {
        var context = event.context,
            connection = context.connection,
            source = connection.source,
            target = connection.target,
            hints = context.hints || {};

        if (hints.createElementsBehavior !== false) {
          checkLabelAdjustment(source);
          checkLabelAdjustment(target);
        }
      });


      this.postExecuted([
        'label.create'
      ], function(event) {
        var context = event.context,
            shape = context.shape,
            hints = context.hints || {};

        if (hints.createElementsBehavior !== false) {
          checkLabelAdjustment(shape.labelTarget);
        }
      });


      this.postExecuted([
        'elements.create'
      ], function(event) {
        var context = event.context,
            elements = context.elements,
            hints = context.hints || {};

        if (hints.createElementsBehavior !== false) {
          elements.forEach(function(element) {
            checkLabelAdjustment(element);
          });
        }
      });

      function checkLabelAdjustment(element) {

        // skip non-existing labels
        if (!hasExternalLabel(element)) {
          return;
        }

        var optimalPosition = getOptimalPosition(element);

        // no optimal position found
        if (!optimalPosition) {
          return;
        }

        adjustLabelPosition(element, optimalPosition);
      }

      function adjustLabelPosition(element, orientation) {

        var elementMid = getMid(element),
            label = element.label,
            labelMid = getMid(label);

        // ignore labels that are being created
        if (!label.parent) {
          return;
        }

        var elementTrbl = asTRBL(element);

        var newLabelMid;

        switch (orientation) {
        case 'top':
          newLabelMid = {
            x: elementMid.x,
            y: elementTrbl.top - ELEMENT_LABEL_DISTANCE$1 - label.height / 2
          };

          break;

        case 'left':

          newLabelMid = {
            x: elementTrbl.left - ELEMENT_LABEL_DISTANCE$1 - label.width / 2,
            y: elementMid.y
          };

          break;

        case 'bottom':

          newLabelMid = {
            x: elementMid.x,
            y: elementTrbl.bottom + ELEMENT_LABEL_DISTANCE$1 + label.height / 2
          };

          break;

        case 'right':

          newLabelMid = {
            x: elementTrbl.right + ELEMENT_LABEL_DISTANCE$1 + label.width / 2,
            y: elementMid.y
          };

          break;
        }

        var delta$1 = delta(newLabelMid, labelMid);

        modeling.moveShape(label, delta$1);
      }

    }

    e(AdaptiveLabelPositioningBehavior, CommandInterceptor);

    AdaptiveLabelPositioningBehavior.$inject = [
      'eventBus',
      'modeling'
    ];


    // helpers //////////////////////

    /**
     * Return alignments which are taken by a boundary's host element
     *
     * @param {Shape} element
     *
     * @return {DirectionTRBL[]}
     */
    function getTakenHostAlignments(element) {

      var hostElement = element.host,
          elementMid = getMid(element),
          hostOrientation = getOrientation(elementMid, hostElement);

      var freeAlignments;

      // check whether there is a multi-orientation, e.g. 'top-left'
      if (hostOrientation.indexOf('-') >= 0) {
        freeAlignments = hostOrientation.split('-');
      } else {
        freeAlignments = [ hostOrientation ];
      }

      var takenAlignments = ALIGNMENTS.filter(function(alignment) {

        return freeAlignments.indexOf(alignment) === -1;
      });

      return takenAlignments;

    }

    /**
     * Return alignments which are taken by related connections
     *
     * @param {Element} element
     *
     * @return {DirectionTRBL[]}
     */
    function getTakenConnectionAlignments(element) {

      var elementMid = getMid(element);

      var takenAlignments = [].concat(
        element.incoming.map(function(c) {
          return c.waypoints[c.waypoints.length - 2 ];
        }),
        element.outgoing.map(function(c) {
          return c.waypoints[1];
        })
      ).map(function(point) {
        return getApproximateOrientation(elementMid, point);
      });

      return takenAlignments;
    }

    /**
     * Return the optimal label position around an element
     * or `undefined`, if none was found.
     *
     * @param  {Element} element
     *
     * @return {DirectionTRBL|undefined}
     */
    function getOptimalPosition(element) {

      var labelMid = getMid(element.label);

      var elementMid = getMid(element);

      var labelOrientation = getApproximateOrientation(elementMid, labelMid);

      if (!isAligned(labelOrientation)) {
        return;
      }

      var takenAlignments = getTakenConnectionAlignments(element);

      if (element.host) {
        var takenHostAlignments = getTakenHostAlignments(element);

        takenAlignments = takenAlignments.concat(takenHostAlignments);
      }

      var freeAlignments = ALIGNMENTS.filter(function(alignment) {

        return takenAlignments.indexOf(alignment) === -1;
      });

      // NOTHING TO DO; label already aligned a.O.K.
      if (freeAlignments.indexOf(labelOrientation) !== -1) {
        return;
      }

      return freeAlignments[0];
    }

    function getApproximateOrientation(p0, p1) {
      return getOrientation(p1, p0, 5);
    }

    function isAligned(orientation) {
      return ALIGNMENTS.indexOf(orientation) !== -1;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     */

    function AppendBehavior(eventBus) {

      CommandInterceptor.call(this, eventBus);

      // assign correct shape position unless already set

      this.preExecute('shape.append', function(context) {

        var source = context.source,
            shape = context.shape;

        if (!context.position) {

          if (is$2(shape, 'bpmn:TextAnnotation')) {
            context.position = {
              x: source.x + source.width / 2 + 75,
              y: source.y - 50 - shape.height / 2
            };
          } else {
            context.position = {
              x: source.x + source.width + 80 + shape.width / 2,
              y: source.y + source.height / 2
            };
          }
        }
      }, true);
    }

    e(AppendBehavior, CommandInterceptor);

    AppendBehavior.$inject = [
      'eventBus'
    ];

    /**
     * @typedef {import('didi').Injector} Injector
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * @param {Injector} injector
     * @param {Modeling} modeling
     */
    function AssociationBehavior(injector, modeling) {
      injector.invoke(CommandInterceptor, this);

      this.postExecute('shape.move', function(context) {
        var newParent = context.newParent,
            shape = context.shape;

        var associations = filter(shape.incoming.concat(shape.outgoing), function(connection) {
          return is$2(connection, 'bpmn:Association');
        });

        forEach$1(associations, function(association) {
          modeling.moveConnection(association, { x: 0, y: 0 }, newParent);
        });
      }, true);
    }

    e(AssociationBehavior, CommandInterceptor);

    AssociationBehavior.$inject = [
      'injector',
      'modeling'
    ];

    /**
     * @typedef {import('../../../model/Types').Element} Element
     */

    /**
     * Return the parent of the element with any of the given types.
     *
     * @param {Element} element
     * @param {string|string[]} anyType
     *
     * @return {Element|null}
     */
    function getParent$1(element, anyType) {

      if (isString$3(anyType)) {
        anyType = [ anyType ];
      }

      while ((element = element.parent)) {
        if (isAny(element, anyType)) {
          return element;
        }
      }

      return null;
    }

    /**
     * @typedef {import('../../replace/BpmnReplace').default} BpmnReplace
     * @typedef {import('didi').Injector} Injector
     */

    var LOW_PRIORITY$h = 500;


    /**
     * Replace intermediate event with boundary event when creating or moving results in attached event.
     *
     * @param {BpmnReplace} bpmnReplace
     * @param {Injector} injector
     */
    function AttachEventBehavior(bpmnReplace, injector) {
      injector.invoke(CommandInterceptor, this);

      this._bpmnReplace = bpmnReplace;

      var self = this;

      this.postExecuted('elements.create', LOW_PRIORITY$h, function(context) {
        var elements = context.elements;

        elements = elements.filter(function(shape) {
          var host = shape.host;

          return shouldReplace$1(shape, host);
        });

        if (elements.length !== 1) {
          return;
        }

        elements.map(function(element) {
          return elements.indexOf(element);
        }).forEach(function(index) {
          var host = elements[ index ];

          context.elements[ index ] = self._replaceShape(elements[ index ], host);
        });
      }, true);


      this.preExecute('elements.move', LOW_PRIORITY$h, function(context) {
        var shapes = context.shapes,
            host = context.newHost;

        if (shapes.length !== 1) {
          return;
        }

        var shape = shapes[0];

        if (shouldReplace$1(shape, host)) {
          context.shapes = [ self._replaceShape(shape, host) ];
        }
      }, true);
    }

    AttachEventBehavior.$inject = [
      'bpmnReplace',
      'injector'
    ];

    e(AttachEventBehavior, CommandInterceptor);

    AttachEventBehavior.prototype._replaceShape = function(shape, host) {
      var eventDefinition = getEventDefinition$1(shape);

      var boundaryEvent = {
        type: 'bpmn:BoundaryEvent',
        host: host
      };

      if (eventDefinition) {
        boundaryEvent.eventDefinitionType = eventDefinition.$type;
      }

      return this._bpmnReplace.replaceElement(shape, boundaryEvent, { layoutConnection: false });
    };


    // helpers //////////

    function getEventDefinition$1(element) {
      var businessObject = getBusinessObject(element),
          eventDefinitions = businessObject.eventDefinitions;

      return eventDefinitions && eventDefinitions[0];
    }

    function shouldReplace$1(shape, host) {
      return !isLabel$3(shape) &&
        isAny(shape, [ 'bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent' ]) && !!host;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * BPMN specific boundary event behavior.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function BoundaryEventBehavior(eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);

      function getBoundaryEvents(element) {
        return filter(element.attachers, function(attacher) {
          return is$2(attacher, 'bpmn:BoundaryEvent');
        });
      }

      // remove after connecting to event-based gateway
      this.postExecute('connection.create', function(event) {
        var source = event.context.source,
            target = event.context.target,
            boundaryEvents = getBoundaryEvents(target);

        if (
          is$2(source, 'bpmn:EventBasedGateway') &&
          is$2(target, 'bpmn:ReceiveTask') &&
          boundaryEvents.length > 0
        ) {
          modeling.removeElements(boundaryEvents);
        }

      });

      // remove after replacing connected gateway with event-based gateway
      this.postExecute('connection.reconnect', function(event) {
        var oldSource = event.context.oldSource,
            newSource = event.context.newSource;

        if (is$2(oldSource, 'bpmn:Gateway') &&
            is$2(newSource, 'bpmn:EventBasedGateway')) {
          forEach$1(newSource.outgoing, function(connection) {
            var target = connection.target,
                attachedboundaryEvents = getBoundaryEvents(target);

            if (is$2(target, 'bpmn:ReceiveTask') &&
                attachedboundaryEvents.length > 0) {
              modeling.removeElements(attachedboundaryEvents);
            }
          });
        }
      });

    }

    BoundaryEventBehavior.$inject = [
      'eventBus',
      'modeling'
    ];

    e(BoundaryEventBehavior, CommandInterceptor);

    /**
     * @typedef {import('didi').Injector} Injector
     */

    /**
     * @param {Injector} injector
     */
    function CreateBehavior(injector) {
      injector.invoke(CommandInterceptor, this);

      this.preExecute('shape.create', 1500, function(event) {
        var context = event.context,
            parent = context.parent,
            shape = context.shape;

        if (is$2(parent, 'bpmn:Lane') && !is$2(shape, 'bpmn:Lane')) {
          context.parent = getParent$1(parent, 'bpmn:Participant');
        }
      });

    }


    CreateBehavior.$inject = [ 'injector' ];

    e(CreateBehavior, CommandInterceptor);

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../BpmnFactory').default} BpmnFactory
     */

    /**
     * BPMN specific create data object behavior.
     *
     * @param {EventBus} eventBus
     * @param {BpmnFactory} bpmnFactory
     */
    function CreateDataObjectBehavior(eventBus, bpmnFactory) {

      CommandInterceptor.call(this, eventBus);

      this.preExecute('shape.create', function(event) {

        var context = event.context,
            shape = context.shape;

        if (is$2(shape, 'bpmn:DataObjectReference') && shape.type !== 'label') {

          // create a DataObject every time a DataObjectReference is created
          var dataObject = bpmnFactory.create('bpmn:DataObject');

          // set the reference to the DataObject
          shape.businessObject.dataObjectRef = dataObject;
        }
      });

    }

    CreateDataObjectBehavior.$inject = [
      'eventBus',
      'bpmnFactory'
    ];

    e(CreateDataObjectBehavior, CommandInterceptor);

    /**
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Shape} Shape
     *
     * @typedef {import('../../type/Types').Rect} Rect
     */

    /**
     * Get parent elements.
     *
     * @param {Element[]} elements
     *
     * @return {Element[]}
     */
    function getParents$1(elements) {

      // find elements that are not children of any other elements
      return filter(elements, function(element) {
        return !find$1(elements, function(e) {
          return e !== element && getParent(element, e);
        });
      });
    }


    function getParent(element, parent) {
      if (!parent) {
        return;
      }

      if (element === parent) {
        return parent;
      }

      if (!element.parent) {
        return;
      }

      return getParent(element.parent, parent);
    }


    /**
     * Adds an element to a collection and returns true if the
     * element was added.
     *
     * @param {Object[]} elements
     * @param {Object} e
     * @param {boolean} unique
     */
    function add$1(elements, e, unique) {
      var canAdd = !unique || elements.indexOf(e) === -1;

      if (canAdd) {
        elements.push(e);
      }

      return canAdd;
    }


    /**
     * Iterate over each element in a collection, calling the iterator function `fn`
     * with (element, index, recursionDepth).
     *
     * Recurse into all elements that are returned by `fn`.
     *
     * @param {Object|Object[]} elements
     * @param {Function} fn iterator function called with (element, index, recursionDepth)
     * @param {number} [depth] maximum recursion depth
     */
    function eachElement(elements, fn, depth) {

      depth = depth || 0;

      if (!isArray$5(elements)) {
        elements = [ elements ];
      }

      forEach$1(elements, function(s, i) {
        var filter = fn(s, i, depth);

        if (isArray$5(filter) && filter.length) {
          eachElement(filter, fn, depth + 1);
        }
      });
    }


    /**
     * Collects self + child elements up to a given depth from a list of elements.
     *
     * @param {Element|Element[]} elements the elements to select the children from
     * @param {boolean} unique whether to return a unique result set (no duplicates)
     * @param {number} maxDepth the depth to search through or -1 for infinite
     *
     * @return {Element[]} found elements
     */
    function selfAndChildren(elements, unique, maxDepth) {
      var result = [],
          processedChildren = [];

      eachElement(elements, function(element, i, depth) {
        add$1(result, element, unique);

        var children = element.children;

        // max traversal depth not reached yet
        if (maxDepth === -1 || depth < maxDepth) {

          // children exist && children not yet processed
          if (children && add$1(processedChildren, children, unique)) {
            return children;
          }
        }
      });

      return result;
    }


    /**
     * Return self + ALL children for a number of elements
     *
     * @param {Element[]} elements to query
     * @param {boolean} allowDuplicates to allow duplicates in the result set
     *
     * @return {Element[]} the collected elements
     */
    function selfAndAllChildren(elements, allowDuplicates) {
      return selfAndChildren(elements, !allowDuplicates, -1);
    }


    /**
     * Gets the the closure for all selected elements,
     * their enclosed children and connections.
     *
     * @param {Element[]} elements
     * @param {boolean} [isTopLevel=true]
     * @param {Object} [closure]
     *
     * @return {Object} newClosure
     */
    function getClosure(elements, isTopLevel, closure) {

      if (isUndefined$3(isTopLevel)) {
        isTopLevel = true;
      }

      if (isObject(isTopLevel)) {
        closure = isTopLevel;
        isTopLevel = true;
      }


      closure = closure || {};

      var allShapes = copyObject(closure.allShapes),
          allConnections = copyObject(closure.allConnections),
          enclosedElements = copyObject(closure.enclosedElements),
          enclosedConnections = copyObject(closure.enclosedConnections);

      var topLevel = copyObject(
        closure.topLevel,
        isTopLevel && groupBy(elements, function(e) { return e.id; })
      );


      function handleConnection(c) {
        if (topLevel[c.source.id] && topLevel[c.target.id]) {
          topLevel[c.id] = [ c ];
        }

        // not enclosed as a child, but maybe logically
        // (connecting two moved elements?)
        if (allShapes[c.source.id] && allShapes[c.target.id]) {
          enclosedConnections[c.id] = enclosedElements[c.id] = c;
        }

        allConnections[c.id] = c;
      }

      function handleElement(element) {

        enclosedElements[element.id] = element;

        if (element.waypoints) {

          // remember connection
          enclosedConnections[element.id] = allConnections[element.id] = element;
        } else {

          // remember shape
          allShapes[element.id] = element;

          // remember all connections
          forEach$1(element.incoming, handleConnection);

          forEach$1(element.outgoing, handleConnection);

          // recurse into children
          return element.children;
        }
      }

      eachElement(elements, handleElement);

      return {
        allShapes: allShapes,
        allConnections: allConnections,
        topLevel: topLevel,
        enclosedConnections: enclosedConnections,
        enclosedElements: enclosedElements
      };
    }

    /**
     * Returns the surrounding bbox for all elements in
     * the array or the element primitive.
     *
     * @param {Element|Element[]} elements
     * @param {boolean} [stopRecursion=false]
     *
     * @return {Rect}
     */
    function getBBox(elements, stopRecursion) {

      stopRecursion = !!stopRecursion;
      if (!isArray$5(elements)) {
        elements = [ elements ];
      }

      var minX,
          minY,
          maxX,
          maxY;

      forEach$1(elements, function(element) {

        // If element is a connection the bbox must be computed first
        var bbox = element;
        if (element.waypoints && !stopRecursion) {
          bbox = getBBox(element.waypoints, true);
        }

        var x = bbox.x,
            y = bbox.y,
            height = bbox.height || 0,
            width = bbox.width || 0;

        if (x < minX || minX === undefined) {
          minX = x;
        }
        if (y < minY || minY === undefined) {
          minY = y;
        }

        if ((x + width) > maxX || maxX === undefined) {
          maxX = x + width;
        }
        if ((y + height) > maxY || maxY === undefined) {
          maxY = y + height;
        }
      });

      return {
        x: minX,
        y: minY,
        height: maxY - minY,
        width: maxX - minX
      };
    }


    function getType(element) {

      if ('waypoints' in element) {
        return 'connection';
      }

      if ('x' in element) {
        return 'shape';
      }

      return 'root';
    }

    function isFrameElement$1(element) {

      return !!(element && element.isFrame);
    }

    // helpers ///////////////////////////////

    function copyObject(src1, src2) {
      return assign$1({}, src1 || {}, src2 || {});
    }

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    var HORIZONTAL_PARTICIPANT_PADDING = 20,
        VERTICAL_PARTICIPANT_PADDING = 20;

    var PARTICIPANT_BORDER_WIDTH = 30;

    var HIGH_PRIORITY$a = 2000;


    /**
     * BPMN-specific behavior for creating participants.
     *
     * @param {Canvas} canvas
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function CreateParticipantBehavior(canvas, eventBus, modeling) {
      CommandInterceptor.call(this, eventBus);

      // fit participant
      eventBus.on([
        'create.start',
        'shape.move.start'
      ], HIGH_PRIORITY$a, function(event) {
        var context = event.context,
            shape = context.shape,
            rootElement = canvas.getRootElement();

        if (!is$2(shape, 'bpmn:Participant') ||
          !is$2(rootElement, 'bpmn:Process') ||
          !rootElement.children.length) {
          return;
        }

        // ignore connections, groups and labels
        var children = rootElement.children.filter(function(element) {
          return !is$2(element, 'bpmn:Group') &&
            !isLabel$3(element) &&
            !isConnection$8(element);
        });

        // ensure for available children to calculate bounds
        if (!children.length) {
          return;
        }

        var childrenBBox = getBBox(children);

        var participantBounds = getParticipantBounds(shape, childrenBBox);

        // assign width and height
        assign$1(shape, participantBounds);

        // assign create constraints
        context.createConstraints = getParticipantCreateConstraints(shape, childrenBBox);
      });

      // force hovering process when creating first participant
      eventBus.on('create.start', HIGH_PRIORITY$a, function(event) {
        var context = event.context,
            shape = context.shape,
            rootElement = canvas.getRootElement(),
            rootElementGfx = canvas.getGraphics(rootElement);

        function ensureHoveringProcess(event) {
          event.element = rootElement;
          event.gfx = rootElementGfx;
        }

        if (is$2(shape, 'bpmn:Participant') && is$2(rootElement, 'bpmn:Process')) {
          eventBus.on('element.hover', HIGH_PRIORITY$a, ensureHoveringProcess);

          eventBus.once('create.cleanup', function() {
            eventBus.off('element.hover', ensureHoveringProcess);
          });
        }
      });

      // turn process into collaboration when creating first participant
      function getOrCreateCollaboration() {
        var rootElement = canvas.getRootElement();

        if (is$2(rootElement, 'bpmn:Collaboration')) {
          return rootElement;
        }

        return modeling.makeCollaboration();
      }

      // when creating mutliple elements through `elements.create` parent must be set to collaboration
      // and passed to `shape.create` as hint
      this.preExecute('elements.create', HIGH_PRIORITY$a, function(context) {
        var elements = context.elements,
            parent = context.parent,
            participant = findParticipant(elements),
            hints;

        if (participant && is$2(parent, 'bpmn:Process')) {
          context.parent = getOrCreateCollaboration();

          hints = context.hints = context.hints || {};

          hints.participant = participant;
          hints.process = parent;
          hints.processRef = getBusinessObject(participant).get('processRef');
        }
      }, true);

      // when creating single shape through `shape.create` parent must be set to collaboration
      // unless it was already set through `elements.create`
      this.preExecute('shape.create', function(context) {
        var parent = context.parent,
            shape = context.shape;

        if (is$2(shape, 'bpmn:Participant') && is$2(parent, 'bpmn:Process')) {
          context.parent = getOrCreateCollaboration();

          context.process = parent;
          context.processRef = getBusinessObject(shape).get('processRef');
        }
      }, true);

      // #execute necessary because #preExecute not called on CommandStack#redo
      this.execute('shape.create', function(context) {
        var hints = context.hints || {},
            process = context.process || hints.process,
            shape = context.shape,
            participant = hints.participant;

        // both shape.create and elements.create must be handled
        if (process && (!participant || shape === participant)) {

          // monkey-patch process ref
          getBusinessObject(shape).set('processRef', getBusinessObject(process));
        }
      }, true);

      this.revert('shape.create', function(context) {
        var hints = context.hints || {},
            process = context.process || hints.process,
            processRef = context.processRef || hints.processRef,
            shape = context.shape,
            participant = hints.participant;

        // both shape.create and elements.create must be handled
        if (process && (!participant || shape === participant)) {

          // monkey-patch process ref
          getBusinessObject(shape).set('processRef', processRef);
        }
      }, true);

      this.postExecute('shape.create', function(context) {
        var hints = context.hints || {},
            process = context.process || context.hints.process,
            shape = context.shape,
            participant = hints.participant;

        if (process) {
          var children = process.children.slice();

          // both shape.create and elements.create must be handled
          if (!participant) {
            modeling.moveElements(children, { x: 0, y: 0 }, shape);
          } else if (shape === participant) {
            modeling.moveElements(children, { x: 0, y: 0 }, participant);
          }
        }
      }, true);
    }

    CreateParticipantBehavior.$inject = [
      'canvas',
      'eventBus',
      'modeling'
    ];

    e(CreateParticipantBehavior, CommandInterceptor);

    // helpers //////////

    function getParticipantBounds(shape, childrenBBox) {
      childrenBBox = {
        width: childrenBBox.width + HORIZONTAL_PARTICIPANT_PADDING * 2 + PARTICIPANT_BORDER_WIDTH,
        height: childrenBBox.height + VERTICAL_PARTICIPANT_PADDING * 2
      };

      var width = Math.max(shape.width, childrenBBox.width),
          height = Math.max(shape.height, childrenBBox.height);

      return {
        x: -width / 2,
        y: -height / 2,
        width: width,
        height: height
      };
    }

    function getParticipantCreateConstraints(shape, childrenBBox) {
      childrenBBox = asTRBL(childrenBBox);

      return {
        bottom: childrenBBox.top + shape.height / 2 - VERTICAL_PARTICIPANT_PADDING,
        left: childrenBBox.right - shape.width / 2 + HORIZONTAL_PARTICIPANT_PADDING,
        top: childrenBBox.bottom - shape.height / 2 + VERTICAL_PARTICIPANT_PADDING,
        right: childrenBBox.left + shape.width / 2 - HORIZONTAL_PARTICIPANT_PADDING - PARTICIPANT_BORDER_WIDTH
      };
    }

    function isConnection$8(element) {
      return !!element.waypoints;
    }

    function findParticipant(elements) {
      return find$1(elements, function(element) {
        return is$2(element, 'bpmn:Participant');
      });
    }

    /**
     * Failsafe remove an element from a collection
     *
     * @param {Array<Object>} [collection]
     * @param {Object} [element]
     *
     * @return {number} the previous index of the element
     */
    function remove$2(collection, element) {

      if (!collection || !element) {
        return -1;
      }

      var idx = collection.indexOf(element);

      if (idx !== -1) {
        collection.splice(idx, 1);
      }

      return idx;
    }

    /**
     * Fail save add an element to the given connection, ensuring
     * it does not yet exist.
     *
     * @param {Array<Object>} collection
     * @param {Object} element
     * @param {number} idx
     */
    function add(collection, element, idx) {

      if (!collection || !element) {
        return;
      }

      if (typeof idx !== 'number') {
        idx = -1;
      }

      var currentIdx = collection.indexOf(element);

      if (currentIdx !== -1) {

        if (currentIdx === idx) {

          // nothing to do, position has not changed
          return;
        } else {

          if (idx !== -1) {

            // remove from current position
            collection.splice(currentIdx, 1);
          } else {

            // already exists in collection
            return;
          }
        }
      }

      if (idx !== -1) {

        // insert at specified position
        collection.splice(idx, 0, element);
      } else {

        // push to end
        collection.push(element);
      }
    }


    /**
     * Fail save get the index of an element in a collection.
     *
     * @param {Array<Object>} collection
     * @param {Object} element
     *
     * @return {number} the index or -1 if collection or element do
     *                  not exist or the element is not contained.
     */
    function indexOf(collection, element) {

      if (!collection || !element) {
        return -1;
      }

      return collection.indexOf(element);
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../BpmnFactory').default} BpmnFactory
     */

    var TARGET_REF_PLACEHOLDER_NAME = '__targetRef_placeholder';


    /**
     * This behavior makes sure we always set a fake
     * DataInputAssociation#targetRef as demanded by the BPMN 2.0
     * XSD schema.
     *
     * The reference is set to a bpmn:Property{ name: '__targetRef_placeholder' }
     * which is created on the fly and cleaned up afterwards if not needed
     * anymore.
     *
     * @param {EventBus} eventBus
     * @param {BpmnFactory} bpmnFactory
     */
    function DataInputAssociationBehavior(eventBus, bpmnFactory) {

      CommandInterceptor.call(this, eventBus);


      this.executed([
        'connection.create',
        'connection.delete',
        'connection.move',
        'connection.reconnect'
      ], ifDataInputAssociation(fixTargetRef));

      this.reverted([
        'connection.create',
        'connection.delete',
        'connection.move',
        'connection.reconnect'
      ], ifDataInputAssociation(fixTargetRef));


      function usesTargetRef(element, targetRef, removedConnection) {

        var inputAssociations = element.get('dataInputAssociations');

        return find$1(inputAssociations, function(association) {
          return association !== removedConnection &&
                 association.targetRef === targetRef;
        });
      }

      function getTargetRef(element, create) {

        var properties = element.get('properties');

        var targetRefProp = find$1(properties, function(p) {
          return p.name === TARGET_REF_PLACEHOLDER_NAME;
        });

        if (!targetRefProp && create) {
          targetRefProp = bpmnFactory.create('bpmn:Property', {
            name: TARGET_REF_PLACEHOLDER_NAME
          });

          add(properties, targetRefProp);
        }

        return targetRefProp;
      }

      function cleanupTargetRef(element, connection) {

        var targetRefProp = getTargetRef(element);

        if (!targetRefProp) {
          return;
        }

        if (!usesTargetRef(element, targetRefProp, connection)) {
          remove$2(element.get('properties'), targetRefProp);
        }
      }

      /**
       * Make sure targetRef is set to a valid property or
       * `null` if the connection is detached.
       *
       * @param {Event} event
       */
      function fixTargetRef(event) {

        var context = event.context,
            connection = context.connection,
            connectionBo = connection.businessObject,
            target = connection.target,
            targetBo = target && target.businessObject,
            newTarget = context.newTarget,
            newTargetBo = newTarget && newTarget.businessObject,
            oldTarget = context.oldTarget || context.target,
            oldTargetBo = oldTarget && oldTarget.businessObject;

        var dataAssociation = connection.businessObject,
            targetRefProp;

        if (oldTargetBo && oldTargetBo !== targetBo) {
          cleanupTargetRef(oldTargetBo, connectionBo);
        }

        if (newTargetBo && newTargetBo !== targetBo) {
          cleanupTargetRef(newTargetBo, connectionBo);
        }

        if (targetBo) {
          targetRefProp = getTargetRef(targetBo, true);
          dataAssociation.targetRef = targetRefProp;
        } else {
          dataAssociation.targetRef = null;
        }
      }
    }

    DataInputAssociationBehavior.$inject = [
      'eventBus',
      'bpmnFactory'
    ];

    e(DataInputAssociationBehavior, CommandInterceptor);


    /**
     * Only call the given function when the event
     * touches a bpmn:DataInputAssociation.
     *
     * @param {Function} fn
     * @return {Function}
     */
    function ifDataInputAssociation(fn) {

      return function(event) {
        var context = event.context,
            connection = context.connection;

        if (is$2(connection, 'bpmn:DataInputAssociation')) {
          return fn(event);
        }
      };
    }

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('../BpmnUpdater').default} BpmnUpdater
     */

    /**
     * @implements {CommandHandler}
     *
     * @param {BpmnUpdater} bpmnUpdater
     */
    function UpdateSemanticParentHandler(bpmnUpdater) {
      this._bpmnUpdater = bpmnUpdater;
    }

    UpdateSemanticParentHandler.$inject = [ 'bpmnUpdater' ];


    UpdateSemanticParentHandler.prototype.execute = function(context) {
      var dataStoreBo = context.dataStoreBo,
          dataStoreDi = context.dataStoreDi,
          newSemanticParent = context.newSemanticParent,
          newDiParent = context.newDiParent;

      context.oldSemanticParent = dataStoreBo.$parent;
      context.oldDiParent = dataStoreDi.$parent;

      // update semantic parent
      this._bpmnUpdater.updateSemanticParent(dataStoreBo, newSemanticParent);

      // update DI parent
      this._bpmnUpdater.updateDiParent(dataStoreDi, newDiParent);

      return [];
    };

    UpdateSemanticParentHandler.prototype.revert = function(context) {
      var dataStoreBo = context.dataStoreBo,
          dataStoreDi = context.dataStoreDi,
          oldSemanticParent = context.oldSemanticParent,
          oldDiParent = context.oldDiParent;

      // update semantic parent
      this._bpmnUpdater.updateSemanticParent(dataStoreBo, oldSemanticParent);

      // update DI parent
      this._bpmnUpdater.updateDiParent(dataStoreDi, oldDiParent);

      return [];
    };

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     */

    /**
     * BPMN specific data store behavior.
     *
     * @param {Canvas} canvas
     * @param {CommandStack} commandStack
     * @param {ElementRegistry} elementRegistry
     * @param {EventBus} eventBus
     */
    function DataStoreBehavior(
        canvas, commandStack, elementRegistry,
        eventBus) {

      CommandInterceptor.call(this, eventBus);

      commandStack.registerHandler('dataStore.updateContainment', UpdateSemanticParentHandler);

      function getFirstParticipantWithProcessRef() {
        return elementRegistry.filter(function(element) {
          return is$2(element, 'bpmn:Participant') && getBusinessObject(element).processRef;
        })[0];
      }

      function getDataStores(element) {
        return element.children.filter(function(child) {
          return is$2(child, 'bpmn:DataStoreReference') && !child.labelTarget;
        });
      }

      function updateDataStoreParent(dataStore, newDataStoreParent) {
        var dataStoreBo = dataStore.businessObject || dataStore;

        newDataStoreParent = newDataStoreParent || getFirstParticipantWithProcessRef();

        if (newDataStoreParent) {
          var newDataStoreParentBo = newDataStoreParent.businessObject || newDataStoreParent;

          commandStack.execute('dataStore.updateContainment', {
            dataStoreBo: dataStoreBo,
            dataStoreDi: getDi(dataStore),
            newSemanticParent: newDataStoreParentBo.processRef || newDataStoreParentBo,
            newDiParent: getDi(newDataStoreParent)
          });
        }
      }


      // disable auto-resize for data stores
      this.preExecute('shape.create', function(event) {

        var context = event.context,
            shape = context.shape;

        if (is$2(shape, 'bpmn:DataStoreReference') &&
            shape.type !== 'label') {

          if (!context.hints) {
            context.hints = {};
          }

          // prevent auto resizing
          context.hints.autoResize = false;
        }
      });


      // disable auto-resize for data stores
      this.preExecute('elements.move', function(event) {
        var context = event.context,
            shapes = context.shapes;

        var dataStoreReferences = shapes.filter(function(shape) {
          return is$2(shape, 'bpmn:DataStoreReference');
        });

        if (dataStoreReferences.length) {
          if (!context.hints) {
            context.hints = {};
          }

          // prevent auto resizing for data store references
          context.hints.autoResize = shapes.filter(function(shape) {
            return !is$2(shape, 'bpmn:DataStoreReference');
          });
        }
      });


      // update parent on data store created
      this.postExecute('shape.create', function(event) {
        var context = event.context,
            shape = context.shape,
            parent = shape.parent;


        if (is$2(shape, 'bpmn:DataStoreReference') &&
            shape.type !== 'label' &&
            is$2(parent, 'bpmn:Collaboration')) {

          updateDataStoreParent(shape);
        }
      });


      // update parent on data store moved
      this.postExecute('shape.move', function(event) {
        var context = event.context,
            shape = context.shape,
            oldParent = context.oldParent,
            parent = shape.parent;

        if (is$2(oldParent, 'bpmn:Collaboration')) {

          // do nothing if not necessary
          return;
        }

        if (is$2(shape, 'bpmn:DataStoreReference') &&
            shape.type !== 'label' &&
            is$2(parent, 'bpmn:Collaboration')) {

          var participant = is$2(oldParent, 'bpmn:Participant') ?
            oldParent :
            getAncestor(oldParent, 'bpmn:Participant');

          updateDataStoreParent(shape, participant);
        }
      });


      // update data store parents on participant or subprocess deleted
      this.postExecute('shape.delete', function(event) {
        var context = event.context,
            shape = context.shape,
            rootElement = canvas.getRootElement();

        if (isAny(shape, [ 'bpmn:Participant', 'bpmn:SubProcess' ])
            && is$2(rootElement, 'bpmn:Collaboration')) {
          getDataStores(rootElement)
            .filter(function(dataStore) {
              return isDescendant(dataStore, shape);
            })
            .forEach(function(dataStore) {
              updateDataStoreParent(dataStore);
            });
        }
      });

      // update data store parents on collaboration -> process
      this.postExecute('canvas.updateRoot', function(event) {
        var context = event.context,
            oldRoot = context.oldRoot,
            newRoot = context.newRoot;

        var dataStores = getDataStores(oldRoot);

        dataStores.forEach(function(dataStore) {

          if (is$2(newRoot, 'bpmn:Process')) {
            updateDataStoreParent(dataStore, newRoot);
          }

        });
      });
    }

    DataStoreBehavior.$inject = [
      'canvas',
      'commandStack',
      'elementRegistry',
      'eventBus',
    ];

    e(DataStoreBehavior, CommandInterceptor);


    // helpers //////////

    function isDescendant(descendant, ancestor) {
      var descendantBo = descendant.businessObject || descendant,
          ancestorBo = ancestor.businessObject || ancestor;

      while (descendantBo.$parent) {
        if (descendantBo.$parent === ancestorBo.processRef || ancestorBo) {
          return true;
        }

        descendantBo = descendantBo.$parent;
      }

      return false;
    }

    function getAncestor(element, type) {

      while (element.parent) {
        if (is$2(element.parent, type)) {
          return element.parent;
        }

        element = element.parent;
      }
    }

    var DEFAULT_CHILD_BOX_PADDING = 20;

    /**
     * @typedef {import('../../core/Types').ElementLike} Element
     * @typedef {import('../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../util/Types').Direction} Direction
     * @typedef {import('../../util/Types').Point} Point
     * @typedef {import('../../util/Types').Rect} Rect
     * @typedef {import('../../util/Types').RectTRBL} RectTRBL
     */

    /**
     * Substract a TRBL from another
     *
     * @param {RectTRBL} trblA
     * @param {RectTRBL} trblB
     *
     * @return {RectTRBL}
     */
    function substractTRBL(trblA, trblB) {
      return {
        top: trblA.top - trblB.top,
        right: trblA.right - trblB.right,
        bottom: trblA.bottom - trblB.bottom,
        left: trblA.left - trblB.left
      };
    }


    /**
     * Resize the given bounds by applying the passed
     * { top, right, bottom, left } delta.
     *
     * @param {Rect} bounds
     * @param {RectTRBL} resize
     *
     * @return {Rect}
     */
    function resizeTRBL(bounds, resize) {
      return {
        x: bounds.x + (resize.left || 0),
        y: bounds.y + (resize.top || 0),
        width: bounds.width - (resize.left || 0) + (resize.right || 0),
        height: bounds.height - (resize.top || 0) + (resize.bottom || 0)
      };
    }

    function asPadding(mayBePadding, defaultValue) {
      if (typeof mayBePadding !== 'undefined') {
        return mayBePadding;
      } else {
        return DEFAULT_CHILD_BOX_PADDING;
      }
    }

    function addPadding$1(bbox, padding) {
      var left, right, top, bottom;

      if (typeof padding === 'object') {
        left = asPadding(padding.left);
        right = asPadding(padding.right);
        top = asPadding(padding.top);
        bottom = asPadding(padding.bottom);
      } else {
        left = right = top = bottom = asPadding(padding);
      }

      return {
        x: bbox.x - left,
        y: bbox.y - top,
        width: bbox.width + left + right,
        height: bbox.height + top + bottom
      };
    }


    /**
     * Is the given element part of the resize
     * targets min boundary box?
     *
     * This is the default implementation which excludes
     * connections and labels.
     *
     * @param {Element} element
     */
    function isBBoxChild(element) {

      // exclude connections
      if (element.waypoints) {
        return false;
      }

      // exclude labels
      if (element.type === 'label') {
        return false;
      }

      return true;
    }

    /**
     * Return children bounding computed from a shapes children
     * or a list of prefiltered children.
     *
     * @param {Shape|Shape[]} shapeOrChildren
     * @param {RectTRBL|number} padding
     *
     * @return {Rect}
     */
    function computeChildrenBBox(shapeOrChildren, padding) {

      var elements;

      // compute based on shape
      if (shapeOrChildren.length === undefined) {

        // grab all the children that are part of the
        // parents children box
        elements = filter(shapeOrChildren.children, isBBoxChild);

      } else {
        elements = shapeOrChildren;
      }

      if (elements.length) {
        return addPadding$1(getBBox(elements), padding);
      }
    }

    /**
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     */

    var abs$3 = Math.abs;


    function getTRBLResize(oldBounds, newBounds) {
      return substractTRBL(asTRBL(newBounds), asTRBL(oldBounds));
    }


    var LANE_PARENTS = [
      'bpmn:Participant',
      'bpmn:Process',
      'bpmn:SubProcess'
    ];

    var LANE_INDENTATION = 30;


    /**
     * Return all lanes that are children of the given shape.
     *
     * @param  {Shape} shape
     * @param  {Shape[]} [collectedShapes]
     *
     * @return {Shape[]}
     */
    function collectLanes(shape, collectedShapes) {

      collectedShapes = collectedShapes || [];

      shape.children.filter(function(s) {
        if (is$2(s, 'bpmn:Lane')) {
          collectLanes(s, collectedShapes);

          collectedShapes.push(s);
        }
      });

      return collectedShapes;
    }


    /**
     * Return all lanes that are direct children of the given shape.
     *
     * @param {Shape} shape
     *
     * @return {Shape[]}
     */
    function getChildLanes(shape) {
      return shape.children.filter(function(c) {
        return is$2(c, 'bpmn:Lane');
      });
    }


    /**
     * Return the parent shape of the given lane.
     *
     * @param {Shape} shape
     *
     * @return {Shape}
     */
    function getLanesRoot(shape) {
      return getParent$1(shape, LANE_PARENTS) || shape;
    }


    /**
     * Compute the required resize operations for lanes
     * adjacent to the given shape, assuming it will be
     * resized to the given new bounds.
     *
     * @param {Shape} shape
     * @param {Rect} newBounds
     *
     * @return { {
     *   shape: Shape;
     *   newBounds: Rect;
     * }[] }
     */
    function computeLanesResize(shape, newBounds) {

      var rootElement = getLanesRoot(shape);

      var initialShapes = is$2(rootElement, 'bpmn:Process') ? [] : [ rootElement ];

      var allLanes = collectLanes(rootElement, initialShapes),
          shapeTrbl = asTRBL(shape),
          shapeNewTrbl = asTRBL(newBounds),
          trblResize = getTRBLResize(shape, newBounds),
          resizeNeeded = [];

      allLanes.forEach(function(other) {

        if (other === shape) {
          return;
        }

        var topResize = 0,
            rightResize = trblResize.right,
            bottomResize = 0,
            leftResize = trblResize.left;

        var otherTrbl = asTRBL(other);

        if (trblResize.top) {
          if (abs$3(otherTrbl.bottom - shapeTrbl.top) < 10) {
            bottomResize = shapeNewTrbl.top - otherTrbl.bottom;
          }

          if (abs$3(otherTrbl.top - shapeTrbl.top) < 5) {
            topResize = shapeNewTrbl.top - otherTrbl.top;
          }
        }

        if (trblResize.bottom) {
          if (abs$3(otherTrbl.top - shapeTrbl.bottom) < 10) {
            topResize = shapeNewTrbl.bottom - otherTrbl.top;
          }

          if (abs$3(otherTrbl.bottom - shapeTrbl.bottom) < 5) {
            bottomResize = shapeNewTrbl.bottom - otherTrbl.bottom;
          }
        }

        if (topResize || rightResize || bottomResize || leftResize) {

          resizeNeeded.push({
            shape: other,
            newBounds: resizeTRBL(other, {
              top: topResize,
              right: rightResize,
              bottom: bottomResize,
              left: leftResize
            })
          });
        }

      });

      return resizeNeeded;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool
     */

    var LOW_PRIORITY$g = 500;


    /**
     * BPMN specific delete lane behavior.
     *
     * @param {EventBus} eventBus
     * @param {SpaceTool} spaceTool
     */
    function DeleteLaneBehavior(eventBus, spaceTool) {

      CommandInterceptor.call(this, eventBus);


      function compensateLaneDelete(shape, oldParent) {

        var siblings = getChildLanes(oldParent);

        var topAffected = [];
        var bottomAffected = [];

        eachElement(siblings, function(element) {

          if (element.y > shape.y) {
            bottomAffected.push(element);
          } else {
            topAffected.push(element);
          }

          return element.children;
        });

        if (!siblings.length) {
          return;
        }

        var offset;

        if (bottomAffected.length && topAffected.length) {
          offset = shape.height / 2;
        } else {
          offset = shape.height;
        }

        var topAdjustments,
            bottomAdjustments;

        if (topAffected.length) {
          topAdjustments = spaceTool.calculateAdjustments(
            topAffected, 'y', offset, shape.y - 10);

          spaceTool.makeSpace(
            topAdjustments.movingShapes,
            topAdjustments.resizingShapes,
            { x: 0, y: offset }, 's');
        }

        if (bottomAffected.length) {
          bottomAdjustments = spaceTool.calculateAdjustments(
            bottomAffected, 'y', -offset, shape.y + shape.height + 10);

          spaceTool.makeSpace(
            bottomAdjustments.movingShapes,
            bottomAdjustments.resizingShapes,
            { x: 0, y: -offset }, 'n');
        }
      }


      /**
       * Adjust sizes of other lanes after lane deletion
       */
      this.postExecuted('shape.delete', LOW_PRIORITY$g, function(event) {

        var context = event.context,
            hints = context.hints,
            shape = context.shape,
            oldParent = context.oldParent;

        // only compensate lane deletes
        if (!is$2(shape, 'bpmn:Lane')) {
          return;
        }

        // compensate root deletes only
        if (hints && hints.nested) {
          return;
        }

        compensateLaneDelete(shape, oldParent);
      });
    }

    DeleteLaneBehavior.$inject = [
      'eventBus',
      'spaceTool'
    ];

    e(DeleteLaneBehavior, CommandInterceptor);

    /**
     * @typedef {import('../../replace/BpmnReplace').default} BpmnReplace
     * @typedef {import('didi').Injector} Injector
     */

    var LOW_PRIORITY$f = 500;


    /**
     * Replace boundary event with intermediate event when creating or moving results in detached event.
     *
     * @param {BpmnReplace} bpmnReplace
     * @param {Injector} injector
     */
    function DetachEventBehavior(bpmnReplace, injector) {
      injector.invoke(CommandInterceptor, this);

      this._bpmnReplace = bpmnReplace;

      var self = this;

      this.postExecuted('elements.create', LOW_PRIORITY$f, function(context) {
        var elements = context.elements;

        elements.filter(function(shape) {
          var host = shape.host;

          return shouldReplace(shape, host);
        }).map(function(shape) {
          return elements.indexOf(shape);
        }).forEach(function(index) {
          context.elements[ index ] = self._replaceShape(elements[ index ]);
        });
      }, true);

      this.preExecute('elements.move', LOW_PRIORITY$f, function(context) {
        var shapes = context.shapes,
            newHost = context.newHost;

        shapes.forEach(function(shape, index) {
          var host = shape.host;

          if (shouldReplace(shape, includes$5(shapes, host) ? host : newHost)) {
            shapes[ index ] = self._replaceShape(shape);
          }
        });
      }, true);
    }

    DetachEventBehavior.$inject = [
      'bpmnReplace',
      'injector'
    ];

    e(DetachEventBehavior, CommandInterceptor);

    DetachEventBehavior.prototype._replaceShape = function(shape) {
      var eventDefinition = getEventDefinition(shape),
          intermediateEvent;

      if (eventDefinition) {
        intermediateEvent = {
          type: 'bpmn:IntermediateCatchEvent',
          eventDefinitionType: eventDefinition.$type
        };
      } else {
        intermediateEvent = {
          type: 'bpmn:IntermediateThrowEvent'
        };
      }

      return this._bpmnReplace.replaceElement(shape, intermediateEvent, { layoutConnection: false });
    };


    // helpers //////////

    function getEventDefinition(element) {
      var businessObject = getBusinessObject(element),
          eventDefinitions = businessObject.eventDefinitions;

      return eventDefinitions && eventDefinitions[0];
    }

    function shouldReplace(shape, host) {
      return !isLabel$3(shape) && is$2(shape, 'bpmn:BoundaryEvent') && !host;
    }

    function includes$5(array, item) {
      return array.indexOf(item) !== -1;
    }

    /**
     * @typedef {import('../util/Types').Point} Point
     */

    var round$7 = Math.round,
        max$4 = Math.max;


    function circlePath(center, r) {
      var x = center.x,
          y = center.y;

      return [
        [ 'M', x, y ],
        [ 'm', 0, -r ],
        [ 'a', r, r, 0, 1, 1, 0, 2 * r ],
        [ 'a', r, r, 0, 1, 1, 0, -2 * r ],
        [ 'z' ]
      ];
    }

    function linePath(points) {
      var segments = [];

      points.forEach(function(p, idx) {
        segments.push([ idx === 0 ? 'M' : 'L', p.x, p.y ]);
      });

      return segments;
    }


    var INTERSECTION_THRESHOLD$1 = 10;

    function getBendpointIntersection(waypoints, reference) {

      var i, w;

      for (i = 0; (w = waypoints[i]); i++) {

        if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD$1) {
          return {
            point: waypoints[i],
            bendpoint: true,
            index: i
          };
        }
      }

      return null;
    }

    function getPathIntersection(waypoints, reference) {

      var intersections = intersectPaths(circlePath(reference, INTERSECTION_THRESHOLD$1), linePath(waypoints));

      var a = intersections[0],
          b = intersections[intersections.length - 1],
          idx;

      if (!a) {

        // no intersection
        return null;
      }

      if (a !== b) {

        if (a.segment2 !== b.segment2) {

          // we use the bendpoint in between both segments
          // as the intersection point

          idx = max$4(a.segment2, b.segment2) - 1;

          return {
            point: waypoints[idx],
            bendpoint: true,
            index: idx
          };
        }

        return {
          point: {
            x: (round$7(a.x + b.x) / 2),
            y: (round$7(a.y + b.y) / 2)
          },
          index: a.segment2
        };
      }

      return {
        point: {
          x: round$7(a.x),
          y: round$7(a.y)
        },
        index: a.segment2
      };
    }

    /**
     * Returns the closest point on the connection towards a given reference point.
     *
     * @param {Point[]} waypoints
     * @param {Point} reference
     *
     * @return {Object} intersection data (segment, point)
     */
    function getApproxIntersection(waypoints, reference) {
      return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../../rules/BpmnRules').default} BpmnRules
     * @typedef {import('../../modeling/Modeling').default} Modeling
     */

    /**
     * @param {EventBus} eventBus
     * @param {BpmnRules} bpmnRules
     * @param {Modeling} modeling
     */
    function DropOnFlowBehavior(eventBus, bpmnRules, modeling) {

      CommandInterceptor.call(this, eventBus);

      /**
       * Reconnect start / end of a connection after
       * dropping an element on a flow.
       */

      function insertShape(shape, targetFlow, positionOrBounds) {
        var waypoints = targetFlow.waypoints,
            waypointsBefore,
            waypointsAfter,
            dockingPoint,
            source,
            target,
            incomingConnection,
            outgoingConnection,
            oldOutgoing = shape.outgoing.slice(),
            oldIncoming = shape.incoming.slice();

        var mid;

        if (isNumber$3(positionOrBounds.width)) {
          mid = getMid(positionOrBounds);
        } else {
          mid = positionOrBounds;
        }

        var intersection = getApproxIntersection(waypoints, mid);

        if (intersection) {
          waypointsBefore = waypoints.slice(0, intersection.index);
          waypointsAfter = waypoints.slice(intersection.index + (intersection.bendpoint ? 1 : 0));

          // due to inaccuracy intersection might have been found
          if (!waypointsBefore.length || !waypointsAfter.length) {
            return;
          }

          dockingPoint = intersection.bendpoint ? waypoints[intersection.index] : mid;

          // if last waypointBefore is inside shape's bounds, ignore docking point
          if (waypointsBefore.length === 1 || !isPointInsideBBox$1(shape, waypointsBefore[waypointsBefore.length - 1])) {
            waypointsBefore.push(copy(dockingPoint));
          }

          // if first waypointAfter is inside shape's bounds, ignore docking point
          if (waypointsAfter.length === 1 || !isPointInsideBBox$1(shape, waypointsAfter[0])) {
            waypointsAfter.unshift(copy(dockingPoint));
          }
        }

        source = targetFlow.source;
        target = targetFlow.target;

        if (bpmnRules.canConnect(source, shape, targetFlow)) {

          // reconnect source -> inserted shape
          modeling.reconnectEnd(targetFlow, shape, waypointsBefore || mid);

          incomingConnection = targetFlow;
        }

        if (bpmnRules.canConnect(shape, target, targetFlow)) {

          if (!incomingConnection) {

            // reconnect inserted shape -> end
            modeling.reconnectStart(targetFlow, shape, waypointsAfter || mid);

            outgoingConnection = targetFlow;
          } else {
            outgoingConnection = modeling.connect(
              shape, target, { type: targetFlow.type, waypoints: waypointsAfter }
            );
          }
        }

        var duplicateConnections = [].concat(

          incomingConnection && filter(oldIncoming, function(connection) {
            return connection.source === incomingConnection.source;
          }) || [],

          outgoingConnection && filter(oldOutgoing, function(connection) {
            return connection.target === outgoingConnection.target;
          }) || []
        );

        if (duplicateConnections.length) {
          modeling.removeElements(duplicateConnections);
        }
      }

      this.preExecute('elements.move', function(context) {

        var newParent = context.newParent,
            shapes = context.shapes,
            delta = context.delta,
            shape = shapes[0];

        if (!shape || !newParent) {
          return;
        }

        // if the new parent is a connection,
        // change it to the new parent's parent
        if (newParent && newParent.waypoints) {
          context.newParent = newParent = newParent.parent;
        }

        var shapeMid = getMid(shape);
        var newShapeMid = {
          x: shapeMid.x + delta.x,
          y: shapeMid.y + delta.y
        };

        // find a connection which intersects with the
        // element's mid point
        var connection = find$1(newParent.children, function(element) {
          var canInsert = bpmnRules.canInsert(shapes, element);

          return canInsert && getApproxIntersection(element.waypoints, newShapeMid);
        });

        if (connection) {
          context.targetFlow = connection;
          context.position = newShapeMid;
        }

      }, true);

      this.postExecuted('elements.move', function(context) {

        var shapes = context.shapes,
            targetFlow = context.targetFlow,
            position = context.position;

        if (targetFlow) {
          insertShape(shapes[0], targetFlow, position);
        }

      }, true);

      this.preExecute('shape.create', function(context) {

        var parent = context.parent,
            shape = context.shape;

        if (bpmnRules.canInsert(shape, parent)) {
          context.targetFlow = parent;
          context.parent = parent.parent;
        }
      }, true);

      this.postExecuted('shape.create', function(context) {

        var shape = context.shape,
            targetFlow = context.targetFlow,
            positionOrBounds = context.position;

        if (targetFlow) {
          insertShape(shape, targetFlow, positionOrBounds);
        }
      }, true);
    }

    e(DropOnFlowBehavior, CommandInterceptor);

    DropOnFlowBehavior.$inject = [
      'eventBus',
      'bpmnRules',
      'modeling'
    ];


    // helpers /////////////////////

    function isPointInsideBBox$1(bbox, point) {
      var x = point.x,
          y = point.y;

      return x >= bbox.x &&
        x <= bbox.x + bbox.width &&
        y >= bbox.y &&
        y <= bbox.y + bbox.height;
    }

    function copy(obj) {
      return assign$1({}, obj);
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function EventBasedGatewayBehavior(eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);

      /**
       * Remove incoming sequence flows of event-based target when creating
       * sequence flow.
       *
       * 1. If source is event-based gateway remove all incoming sequence flows
       * 2. If source is not event-based gateway remove all incoming sequence flows
       * whose source is event-based gateway
       */
      this.preExecuted('connection.create', function(event) {
        var context = event.context,
            connection = context.connection,
            source = context.source,
            target = context.target,
            hints = context.hints;

        if (hints && hints.createElementsBehavior === false) {
          return;
        }

        if (!isSequenceFlow(connection)) {
          return;
        }

        var sequenceFlows = [];

        if (is$2(source, 'bpmn:EventBasedGateway')) {
          sequenceFlows = target.incoming.filter(isSequenceFlow);
        } else {
          sequenceFlows = target.incoming.filter(function(connection) {
            return isSequenceFlow(connection)
              && is$2(connection.source, 'bpmn:EventBasedGateway');
          });
        }

        sequenceFlows.forEach(function(sequenceFlow) {
          modeling.removeConnection(sequenceFlow);
        });
      });

      /**
       * Remove incoming sequence flows of event-based targets when replacing source
       * with event-based gateway.
       */
      this.preExecuted('shape.replace', function(event) {
        var context = event.context,
            newShape = context.newShape;

        if (!is$2(newShape, 'bpmn:EventBasedGateway')) {
          return;
        }

        var targets = newShape.outgoing.filter(isSequenceFlow)
          .reduce(function(targets, sequenceFlow) {
            if (!targets.includes(sequenceFlow.target)) {
              return targets.concat(sequenceFlow.target);
            }

            return targets;
          }, []);

        targets.forEach(function(target) {
          target.incoming.filter(isSequenceFlow).forEach(function(sequenceFlow) {
            const sequenceFlowsFromNewShape = target.incoming.filter(isSequenceFlow).filter(function(sequenceFlow) {
              return sequenceFlow.source === newShape;
            });

            if (sequenceFlow.source !== newShape || sequenceFlowsFromNewShape.length > 1) {
              modeling.removeConnection(sequenceFlow);
            }
          });
        });
      });
    }

    EventBasedGatewayBehavior.$inject = [
      'eventBus',
      'modeling'
    ];

    e(EventBasedGatewayBehavior, CommandInterceptor);

    // helpers //////////

    function isSequenceFlow(connection) {
      return is$2(connection, 'bpmn:SequenceFlow');
    }

    /**
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     */

    var HIGH_PRIORITY$9 = 1500;
    var HIGHEST_PRIORITY = 2000;


    /**
     * Correct hover targets in certain situations to improve diagram interaction.
     *
     * @param {ElementRegistry} elementRegistry
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     */
    function FixHoverBehavior(elementRegistry, eventBus, canvas) {

      eventBus.on([
        'create.hover',
        'create.move',
        'create.out',
        'create.end',
        'shape.move.hover',
        'shape.move.move',
        'shape.move.out',
        'shape.move.end'
      ], HIGH_PRIORITY$9, function(event) {
        var context = event.context,
            shape = context.shape || event.shape,
            hover = event.hover;

        // ensure elements are not dropped onto a bpmn:Lane but onto
        // the underlying bpmn:Participant
        if (is$2(hover, 'bpmn:Lane') && !isAny(shape, [ 'bpmn:Lane', 'bpmn:Participant' ])) {
          event.hover = getLanesRoot(hover);
          event.hoverGfx = elementRegistry.getGraphics(event.hover);
        }

        var rootElement = canvas.getRootElement();

        // ensure bpmn:Group and label elements are dropped
        // always onto the root
        if (hover !== rootElement && (shape.labelTarget || is$2(shape, 'bpmn:Group'))) {
          event.hover = rootElement;
          event.hoverGfx = elementRegistry.getGraphics(event.hover);
        }
      });

      eventBus.on([
        'connect.hover',
        'connect.out',
        'connect.end',
        'connect.cleanup',
        'global-connect.hover',
        'global-connect.out',
        'global-connect.end',
        'global-connect.cleanup'
      ], HIGH_PRIORITY$9, function(event) {
        var hover = event.hover;

        // ensure connections start/end on bpmn:Participant,
        // not the underlying bpmn:Lane
        if (is$2(hover, 'bpmn:Lane')) {
          event.hover = getLanesRoot(hover) || hover;
          event.hoverGfx = elementRegistry.getGraphics(event.hover);
        }
      });


      eventBus.on([
        'bendpoint.move.hover'
      ], HIGH_PRIORITY$9, function(event) {
        var context = event.context,
            hover = event.hover,
            type = context.type;

        // ensure reconnect start/end on bpmn:Participant,
        // not the underlying bpmn:Lane
        if (is$2(hover, 'bpmn:Lane') && /reconnect/.test(type)) {
          event.hover = getLanesRoot(hover) || hover;
          event.hoverGfx = elementRegistry.getGraphics(event.hover);
        }
      });


      eventBus.on([
        'connect.start'
      ], HIGH_PRIORITY$9, function(event) {
        var context = event.context,
            start = context.start;

        // ensure connect start on bpmn:Participant,
        // not the underlying bpmn:Lane
        if (is$2(start, 'bpmn:Lane')) {
          context.start = getLanesRoot(start) || start;
        }
      });


      // allow movement of participants from lanes
      eventBus.on('shape.move.start', HIGHEST_PRIORITY, function(event) {
        var shape = event.shape;

        if (is$2(shape, 'bpmn:Lane')) {
          event.shape = getLanesRoot(shape) || shape;
        }
      });

    }

    FixHoverBehavior.$inject = [
      'elementRegistry',
      'eventBus',
      'canvas'
    ];

    /**
     * @typedef {import('../../BpmnFactory').default} BpmnFactory
     *
     * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
     */

    /**
     * Creates a new bpmn:CategoryValue inside a new bpmn:Category
     *
     * @param {BpmnFactory} bpmnFactory
     *
     * @return {ModdleElement}
     */
    function createCategory(bpmnFactory) {
      return bpmnFactory.create('bpmn:Category');
    }

    /**
     * Creates a new bpmn:CategoryValue inside a new bpmn:Category
     *
     * @param {BpmnFactory} bpmnFactory
     *
     * @return {ModdleElement}
     */
    function createCategoryValue(bpmnFactory) {
      return bpmnFactory.create('bpmn:CategoryValue');
    }

    /**
     * Adds category value to definitions
     *
     * @param {ModdleElement} categoryValue
     * @param {ModdleElement} category
     * @param {ModdleElement} definitions
     *
     * @return {ModdleElement}
     */
    function linkCategoryValue(categoryValue, category, definitions) {
      add(category.get('categoryValue'), categoryValue);
      categoryValue.$parent = category;

      add(definitions.get('rootElements'), category);
      category.$parent = definitions;

      return categoryValue;
    }

    /**
     * Unlink category value from parent
     *
     * @param {ModdleElement} categoryValue
     *
     * @return {ModdleElement}
     */
    function unlinkCategoryValue(categoryValue) {
      var category = categoryValue.$parent;

      if (category) {
        remove$2(category.get('categoryValue'), categoryValue);
        categoryValue.$parent = null;
      }

      return categoryValue;
    }

    /**
     * Unlink category from parent
     *
     * @param {ModdleElement} category
     *
     * @return {ModdleElement}
     */
    function unlinkCategory(category) {
      var definitions = category.$parent;

      if (definitions) {
        remove$2(definitions.get('rootElements'), category);
        category.$parent = null;
      }

      return category;
    }

    /**
     * @typedef {import('../BpmnFactory').default} BpmnFactory
     * @typedef {import('../../../Modeler').default} Modeler
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('didi').Injector} Injector
     * @typedef {import('../../copy-paste/ModdleCopy').default} ModdleCopy
     *
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
     */

    var LOWER_PRIORITY = 770;


    /**
     * BPMN specific group behavior.
     *
     * @param {BpmnFactory} bpmnFactory
     * @param {Modeler} bpmnjs
     * @param {ElementRegistry} elementRegistry
     * @param {EventBus} eventBus
     * @param {Injector} injector
     * @param {ModdleCopy} moddleCopy
     */
    function GroupBehavior(
        bpmnFactory,
        bpmnjs,
        elementRegistry,
        eventBus,
        injector,
        moddleCopy
    ) {
      injector.invoke(CommandInterceptor, this);

      /**
       * Returns all group element in the current registry.
       *
       * @return {Shape[]}
       */
      function getGroupElements() {
        return elementRegistry.filter(function(e) {
          return is$2(e, 'bpmn:Group');
        });
      }

      /**
       * Returns true if given category is referenced in one of the given elements.
       *
       * @param {Element[]} elements
       * @param {ModdleElement} category
       *
       * @return {boolean}
       */
      function isReferencedCategory(elements, category) {
        return elements.some(function(element) {
          var businessObject = getBusinessObject(element);

          var _category = businessObject.categoryValueRef && businessObject.categoryValueRef.$parent;

          return _category === category;
        });
      }

      /**
       * Returns true if given categoryValue is referenced in one of the given elements.
       *
       * @param {Element[]} elements
       * @param {ModdleElement} categoryValue
       *
       * @return {boolean}
       */
      function isReferencedCategoryValue(elements, categoryValue) {
        return elements.some(function(element) {
          var businessObject = getBusinessObject(element);

          return businessObject.categoryValueRef === categoryValue;
        });
      }

      /**
       * Remove category value unless it is still referenced.
       *
       * @param {ModdleElement} categoryValue
       * @param {ModdleElement} category
       * @param {ModdleElement} businessObject
       */
      function removeCategoryValue(categoryValue, category, businessObject) {

        var groups = getGroupElements().filter(function(element) {
          return element.businessObject !== businessObject;
        });

        if (category && !isReferencedCategory(groups, category)) {
          unlinkCategory(category);
        }

        if (categoryValue && !isReferencedCategoryValue(groups, categoryValue)) {
          unlinkCategoryValue(categoryValue);
        }
      }

      /**
       * Add category value.
       *
       * @param {ModdleElement} categoryValue
       * @param {ModdleElement} category
       *
       * @return {ModdleElement}
       */
      function addCategoryValue(categoryValue, category) {
        return linkCategoryValue(categoryValue, category, bpmnjs.getDefinitions());
      }

      function setCategoryValue(element, context) {
        var businessObject = getBusinessObject(element),
            categoryValue = businessObject.categoryValueRef;

        if (!categoryValue) {
          categoryValue =
          businessObject.categoryValueRef =
          context.categoryValue = (
            context.categoryValue || createCategoryValue(bpmnFactory)
          );
        }

        var category = categoryValue.$parent;

        if (!category) {
          category =
          categoryValue.$parent =
          context.category = (
            context.category || createCategory(bpmnFactory)
          );
        }

        addCategoryValue(categoryValue, category, bpmnjs.getDefinitions());
      }

      function unsetCategoryValue(element, context) {
        var category = context.category,
            categoryValue = context.categoryValue,
            businessObject = getBusinessObject(element);

        if (categoryValue) {
          businessObject.categoryValueRef = null;

          removeCategoryValue(categoryValue, category, businessObject);
        } else {
          removeCategoryValue(null, businessObject.categoryValueRef.$parent, businessObject);
        }
      }


      // ensure category + value exist before label editing

      this.execute('label.create', function(event) {
        var context = event.context,
            labelTarget = context.labelTarget;

        if (!is$2(labelTarget, 'bpmn:Group')) {
          return;
        }

        setCategoryValue(labelTarget, context);
      });

      this.revert('label.create', function(event) {
        var context = event.context,
            labelTarget = context.labelTarget;

        if (!is$2(labelTarget, 'bpmn:Group')) {
          return;
        }

        unsetCategoryValue(labelTarget, context);
      });


      // remove referenced category + value when group was deleted

      this.execute('shape.delete', function(event) {

        var context = event.context,
            shape = context.shape,
            businessObject = getBusinessObject(shape);

        if (!is$2(shape, 'bpmn:Group') || shape.labelTarget) {
          return;
        }

        var categoryValue = context.categoryValue = businessObject.categoryValueRef,
            category;

        if (categoryValue) {
          category = context.category = categoryValue.$parent;

          removeCategoryValue(categoryValue, category, businessObject);

          businessObject.categoryValueRef = null;
        }
      });

      this.reverted('shape.delete', function(event) {

        var context = event.context,
            shape = context.shape;

        if (!is$2(shape, 'bpmn:Group') || shape.labelTarget) {
          return;
        }

        var category = context.category,
            categoryValue = context.categoryValue,
            businessObject = getBusinessObject(shape);

        if (categoryValue) {
          businessObject.categoryValueRef = categoryValue;

          addCategoryValue(categoryValue, category);
        }
      });


      // create new category + value when group was created

      this.execute('shape.create', function(event) {
        var context = event.context,
            shape = context.shape;

        if (!is$2(shape, 'bpmn:Group') || shape.labelTarget) {
          return;
        }

        if (getBusinessObject(shape).categoryValueRef) {
          setCategoryValue(shape, context);
        }
      });

      this.reverted('shape.create', function(event) {

        var context = event.context,
            shape = context.shape;

        if (!is$2(shape, 'bpmn:Group') || shape.labelTarget) {
          return;
        }

        if (getBusinessObject(shape).categoryValueRef) {
          unsetCategoryValue(shape, context);
        }
      });


      // copy + paste categoryValueRef with group

      function copy(bo, clone) {
        var targetBo = bpmnFactory.create(bo.$type);

        return moddleCopy.copyElement(bo, targetBo, null, clone);
      }

      eventBus.on('copyPaste.copyElement', LOWER_PRIORITY, function(context) {
        var descriptor = context.descriptor,
            element = context.element;

        if (!is$2(element, 'bpmn:Group') || element.labelTarget) {
          return;
        }

        var groupBo = getBusinessObject(element);

        if (groupBo.categoryValueRef) {

          var categoryValue = groupBo.categoryValueRef;

          descriptor.categoryValue = copy(categoryValue, true);

          if (categoryValue.$parent) {
            descriptor.category = copy(categoryValue.$parent, true);
          }
        }
      });

      eventBus.on('copyPaste.pasteElement', LOWER_PRIORITY, function(context) {
        var descriptor = context.descriptor,
            businessObject = descriptor.businessObject,
            categoryValue = descriptor.categoryValue,
            category = descriptor.category;

        if (categoryValue) {
          categoryValue = businessObject.categoryValueRef = copy(categoryValue);
        }

        if (category) {
          categoryValue.$parent = copy(category);
        }

        delete descriptor.category;
        delete descriptor.categoryValue;
      });

    }

    GroupBehavior.$inject = [
      'bpmnFactory',
      'bpmnjs',
      'elementRegistry',
      'eventBus',
      'injector',
      'moddleCopy'
    ];

    e(GroupBehavior, CommandInterceptor);

    /**
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     */

    /**
     * Returns the intersection between two line segments a and b.
     *
     * @param {Point} l1s
     * @param {Point} l1e
     * @param {Point} l2s
     * @param {Point} l2e
     *
     * @return {Point}
     */
    function lineIntersect(l1s, l1e, l2s, l2e) {

      // if the lines intersect, the result contains the x and y of the
      // intersection (treating the lines as infinite) and booleans for
      // whether line segment 1 or line segment 2 contain the point
      var denominator, a, b, c, numerator;

      denominator = ((l2e.y - l2s.y) * (l1e.x - l1s.x)) - ((l2e.x - l2s.x) * (l1e.y - l1s.y));

      if (denominator == 0) {
        return null;
      }

      a = l1s.y - l2s.y;
      b = l1s.x - l2s.x;
      numerator = ((l2e.x - l2s.x) * a) - ((l2e.y - l2s.y) * b);

      c = numerator / denominator;

      // if we cast these lines infinitely in
      // both directions, they intersect here
      return {
        x: Math.round(l1s.x + (c * (l1e.x - l1s.x))),
        y: Math.round(l1s.y + (c * (l1e.y - l1s.y)))
      };
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     */

    /**
     * Fix broken dockings after DI imports.
     *
     * @param {EventBus} eventBus
     */
    function ImportDockingFix(eventBus) {

      function adjustDocking(startPoint, nextPoint, elementMid) {

        var elementTop = {
          x: elementMid.x,
          y: elementMid.y - 50
        };

        var elementLeft = {
          x: elementMid.x - 50,
          y: elementMid.y
        };

        var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),
            horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);

        // original is horizontal or vertical center cross intersection
        var centerIntersect;

        if (verticalIntersect && horizontalIntersect) {
          if (getDistance$1(verticalIntersect, elementMid) > getDistance$1(horizontalIntersect, elementMid)) {
            centerIntersect = horizontalIntersect;
          } else {
            centerIntersect = verticalIntersect;
          }
        } else {
          centerIntersect = verticalIntersect || horizontalIntersect;
        }

        startPoint.original = centerIntersect;
      }

      function fixDockings(connection) {
        var waypoints = connection.waypoints;

        adjustDocking(
          waypoints[0],
          waypoints[1],
          getMid(connection.source)
        );

        adjustDocking(
          waypoints[waypoints.length - 1],
          waypoints[waypoints.length - 2],
          getMid(connection.target)
        );
      }

      eventBus.on('bpmnElement.added', function(e) {

        var element = e.element;

        if (element.waypoints) {
          fixDockings(element);
        }
      });
    }

    ImportDockingFix.$inject = [
      'eventBus'
    ];


    // helpers //////////////////////

    function getDistance$1(p1, p2) {
      return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     */

    /**
     * A component that makes sure that each created or updated
     * Pool and Lane is assigned an isHorizontal property set to true.
     *
     * @param {EventBus} eventBus
     */
    function IsHorizontalFix(eventBus) {

      CommandInterceptor.call(this, eventBus);

      var elementTypesToUpdate = [
        'bpmn:Participant',
        'bpmn:Lane'
      ];

      this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], function(event) {
        var shape = event.context.shape,
            bo = getBusinessObject(shape),
            di = getDi(shape);

        if (isAny(bo, elementTypesToUpdate) && !di.get('isHorizontal')) {

          // set attribute directly to avoid modeling#updateProperty side effects
          di.set('isHorizontal', true);
        }
      });

    }

    IsHorizontalFix.$inject = [ 'eventBus' ];

    e(IsHorizontalFix, CommandInterceptor);

    /**
     * @typedef { import('../../model').DiagramElement } DiagramElement
     */

    function getLabelAttr(semantic) {
      if (
        is$2(semantic, 'bpmn:FlowElement') ||
        is$2(semantic, 'bpmn:Participant') ||
        is$2(semantic, 'bpmn:Lane') ||
        is$2(semantic, 'bpmn:SequenceFlow') ||
        is$2(semantic, 'bpmn:MessageFlow') ||
        is$2(semantic, 'bpmn:DataInput') ||
        is$2(semantic, 'bpmn:DataOutput')
      ) {
        return 'name';
      }

      if (is$2(semantic, 'bpmn:TextAnnotation')) {
        return 'text';
      }

      if (is$2(semantic, 'bpmn:Group')) {
        return 'categoryValueRef';
      }
    }

    function getCategoryValue(semantic) {
      var categoryValueRef = semantic['categoryValueRef'];

      if (!categoryValueRef) {
        return '';
      }


      return categoryValueRef.value || '';
    }

    /**
     * @param {DiagramElement} element
     *
     * @return {string} label
     */
    function getLabel(element) {
      var semantic = element.businessObject,
          attr = getLabelAttr(semantic);

      if (attr) {

        if (attr === 'categoryValueRef') {

          return getCategoryValue(semantic);
        }

        return semantic[attr] || '';
      }
    }


    /**
     * @param {DiagramElement} element
     * @param {string} text
     *
     * @return {DiagramElement} element
     */
    function setLabel(element, text) {
      var semantic = element.businessObject,
          attr = getLabelAttr(semantic);

      if (attr) {

        if (attr === 'categoryValueRef') {
          semantic['categoryValueRef'].value = text;
        } else {
          semantic[attr] = text;
        }

      }

      return element;
    }

    /**
     * @typedef {import('../../util/Types').Point} Point
     * @typedef {import('../../util/Types').Vector} Vector
     */

    /**
     * Returns the length of a vector.
     *
     * @param {Vector} vector
     *
     * @return {number}
     */
    function vectorLength$1(vector) {
      return Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
    }


    /**
     * Calculates the angle between a line a the Y axis.
     *
     * @param {Point[]} line
     *
     * @return {number}
     */
    function getAngle(line) {

      // return value is between 0, 180 and -180, -0
      // @janstuemmel: maybe replace return a/b with b/a
      return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));
    }


    /**
     * Rotates a vector by a given angle.
     *
     * @param {Vector} vector
     * @param {number} angle The angle in radians.
     *
     * @return {Vector}
     */
    function rotateVector(vector, angle) {
      return (!angle) ? vector : {
        x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,
        y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y
      };
    }


    /**
     * Solves a 2D equation system
     * a + r*b = c, where a,b,c are 2D vectors
     *
     * @param {Vector} a
     * @param {Vector} b
     * @param {Vector} c
     *
     * @return {number}
     */
    function solveLambaSystem(a, b, c) {

      // the 2d system
      var system = [
        { n: a[0] - c[0], lambda: b[0] },
        { n: a[1] - c[1], lambda: b[1] }
      ];

      // solve
      var n = system[0].n * b[0] + system[1].n * b[1],
          l = system[0].lambda * b[0] + system[1].lambda * b[1];

      return -n / l;
    }


    /**
     * Calculates the position of the perpendicular foot.
     *
     * @param {Point} point
     * @param {Point[]} line
     *
     * @return {Point}
     */
    function perpendicularFoot(point, line) {

      var a = line[0], b = line[1];

      // relative position of b from a
      var bd = { x: b.x - a.x, y: b.y - a.y };

      // solve equation system to the parametrized vectors param real value
      var r = solveLambaSystem([ a.x, a.y ], [ bd.x, bd.y ], [ point.x, point.y ]);

      return { x: a.x + r * bd.x, y: a.y + r * bd.y };
    }


    /**
     * Calculates the distance between a point and a line.
     *
     * @param {Point} point
     * @param {Point[]} line
     *
     * @return {number}
     */
    function getDistancePointLine(point, line) {

      var pfPoint = perpendicularFoot(point, line);

      // distance vector
      var connectionVector = {
        x: pfPoint.x - point.x,
        y: pfPoint.y - point.y
      };

      return vectorLength$1(connectionVector);
    }


    /**
     * Calculates the distance between two points.
     *
     * @param {Point} point1
     * @param {Point} point2
     *
     * @return {number}
     */
    function getDistancePointPoint(point1, point2) {

      return vectorLength$1({
        x: point1.x - point2.x,
        y: point1.y - point2.y
      });
    }

    /**
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     *
     * @typedef { {
    *   type: 'bendpoint' | 'segment';
    *   position: Point;
    *   segmentIndex: number;
    *   bendpointIndex?: number;
    *   relativeLocation?: number;
    * } } Attachment
    */

    var sqrt = Math.sqrt,
        min$1 = Math.min,
        max$3 = Math.max,
        abs$2 = Math.abs;

    /**
     * Calculate the square (power to two) of a number.
     *
     * @param {number} n
     *
     * @return {number}
     */
    function sq(n) {
      return Math.pow(n, 2);
    }

    /**
     * Get distance between two points.
     *
     * @param {Point} p1
     * @param {Point} p2
     *
     * @return {number}
     */
    function getDistance(p1, p2) {
      return sqrt(sq(p1.x - p2.x) + sq(p1.y - p2.y));
    }

    /**
     * Return the attachment of the given point on the specified line.
     *
     * The attachment is either a bendpoint (attached to the given point)
     * or segment (attached to a location on a line segment) attachment:
     *
     * ```javascript
     * var pointAttachment = {
     *   type: 'bendpoint',
     *   bendpointIndex: 3,
     *   position: { x: 10, y: 10 } // the attach point on the line
     * };
     *
     * var segmentAttachment = {
     *   type: 'segment',
     *   segmentIndex: 2,
     *   relativeLocation: 0.31, // attach point location between 0 (at start) and 1 (at end)
     *   position: { x: 10, y: 10 } // the attach point on the line
     * };
     * ```
     *
     * @param {Point} point
     * @param {Point[]} line
     *
     * @return {Attachment}
     */
    function getAttachment(point, line) {

      var idx = 0,
          segmentStart,
          segmentEnd,
          segmentStartDistance,
          segmentEndDistance,
          attachmentPosition,
          minDistance,
          intersections,
          attachment,
          attachmentDistance,
          closestAttachmentDistance,
          closestAttachment;

      for (idx = 0; idx < line.length - 1; idx++) {

        segmentStart = line[idx];
        segmentEnd = line[idx + 1];

        if (pointsEqual(segmentStart, segmentEnd)) {
          intersections = [ segmentStart ];
        } else {
          segmentStartDistance = getDistance(point, segmentStart);
          segmentEndDistance = getDistance(point, segmentEnd);

          minDistance = min$1(segmentStartDistance, segmentEndDistance);

          intersections = getCircleSegmentIntersections(segmentStart, segmentEnd, point, minDistance);
        }

        if (intersections.length < 1) {
          throw new Error('expected between [1, 2] circle -> line intersections');
        }

        // one intersection -> bendpoint attachment
        if (intersections.length === 1) {
          attachment = {
            type: 'bendpoint',
            position: intersections[0],
            segmentIndex: idx,
            bendpointIndex: pointsEqual(segmentStart, intersections[0]) ? idx : idx + 1
          };
        }

        // two intersections -> segment attachment
        if (intersections.length === 2) {

          attachmentPosition = mid(intersections[0], intersections[1]);

          attachment = {
            type: 'segment',
            position: attachmentPosition,
            segmentIndex: idx,
            relativeLocation: getDistance(segmentStart, attachmentPosition) / getDistance(segmentStart, segmentEnd)
          };
        }

        attachmentDistance = getDistance(attachment.position, point);

        if (!closestAttachment || closestAttachmentDistance > attachmentDistance) {
          closestAttachment = attachment;
          closestAttachmentDistance = attachmentDistance;
        }
      }

      return closestAttachment;
    }

    /**
     * Get the intersection between a circle and a line segment.
     *
     * @param {Point} s1 segment start
     * @param {Point} s2 segment end
     * @param {Point} cc circle center
     * @param {number} cr circle radius
     *
     * @return {Point[]} intersections
     */
    function getCircleSegmentIntersections(s1, s2, cc, cr) {

      var baX = s2.x - s1.x;
      var baY = s2.y - s1.y;
      var caX = cc.x - s1.x;
      var caY = cc.y - s1.y;

      var a = baX * baX + baY * baY;
      var bBy2 = baX * caX + baY * caY;
      var c = caX * caX + caY * caY - cr * cr;

      var pBy2 = bBy2 / a;
      var q = c / a;

      var disc = pBy2 * pBy2 - q;

      // check against negative value to work around
      // negative, very close to zero results (-4e-15)
      // being produced in some environments
      if (disc < 0 && disc > -0.000001) {
        disc = 0;
      }

      if (disc < 0) {
        return [];
      }

      // if disc == 0 ... dealt with later
      var tmpSqrt = sqrt(disc);
      var abScalingFactor1 = -pBy2 + tmpSqrt;
      var abScalingFactor2 = -pBy2 - tmpSqrt;

      var i1 = {
        x: s1.x - baX * abScalingFactor1,
        y: s1.y - baY * abScalingFactor1
      };

      if (disc === 0) { // abScalingFactor1 == abScalingFactor2
        return [ i1 ];
      }

      var i2 = {
        x: s1.x - baX * abScalingFactor2,
        y: s1.y - baY * abScalingFactor2
      };

      // return only points on line segment
      return [ i1, i2 ].filter(function(p) {
        return isPointInSegment(p, s1, s2);
      });
    }


    function isPointInSegment(p, segmentStart, segmentEnd) {
      return (
        fenced(p.x, segmentStart.x, segmentEnd.x) &&
        fenced(p.y, segmentStart.y, segmentEnd.y)
      );
    }

    function fenced(n, rangeStart, rangeEnd) {

      // use matching threshold to work around
      // precision errors in intersection computation

      return (
        n >= min$1(rangeStart, rangeEnd) - EQUAL_THRESHOLD &&
        n <= max$3(rangeStart, rangeEnd) + EQUAL_THRESHOLD
      );
    }

    /**
     * Calculate the mid between two points.
     *
     * @param {Point} p1
     * @param {Point} p2
     *
     * @return {Point}
     */
    function mid(p1, p2) {

      return {
        x: (p1.x + p2.x) / 2,
        y: (p1.y + p2.y) / 2
      };
    }

    var EQUAL_THRESHOLD = 0.1;

    function pointsEqual(p1, p2) {

      return (
        abs$2(p1.x - p2.x) <= EQUAL_THRESHOLD &&
        abs$2(p1.y - p2.y) <= EQUAL_THRESHOLD
      );
    }

    /**
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     *
     * @typedef {import('./LineAttachmentUtil').Attachment} Attachment
     *
     * @typedef { {
     *   point: Point;
     *   delta: Point;
     * } } AnchorPointAdjustment
     *
     * @typedef { {
     *   segmentMove?: {
    *     segmentStartIndex: number;
    *     newSegmentStartIndex: number;
    *   };
    *   bendpointMove?: {
    *     insert: boolean;
    *     bendpointIndex: number;
    *   };
    *   connectionStart: boolean;
    *   connectionEnd: boolean;
    * } } FindNewLineStartIndexHints
     */

    /**
     * @param {Point[]} oldWaypoints
     * @param {Point[]} newWaypoints
     * @param {Attachment} attachment
     * @param {FindNewLineStartIndexHints} hints
     *
     * @return {number}
     */
    function findNewLineStartIndex(oldWaypoints, newWaypoints, attachment, hints) {

      var index = attachment.segmentIndex;

      var offset = newWaypoints.length - oldWaypoints.length;

      // segmentMove happened
      if (hints.segmentMove) {

        var oldSegmentStartIndex = hints.segmentMove.segmentStartIndex,
            newSegmentStartIndex = hints.segmentMove.newSegmentStartIndex;

        // if point was on moved segment return new segment index
        if (index === oldSegmentStartIndex) {
          return newSegmentStartIndex;
        }

        // point is after new segment index
        if (index >= newSegmentStartIndex) {
          return (index + offset < newSegmentStartIndex) ? newSegmentStartIndex : index + offset;
        }

        // if point is before new segment index
        return index;
      }

      // bendpointMove happened
      if (hints.bendpointMove) {

        var insert = hints.bendpointMove.insert,
            bendpointIndex = hints.bendpointMove.bendpointIndex,
            newIndex;

        // waypoints length didnt change
        if (offset === 0) {
          return index;
        }

        // point behind new/removed bendpoint
        if (index >= bendpointIndex) {
          newIndex = insert ? index + 1 : index - 1;
        }

        // point before new/removed bendpoint
        if (index < bendpointIndex) {

          newIndex = index;

          // decide point should take right or left segment
          if (insert && attachment.type !== 'bendpoint' && bendpointIndex - 1 === index) {

            var rel = relativePositionMidWaypoint(newWaypoints, bendpointIndex);

            if (rel < attachment.relativeLocation) {
              newIndex++;
            }
          }
        }

        return newIndex;
      }

      // start/end changed
      if (offset === 0) {
        return index;
      }

      if (hints.connectionStart && index === 0) {
        return 0;
      }

      if (hints.connectionEnd && index === oldWaypoints.length - 2) {
        return newWaypoints.length - 2;
      }

      // if nothing fits, take the middle segment
      return Math.floor((newWaypoints.length - 2) / 2);
    }


    /**
     * Calculate the required adjustment (move delta) for the given point
     * after the connection waypoints got updated.
     *
     * @param {Point} position
     * @param {Point[]} newWaypoints
     * @param {Point[]} oldWaypoints
     * @param {FindNewLineStartIndexHints} hints
     *
     * @return {AnchorPointAdjustment} result
     */
    function getAnchorPointAdjustment(position, newWaypoints, oldWaypoints, hints) {

      var dx = 0,
          dy = 0;

      var oldPosition = {
        point: position,
        delta: { x: 0, y: 0 }
      };

      // get closest attachment
      var attachment = getAttachment(position, oldWaypoints),
          oldLabelLineIndex = attachment.segmentIndex,
          newLabelLineIndex = findNewLineStartIndex(oldWaypoints, newWaypoints, attachment, hints);


      // should never happen
      // TODO(@janstuemmel): throw an error here when connectionSegmentMove is refactored
      if (newLabelLineIndex < 0 ||
          newLabelLineIndex > newWaypoints.length - 2 ||
          newLabelLineIndex === null) {
        return oldPosition;
      }

      var oldLabelLine = getLine(oldWaypoints, oldLabelLineIndex),
          newLabelLine = getLine(newWaypoints, newLabelLineIndex),
          oldFoot = attachment.position;

      var relativeFootPosition = getRelativeFootPosition(oldLabelLine, oldFoot),
          angleDelta = getAngleDelta(oldLabelLine, newLabelLine);

      // special rule if label on bendpoint
      if (attachment.type === 'bendpoint') {

        var offset = newWaypoints.length - oldWaypoints.length,
            oldBendpointIndex = attachment.bendpointIndex,
            oldBendpoint = oldWaypoints[oldBendpointIndex];

        // bendpoint position hasn't changed, return same position
        if (newWaypoints.indexOf(oldBendpoint) !== -1) {
          return oldPosition;
        }

        // new bendpoint and old bendpoint have same index, then just return the offset
        if (offset === 0) {
          var newBendpoint = newWaypoints[oldBendpointIndex];

          dx = newBendpoint.x - attachment.position.x,
          dy = newBendpoint.y - attachment.position.y;

          return {
            delta: {
              x: dx,
              y: dy
            },
            point: {
              x: position.x + dx,
              y: position.y + dy
            }
          };
        }

        // if bendpoints get removed
        if (offset < 0 && oldBendpointIndex !== 0 && oldBendpointIndex < oldWaypoints.length - 1) {
          relativeFootPosition = relativePositionMidWaypoint(oldWaypoints, oldBendpointIndex);
        }
      }

      var newFoot = {
        x: (newLabelLine[1].x - newLabelLine[0].x) * relativeFootPosition + newLabelLine[0].x,
        y: (newLabelLine[1].y - newLabelLine[0].y) * relativeFootPosition + newLabelLine[0].y
      };

      // the rotated vector to label
      var newLabelVector = rotateVector({
        x: position.x - oldFoot.x,
        y: position.y - oldFoot.y
      }, angleDelta);

      // the new relative position
      dx = newFoot.x + newLabelVector.x - position.x;
      dy = newFoot.y + newLabelVector.y - position.y;

      return {
        point: roundPoint(newFoot),
        delta: roundPoint({
          x: dx,
          y: dy
        })
      };
    }


    // HELPERS //////////////////////

    function relativePositionMidWaypoint(waypoints, idx) {

      var distanceSegment1 = getDistancePointPoint(waypoints[idx - 1], waypoints[idx]),
          distanceSegment2 = getDistancePointPoint(waypoints[idx], waypoints[idx + 1]);

      var relativePosition = distanceSegment1 / (distanceSegment1 + distanceSegment2);

      return relativePosition;
    }

    function getAngleDelta(l1, l2) {
      var a1 = getAngle(l1),
          a2 = getAngle(l2);
      return a2 - a1;
    }

    function getLine(waypoints, idx) {
      return [ waypoints[idx], waypoints[idx + 1] ];
    }

    function getRelativeFootPosition(line, foot) {

      var length = getDistancePointPoint(line[0], line[1]),
          lengthToFoot = getDistancePointPoint(line[0], foot);

      return length === 0 ? 0 : lengthToFoot / length;
    }

    /**
     * Calculate the required adjustment (move delta) for the given label
     * after the connection waypoints got updated.
     *
     * @param {Label} label
     * @param {Point[]} newWaypoints
     * @param {Point[]} oldWaypoints
     * @param {FindNewLineStartIndexHints} hints
     *
     * @return {Point}
     */
    function getLabelAdjustment(label, newWaypoints, oldWaypoints, hints) {
      var labelPosition = getMid(label);

      return getAnchorPointAdjustment(labelPosition, newWaypoints, oldWaypoints, hints).delta;
    }

    /**
     * @typedef {import('../model/Types').Shape} Shape
     *
     * @typedef {import('../util/Types').Point} Point
     * @typedef {import('../util/Types').Rect} Rect
     */

    /**
     * Calculates the absolute point relative to the new element's position.
     *
     * @param {Point} point [absolute]
     * @param {Rect} oldBounds
     * @param {Rect} newBounds
     *
     * @return {Point} point [absolute]
     */
    function getNewAttachPoint(point, oldBounds, newBounds) {
      var oldCenter = center(oldBounds),
          newCenter = center(newBounds),
          oldDelta = delta(point, oldCenter);

      var newDelta = {
        x: oldDelta.x * (newBounds.width / oldBounds.width),
        y: oldDelta.y * (newBounds.height / oldBounds.height)
      };

      return roundPoint({
        x: newCenter.x + newDelta.x,
        y: newCenter.y + newDelta.y
      });
    }


    /**
     * Calculates the shape's delta relative to a new position
     * of a certain element's bounds.
     *
     * @param {Shape} shape
     * @param {Rect} oldBounds
     * @param {Rect} newBounds
     *
     * @return {Point} delta
     */
    function getNewAttachShapeDelta(shape, oldBounds, newBounds) {
      var shapeCenter = center(shape),
          oldCenter = center(oldBounds),
          newCenter = center(newBounds),
          shapeDelta = delta(shape, shapeCenter),
          oldCenterDelta = delta(shapeCenter, oldCenter),
          stickyPositionDelta = getStickyPositionDelta(shapeCenter, oldBounds, newBounds);

      if (stickyPositionDelta) {
        return stickyPositionDelta;
      }

      var newCenterDelta = {
        x: oldCenterDelta.x * (newBounds.width / oldBounds.width),
        y: oldCenterDelta.y * (newBounds.height / oldBounds.height)
      };

      var newShapeCenter = {
        x: newCenter.x + newCenterDelta.x,
        y: newCenter.y + newCenterDelta.y
      };

      return roundPoint({
        x: newShapeCenter.x + shapeDelta.x - shape.x,
        y: newShapeCenter.y + shapeDelta.y - shape.y
      });
    }

    function getStickyPositionDelta(oldShapeCenter, oldBounds, newBounds) {
      var oldTRBL = asTRBL(oldBounds),
          newTRBL = asTRBL(newBounds);

      if (isMoved(oldTRBL, newTRBL)) {
        return null;
      }

      var oldOrientation = getOrientation(oldBounds, oldShapeCenter),
          stickyPositionDelta,
          newShapeCenter,
          newOrientation;

      if (oldOrientation === 'top') {
        stickyPositionDelta = {
          x: 0,
          y: newTRBL.bottom - oldTRBL.bottom
        };
      } else if (oldOrientation === 'bottom') {
        stickyPositionDelta = {
          x: 0,
          y: newTRBL.top - oldTRBL.top
        };
      } else if (oldOrientation === 'right') {
        stickyPositionDelta = {
          x: newTRBL.left - oldTRBL.left,
          y: 0
        };
      } else if (oldOrientation === 'left') {
        stickyPositionDelta = {
          x: newTRBL.right - oldTRBL.right,
          y: 0
        };
      } else {

        // fallback to proportional movement for corner-placed attachments
        return null;
      }

      newShapeCenter = {
        x: oldShapeCenter.x + stickyPositionDelta.x,
        y: oldShapeCenter.y + stickyPositionDelta.y
      };

      newOrientation = getOrientation(newBounds, newShapeCenter);

      if (newOrientation !== oldOrientation) {

        // fallback to proportional movement if orientation would otherwise change
        return null;
      }

      return stickyPositionDelta;
    }

    function isMoved(oldTRBL, newTRBL) {
      return isHorizontallyMoved(oldTRBL, newTRBL) || isVerticallyMoved(oldTRBL, newTRBL);
    }

    function isHorizontallyMoved(oldTRBL, newTRBL) {
      return oldTRBL.right !== newTRBL.right && oldTRBL.left !== newTRBL.left;
    }

    function isVerticallyMoved(oldTRBL, newTRBL) {
      return oldTRBL.top !== newTRBL.top && oldTRBL.bottom !== newTRBL.bottom;
    }

    var DEFAULT_LABEL_DIMENSIONS = {
      width: 90,
      height: 20
    };

    var NAME_PROPERTY = 'name';
    var TEXT_PROPERTY = 'text';

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('../BpmnFactory').default} BpmnFactory
     * @typedef {import('../../../draw/TextRenderer').default} TextRenderer
     *
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     *
     * @typedef {Point[]} Line
     */

    /**
     * A component that makes sure that external labels are added
     * together with respective elements and properly updated (DI wise)
     * during move.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     * @param {BpmnFactory} bpmnFactory
     * @param {TextRenderer} textRenderer
     */
    function LabelBehavior(
        eventBus, modeling, bpmnFactory,
        textRenderer) {

      CommandInterceptor.call(this, eventBus);

      // update label if name property was updated
      this.postExecute('element.updateProperties', function(e) {
        var context = e.context,
            element = context.element,
            properties = context.properties;

        if (NAME_PROPERTY in properties) {
          modeling.updateLabel(element, properties[NAME_PROPERTY]);
        }

        if (TEXT_PROPERTY in properties
            && is$2(element, 'bpmn:TextAnnotation')) {

          var newBounds = textRenderer.getTextAnnotationBounds(
            {
              x: element.x,
              y: element.y,
              width: element.width,
              height: element.height
            },
            properties[TEXT_PROPERTY] || ''
          );

          modeling.updateLabel(element, properties.text, newBounds);
        }
      });

      // create label shape after shape/connection was created
      this.postExecute([ 'shape.create', 'connection.create' ], function(e) {
        var context = e.context,
            hints = context.hints || {};

        if (hints.createElementsBehavior === false) {
          return;
        }

        var element = context.shape || context.connection,
            businessObject = element.businessObject;

        if (isLabel$3(element) || !isLabelExternal(element)) {
          return;
        }

        // only create label if attribute available
        if (!getLabel(element)) {
          return;
        }

        var labelCenter = getExternalLabelMid(element);

        // we don't care about x and y
        var labelDimensions = textRenderer.getExternalLabelBounds(
          DEFAULT_LABEL_DIMENSIONS,
          getLabel(element)
        );

        modeling.createLabel(element, labelCenter, {
          id: businessObject.id + '_label',
          businessObject: businessObject,
          width: labelDimensions.width,
          height: labelDimensions.height
        });
      });

      // update label after label shape was deleted
      this.postExecute('shape.delete', function(event) {
        var context = event.context,
            labelTarget = context.labelTarget,
            hints = context.hints || {};

        // check if label
        if (labelTarget && hints.unsetLabel !== false) {
          modeling.updateLabel(labelTarget, null, null, { removeShape: false });
        }
      });

      // update di information on label creation
      this.postExecute([ 'label.create' ], function(event) {

        var context = event.context,
            element = context.shape,
            labelTarget = context.labelTarget,
            di;

        // we want to trigger on real labels only
        if (!labelTarget) {
          return;
        }

        // we want to trigger on BPMN elements only
        if (!is$2(labelTarget, 'bpmn:BaseElement')) {
          return;
        }

        di = getDi(labelTarget);

        if (!di.label) {
          di.label = bpmnFactory.create('bpmndi:BPMNLabel', {
            bounds: bpmnFactory.create('dc:Bounds')
          });

          element.di = di;
        }

        assign$1(di.label.bounds, {
          x: element.x,
          y: element.y,
          width: element.width,
          height: element.height
        });
      });

      function getVisibleLabelAdjustment(event) {

        var context = event.context,
            connection = context.connection,
            label = connection.label,
            hints = assign$1({}, context.hints),
            newWaypoints = context.newWaypoints || connection.waypoints,
            oldWaypoints = context.oldWaypoints;


        if (typeof hints.startChanged === 'undefined') {
          hints.startChanged = !!hints.connectionStart;
        }

        if (typeof hints.endChanged === 'undefined') {
          hints.endChanged = !!hints.connectionEnd;
        }

        return getLabelAdjustment(label, newWaypoints, oldWaypoints, hints);
      }

      this.postExecute([
        'connection.layout',
        'connection.updateWaypoints'
      ], function(event) {
        var context = event.context,
            hints = context.hints || {};

        if (hints.labelBehavior === false) {
          return;
        }

        var connection = context.connection,
            label = connection.label,
            labelAdjustment;

        // handle missing label as well as the case
        // that the label parent does not exist (yet),
        // because it is being pasted / created via multi element create
        //
        // Cf. https://github.com/bpmn-io/bpmn-js/pull/1227
        if (!label || !label.parent) {
          return;
        }

        labelAdjustment = getVisibleLabelAdjustment(event);

        modeling.moveShape(label, labelAdjustment);
      });


      // keep label position on shape replace
      this.postExecute([ 'shape.replace' ], function(event) {
        var context = event.context,
            newShape = context.newShape,
            oldShape = context.oldShape;

        var businessObject = getBusinessObject(newShape);

        if (businessObject
          && isLabelExternal(businessObject)
          && oldShape.label
          && newShape.label) {
          newShape.label.x = oldShape.label.x;
          newShape.label.y = oldShape.label.y;
        }
      });


      // move external label after resizing
      this.postExecute('shape.resize', function(event) {

        var context = event.context,
            shape = context.shape,
            newBounds = context.newBounds,
            oldBounds = context.oldBounds;

        if (hasExternalLabel(shape)) {

          var label = shape.label,
              labelMid = getMid(label),
              edges = asEdges(oldBounds);

          // get nearest border point to label as reference point
          var referencePoint = getReferencePoint(labelMid, edges);

          var delta = getReferencePointDelta(referencePoint, oldBounds, newBounds);

          modeling.moveShape(label, delta);

        }

      });

    }

    e(LabelBehavior, CommandInterceptor);

    LabelBehavior.$inject = [
      'eventBus',
      'modeling',
      'bpmnFactory',
      'textRenderer'
    ];

    // helpers //////////////////////

    /**
     * Calculates a reference point delta relative to a new position
     * of a certain element's bounds
     *
     * @param {Point} referencePoint
     * @param {Rect} oldBounds
     * @param {Rect} newBounds
     *
     * @return {Point}
     */
    function getReferencePointDelta(referencePoint, oldBounds, newBounds) {

      var newReferencePoint = getNewAttachPoint(referencePoint, oldBounds, newBounds);

      return roundPoint(delta(newReferencePoint, referencePoint));
    }

    /**
     * Generates the nearest point (reference point) for a given point
     * onto given set of lines
     *
     * @param {Point} point
     * @param {Line[]} lines
     *
     * @return {Point}
     */
    function getReferencePoint(point, lines) {

      if (!lines.length) {
        return;
      }

      var nearestLine = getNearestLine(point, lines);

      return perpendicularFoot(point, nearestLine);
    }

    /**
     * Convert the given bounds to a lines array containing all edges
     *
     * @param {Rect|Point} bounds
     *
     * @return {Line[]}
     */
    function asEdges(bounds) {
      return [
        [ // top
          {
            x: bounds.x,
            y: bounds.y
          },
          {
            x: bounds.x + (bounds.width || 0),
            y: bounds.y
          }
        ],
        [ // right
          {
            x: bounds.x + (bounds.width || 0),
            y: bounds.y
          },
          {
            x: bounds.x + (bounds.width || 0),
            y: bounds.y + (bounds.height || 0)
          }
        ],
        [ // bottom
          {
            x: bounds.x,
            y: bounds.y + (bounds.height || 0)
          },
          {
            x: bounds.x + (bounds.width || 0),
            y: bounds.y + (bounds.height || 0)
          }
        ],
        [ // left
          {
            x: bounds.x,
            y: bounds.y
          },
          {
            x: bounds.x,
            y: bounds.y + (bounds.height || 0)
          }
        ]
      ];
    }

    /**
     * Returns the nearest line for a given point by distance
     * @param {Point} point
     * @param {Line[]} lines
     *
     * @return {Line}
     */
    function getNearestLine(point, lines) {

      var distances = lines.map(function(l) {
        return {
          line: l,
          distance: getDistancePointLine(point, l)
        };
      });

      var sorted = sortBy(distances, 'distance');

      return sorted[0].line;
    }

    /**
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     *
     * @typedef {import('./LayoutUtil').FindNewLineStartIndexHints} FindNewLineStartIndexHints
     */

    /**
     * Calculate the new point after the connection waypoints got updated.
     *
     * @param {Point} position
     * @param {Point[]} newWaypoints
     * @param {Point[]} oldWaypoints
     * @param {FindNewLineStartIndexHints} hints
     *
     * @return {Point}
     */
    function getConnectionAdjustment(position, newWaypoints, oldWaypoints, hints) {
      return getAnchorPointAdjustment(position, newWaypoints, oldWaypoints, hints).point;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A component that makes sure that Associations connected to Connections
     * are updated together with the Connection.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function LayoutConnectionBehavior(eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);

      function getnewAnchorPoint(event, point) {

        var context = event.context,
            connection = context.connection,
            hints = assign$1({}, context.hints),
            newWaypoints = context.newWaypoints || connection.waypoints,
            oldWaypoints = context.oldWaypoints;


        if (typeof hints.startChanged === 'undefined') {
          hints.startChanged = !!hints.connectionStart;
        }

        if (typeof hints.endChanged === 'undefined') {
          hints.endChanged = !!hints.connectionEnd;
        }

        return getConnectionAdjustment(point, newWaypoints, oldWaypoints, hints);
      }

      this.postExecute([
        'connection.layout',
        'connection.updateWaypoints'
      ], function(event) {
        var context = event.context;

        var connection = context.connection,
            outgoing = connection.outgoing,
            incoming = connection.incoming;

        incoming.forEach(function(connection) {
          var endPoint = connection.waypoints[connection.waypoints.length - 1];
          var newEndpoint = getnewAnchorPoint(event, endPoint);

          var newWaypoints = [].concat(connection.waypoints.slice(0, -1), [ newEndpoint ]);

          modeling.updateWaypoints(connection, newWaypoints);
        });

        outgoing.forEach(function(connection) {
          var startpoint = connection.waypoints[0];
          var newStartpoint = getnewAnchorPoint(event, startpoint);

          var newWaypoints = [].concat([ newStartpoint ], connection.waypoints.slice(1));

          modeling.updateWaypoints(connection, newWaypoints);
        });

      });


      this.postExecute([
        'connection.move'
      ], function(event) {
        var context = event.context;

        var connection = context.connection,
            outgoing = connection.outgoing,
            incoming = connection.incoming,
            delta = context.delta;

        incoming.forEach(function(connection) {
          var endPoint = connection.waypoints[connection.waypoints.length - 1];
          var newEndpoint = {
            x: endPoint.x + delta.x,
            y: endPoint.y + delta.y
          };

          var newWaypoints = [].concat(connection.waypoints.slice(0, -1), [ newEndpoint ]);

          modeling.updateWaypoints(connection, newWaypoints);
        });

        outgoing.forEach(function(connection) {
          var startpoint = connection.waypoints[0];
          var newStartpoint = {
            x: startpoint.x + delta.x,
            y: startpoint.y + delta.y
          };

          var newWaypoints = [].concat([ newStartpoint ], connection.waypoints.slice(1));

          modeling.updateWaypoints(connection, newWaypoints);
        });

      });

    }

    e(LayoutConnectionBehavior, CommandInterceptor);

    LayoutConnectionBehavior.$inject = [
      'eventBus',
      'modeling'
    ];

    /**
     * @typedef {import('../model/Types').Element} Element
     * @typedef {import('../model/Types').ModdleElement} ModdleElement
     */

    /**
     * @param {Element} element
     * @param {ModdleElement} di
     *
     * @return {boolean}
     */
    function isExpanded(element, di) {

      if (is$2(element, 'bpmn:CallActivity')) {
        return false;
      }

      if (is$2(element, 'bpmn:SubProcess')) {
        di = di || getDi(element);

        if (di && is$2(di, 'bpmndi:BPMNPlane')) {
          return true;
        }

        return di && !!di.isExpanded;
      }

      if (is$2(element, 'bpmn:Participant')) {
        return !!getBusinessObject(element).processRef;
      }

      return true;
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isInterrupting(element) {
      return element && getBusinessObject(element).isInterrupting !== false;
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isEventSubProcess(element) {
      return element && !!getBusinessObject(element).triggeredByEvent;
    }

    /**
     * @param {Element} element
     * @param {string} eventType
     *
     * @return {boolean}
     */
    function hasEventDefinition$2(element, eventType) {
      var eventDefinitions = getBusinessObject(element).eventDefinitions;

      return some(eventDefinitions, function(event) {
        return is$2(event, eventType);
      });
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function hasErrorEventDefinition(element) {
      return hasEventDefinition$2(element, 'bpmn:ErrorEventDefinition');
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function hasEscalationEventDefinition(element) {
      return hasEventDefinition$2(element, 'bpmn:EscalationEventDefinition');
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function hasCompensateEventDefinition(element) {
      return hasEventDefinition$2(element, 'bpmn:CompensateEventDefinition');
    }

    /**
     * @typedef {import('../../../../core/Types').ConnectionLike} Connection
     * @typedef {import('../../../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../../../util/Types').Point} Point
     * @typedef {import('../../../../util/Types').Rect} Rect
     */

    /**
     * @param {Connection} connection
     * @param {Shape} shape
     * @param {Rect} oldBounds
     * @return {Point}
     */
    function getResizedSourceAnchor(connection, shape, oldBounds) {

      var waypoints = safeGetWaypoints(connection),
          waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
          oldAnchor = waypoints[0];

      // new anchor is the last waypoint enclosed be resized source
      if (waypointsInsideNewBounds.length) {
        return waypointsInsideNewBounds[ waypointsInsideNewBounds.length - 1 ];
      }

      return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
    }


    function getResizedTargetAnchor(connection, shape, oldBounds) {

      var waypoints = safeGetWaypoints(connection),
          waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
          oldAnchor = waypoints[waypoints.length - 1];

      // new anchor is the first waypoint enclosed be resized target
      if (waypointsInsideNewBounds.length) {
        return waypointsInsideNewBounds[ 0 ];
      }

      return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
    }


    function getMovedSourceAnchor(connection, source, moveDelta) {

      var waypoints = safeGetWaypoints(connection),
          oldBounds = subtract(source, moveDelta),
          oldAnchor = waypoints[ 0 ];

      return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, source);
    }


    function getMovedTargetAnchor(connection, target, moveDelta) {

      var waypoints = safeGetWaypoints(connection),
          oldBounds = subtract(target, moveDelta),
          oldAnchor = waypoints[ waypoints.length - 1 ];

      return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, target);
    }


    // helpers //////////////////////

    function subtract(bounds, delta) {
      return {
        x: bounds.x - delta.x,
        y: bounds.y - delta.y,
        width: bounds.width,
        height: bounds.height
      };
    }


    /**
     * Return waypoints of given connection; throw if non exists (should not happen!!).
     *
     * @param {Connection} connection
     *
     * @return {Point[]}
     */
    function safeGetWaypoints(connection) {

      var waypoints = connection.waypoints;

      if (!waypoints.length) {
        throw new Error('connection#' + connection.id + ': no waypoints');
      }

      return waypoints;
    }

    function getWaypointsInsideBounds(waypoints, bounds) {
      var originalWaypoints = map$1(waypoints, getOriginal$1);

      return filter(originalWaypoints, function(waypoint) {
        return isInsideBounds(waypoint, bounds);
      });
    }

    /**
     * Checks if point is inside bounds, incl. edges.
     *
     * @param {Point} point
     * @param {Rect} bounds
     */
    function isInsideBounds(point, bounds) {
      return getOrientation(bounds, point, 1) === 'intersect';
    }

    function getOriginal$1(point) {
      return point.original || point;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * BPMN-specific message flow behavior.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function MessageFlowBehavior(eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);

      this.postExecute('shape.replace', function(context) {
        var oldShape = context.oldShape,
            newShape = context.newShape;

        if (!isParticipantCollapse(oldShape, newShape)) {
          return;
        }

        var messageFlows = getMessageFlows(oldShape);

        messageFlows.incoming.forEach(function(incoming) {
          var anchor = getResizedTargetAnchor(incoming, newShape, oldShape);

          modeling.reconnectEnd(incoming, newShape, anchor);
        });

        messageFlows.outgoing.forEach(function(outgoing) {
          var anchor = getResizedSourceAnchor(outgoing, newShape, oldShape);

          modeling.reconnectStart(outgoing, newShape, anchor);
        });
      }, true);

    }

    MessageFlowBehavior.$inject = [ 'eventBus', 'modeling' ];

    e(MessageFlowBehavior, CommandInterceptor);

    // helpers //////////

    function isParticipantCollapse(oldShape, newShape) {
      return is$2(oldShape, 'bpmn:Participant')
        && isExpanded(oldShape)
        && is$2(newShape, 'bpmn:Participant')
        && !isExpanded(newShape);
    }

    function getMessageFlows(parent) {
      var elements = selfAndAllChildren([ parent ], false);

      var incoming = [],
          outgoing = [];

      elements.forEach(function(element) {
        if (element === parent) {
          return;
        }

        element.incoming.forEach(function(connection) {
          if (is$2(connection, 'bpmn:MessageFlow')) {
            incoming.push(connection);
          }
        });

        element.outgoing.forEach(function(connection) {
          if (is$2(connection, 'bpmn:MessageFlow')) {
            outgoing.push(connection);
          }
        });
      }, []);

      return {
        incoming: incoming,
        outgoing: outgoing
      };
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('diagram-js/lib/features/tooltips/Tooltips').default} Tooltips
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     */

    var COLLAB_ERR_MSG = 'flow elements must be children of pools/participants';

    /**
     * @param {EventBus} eventBus
     * @param {Tooltips} tooltips
     * @param {Translate} translate
     */
    function ModelingFeedback(eventBus, tooltips, translate) {

      function showError(position, message, timeout) {
        tooltips.add({
          position: {
            x: position.x + 5,
            y: position.y + 5
          },
          type: 'error',
          timeout: timeout || 2000,
          html: '<div>' + message + '</div>'
        });
      }

      eventBus.on([ 'shape.move.rejected', 'create.rejected' ], function(event) {
        var context = event.context,
            shape = context.shape,
            target = context.target;

        if (is$2(target, 'bpmn:Collaboration') && is$2(shape, 'bpmn:FlowNode')) {
          showError(event, translate(COLLAB_ERR_MSG));
        }
      });

    }

    ModelingFeedback.$inject = [
      'eventBus',
      'tooltips',
      'translate'
    ];

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * BPMN specific behavior ensuring that bpmndi:Label's dc:Bounds are removed
     * when shape is resized.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function RemoveEmbeddedLabelBoundsBehavior(eventBus, modeling) {
      CommandInterceptor.call(this, eventBus);

      this.preExecute('shape.resize', function(context) {
        var shape = context.shape;

        var di = getDi(shape),
            label = di && di.get('label'),
            bounds = label && label.get('bounds');

        if (bounds) {
          modeling.updateModdleProperties(shape, label, {
            bounds: undefined
          });
        }
      }, true);
    }

    e(RemoveEmbeddedLabelBoundsBehavior, CommandInterceptor);

    RemoveEmbeddedLabelBoundsBehavior.$inject = [
      'eventBus',
      'modeling'
    ];

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../../rules/BpmnRules').default} BpmnRules
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * @param {EventBus} eventBus
     * @param {BpmnRules} bpmnRules
     * @param {Modeling} modeling
     */
    function RemoveElementBehavior(eventBus, bpmnRules, modeling) {

      CommandInterceptor.call(this, eventBus);

      /**
       * Combine sequence flows when deleting an element
       * if there is one incoming and one outgoing
       * sequence flow
       */
      this.preExecute('shape.delete', function(e) {

        var shape = e.context.shape;

        // only handle [a] -> [shape] -> [b] patterns
        if (shape.incoming.length !== 1 || shape.outgoing.length !== 1) {
          return;
        }

        var inConnection = shape.incoming[0],
            outConnection = shape.outgoing[0];

        // only handle sequence flows
        if (!is$2(inConnection, 'bpmn:SequenceFlow') || !is$2(outConnection, 'bpmn:SequenceFlow')) {
          return;
        }

        if (bpmnRules.canConnect(inConnection.source, outConnection.target, inConnection)) {

          // compute new, combined waypoints
          var newWaypoints = getNewWaypoints(inConnection.waypoints, outConnection.waypoints);

          modeling.reconnectEnd(inConnection, outConnection.target, newWaypoints);
        }
      });

    }

    e(RemoveElementBehavior, CommandInterceptor);

    RemoveElementBehavior.$inject = [
      'eventBus',
      'bpmnRules',
      'modeling'
    ];


    // helpers //////////////////////

    function getDocking$1(point) {
      return point.original || point;
    }


    function getNewWaypoints(inWaypoints, outWaypoints) {

      var intersection = lineIntersect(
        getDocking$1(inWaypoints[inWaypoints.length - 2]),
        getDocking$1(inWaypoints[inWaypoints.length - 1]),
        getDocking$1(outWaypoints[1]),
        getDocking$1(outWaypoints[0]));

      if (intersection) {
        return [].concat(
          inWaypoints.slice(0, inWaypoints.length - 1),
          [ intersection ],
          outWaypoints.slice(1));
      } else {
        return [
          getDocking$1(inWaypoints[0]),
          getDocking$1(outWaypoints[outWaypoints.length - 1])
        ];
      }
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * BPMN specific remove behavior.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function RemoveParticipantBehavior(eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);


      /**
       * morph collaboration diagram into process diagram
       * after the last participant has been removed
       */

      this.preExecute('shape.delete', function(context) {

        var shape = context.shape,
            parent = shape.parent;

        // activate the behavior if the shape to be removed
        // is a participant
        if (is$2(shape, 'bpmn:Participant')) {
          context.collaborationRoot = parent;
        }
      }, true);

      this.postExecute('shape.delete', function(context) {

        var collaborationRoot = context.collaborationRoot;

        if (collaborationRoot && !collaborationRoot.businessObject.participants.length) {

          // replace empty collaboration with process diagram
          modeling.makeProcess();
        }
      }, true);

    }

    RemoveParticipantBehavior.$inject = [ 'eventBus', 'modeling' ];

    e(RemoveParticipantBehavior, CommandInterceptor);

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('../../rules/BpmnRules').default} BpmnRules
     * @typedef {import('didi').Injector} Injector
     */

    /**
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     * @param {BpmnRules} bpmnRules
     * @param {Injector} injector
     */
    function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules, injector) {

      CommandInterceptor.call(this, eventBus);

      var dragging = injector.get('dragging', false);

      function fixConnection(connection) {

        var source = connection.source,
            target = connection.target,
            parent = connection.parent;

        // do not do anything if connection
        // is already deleted (may happen due to other
        // behaviors plugged-in before)
        if (!parent) {
          return;
        }

        var replacementType,
            remove;

        /**
         * Check if incoming or outgoing connections
         * can stay or could be substituted with an
         * appropriate replacement.
         *
         * This holds true for SequenceFlow <> MessageFlow.
         */

        if (is$2(connection, 'bpmn:SequenceFlow')) {
          if (!bpmnRules.canConnectSequenceFlow(source, target)) {
            remove = true;
          }

          if (bpmnRules.canConnectMessageFlow(source, target)) {
            replacementType = 'bpmn:MessageFlow';
          }
        }

        // transform message flows into sequence flows, if possible

        if (is$2(connection, 'bpmn:MessageFlow')) {

          if (!bpmnRules.canConnectMessageFlow(source, target)) {
            remove = true;
          }

          if (bpmnRules.canConnectSequenceFlow(source, target)) {
            replacementType = 'bpmn:SequenceFlow';
          }
        }

        if (is$2(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {
          remove = true;
        }


        // remove invalid connection,
        // unless it has been removed already
        if (remove) {
          modeling.removeConnection(connection);
        }

        // replace SequenceFlow <> MessageFlow

        if (replacementType) {
          modeling.connect(source, target, {
            type: replacementType,
            waypoints: connection.waypoints.slice()
          });
        }
      }

      function replaceReconnectedConnection(event) {

        var context = event.context,
            connection = context.connection,
            source = context.newSource || connection.source,
            target = context.newTarget || connection.target,
            allowed,
            replacement;

        allowed = bpmnRules.canConnect(source, target);

        if (!allowed || allowed.type === connection.type) {
          return;
        }

        replacement = modeling.connect(source, target, {
          type: allowed.type,
          waypoints: connection.waypoints.slice()
        });

        // remove old connection
        modeling.removeConnection(connection);

        // replace connection in context to reconnect end/start
        context.connection = replacement;

        if (dragging) {
          cleanDraggingSelection(connection, replacement);
        }
      }

      // monkey-patch selection saved in dragging in order to re-select it when operation is finished
      function cleanDraggingSelection(oldConnection, newConnection) {
        var context = dragging.context(),
            previousSelection = context && context.payload.previousSelection,
            index;

        // do nothing if not dragging or no selection was present
        if (!previousSelection || !previousSelection.length) {
          return;
        }

        index = previousSelection.indexOf(oldConnection);

        if (index === -1) {
          return;
        }

        previousSelection.splice(index, 1, newConnection);
      }

      // lifecycle hooks

      this.postExecuted('elements.move', function(context) {

        var closure = context.closure,
            allConnections = closure.allConnections;

        forEach$1(allConnections, fixConnection);
      }, true);

      this.preExecute('connection.reconnect', replaceReconnectedConnection);

      this.postExecuted('element.updateProperties', function(event) {
        var context = event.context,
            properties = context.properties,
            element = context.element,
            businessObject = element.businessObject,
            connection;

        // remove condition on change to default
        if (properties.default) {
          connection = find$1(
            element.outgoing,
            matchPattern({ id: element.businessObject.default.id })
          );

          if (connection) {
            modeling.updateProperties(connection, { conditionExpression: undefined });
          }
        }

        // remove default from source on change to conditional
        if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {
          modeling.updateProperties(element.source, { default: undefined });
        }
      });
    }

    e(ReplaceConnectionBehavior, CommandInterceptor);

    ReplaceConnectionBehavior.$inject = [
      'eventBus',
      'modeling',
      'bpmnRules',
      'injector'
    ];

    /**
     * @typedef {import('../../replace/BpmnReplace').default} BpmnReplace
     * @typedef {import('../../rules/BpmnRules').default} BpmnRules
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('didi').Injector} Injector
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('diagram-js/lib/features/selection/Selection').default} Selection
     */

    /**
     * BPMN-specific replace behavior.
     *
     * @param {BpmnReplace} bpmnReplace
     * @param {BpmnRules} bpmnRules
     * @param {ElementRegistry} elementRegistry
     * @param {Injector} injector
     * @param {Modeling} modeling
     * @param {Selection} selection
     */
    function ReplaceElementBehaviour(
        bpmnReplace,
        bpmnRules,
        elementRegistry,
        injector,
        modeling,
        selection
    ) {
      injector.invoke(CommandInterceptor, this);

      this._bpmnReplace = bpmnReplace;
      this._elementRegistry = elementRegistry;
      this._selection = selection;

      // replace elements on create, e.g. during copy-paste
      this.postExecuted([ 'elements.create' ], 500, function(event) {
        var context = event.context,
            target = context.parent,
            elements = context.elements;

        var elementReplacements = reduce(elements, function(replacements, element) {
          var canReplace = bpmnRules.canReplace([ element ], element.host || element.parent || target);

          return canReplace ? replacements.concat(canReplace.replacements) : replacements;
        }, []);

        if (elementReplacements.length) {
          this._replaceElements(elements, elementReplacements);
        }
      }, this);

      // replace elements on move
      this.postExecuted([ 'elements.move' ], 500, function(event) {
        var context = event.context,
            target = context.newParent,
            newHost = context.newHost,
            elements = [];

        forEach$1(context.closure.topLevel, function(topLevelElements) {
          if (isEventSubProcess(topLevelElements)) {
            elements = elements.concat(topLevelElements.children);
          } else {
            elements = elements.concat(topLevelElements);
          }
        });

        // set target to host if attaching
        if (elements.length === 1 && newHost) {
          target = newHost;
        }

        var canReplace = bpmnRules.canReplace(elements, target);

        if (canReplace) {
          this._replaceElements(elements, canReplace.replacements, newHost);
        }
      }, this);

      // update attachments on host replace
      this.postExecute([ 'shape.replace' ], 1500, function(e) {
        var context = e.context,
            oldShape = context.oldShape,
            newShape = context.newShape,
            attachers = oldShape.attachers,
            canReplace;

        if (attachers && attachers.length) {
          canReplace = bpmnRules.canReplace(attachers, newShape);

          this._replaceElements(attachers, canReplace.replacements);
        }

      }, this);

      // keep ID on shape replace
      this.postExecuted([ 'shape.replace' ], 1500, function(e) {
        var context = e.context,
            oldShape = context.oldShape,
            newShape = context.newShape;

        modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);
        modeling.updateProperties(newShape, { id: oldShape.id });
      });
    }

    e(ReplaceElementBehaviour, CommandInterceptor);

    ReplaceElementBehaviour.prototype._replaceElements = function(elements, newElements) {
      var elementRegistry = this._elementRegistry,
          bpmnReplace = this._bpmnReplace,
          selection = this._selection;

      forEach$1(newElements, function(replacement) {
        var newElement = {
          type: replacement.newElementType
        };

        var oldElement = elementRegistry.get(replacement.oldElementId);

        var idx = elements.indexOf(oldElement);

        elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });
      });

      if (newElements) {
        selection.select(elements);
      }
    };

    ReplaceElementBehaviour.$inject = [
      'bpmnReplace',
      'bpmnRules',
      'elementRegistry',
      'injector',
      'modeling',
      'selection'
    ];

    var HIGH_PRIORITY$8 = 1500;

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     *
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').Dimensions} Dimensions
     * @typedef {import('diagram-js/lib/util/Types').Direction} Direction
     * @typedef {import('diagram-js/lib/util/Types').RectTRBL} RectTRBL
     */

    /**
     * @type {Dimensions}
     */
    var GROUP_MIN_DIMENSIONS = { width: 140, height: 120 };

    /**
     * @type {Dimensions}
     */
    var LANE_MIN_DIMENSIONS = { width: 300, height: 60 };

    /**
     * @type {Dimensions}
     */
    var PARTICIPANT_MIN_DIMENSIONS = { width: 300, height: 150 };

    /**
     * @type {Dimensions}
     */
    var SUB_PROCESS_MIN_DIMENSIONS = { width: 140, height: 120 };

    /**
     * @type {Dimensions}
     */
    var TEXT_ANNOTATION_MIN_DIMENSIONS = { width: 50, height: 30 };

    /**
     * Set minimum bounds/resize constraints on resize.
     *
     * @param {EventBus} eventBus
     */
    function ResizeBehavior(eventBus) {
      eventBus.on('resize.start', HIGH_PRIORITY$8, function(event) {
        var context = event.context,
            shape = context.shape,
            direction = context.direction,
            balanced = context.balanced;

        if (is$2(shape, 'bpmn:Lane') || is$2(shape, 'bpmn:Participant')) {
          context.resizeConstraints = getParticipantResizeConstraints(shape, direction, balanced);
        }

        if (is$2(shape, 'bpmn:Participant')) {
          context.minDimensions = PARTICIPANT_MIN_DIMENSIONS;
        }

        if (is$2(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
          context.minDimensions = SUB_PROCESS_MIN_DIMENSIONS;
        }

        if (is$2(shape, 'bpmn:TextAnnotation')) {
          context.minDimensions = TEXT_ANNOTATION_MIN_DIMENSIONS;
        }
      });
    }

    ResizeBehavior.$inject = [ 'eventBus' ];


    var abs$1 = Math.abs,
        min = Math.min,
        max$2 = Math.max;


    function addToTrbl(trbl, attr, value, choice) {
      var current = trbl[attr];

      // make sure to set the value if it does not exist
      // or apply the correct value by comparing against
      // choice(value, currentValue)
      trbl[attr] = current === undefined ? value : choice(value, current);
    }

    function addMin(trbl, attr, value) {
      return addToTrbl(trbl, attr, value, min);
    }

    function addMax(trbl, attr, value) {
      return addToTrbl(trbl, attr, value, max$2);
    }

    var LANE_RIGHT_PADDING = 20,
        LANE_LEFT_PADDING = 50,
        LANE_TOP_PADDING = 20,
        LANE_BOTTOM_PADDING = 20;

    /**
     * @param {Shape} laneShape
     * @param {Direction} resizeDirection
     * @param {boolean} [balanced=false]
     *
     * @return { {
     *   min: RectTRBL;
     *   max: RectTRBL;
     * } }
     */
    function getParticipantResizeConstraints(laneShape, resizeDirection, balanced) {
      var lanesRoot = getLanesRoot(laneShape);

      var isFirst = true,
          isLast = true;

      // max top/bottom size for lanes
      var allLanes = collectLanes(lanesRoot, [ lanesRoot ]);

      var laneTrbl = asTRBL(laneShape);

      var maxTrbl = {},
          minTrbl = {};

      if (/e/.test(resizeDirection)) {
        minTrbl.right = laneTrbl.left + LANE_MIN_DIMENSIONS.width;
      } else
      if (/w/.test(resizeDirection)) {
        minTrbl.left = laneTrbl.right - LANE_MIN_DIMENSIONS.width;
      }

      allLanes.forEach(function(other) {

        var otherTrbl = asTRBL(other);

        if (/n/.test(resizeDirection)) {

          if (otherTrbl.top < (laneTrbl.top - 10)) {
            isFirst = false;
          }

          // max top size (based on next element)
          if (balanced && abs$1(laneTrbl.top - otherTrbl.bottom) < 10) {
            addMax(maxTrbl, 'top', otherTrbl.top + LANE_MIN_DIMENSIONS.height);
          }

          // min top size (based on self or nested element)
          if (abs$1(laneTrbl.top - otherTrbl.top) < 5) {
            addMin(minTrbl, 'top', otherTrbl.bottom - LANE_MIN_DIMENSIONS.height);
          }
        }

        if (/s/.test(resizeDirection)) {

          if (otherTrbl.bottom > (laneTrbl.bottom + 10)) {
            isLast = false;
          }

          // max bottom size (based on previous element)
          if (balanced && abs$1(laneTrbl.bottom - otherTrbl.top) < 10) {
            addMin(maxTrbl, 'bottom', otherTrbl.bottom - LANE_MIN_DIMENSIONS.height);
          }

          // min bottom size (based on self or nested element)
          if (abs$1(laneTrbl.bottom - otherTrbl.bottom) < 5) {
            addMax(minTrbl, 'bottom', otherTrbl.top + LANE_MIN_DIMENSIONS.height);
          }
        }
      });

      // max top/bottom/left/right size based on flow nodes
      var flowElements = lanesRoot.children.filter(function(s) {
        return !s.hidden && !s.waypoints && (is$2(s, 'bpmn:FlowElement') || is$2(s, 'bpmn:Artifact'));
      });

      flowElements.forEach(function(flowElement) {

        var flowElementTrbl = asTRBL(flowElement);

        if (isFirst && /n/.test(resizeDirection)) {
          addMin(minTrbl, 'top', flowElementTrbl.top - LANE_TOP_PADDING);
        }

        if (/e/.test(resizeDirection)) {
          addMax(minTrbl, 'right', flowElementTrbl.right + LANE_RIGHT_PADDING);
        }

        if (isLast && /s/.test(resizeDirection)) {
          addMax(minTrbl, 'bottom', flowElementTrbl.bottom + LANE_BOTTOM_PADDING);
        }

        if (/w/.test(resizeDirection)) {
          addMin(minTrbl, 'left', flowElementTrbl.left - LANE_LEFT_PADDING);
        }
      });

      return {
        min: minTrbl,
        max: maxTrbl
      };
    }

    function __stopPropagation(event) {
      if (!event || typeof event.stopPropagation !== 'function') {
        return;
      }

      event.stopPropagation();
    }


    function getOriginal(event) {
      return event.originalEvent || event.srcEvent;
    }


    function stopPropagation(event, immediate) {
      __stopPropagation(event);
      __stopPropagation(getOriginal(event));
    }


    function toPoint(event) {

      if (event.pointers && event.pointers.length) {
        event = event.pointers[0];
      }

      if (event.touches && event.touches.length) {
        event = event.touches[0];
      }

      return event ? {
        x: event.clientX,
        y: event.clientY
      } : null;
    }

    function isMac() {
      return (/mac/i).test(navigator.platform);
    }

    function isButton(event, button) {
      return (getOriginal(event) || event).button === button;
    }

    function isPrimaryButton(event) {

      // button === 0 -> left áka primary mouse button
      return isButton(event, 0);
    }

    function isAuxiliaryButton(event) {

      // button === 1 -> auxiliary áka wheel button
      return isButton(event, 1);
    }

    function hasPrimaryModifier(event) {
      var originalEvent = getOriginal(event) || event;

      if (!isPrimaryButton(event)) {
        return false;
      }

      // Use cmd as primary modifier key for mac OS
      if (isMac()) {
        return originalEvent.metaKey;
      } else {
        return originalEvent.ctrlKey;
      }
    }


    function hasSecondaryModifier(event) {
      var originalEvent = getOriginal(event) || event;

      return isPrimaryButton(event) && originalEvent.shiftKey;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    var SLIGHTLY_HIGHER_PRIORITY = 1001;


    /**
     * Invoke {@link Modeling#resizeLane} instead of {@link Modeling#resizeShape}
     * when resizing a lane or participant shape.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function ResizeLaneBehavior(eventBus, modeling) {

      eventBus.on('resize.start', SLIGHTLY_HIGHER_PRIORITY + 500, function(event) {
        var context = event.context,
            shape = context.shape;

        if (is$2(shape, 'bpmn:Lane') || is$2(shape, 'bpmn:Participant')) {

          // should we resize the opposite lane(s) in
          // order to compensate for the resize operation?
          context.balanced = !hasPrimaryModifier(event);
        }
      });

      /**
       * Intercept resize end and call resize lane function instead.
       */
      eventBus.on('resize.end', SLIGHTLY_HIGHER_PRIORITY, function(event) {
        var context = event.context,
            shape = context.shape,
            canExecute = context.canExecute,
            newBounds = context.newBounds;

        if (is$2(shape, 'bpmn:Lane') || is$2(shape, 'bpmn:Participant')) {

          if (canExecute) {

            // ensure we have actual pixel values for new bounds
            // (important when zoom level was > 1 during move)
            newBounds = roundBounds(newBounds);

            // perform the actual resize
            modeling.resizeLane(shape, newBounds, context.balanced);
          }

          // stop propagation
          return false;
        }
      });
    }

    ResizeLaneBehavior.$inject = [
      'eventBus',
      'modeling'
    ];

    /**
     * @typedef {import('../../../Modeler').default} Modeler
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('didi').Injector} Injector
     * @typedef {import('../../copy-paste/ModdleCopy').default} ModdleCopy
     * @typedef {import('../BpmnFactory').default} BpmnFactory
     *
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
     */

    var LOW_PRIORITY$e = 500;


    /**
     * Add referenced root elements (error, escalation, message, signal) if they don't exist.
     * Copy referenced root elements on copy & paste.
     *
     * @param {Modeler} bpmnjs
     * @param {EventBus} eventBus
     * @param {Injector} injector
     * @param {ModdleCopy} moddleCopy
     * @param {BpmnFactory} bpmnFactory
     */
    function RootElementReferenceBehavior(
        bpmnjs, eventBus, injector, moddleCopy, bpmnFactory
    ) {
      injector.invoke(CommandInterceptor, this);

      function canHaveRootElementReference(element) {
        return isAny(element, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ]) ||
          hasAnyEventDefinition(element, [
            'bpmn:ErrorEventDefinition',
            'bpmn:EscalationEventDefinition',
            'bpmn:MessageEventDefinition',
            'bpmn:SignalEventDefinition'
          ]);
      }

      function hasRootElement(rootElement) {
        var definitions = bpmnjs.getDefinitions(),
            rootElements = definitions.get('rootElements');

        return !!find$1(rootElements, matchPattern({ id: rootElement.id }));
      }

      function getRootElementReferencePropertyName(eventDefinition) {
        if (is$2(eventDefinition, 'bpmn:ErrorEventDefinition')) {
          return 'errorRef';
        } else if (is$2(eventDefinition, 'bpmn:EscalationEventDefinition')) {
          return 'escalationRef';
        } else if (is$2(eventDefinition, 'bpmn:MessageEventDefinition')) {
          return 'messageRef';
        } else if (is$2(eventDefinition, 'bpmn:SignalEventDefinition')) {
          return 'signalRef';
        }
      }

      function getRootElement(businessObject) {
        if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {
          return businessObject.get('messageRef');
        }

        var eventDefinitions = businessObject.get('eventDefinitions'),
            eventDefinition = eventDefinitions[ 0 ];

        return eventDefinition.get(getRootElementReferencePropertyName(eventDefinition));
      }

      function setRootElement(businessObject, rootElement) {
        if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {
          return businessObject.set('messageRef', rootElement);
        }

        var eventDefinitions = businessObject.get('eventDefinitions'),
            eventDefinition = eventDefinitions[ 0 ];

        return eventDefinition.set(getRootElementReferencePropertyName(eventDefinition), rootElement);
      }

      // create shape
      this.executed([
        'shape.create',
        'element.updateProperties',
        'element.updateModdleProperties'
      ], function(context) {
        var shape = context.shape || context.element;

        if (!canHaveRootElementReference(shape)) {
          return;
        }

        var businessObject = getBusinessObject(shape),
            rootElement = getRootElement(businessObject),
            rootElements;

        if (rootElement && !hasRootElement(rootElement)) {
          rootElements = bpmnjs.getDefinitions().get('rootElements');

          // add root element
          add(rootElements, rootElement);

          context.addedRootElement = rootElement;
        }
      }, true);

      this.reverted([
        'shape.create',
        'element.updateProperties',
        'element.updateModdleProperties'
      ], function(context) {
        var addedRootElement = context.addedRootElement;

        if (!addedRootElement) {
          return;
        }

        var rootElements = bpmnjs.getDefinitions().get('rootElements');

        // remove root element
        remove$2(rootElements, addedRootElement);
      }, true);

      eventBus.on('copyPaste.copyElement', function(context) {
        var descriptor = context.descriptor,
            element = context.element;

        if (element.labelTarget || !canHaveRootElementReference(element)) {
          return;
        }

        var businessObject = getBusinessObject(element),
            rootElement = getRootElement(businessObject);

        if (rootElement) {

          // TODO(nikku): clone on copy
          descriptor.referencedRootElement = rootElement;
        }
      });

      eventBus.on('copyPaste.pasteElement', LOW_PRIORITY$e, function(context) {
        var descriptor = context.descriptor,
            businessObject = descriptor.businessObject,
            referencedRootElement = descriptor.referencedRootElement;

        if (!referencedRootElement) {
          return;
        }

        if (!hasRootElement(referencedRootElement)) {
          referencedRootElement = moddleCopy.copyElement(
            referencedRootElement,
            bpmnFactory.create(referencedRootElement.$type)
          );
        }

        setRootElement(businessObject, referencedRootElement);

        delete descriptor.referencedRootElement;
      });
    }

    RootElementReferenceBehavior.$inject = [
      'bpmnjs',
      'eventBus',
      'injector',
      'moddleCopy',
      'bpmnFactory'
    ];

    e(RootElementReferenceBehavior, CommandInterceptor);

    // helpers //////////

    function hasAnyEventDefinition(element, types) {
      if (!isArray$5(types)) {
        types = [ types ];
      }

      return some(types, function(type) {
        return hasEventDefinition$2(element, type);
      });
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     *
     * @typedef {import('../../../model/Types').Shape} Shape
     */

    var max$1 = Math.max;

    /**
     * @param {EventBus} eventBus
     */
    function SpaceToolBehavior(eventBus) {
      eventBus.on('spaceTool.getMinDimensions', function(context) {
        var shapes = context.shapes,
            axis = context.axis,
            start = context.start,
            minDimensions = {};

        forEach$1(shapes, function(shape) {
          var id = shape.id;

          if (is$2(shape, 'bpmn:Participant')) {

            if (isHorizontal(axis)) {
              minDimensions[ id ] = PARTICIPANT_MIN_DIMENSIONS;
            } else {
              minDimensions[ id ] = {
                width: PARTICIPANT_MIN_DIMENSIONS.width,
                height: getParticipantMinHeight(shape, start)
              };
            }

          }

          if (is$2(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
            minDimensions[ id ] = SUB_PROCESS_MIN_DIMENSIONS;
          }

          if (is$2(shape, 'bpmn:TextAnnotation')) {
            minDimensions[ id ] = TEXT_ANNOTATION_MIN_DIMENSIONS;
          }

          if (is$2(shape, 'bpmn:Group')) {
            minDimensions[ id ] = GROUP_MIN_DIMENSIONS;
          }
        });

        return minDimensions;
      });
    }

    SpaceToolBehavior.$inject = [ 'eventBus' ];


    // helpers //////////
    function isHorizontal(axis) {
      return axis === 'x';
    }

    /**
     * Get minimum height for participant taking lanes into account.
     *
     * @param {Shape} participant
     * @param {number} start
     *
     * @return {number}
     */
    function getParticipantMinHeight(participant, start) {
      var lanesMinHeight;

      if (!hasChildLanes(participant)) {
        return PARTICIPANT_MIN_DIMENSIONS.height;
      }

      lanesMinHeight = getLanesMinHeight(participant, start);

      return max$1(PARTICIPANT_MIN_DIMENSIONS.height, lanesMinHeight);
    }

    function hasChildLanes(element) {
      return !!getChildLanes(element).length;
    }

    function getLanesMinHeight(participant, resizeStart) {
      var lanes = getChildLanes(participant),
          resizedLane;

      // find the nested lane which is currently resized
      resizedLane = findResizedLane(lanes, resizeStart);

      // resized lane cannot shrink below the minimum height
      // but remaining lanes' dimensions are kept intact
      return participant.height - resizedLane.height + LANE_MIN_DIMENSIONS.height;
    }

    /**
     * Find nested lane which is currently resized.
     *
     * @param {Shape[]} lanes
     * @param {number} resizeStart
     *
     * @return {Shape}
     */
    function findResizedLane(lanes, resizeStart) {
      var i, lane, childLanes;

      for (i = 0; i < lanes.length; i++) {
        lane = lanes[i];

        // resizing current lane or a lane nested
        if (resizeStart >= lane.y && resizeStart <= lane.y + lane.height) {
          childLanes = getChildLanes(lane);

          // a nested lane is resized
          if (childLanes.length) {
            return findResizedLane(childLanes, resizeStart);
          }

          // current lane is the resized one
          return lane;
        }
      }
    }

    /**
     * @typedef {import('../model/Types').Element} Element
     * @typedef {import('../model/Types').ModdleElement} ModdleElement
     */

    var planeSuffix = '_plane';

    /**
     * Get primary shape ID for a plane.
     *
     * @param  {Element|ModdleElement} element
     *
     * @return {string}
     */
    function getShapeIdFromPlane(element) {
      var id = element.id;

      return removePlaneSuffix(id);
    }

    /**
     * Get plane ID for a primary shape.
     *
     * @param  {Element|ModdleElement} element
     *
     * @return {string}
     */
    function getPlaneIdFromShape(element) {
      var id = element.id;

      if (is$2(element, 'bpmn:SubProcess')) {
        return addPlaneSuffix(id);
      }

      return id;
    }

    /**
     * Get plane ID for primary shape ID.
     *
     * @param {string} id
     *
     * @return {string}
     */
    function toPlaneId(id) {
      return addPlaneSuffix(id);
    }

    /**
     * Check wether element is plane.
     *
     * @param  {Element|ModdleElement} element
     *
     * @return {boolean}
     */
    function isPlane(element) {
      var di = getDi(element);

      return is$2(di, 'bpmndi:BPMNPlane');
    }

    function addPlaneSuffix(id) {
      return id + planeSuffix;
    }

    function removePlaneSuffix(id) {
      return id.replace(new RegExp(planeSuffix + '$'), '');
    }

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('../ElementFactory').default} ElementFactory
     * @typedef {import('../BpmnFactory').default} BpmnFactory
     * @typedef {import('../../../Modeler').default} Modeler
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     *
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Root} Root
     * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
     */

    var LOW_PRIORITY$d = 400;
    var HIGH_PRIORITY$7 = 600;

    var DEFAULT_POSITION$1 = {
      x: 180,
      y: 160
    };


    /**
     * Creates bpmndi:BPMNPlane elements and canvas planes when collapsed subprocesses are created.
     *
     * @param {Canvas} canvas
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     * @param {ElementFactory} elementFactory
     * @param {BpmnFactory} bpmnFactory
     * @param {Modeler} bpmnjs
     * @param {ElementRegistry} elementRegistry
     */
    function SubProcessPlaneBehavior(
        canvas, eventBus, modeling,
        elementFactory, bpmnFactory, bpmnjs, elementRegistry) {

      CommandInterceptor.call(this, eventBus);

      this._canvas = canvas;
      this._eventBus = eventBus;
      this._modeling = modeling;
      this._elementFactory = elementFactory;
      this._bpmnFactory = bpmnFactory;
      this._bpmnjs = bpmnjs;
      this._elementRegistry = elementRegistry;

      var self = this;

      function isCollapsedSubProcess(element) {
        return is$2(element, 'bpmn:SubProcess') && !isExpanded(element);
      }

      function createRoot(context) {
        var shape = context.shape,
            rootElement = context.newRootElement;

        var businessObject = getBusinessObject(shape);

        rootElement = self._addDiagram(rootElement || businessObject);

        context.newRootElement = canvas.addRootElement(rootElement);
      }

      function removeRoot(context) {
        var shape = context.shape;

        var businessObject = getBusinessObject(shape);
        self._removeDiagram(businessObject);

        var rootElement = context.newRootElement = elementRegistry.get(getPlaneIdFromShape(businessObject));

        canvas.removeRootElement(rootElement);
      }

      // add plane elements for newly created sub-processes
      // this ensures we can actually drill down into the element
      this.executed('shape.create', function(context) {
        var shape = context.shape;
        if (!isCollapsedSubProcess(shape)) {
          return;
        }

        createRoot(context);
      }, true);


      this.postExecuted('shape.create', function(context) {
        var shape = context.shape,
            rootElement = context.newRootElement;

        if (!rootElement || !shape.children) {
          return;
        }

        self._showRecursively(shape.children);

        self._moveChildrenToShape(shape, rootElement);
      }, true);


      this.reverted('shape.create', function(context) {
        var shape = context.shape;
        if (!isCollapsedSubProcess(shape)) {
          return;
        }

        removeRoot(context);
      }, true);


      this.preExecuted('shape.delete', function(context) {
        var shape = context.shape;
        if (!isCollapsedSubProcess(shape)) {
          return;
        }

        var attachedRoot = elementRegistry.get(getPlaneIdFromShape(shape));

        if (!attachedRoot) {
          return;
        }

        modeling.removeElements(attachedRoot.children.slice());
      }, true);


      this.executed('shape.delete', function(context) {
        var shape = context.shape;
        if (!isCollapsedSubProcess(shape)) {
          return;
        }
        removeRoot(context);
      }, true);


      this.reverted('shape.delete', function(context) {
        var shape = context.shape;
        if (!isCollapsedSubProcess(shape)) {
          return;
        }

        createRoot(context);
      }, true);


      this.preExecuted('shape.replace', function(context) {
        var oldShape = context.oldShape;
        var newShape = context.newShape;

        if (!isCollapsedSubProcess(oldShape) || !isCollapsedSubProcess(newShape)) {
          return;
        }

        // old plane could have content,
        // we remove it so it is not recursively deleted from 'shape.delete'
        context.oldRoot = canvas.removeRootElement(getPlaneIdFromShape(oldShape));
      }, true);


      this.postExecuted('shape.replace', function(context) {
        var newShape = context.newShape,
            source = context.oldRoot,
            target = canvas.findRoot(getPlaneIdFromShape(newShape));

        if (!source || !target) {
          return;
        }
        var elements = source.children;

        modeling.moveElements(elements, { x: 0, y: 0 }, target);
      }, true);


      // rename primary elements when the secondary element changes
      // this ensures rootElement.id = element.id + '_plane'
      this.executed('element.updateProperties', function(context) {
        var shape = context.element;

        if (!is$2(shape, 'bpmn:SubProcess')) {
          return;
        }

        var properties = context.properties;
        var oldProperties = context.oldProperties;

        var oldId = oldProperties.id,
            newId = properties.id;

        if (oldId === newId) {
          return;
        }

        if (isPlane(shape)) {
          elementRegistry.updateId(shape, toPlaneId(newId));
          elementRegistry.updateId(oldId, newId);

          return;
        }

        var planeElement = elementRegistry.get(toPlaneId(oldId));

        if (!planeElement) {
          return;
        }

        elementRegistry.updateId(toPlaneId(oldId), toPlaneId(newId));
      }, true);


      this.reverted('element.updateProperties', function(context) {
        var shape = context.element;

        if (!is$2(shape, 'bpmn:SubProcess')) {
          return;
        }

        var properties = context.properties;
        var oldProperties = context.oldProperties;

        var oldId = oldProperties.id,
            newId = properties.id;

        if (oldId === newId) {
          return;
        }

        if (isPlane(shape)) {
          elementRegistry.updateId(shape, toPlaneId(oldId));
          elementRegistry.updateId(newId, oldId);

          return;
        }

        var planeElement = elementRegistry.get(toPlaneId(newId));

        if (!planeElement) {
          return;
        }

        elementRegistry.updateId(planeElement, toPlaneId(oldId));
      }, true);

      // re-throw element.changed to re-render primary shape if associated plane has
      // changed (e.g. bpmn:name property has changed)
      eventBus.on('element.changed', function(context) {
        var element = context.element;

        if (!isPlane(element)) {
          return;
        }

        var plane = element;

        var primaryShape = elementRegistry.get(getShapeIdFromPlane(plane));

        // do not re-throw if no associated primary shape (e.g. bpmn:Process)
        if (!primaryShape || primaryShape === plane) {
          return;
        }

        eventBus.fire('element.changed', { element: primaryShape });
      });


      // create/remove plane for the subprocess
      this.executed('shape.toggleCollapse', LOW_PRIORITY$d, function(context) {
        var shape = context.shape;

        if (!is$2(shape, 'bpmn:SubProcess')) {
          return;
        }

        if (!isExpanded(shape)) {
          createRoot(context);
          self._showRecursively(shape.children);
        } else {
          removeRoot(context);
        }

      }, true);


      // create/remove plane for the subprocess
      this.reverted('shape.toggleCollapse', LOW_PRIORITY$d, function(context) {
        var shape = context.shape;

        if (!is$2(shape, 'bpmn:SubProcess')) {
          return;
        }

        if (!isExpanded(shape)) {
          createRoot(context);
          self._showRecursively(shape.children);
        } else {
          removeRoot(context);
        }

      }, true);

      // move elements between planes
      this.postExecuted('shape.toggleCollapse', HIGH_PRIORITY$7, function(context) {
        var shape = context.shape;

        if (!is$2(shape, 'bpmn:SubProcess')) {
          return;
        }

        var rootElement = context.newRootElement;

        if (!rootElement) {
          return;
        }

        if (!isExpanded(shape)) {

          // collapsed
          self._moveChildrenToShape(shape, rootElement);

        } else {
          self._moveChildrenToShape(rootElement, shape);
        }
      }, true);


      // copy-paste ///////////

      // add elements in plane to tree
      eventBus.on('copyPaste.createTree', function(context) {
        var element = context.element,
            children = context.children;

        if (!isCollapsedSubProcess(element)) {
          return;
        }

        var id = getPlaneIdFromShape(element);
        var parent = elementRegistry.get(id);

        if (parent) {

          // do not copy invisible root element
          children.push.apply(children, parent.children);
        }
      });

      // set plane children as direct children of collapsed shape
      eventBus.on('copyPaste.copyElement', function(context) {
        var descriptor = context.descriptor,
            element = context.element,
            elements = context.elements;

        var parent = element.parent;

        var isPlane = is$2(getDi(parent), 'bpmndi:BPMNPlane');
        if (!isPlane) {
          return;
        }

        var parentId = getShapeIdFromPlane(parent);

        var referencedShape = find$1(elements, function(element) {
          return element.id === parentId;
        });

        if (!referencedShape) {
          return;
        }

        descriptor.parent = referencedShape.id;
      });

      // hide children during pasting
      eventBus.on('copyPaste.pasteElement', function(context) {
        var descriptor = context.descriptor;

        if (!descriptor.parent) {
          return;
        }

        if (isCollapsedSubProcess(descriptor.parent) || descriptor.parent.hidden) {
          descriptor.hidden = true;
        }
      });

    }

    e(SubProcessPlaneBehavior, CommandInterceptor);

    /**
     * Moves the child elements from source to target.
     *
     * If the target is a plane, the children are moved to the top left corner.
     * Otherwise, the center of the target is used.
     *
     * @param {Root} source
     * @param {Root} target
     */
    SubProcessPlaneBehavior.prototype._moveChildrenToShape = function(source, target) {
      var modeling = this._modeling;

      var children = source.children;
      var offset;

      if (!children) {
        return;
      }

      // add external labels that weren't children of sub process
      children = children.concat(children.reduce(function(labels, child) {
        if (child.label && child.label.parent !== source) {
          return labels.concat(child.label);
        }

        return labels;
      }, []));

      // only change plane if there are no visible children, but don't move them
      var visibleChildren = children.filter(function(child) {
        return !child.hidden;
      });

      if (!visibleChildren.length) {
        modeling.moveElements(children, { x: 0, y: 0 }, target, { autoResize: false });
        return;
      }

      var childrenBounds = getBBox(visibleChildren);

      // target is a plane
      if (!target.x) {
        offset = {
          x: DEFAULT_POSITION$1.x - childrenBounds.x,
          y: DEFAULT_POSITION$1.y - childrenBounds.y
        };
      }

      // source is a plane
      else {

        // move relative to the center of the shape
        var targetMid = getMid(target);
        var childrenMid = getMid(childrenBounds);

        offset = {
          x: targetMid.x - childrenMid.x,
          y: targetMid.y - childrenMid.y
        };
      }

      modeling.moveElements(children, offset, target, { autoResize: false });
    };

    /**
     * Sets `hidden` property on all children of the given shape.
     *
     * @param {Element[]} elements
     * @param {boolean} [hidden=false]
     *
     * @return {Element[]}
     */
    SubProcessPlaneBehavior.prototype._showRecursively = function(elements, hidden) {
      var self = this;

      var result = [];
      elements.forEach(function(element) {
        element.hidden = !!hidden;

        result = result.concat(element);

        if (element.children) {
          result = result.concat(
            self._showRecursively(element.children, element.collapsed || hidden)
          );
        }
      });

      return result;
    };

    /**
     * Adds a given root element to the BPMNDI diagrams.
     *
     * @param {Root|ModdleElement} planeElement
     *
     * @return {Root}
     */
    SubProcessPlaneBehavior.prototype._addDiagram = function(planeElement) {
      var bpmnjs = this._bpmnjs;
      var diagrams = bpmnjs.getDefinitions().diagrams;

      if (!planeElement.businessObject) {
        planeElement = this._createNewDiagram(planeElement);
      }

      diagrams.push(planeElement.di.$parent);

      return planeElement;
    };


    /**
     * Creates a new plane element for the given sub process.
     *
     * @param {ModdleElement} bpmnElement
     *
     * @return {Root}
     */
    SubProcessPlaneBehavior.prototype._createNewDiagram = function(bpmnElement) {
      var bpmnFactory = this._bpmnFactory,
          elementFactory = this._elementFactory;

      var diPlane = bpmnFactory.create('bpmndi:BPMNPlane', {
        bpmnElement: bpmnElement
      });

      var diDiagram = bpmnFactory.create('bpmndi:BPMNDiagram', {
        plane: diPlane
      });

      diPlane.$parent = diDiagram;

      // add a virtual element (not being drawn),
      // a copy cat of our BpmnImporter code
      var planeElement = elementFactory.createRoot({
        id: getPlaneIdFromShape(bpmnElement),
        type: bpmnElement.$type,
        di: diPlane,
        businessObject: bpmnElement,
        collapsed: true
      });

      return planeElement;
    };

    /**
     * Removes the diagram for a given root element.
     *
     * @param {Root} rootElement
     *
     * @return {ModdleElement}
     */
    SubProcessPlaneBehavior.prototype._removeDiagram = function(rootElement) {
      var bpmnjs = this._bpmnjs;

      var diagrams = bpmnjs.getDefinitions().diagrams;

      var removedDiagram = find$1(diagrams, function(diagram) {
        return diagram.plane.bpmnElement.id === rootElement.id;
      });

      diagrams.splice(diagrams.indexOf(removedDiagram), 1);

      return removedDiagram;
    };


    SubProcessPlaneBehavior.$inject = [
      'canvas',
      'eventBus',
      'modeling',
      'elementFactory',
      'bpmnFactory',
      'bpmnjs',
      'elementRegistry'
    ];

    /**
     * @typedef {import('didi').Injector} Injector
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * Add start event replacing element with expanded sub process.
     *
     * @param {Injector} injector
     * @param {Modeling} modeling
     */
    function SubProcessStartEventBehavior(injector, modeling) {
      injector.invoke(CommandInterceptor, this);

      this.postExecuted('shape.replace', function(event) {
        var oldShape = event.context.oldShape,
            newShape = event.context.newShape;

        if (
          !is$2(newShape, 'bpmn:SubProcess') ||
          ! (is$2(oldShape, 'bpmn:Task') || is$2(oldShape, 'bpmn:CallActivity')) ||
          !isExpanded(newShape)
        ) {
          return;
        }

        var position = getStartEventPosition(newShape);

        modeling.createShape({ type: 'bpmn:StartEvent' }, position, newShape);
      });
    }

    SubProcessStartEventBehavior.$inject = [
      'injector',
      'modeling'
    ];

    e(SubProcessStartEventBehavior, CommandInterceptor);

    // helpers //////////

    function getStartEventPosition(shape) {
      return {
        x: shape.x + shape.width / 6,
        y: shape.y + shape.height / 2
      };
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     *
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
     */

    /**
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function ToggleCollapseConnectionBehaviour(
        eventBus, modeling
    ) {

      CommandInterceptor.call(this, eventBus);

      this.postExecuted('shape.toggleCollapse', 1500, function(context) {

        // var shape = context.shape;
        var shape = context.shape;

        // only change connections when collapsing
        if (isExpanded(shape)) {
          return;
        }

        var allChildren = selfAndAllChildren(shape);

        allChildren.forEach(function(child) {

          // Ensure that the connection array is not modified during iteration
          var incomingConnections = child.incoming.slice(),
              outgoingConnections = child.outgoing.slice();

          forEach$1(incomingConnections, function(c) {
            handleConnection(c, true);
          });

          forEach$1(outgoingConnections, function(c) {
            handleConnection(c, false);
          });
        });


        function handleConnection(c, incoming) {
          if (allChildren.indexOf(c.source) !== -1 && allChildren.indexOf(c.target) !== -1) {
            return;
          }

          if (incoming) {
            modeling.reconnectEnd(c, shape, getMid(shape));
          } else {
            modeling.reconnectStart(c, shape, getMid(shape));
          }

        }

      }, true);

    }

    e(ToggleCollapseConnectionBehaviour, CommandInterceptor);

    ToggleCollapseConnectionBehaviour.$inject = [
      'eventBus',
      'modeling',
    ];

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../ElementFactory').default} ElementFactory
     * @typedef {import('../Modeling').default} Modeling
     */

    var LOW_PRIORITY$c = 500;

    /**
     * @param {EventBus} eventBus
     * @param {ElementFactory} elementFactory
     * @param {Modeling} modeling
     */
    function ToggleElementCollapseBehaviour(
        eventBus, elementFactory, modeling) {

      CommandInterceptor.call(this, eventBus);


      function hideEmptyLabels(children) {
        if (children.length) {
          children.forEach(function(child) {
            if (child.type === 'label' && !child.businessObject.name) {
              child.hidden = true;
            }
          });
        }
      }

      function expandedBounds(shape, defaultSize) {
        var children = shape.children,
            newBounds = defaultSize,
            visibleElements,
            visibleBBox;

        visibleElements = filterVisible(children).concat([ shape ]);

        visibleBBox = computeChildrenBBox(visibleElements);

        if (visibleBBox) {

          // center to visibleBBox with max(defaultSize, childrenBounds)
          newBounds.width = Math.max(visibleBBox.width, newBounds.width);
          newBounds.height = Math.max(visibleBBox.height, newBounds.height);

          newBounds.x = visibleBBox.x + (visibleBBox.width - newBounds.width) / 2;
          newBounds.y = visibleBBox.y + (visibleBBox.height - newBounds.height) / 2;
        } else {

          // center to collapsed shape with defaultSize
          newBounds.x = shape.x + (shape.width - newBounds.width) / 2;
          newBounds.y = shape.y + (shape.height - newBounds.height) / 2;
        }

        return newBounds;
      }

      function collapsedBounds(shape, defaultSize) {

        return {
          x: shape.x + (shape.width - defaultSize.width) / 2,
          y: shape.y + (shape.height - defaultSize.height) / 2,
          width: defaultSize.width,
          height: defaultSize.height
        };
      }

      this.executed([ 'shape.toggleCollapse' ], LOW_PRIORITY$c, function(e) {

        var context = e.context,
            shape = context.shape;

        if (!is$2(shape, 'bpmn:SubProcess')) {
          return;
        }

        if (!shape.collapsed) {

          // all children got made visible through djs, hide empty labels
          hideEmptyLabels(shape.children);

          // remove collapsed marker
          getDi(shape).isExpanded = true;
        } else {

          // place collapsed marker
          getDi(shape).isExpanded = false;
        }
      });

      this.reverted([ 'shape.toggleCollapse' ], LOW_PRIORITY$c, function(e) {

        var context = e.context;
        var shape = context.shape;


        // revert removing/placing collapsed marker
        if (!shape.collapsed) {
          getDi(shape).isExpanded = true;

        } else {
          getDi(shape).isExpanded = false;
        }
      });

      this.postExecuted([ 'shape.toggleCollapse' ], LOW_PRIORITY$c, function(e) {
        var shape = e.context.shape,
            defaultSize = elementFactory.getDefaultSize(shape),
            newBounds;

        if (shape.collapsed) {

          // resize to default size of collapsed shapes
          newBounds = collapsedBounds(shape, defaultSize);
        } else {

          // resize to bounds of max(visible children, defaultSize)
          newBounds = expandedBounds(shape, defaultSize);
        }

        modeling.resizeShape(shape, newBounds, null, {
          autoResize: shape.collapsed ? false : 'nwse'
        });
      });

    }


    e(ToggleElementCollapseBehaviour, CommandInterceptor);

    ToggleElementCollapseBehaviour.$inject = [
      'eventBus',
      'elementFactory',
      'modeling'
    ];


    // helpers //////////////////////

    function filterVisible(elements) {
      return elements.filter(function(e) {
        return !e.hidden;
      });
    }

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('didi').Injector} Injector
     * @typedef {import('../Modeling').default} Modeling
     *
     * @typedef {import('../../../model/Types').Moddle} Moddle
     */

    /**
     * Unclaims model IDs on element deletion.
     *
     * @param {Canvas} canvas
     * @param {Injector} injector
     * @param {Moddle} moddle
     * @param {Modeling} modeling
     */
    function UnclaimIdBehavior(canvas, injector, moddle, modeling) {
      injector.invoke(CommandInterceptor, this);

      this.preExecute('shape.delete', function(event) {
        var context = event.context,
            shape = context.shape,
            shapeBo = shape.businessObject;

        if (isLabel$3(shape)) {
          return;
        }

        if (is$2(shape, 'bpmn:Participant') && isExpanded(shape)) {
          moddle.ids.unclaim(shapeBo.processRef.id);
        }

        modeling.unclaimId(shapeBo.id, shapeBo);
      });


      this.preExecute('connection.delete', function(event) {
        var context = event.context,
            connection = context.connection,
            connectionBo = connection.businessObject;

        modeling.unclaimId(connectionBo.id, connectionBo);
      });

      this.preExecute('canvas.updateRoot', function() {
        var rootElement = canvas.getRootElement(),
            rootElementBo = rootElement.businessObject;

        if (is$2(rootElement, 'bpmn:Collaboration')) {
          moddle.ids.unclaim(rootElementBo.id);
        }
      });
    }

    e(UnclaimIdBehavior, CommandInterceptor);

    UnclaimIdBehavior.$inject = [ 'canvas', 'injector', 'moddle', 'modeling' ];

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A behavior that unsets the Default property of sequence flow source on
     * element delete, if the removed element is the Gateway or Task's default flow.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function DeleteSequenceFlowBehavior(eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);


      this.preExecute('connection.delete', function(event) {
        var context = event.context,
            connection = context.connection,
            source = connection.source;

        if (isDefaultFlow(connection, source)) {
          modeling.updateProperties(source, {
            'default': null
          });
        }
      });
    }

    e(DeleteSequenceFlowBehavior, CommandInterceptor);

    DeleteSequenceFlowBehavior.$inject = [
      'eventBus',
      'modeling'
    ];


    // helpers //////////////////////

    function isDefaultFlow(connection, source) {

      if (!is$2(connection, 'bpmn:SequenceFlow')) {
        return false;
      }

      var sourceBo = getBusinessObject(source),
          sequenceFlow = getBusinessObject(connection);

      return sourceBo.get('default') === sequenceFlow;
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     */

    var LOW_PRIORITY$b = 500,
        HIGH_PRIORITY$6 = 5000;


    /**
     * BPMN specific delete lane behavior.
     *
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     * @param {Translate} translate
     */
    function UpdateFlowNodeRefsBehavior(eventBus, modeling, translate) {

      CommandInterceptor.call(this, eventBus);

      /**
       * Update Lane#flowNodeRefs and FlowNode#lanes with every flow node
       * move/resize and lane move/resize. Groups elements to recompute containments
       * as efficient as possible.
       */

      // the update context
      var context;


      function initContext() {
        context = context || new UpdateContext();
        context.enter();

        return context;
      }

      function getContext() {
        if (!context) {
          throw new Error(translate('out of bounds release'));
        }

        return context;
      }

      function releaseContext() {

        if (!context) {
          throw new Error(translate('out of bounds release'));
        }

        var triggerUpdate = context.leave();

        if (triggerUpdate) {
          modeling.updateLaneRefs(context.flowNodes, context.lanes);

          context = null;
        }

        return triggerUpdate;
      }


      var laneRefUpdateEvents = [
        'spaceTool',
        'lane.add',
        'lane.resize',
        'lane.split',
        'elements.create',
        'elements.delete',
        'elements.move',
        'shape.create',
        'shape.delete',
        'shape.move',
        'shape.resize'
      ];


      // listen to a lot of stuff to group lane updates

      this.preExecute(laneRefUpdateEvents, HIGH_PRIORITY$6, function(event) {
        initContext();
      });

      this.postExecuted(laneRefUpdateEvents, LOW_PRIORITY$b, function(event) {
        releaseContext();
      });


      // Mark flow nodes + lanes that need an update

      this.preExecute([
        'shape.create',
        'shape.move',
        'shape.delete',
        'shape.resize'
      ], function(event) {

        var context = event.context,
            shape = context.shape;

        var updateContext = getContext();

        // no need to update labels
        if (shape.labelTarget) {
          return;
        }

        if (is$2(shape, 'bpmn:Lane')) {
          updateContext.addLane(shape);
        }

        if (is$2(shape, 'bpmn:FlowNode')) {
          updateContext.addFlowNode(shape);
        }
      });
    }

    UpdateFlowNodeRefsBehavior.$inject = [
      'eventBus',
      'modeling' ,
      'translate'
    ];

    e(UpdateFlowNodeRefsBehavior, CommandInterceptor);


    function UpdateContext() {

      this.flowNodes = [];
      this.lanes = [];

      this.counter = 0;

      this.addLane = function(lane) {
        this.lanes.push(lane);
      };

      this.addFlowNode = function(flowNode) {
        this.flowNodes.push(flowNode);
      };

      this.enter = function() {
        this.counter++;
      };

      this.leave = function() {
        this.counter--;

        return !this.counter;
      };
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var BehaviorModule = {
      __init__: [
        'adaptiveLabelPositioningBehavior',
        'appendBehavior',
        'associationBehavior',
        'attachEventBehavior',
        'boundaryEventBehavior',
        'createBehavior',
        'createDataObjectBehavior',
        'createParticipantBehavior',
        'dataInputAssociationBehavior',
        'dataStoreBehavior',
        'deleteLaneBehavior',
        'detachEventBehavior',
        'dropOnFlowBehavior',
        'eventBasedGatewayBehavior',
        'fixHoverBehavior',
        'groupBehavior',
        'importDockingFix',
        'isHorizontalFix',
        'labelBehavior',
        'layoutConnectionBehavior',
        'messageFlowBehavior',
        'modelingFeedback',
        'removeElementBehavior',
        'removeEmbeddedLabelBoundsBehavior',
        'removeParticipantBehavior',
        'replaceConnectionBehavior',
        'replaceElementBehaviour',
        'resizeBehavior',
        'resizeLaneBehavior',
        'rootElementReferenceBehavior',
        'spaceToolBehavior',
        'subProcessPlaneBehavior',
        'subProcessStartEventBehavior',
        'toggleCollapseConnectionBehaviour',
        'toggleElementCollapseBehaviour',
        'unclaimIdBehavior',
        'updateFlowNodeRefsBehavior',
        'unsetDefaultFlowBehavior'
      ],
      adaptiveLabelPositioningBehavior: [ 'type', AdaptiveLabelPositioningBehavior ],
      appendBehavior: [ 'type', AppendBehavior ],
      associationBehavior: [ 'type', AssociationBehavior ],
      attachEventBehavior: [ 'type', AttachEventBehavior ],
      boundaryEventBehavior: [ 'type', BoundaryEventBehavior ],
      createBehavior: [ 'type', CreateBehavior ],
      createDataObjectBehavior: [ 'type', CreateDataObjectBehavior ],
      createParticipantBehavior: [ 'type', CreateParticipantBehavior ],
      dataInputAssociationBehavior: [ 'type', DataInputAssociationBehavior ],
      dataStoreBehavior: [ 'type', DataStoreBehavior ],
      deleteLaneBehavior: [ 'type', DeleteLaneBehavior ],
      detachEventBehavior: [ 'type', DetachEventBehavior ],
      dropOnFlowBehavior: [ 'type', DropOnFlowBehavior ],
      eventBasedGatewayBehavior: [ 'type', EventBasedGatewayBehavior ],
      fixHoverBehavior: [ 'type', FixHoverBehavior ],
      groupBehavior: [ 'type', GroupBehavior ],
      importDockingFix: [ 'type', ImportDockingFix ],
      isHorizontalFix: [ 'type', IsHorizontalFix ],
      labelBehavior: [ 'type', LabelBehavior ],
      layoutConnectionBehavior: [ 'type', LayoutConnectionBehavior ],
      messageFlowBehavior: [ 'type', MessageFlowBehavior ],
      modelingFeedback: [ 'type', ModelingFeedback ],
      removeElementBehavior: [ 'type', RemoveElementBehavior ],
      removeEmbeddedLabelBoundsBehavior: [ 'type', RemoveEmbeddedLabelBoundsBehavior ],
      removeParticipantBehavior: [ 'type', RemoveParticipantBehavior ],
      replaceConnectionBehavior: [ 'type', ReplaceConnectionBehavior ],
      replaceElementBehaviour: [ 'type', ReplaceElementBehaviour ],
      resizeBehavior: [ 'type', ResizeBehavior ],
      resizeLaneBehavior: [ 'type', ResizeLaneBehavior ],
      rootElementReferenceBehavior: [ 'type', RootElementReferenceBehavior ],
      spaceToolBehavior: [ 'type', SpaceToolBehavior ],
      subProcessPlaneBehavior: [ 'type', SubProcessPlaneBehavior ],
      subProcessStartEventBehavior: [ 'type', SubProcessStartEventBehavior ],
      toggleCollapseConnectionBehaviour: [ 'type', ToggleCollapseConnectionBehaviour ],
      toggleElementCollapseBehaviour : [ 'type', ToggleElementCollapseBehaviour ],
      unclaimIdBehavior: [ 'type', UnclaimIdBehavior ],
      unsetDefaultFlowBehavior: [ 'type', DeleteSequenceFlowBehavior ],
      updateFlowNodeRefsBehavior: [ 'type', UpdateFlowNodeRefsBehavior ]
    };

    /**
     * @typedef {import('didi').Injector} Injector
     */

    /**
     * A service that provides rules for certain diagram actions.
     *
     * The default implementation will hook into the {@link CommandStack}
     * to perform the actual rule evaluation. Make sure to provide the
     * `commandStack` service with this module if you plan to use it.
     *
     * Together with this implementation you may use the {@link import('./RuleProvider').default}
     * to implement your own rule checkers.
     *
     * This module is ment to be easily replaced, thus the tiny foot print.
     *
     * @param {Injector} injector
     */
    function Rules(injector) {
      this._commandStack = injector.get('commandStack', false);
    }

    Rules.$inject = [ 'injector' ];


    /**
     * Returns whether or not a given modeling action can be executed
     * in the specified context.
     *
     * This implementation will respond with allow unless anyone
     * objects.
     *
     * @param {string} action The action to be allowed or disallowed.
     * @param {Object} [context] The context for allowing or disallowing the action.
     *
     * @return {boolean|null} Wether the action is allowed. Returns `null` if the action
     * is to be ignored.
     */
    Rules.prototype.allowed = function(action, context) {
      var allowed = true;

      var commandStack = this._commandStack;

      if (commandStack) {
        allowed = commandStack.canExecute(action, context);
      }

      // map undefined to true, i.e. no rules
      return allowed === undefined ? true : allowed;
    };

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var RulesModule$1 = {
      __init__: [ 'rules' ],
      rules: [ 'type', Rules ]
    };

    /**
     * @typedef {import('../../core/EventBus').default} EventBus
     */

    /**
     * A basic provider that may be extended to implement modeling rules.
     *
     * Extensions should implement the init method to actually add their custom
     * modeling checks. Checks may be added via the #addRule(action, fn) method.
     *
     * @class
     *
     * @param {EventBus} eventBus
     */
    function RuleProvider(eventBus) {
      CommandInterceptor.call(this, eventBus);

      this.init();
    }

    RuleProvider.$inject = [ 'eventBus' ];

    e(RuleProvider, CommandInterceptor);


    /**
     * Adds a modeling rule for the given action, implemented through
     * a callback function.
     *
     * The callback receives a modeling specific action context
     * to perform its check. It must return `false` to disallow the
     * action from happening or `true` to allow the action. Usually returing
     * `null` denotes that a particular interaction shall be ignored.
     * By returning nothing or `undefined` you pass evaluation to lower
     * priority rules.
     *
     * @example
     *
     * ```javascript
     * ResizableRules.prototype.init = function() {
     *
     *   \/**
     *    * Return `true`, `false` or nothing to denote
     *    * _allowed_, _not allowed_ and _continue evaluating_.
     *    *\/
     *   this.addRule('shape.resize', function(context) {
     *
     *     var shape = context.shape;
     *
     *     if (!context.newBounds) {
     *       // check general resizability
     *       if (!shape.resizable) {
     *         return false;
     *       }
     *
     *       // not returning anything (read: undefined)
     *       // will continue the evaluation of other rules
     *       // (with lower priority)
     *       return;
     *     } else {
     *       // element must have minimum size of 10*10 points
     *       return context.newBounds.width > 10 && context.newBounds.height > 10;
     *     }
     *   });
     * };
     * ```
     *
     * @param {string|string[]} actions the identifier for the modeling action to check
     * @param {number} [priority] the priority at which this rule is being applied
     * @param {(any) => any} fn the callback function that performs the actual check
     */
    RuleProvider.prototype.addRule = function(actions, priority, fn) {

      var self = this;

      if (typeof actions === 'string') {
        actions = [ actions ];
      }

      actions.forEach(function(action) {

        self.canExecute(action, priority, function(context, action, event) {
          return fn(context);
        }, true);
      });
    };

    /**
     * Implement this method to add new rules during provider initialization.
     */
    RuleProvider.prototype.init = function() {};

    /**
     * @typedef {import('diagram-js/lib/util/Types').DirectionTRBL} DirectionTRBL
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     */

    /**
     * @param {Point} position
     * @param {Rect} targetBounds
     *
     * @return {DirectionTRBL|null}
     */
    function getBoundaryAttachment(position, targetBounds) {

      var orientation = getOrientation(position, targetBounds, -15);

      if (orientation !== 'intersect') {
        return orientation;
      } else {
        return null;
      }
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     *
     * @typedef {import('../../model/Types').Connection} Connection
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Shape} Shape
     * @typedef {import('../../model/Types').ModdleElement} ModdleElement
     *
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     *
     * @typedef { {
     *   associationDirection?: string;
     *   type: string;
     * } | boolean | null } CanConnectResult
     *
     * @typedef { {
     *   id: string;
     *   type: string;
     * } | boolean } CanReplaceResult
     */

    /**
     * BPMN-specific modeling rules.
     *
     * @param {EventBus} eventBus
     */
    function BpmnRules(eventBus) {
      RuleProvider.call(this, eventBus);
    }

    e(BpmnRules, RuleProvider);

    BpmnRules.$inject = [ 'eventBus' ];

    BpmnRules.prototype.init = function() {

      this.addRule('connection.start', function(context) {
        var source = context.source;

        return canStartConnection(source);
      });

      this.addRule('connection.create', function(context) {
        var source = context.source,
            target = context.target,
            hints = context.hints || {},
            targetParent = hints.targetParent,
            targetAttach = hints.targetAttach;

        // don't allow incoming connections on
        // newly created boundary events
        // to boundary events
        if (targetAttach) {
          return false;
        }

        // temporarily set target parent for scoping
        // checks to work
        if (targetParent) {
          target.parent = targetParent;
        }

        try {
          return canConnect(source, target);
        } finally {

          // unset temporary target parent
          if (targetParent) {
            target.parent = null;
          }
        }
      });

      this.addRule('connection.reconnect', function(context) {

        var connection = context.connection,
            source = context.source,
            target = context.target;

        return canConnect(source, target, connection);
      });

      this.addRule('connection.updateWaypoints', function(context) {
        return {
          type: context.connection.type
        };
      });

      this.addRule('shape.resize', function(context) {

        var shape = context.shape,
            newBounds = context.newBounds;

        return canResize(shape, newBounds);
      });

      this.addRule('elements.create', function(context) {
        var elements = context.elements,
            position = context.position,
            target = context.target;

        if (isConnection$7(target) && !canInsert(elements, target)) {
          return false;
        }

        return every(elements, function(element) {
          if (isConnection$7(element)) {
            return canConnect(element.source, element.target, element);
          }

          if (element.host) {
            return canAttach(element, element.host, null, position);
          }

          return canCreate(element, target, null);
        });
      });

      this.addRule('elements.move', function(context) {

        var target = context.target,
            shapes = context.shapes,
            position = context.position;

        return canAttach(shapes, target, null, position) ||
               canReplace(shapes, target, position) ||
               canMove(shapes, target) ||
               canInsert(shapes, target);
      });

      this.addRule('shape.create', function(context) {
        return canCreate(
          context.shape,
          context.target,
          context.source,
          context.position
        );
      });

      this.addRule('shape.attach', function(context) {

        return canAttach(
          context.shape,
          context.target,
          null,
          context.position
        );
      });

      this.addRule('element.copy', function(context) {
        var element = context.element,
            elements = context.elements;

        return canCopy(elements, element);
      });
    };

    BpmnRules.prototype.canConnectMessageFlow = canConnectMessageFlow;

    BpmnRules.prototype.canConnectSequenceFlow = canConnectSequenceFlow;

    BpmnRules.prototype.canConnectDataAssociation = canConnectDataAssociation;

    BpmnRules.prototype.canConnectAssociation = canConnectAssociation;

    BpmnRules.prototype.canMove = canMove;

    BpmnRules.prototype.canAttach = canAttach;

    BpmnRules.prototype.canReplace = canReplace;

    BpmnRules.prototype.canDrop = canDrop;

    BpmnRules.prototype.canInsert = canInsert;

    BpmnRules.prototype.canCreate = canCreate;

    BpmnRules.prototype.canConnect = canConnect;

    BpmnRules.prototype.canResize = canResize;

    BpmnRules.prototype.canCopy = canCopy;

    /**
     * Utility functions for rule checking
     */

    /**
     * Checks if given element can be used for starting connection.
     *
     * @param  {Element} source
     *
     * @return {boolean}
     */
    function canStartConnection(element) {
      if (nonExistingOrLabel(element)) {
        return null;
      }

      return isAny(element, [
        'bpmn:FlowNode',
        'bpmn:InteractionNode',
        'bpmn:DataObjectReference',
        'bpmn:DataStoreReference',
        'bpmn:Group',
        'bpmn:TextAnnotation'
      ]);
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function nonExistingOrLabel(element) {
      return !element || isLabel$3(element);
    }

    function isSame$1(a, b) {
      return a === b;
    }

    /**
     * @param {Element} element
     *
     * @return {ModdleElement}
     */
    function getOrganizationalParent(element) {

      do {
        if (is$2(element, 'bpmn:Process')) {
          return getBusinessObject(element);
        }

        if (is$2(element, 'bpmn:Participant')) {
          return (
            getBusinessObject(element).processRef ||
            getBusinessObject(element)
          );
        }
      } while ((element = element.parent));

    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isTextAnnotation(element) {
      return is$2(element, 'bpmn:TextAnnotation');
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isGroup(element) {
      return is$2(element, 'bpmn:Group') && !element.labelTarget;
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isCompensationBoundary(element) {
      return is$2(element, 'bpmn:BoundaryEvent') &&
             hasEventDefinition$1(element, 'bpmn:CompensateEventDefinition');
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isForCompensation(element) {
      return getBusinessObject(element).isForCompensation;
    }

    /**
     * @param {Element} a
     * @param {Element} b
     *
     * @return {boolean}
     */
    function isSameOrganization(a, b) {
      var parentA = getOrganizationalParent(a),
          parentB = getOrganizationalParent(b);

      return parentA === parentB;
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isMessageFlowSource(element) {
      return (
        is$2(element, 'bpmn:InteractionNode') &&
        !is$2(element, 'bpmn:BoundaryEvent') && (
          !is$2(element, 'bpmn:Event') || (
            is$2(element, 'bpmn:ThrowEvent') &&
            hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')
          )
        )
      );
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isMessageFlowTarget(element) {
      return (
        is$2(element, 'bpmn:InteractionNode') &&
        !isForCompensation(element) && (
          !is$2(element, 'bpmn:Event') || (
            is$2(element, 'bpmn:CatchEvent') &&
            hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')
          )
        ) && !(
          is$2(element, 'bpmn:BoundaryEvent') &&
          !hasEventDefinition$1(element, 'bpmn:MessageEventDefinition')
        )
      );
    }

    /**
     * @param {Element} element
     *
     * @return {ModdleElement}
     */
    function getScopeParent(element) {

      var parent = element;

      while ((parent = parent.parent)) {

        if (is$2(parent, 'bpmn:FlowElementsContainer')) {
          return getBusinessObject(parent);
        }

        if (is$2(parent, 'bpmn:Participant')) {
          return getBusinessObject(parent).processRef;
        }
      }

      return null;
    }

    /**
     * @param {Element} a
     * @param {Element} b
     *
     * @return {boolean}
     */
    function isSameScope(a, b) {
      var scopeParentA = getScopeParent(a),
          scopeParentB = getScopeParent(b);

      return scopeParentA === scopeParentB;
    }

    /**
     * @param {Element} element
     * @param {string} eventDefinition
     *
     * @return {boolean}
     */
    function hasEventDefinition$1(element, eventDefinition) {
      var businessObject = getBusinessObject(element);

      return !!find$1(businessObject.eventDefinitions || [], function(definition) {
        return is$2(definition, eventDefinition);
      });
    }

    /**
     * @param {Element} element
     * @param {string} eventDefinition
     *
     * @return {boolean}
     */
    function hasEventDefinitionOrNone(element, eventDefinition) {
      var businessObject = getBusinessObject(element);

      return (businessObject.eventDefinitions || []).every(function(definition) {
        return is$2(definition, eventDefinition);
      });
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isSequenceFlowSource(element) {
      return (
        is$2(element, 'bpmn:FlowNode') &&
        !is$2(element, 'bpmn:EndEvent') &&
        !isEventSubProcess(element) &&
        !(is$2(element, 'bpmn:IntermediateThrowEvent') &&
          hasEventDefinition$1(element, 'bpmn:LinkEventDefinition')
        ) &&
        !isCompensationBoundary(element) &&
        !isForCompensation(element)
      );
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isSequenceFlowTarget(element) {
      return (
        is$2(element, 'bpmn:FlowNode') &&
        !is$2(element, 'bpmn:StartEvent') &&
        !is$2(element, 'bpmn:BoundaryEvent') &&
        !isEventSubProcess(element) &&
        !(is$2(element, 'bpmn:IntermediateCatchEvent') &&
          hasEventDefinition$1(element, 'bpmn:LinkEventDefinition')
        ) &&
        !isForCompensation(element)
      );
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isEventBasedTarget(element) {
      return (
        is$2(element, 'bpmn:ReceiveTask') || (
          is$2(element, 'bpmn:IntermediateCatchEvent') && (
            hasEventDefinition$1(element, 'bpmn:MessageEventDefinition') ||
            hasEventDefinition$1(element, 'bpmn:TimerEventDefinition') ||
            hasEventDefinition$1(element, 'bpmn:ConditionalEventDefinition') ||
            hasEventDefinition$1(element, 'bpmn:SignalEventDefinition')
          )
        )
      );
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isConnection$7(element) {
      return element.waypoints;
    }

    /**
     * @param {Element} element
     *
     * @return {Shape[]}
     */
    function getParents(element) {

      var parents = [];

      while (element) {
        element = element.parent;

        if (element) {
          parents.push(element);
        }
      }

      return parents;
    }

    /**
     * @param {Shape} possibleParent
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isParent(possibleParent, element) {
      var allParents = getParents(element);

      return allParents.indexOf(possibleParent) !== -1;
    }

    /**
     * @param {Element} source
     * @param {Element} target
     * @param {Connection} connection
     *
     * @return {CanConnectResult}
     */
    function canConnect(source, target, connection) {

      if (nonExistingOrLabel(source) || nonExistingOrLabel(target)) {
        return null;
      }

      if (!is$2(connection, 'bpmn:DataAssociation')) {

        if (canConnectMessageFlow(source, target)) {
          return { type: 'bpmn:MessageFlow' };
        }

        if (canConnectSequenceFlow(source, target)) {
          return { type: 'bpmn:SequenceFlow' };
        }
      }

      var connectDataAssociation = canConnectDataAssociation(source, target);

      if (connectDataAssociation) {
        return connectDataAssociation;
      }

      if (isCompensationBoundary(source) && isForCompensation(target)) {
        return {
          type: 'bpmn:Association',
          associationDirection: 'One'
        };
      }

      if (canConnectAssociation(source, target)) {

        return {
          type: 'bpmn:Association'
        };
      }

      return false;
    }

    /**
     * Can an element be dropped into the target element.
     *
     * @param {Element} element
     * @param {Shape} target
     *
     * @return {boolean}
     */
    function canDrop(element, target) {

      // can move labels and groups everywhere
      if (isLabel$3(element) || isGroup(element)) {
        return true;
      }


      // disallow to create elements on collapsed pools
      if (is$2(target, 'bpmn:Participant') && !isExpanded(target)) {
        return false;
      }

      // allow to create new participants on
      // existing collaboration and process diagrams
      if (is$2(element, 'bpmn:Participant')) {
        return is$2(target, 'bpmn:Process') || is$2(target, 'bpmn:Collaboration');
      }

      // allow moving DataInput / DataOutput within its original container only
      if (isAny(element, [ 'bpmn:DataInput', 'bpmn:DataOutput' ])) {

        if (element.parent) {
          return target === element.parent;
        }
      }

      // allow creating lanes on participants and other lanes only
      if (is$2(element, 'bpmn:Lane')) {
        return is$2(target, 'bpmn:Participant') || is$2(target, 'bpmn:Lane');
      }

      // disallow dropping boundary events which cannot replace with intermediate event
      if (is$2(element, 'bpmn:BoundaryEvent') && !isDroppableBoundaryEvent(element)) {
        return false;
      }

      // drop flow elements onto flow element containers
      // and participants
      if (is$2(element, 'bpmn:FlowElement') && !is$2(element, 'bpmn:DataStoreReference')) {
        if (is$2(target, 'bpmn:FlowElementsContainer')) {
          return isExpanded(target);
        }

        return isAny(target, [ 'bpmn:Participant', 'bpmn:Lane' ]);
      }

      // disallow dropping data store reference if there is no process to append to
      if (is$2(element, 'bpmn:DataStoreReference') && is$2(target, 'bpmn:Collaboration')) {
        return some(getBusinessObject(target).get('participants'), function(participant) {
          return !!participant.get('processRef');
        });
      }

      // account for the fact that data associations are always
      // rendered and moved to top (Process or Collaboration level)
      //
      // artifacts may be placed wherever, too
      if (isAny(element, [ 'bpmn:Artifact', 'bpmn:DataAssociation', 'bpmn:DataStoreReference' ])) {
        return isAny(target, [
          'bpmn:Collaboration',
          'bpmn:Lane',
          'bpmn:Participant',
          'bpmn:Process',
          'bpmn:SubProcess' ]);
      }

      if (is$2(element, 'bpmn:MessageFlow')) {
        return is$2(target, 'bpmn:Collaboration')
          || element.source.parent == target
          || element.target.parent == target;
      }

      return false;
    }

    /**
     * @param {Shape} event
     *
     * @return {boolean}
     */
    function isDroppableBoundaryEvent(event) {
      return getBusinessObject(event).cancelActivity && (
        hasNoEventDefinition(event) || hasCommonBoundaryIntermediateEventDefinition(event)
      );
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isBoundaryEvent(element) {
      return !isLabel$3(element) && is$2(element, 'bpmn:BoundaryEvent');
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isLane(element) {
      return is$2(element, 'bpmn:Lane');
    }

    /**
     * `bpmn:IntermediateThrowEvents` are treated as boundary events during create.
     *
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isBoundaryCandidate(element) {
      if (isBoundaryEvent(element)) {
        return true;
      }

      if (is$2(element, 'bpmn:IntermediateThrowEvent') && hasNoEventDefinition(element)) {
        return true;
      }

      return (
        is$2(element, 'bpmn:IntermediateCatchEvent') &&
        hasCommonBoundaryIntermediateEventDefinition(element)
      );
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function hasNoEventDefinition(element) {
      var businessObject = getBusinessObject(element);

      return businessObject && !(businessObject.eventDefinitions && businessObject.eventDefinitions.length);
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function hasCommonBoundaryIntermediateEventDefinition(element) {
      return hasOneOfEventDefinitions(element, [
        'bpmn:MessageEventDefinition',
        'bpmn:TimerEventDefinition',
        'bpmn:SignalEventDefinition',
        'bpmn:ConditionalEventDefinition'
      ]);
    }

    /**
     * @param {Element} element
     * @param {string[]} eventDefinitions
     *
     * @return {boolean}
     */
    function hasOneOfEventDefinitions(element, eventDefinitions) {
      return eventDefinitions.some(function(definition) {
        return hasEventDefinition$1(element, definition);
      });
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isReceiveTaskAfterEventBasedGateway(element) {
      return (
        is$2(element, 'bpmn:ReceiveTask') &&
        find$1(element.incoming, function(incoming) {
          return is$2(incoming.source, 'bpmn:EventBasedGateway');
        })
      );
    }

    /**
     * TODO(philippfromme): remove `source` parameter
     *
     * @param {Element[]} elements
     * @param {Shape} target
     * @param {Element} source
     * @param {Point} position
     *
     * @return {boolean}
     */
    function canAttach(elements, target, source, position) {

      if (!Array.isArray(elements)) {
        elements = [ elements ];
      }

      // only (re-)attach one element at a time
      if (elements.length !== 1) {
        return false;
      }

      var element = elements[0];

      // do not attach labels
      if (isLabel$3(element)) {
        return false;
      }

      // only handle boundary events
      if (!isBoundaryCandidate(element)) {
        return false;
      }

      // disallow drop on event sub processes
      if (isEventSubProcess(target)) {
        return false;
      }

      // only allow drop on non compensation activities
      if (!is$2(target, 'bpmn:Activity') || isForCompensation(target)) {
        return false;
      }

      // only attach to subprocess border
      if (position && !getBoundaryAttachment(position, target)) {
        return false;
      }

      // do not attach on receive tasks after event based gateways
      if (isReceiveTaskAfterEventBasedGateway(target)) {
        return false;
      }

      return 'attach';
    }

    /**
     * Check whether the given elements can be replaced. Return all elements which
     * can be replaced.
     *
     * @example
     *
     * ```javascript
     * [{
     *   id: 'IntermediateEvent_1',
     *   type: 'bpmn:StartEvent'
     * },
     * {
     *   id: 'Task_1',
     *   type: 'bpmn:ServiceTask'
     * }]
     * ```
     *
     * @param  {Element[]} elements
     * @param  {Shape} [target]
     *
     * @return {CanReplaceResult}
     */
    function canReplace(elements, target, position) {

      if (!target) {
        return false;
      }

      var canExecute = {
        replacements: []
      };

      forEach$1(elements, function(element) {

        if (!isEventSubProcess(target)) {

          if (is$2(element, 'bpmn:StartEvent') &&
              element.type !== 'label' &&
              canDrop(element, target)) {

            // replace a non-interrupting start event by a blank interrupting start event
            // when the target is not an event sub process
            if (!isInterrupting(element)) {
              canExecute.replacements.push({
                oldElementId: element.id,
                newElementType: 'bpmn:StartEvent'
              });
            }

            // replace an error/escalation/compensate start event by a blank interrupting start event
            // when the target is not an event sub process
            if (hasErrorEventDefinition(element) ||
                hasEscalationEventDefinition(element) ||
                hasCompensateEventDefinition(element)) {
              canExecute.replacements.push({
                oldElementId: element.id,
                newElementType: 'bpmn:StartEvent'
              });
            }

            // replace a typed start event by a blank interrupting start event
            // when the target is a sub process but not an event sub process
            if (hasOneOfEventDefinitions(element,
              [
                'bpmn:MessageEventDefinition',
                'bpmn:TimerEventDefinition',
                'bpmn:SignalEventDefinition',
                'bpmn:ConditionalEventDefinition'
              ]) &&
                is$2(target, 'bpmn:SubProcess')) {
              canExecute.replacements.push({
                oldElementId: element.id,
                newElementType: 'bpmn:StartEvent'
              });
            }
          }
        }

        if (!is$2(target, 'bpmn:Transaction')) {
          if (hasEventDefinition$1(element, 'bpmn:CancelEventDefinition') &&
              element.type !== 'label') {

            if (is$2(element, 'bpmn:EndEvent') && canDrop(element, target)) {
              canExecute.replacements.push({
                oldElementId: element.id,
                newElementType: 'bpmn:EndEvent'
              });
            }

            if (is$2(element, 'bpmn:BoundaryEvent') && canAttach(element, target, null, position)) {
              canExecute.replacements.push({
                oldElementId: element.id,
                newElementType: 'bpmn:BoundaryEvent'
              });
            }
          }
        }
      });

      return canExecute.replacements.length ? canExecute : false;
    }

    /**
     * @param {Element[]} elements
     * @param {Shape} target
     *
     * @return {boolean}
     */
    function canMove(elements, target) {

      // do not move selection containing lanes
      if (some(elements, isLane)) {
        return false;
      }

      // allow default move check to start move operation
      if (!target) {
        return true;
      }

      return elements.every(function(element) {
        return canDrop(element, target);
      });
    }

    /**
     * @param {Shape} shape
     * @param {Shape} target
     * @param {Element} source
     * @param {Point} position
     *
     * @return {boolean}
     */
    function canCreate(shape, target, source, position) {

      if (!target) {
        return false;
      }

      if (isLabel$3(shape) || isGroup(shape)) {
        return true;
      }

      if (isSame$1(source, target)) {
        return false;
      }

      // ensure we do not drop the element
      // into source
      if (source && isParent(source, target)) {
        return false;
      }

      return canDrop(shape, target) || canInsert(shape, target);
    }

    /**
     * @param {Shape} shape
     * @param {Rect} newBounds
     *
     * @return {boolean}
     */
    function canResize(shape, newBounds) {
      if (is$2(shape, 'bpmn:SubProcess')) {
        return (
          isExpanded(shape) && (
            !newBounds || (newBounds.width >= 100 && newBounds.height >= 80)
          )
        );
      }

      if (is$2(shape, 'bpmn:Lane')) {
        return !newBounds || (newBounds.width >= 130 && newBounds.height >= 60);
      }

      if (is$2(shape, 'bpmn:Participant')) {
        return !newBounds || (newBounds.width >= 250 && newBounds.height >= 50);
      }

      if (isTextAnnotation(shape)) {
        return true;
      }

      if (isGroup(shape)) {
        return true;
      }

      return false;
    }

    /**
     * Check whether one of of the elements to be connected is a text annotation.
     *
     * @param {Element} source
     * @param {Element} target
     *
     * @return {boolean}
     */
    function isOneTextAnnotation(source, target) {

      var sourceTextAnnotation = isTextAnnotation(source),
          targetTextAnnotation = isTextAnnotation(target);

      return (
        (sourceTextAnnotation || targetTextAnnotation) &&
        (sourceTextAnnotation !== targetTextAnnotation)
      );
    }

    /**
     * @param {Element} source
     * @param {Element} target
     *
     * @return {CanConnectResult}
     */
    function canConnectAssociation(source, target) {

      // compensation boundary events are exception
      if (isCompensationBoundary(source) && isForCompensation(target)) {
        return true;
      }

      // don't connect parent <-> child
      if (isParent(target, source) || isParent(source, target)) {
        return false;
      }

      // allow connection of associations between <!TextAnnotation> and <TextAnnotation>
      if (isOneTextAnnotation(source, target)) {
        return true;
      }

      // can connect associations where we can connect
      // data associations, too (!)
      return !!canConnectDataAssociation(source, target);
    }

    /**
     * @param {Element} source
     * @param {Element} target
     *
     * @return {boolean}
     */
    function canConnectMessageFlow(source, target) {

      // during connect user might move mouse out of canvas
      // https://github.com/bpmn-io/bpmn-js/issues/1033
      if (getRootElement(source) && !getRootElement(target)) {
        return false;
      }

      return (
        isMessageFlowSource(source) &&
        isMessageFlowTarget(target) &&
        !isSameOrganization(source, target)
      );
    }

    /**
     * @param {Element} source
     * @param {Element} target
     *
     * @return {boolean}
     */
    function canConnectSequenceFlow(source, target) {
      return isSequenceFlowSource(source) &&
             isSequenceFlowTarget(target) &&
             isSameScope(source, target) &&
             !(is$2(source, 'bpmn:EventBasedGateway') && !isEventBasedTarget(target));
    }

    /**
     * @param {Element} source
     * @param {Element} target
     *
     * @return {CanConnectResult}
     */
    function canConnectDataAssociation(source, target) {

      if (isAny(source, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&
          isAny(target, [ 'bpmn:Activity', 'bpmn:ThrowEvent' ])) {
        return { type: 'bpmn:DataInputAssociation' };
      }

      if (isAny(target, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&
          isAny(source, [ 'bpmn:Activity', 'bpmn:CatchEvent' ])) {
        return { type: 'bpmn:DataOutputAssociation' };
      }

      return false;
    }

    /**
     * @param {Shape} shape
     * @param {Connection} connection
     * @param {Point} position
     *
     * @return {boolean}
     */
    function canInsert(shape, connection, position) {
      if (!connection) {
        return false;
      }

      if (Array.isArray(shape)) {
        if (shape.length !== 1) {
          return false;
        }

        shape = shape[ 0 ];
      }

      if (connection.source === shape ||
          connection.target === shape) {
        return false;
      }

      // return true if shape can be inserted into connection parent
      return (
        isAny(connection, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ]) &&
        !isLabel$3(connection) &&
        is$2(shape, 'bpmn:FlowNode') &&
        !is$2(shape, 'bpmn:BoundaryEvent') &&
        canDrop(shape, connection.parent));
    }

    /**
     * @param {Element[]} elements
     * @param {Element} element
     *
     * @return {boolean}
     */
    function includes$4(elements, element) {
      return (elements && element) && elements.indexOf(element) !== -1;
    }

    /**
     * @param {Element[]} elements
     * @param {Element} element
     *
     * @return {boolean}
     */
    function canCopy(elements, element) {
      if (isLabel$3(element)) {
        return true;
      }

      if (is$2(element, 'bpmn:Lane') && !includes$4(elements, element.parent)) {
        return false;
      }

      return true;
    }

    /**
     * @param {Element} element
     *
     * @return {Element|null}
     */
    function getRootElement(element) {
      return getParent$1(element, 'bpmn:Process') || getParent$1(element, 'bpmn:Collaboration');
    }

    var RulesModule = {
      __depends__: [
        RulesModule$1
      ],
      __init__: [ 'bpmnRules' ],
      bpmnRules: [ 'type', BpmnRules ]
    };

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     */

    var HIGH_PRIORITY$5 = 2000;

    /**
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     */
    function BpmnDiOrdering(eventBus, canvas) {

      eventBus.on('saveXML.start', HIGH_PRIORITY$5, orderDi);

      function orderDi() {
        var rootElements = canvas.getRootElements();

        forEach$1(rootElements, function(root) {
          var rootDi = getDi(root),
              elements,
              diElements;

          elements = selfAndAllChildren([ root ], false);

          // only bpmndi:Shape and bpmndi:Edge can be direct children of bpmndi:Plane
          elements = filter(elements, function(element) {
            return element !== root && !element.labelTarget;
          });

          diElements = map$1(elements, getDi);

          rootDi.set('planeElement', diElements);
        });
      }
    }

    BpmnDiOrdering.$inject = [ 'eventBus', 'canvas' ];

    var DiOrderingModule = {
      __init__: [
        'bpmnDiOrdering'
      ],
      bpmnDiOrdering: [ 'type', BpmnDiOrdering ]
    };

    /**
     * @typedef { {
     *   [key: string]: string;
     * } } TranslateReplacements
     */

    /**
     * A simple translation stub to be used for multi-language support
     * in diagrams. Can be easily replaced with a more sophisticated
     * solution.
     *
     * @example
     *
     * ```javascript
     * // use it inside any diagram component by injecting `translate`.
     *
     * function MyService(translate) {
     *   alert(translate('HELLO {you}', { you: 'You!' }));
     * }
     * ```
     *
     * @param {string} template to interpolate
     * @param {TranslateReplacements} [replacements] a map with substitutes
     *
     * @return {string} the translated string
     */
    function translate$1(template, replacements) {

      replacements = replacements || {};

      return template.replace(/{([^}]+)}/g, function(_, key) {
        return replacements[key] || '{' + key + '}';
      });
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var TranslateModule = {
      translate: [ 'value', translate$1 ]
    };

    /**
     * @typedef {import('../../core/Types').ElementLike} Element
     * @typedef {import('../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../core/EventBus').default} EventBus
     */

    /**
     * An abstract provider that allows modelers to implement a custom
     * ordering of diagram elements on the canvas.
     *
     * It makes sure that the order is always preserved during element
     * creation and move operations.
     *
     * In order to use this behavior, inherit from it and override
     * the method {@link OrderingProvider#getOrdering}.
     *
     * @example
     *
     * ```javascript
     * function CustomOrderingProvider(eventBus) {
     *   OrderingProvider.call(this, eventBus);
     *
     *   this.getOrdering = function(element, newParent) {
     *     // always insert elements at the front
     *     // when moving
     *     return {
     *       index: 0,
     *       parent: newParent
     *     };
     *   };
     * }
     * ```
     *
     * @param {EventBus} eventBus
     */
    function OrderingProvider(eventBus) {

      CommandInterceptor.call(this, eventBus);


      var self = this;

      this.preExecute([ 'shape.create', 'connection.create' ], function(event) {

        var context = event.context,
            element = context.shape || context.connection,
            parent = context.parent;

        var ordering = self.getOrdering(element, parent);

        if (ordering) {

          if (ordering.parent !== undefined) {
            context.parent = ordering.parent;
          }

          context.parentIndex = ordering.index;
        }
      });

      this.preExecute([ 'shape.move', 'connection.move' ], function(event) {

        var context = event.context,
            element = context.shape || context.connection,
            parent = context.newParent || element.parent;

        var ordering = self.getOrdering(element, parent);

        if (ordering) {

          if (ordering.parent !== undefined) {
            context.newParent = ordering.parent;
          }

          context.newParentIndex = ordering.index;
        }
      });
    }

    /**
     * Return a custom ordering of the element, both in terms
     * of parent element and index in the new parent.
     *
     * Implementors of this method must return an object with
     * `parent` _and_ `index` in it.
     *
     * @param {Element} element
     * @param {Shape} newParent
     *
     * @return {Object} ordering descriptor
     */
    OrderingProvider.prototype.getOrdering = function(element, newParent) {
      return null;
    };

    e(OrderingProvider, CommandInterceptor);

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('diagram-js/i18n/translate/translate').default} Translate
     */

    /**
     * A BPMN-specific ordering provider.
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     * @param {Translate} translate
     */
    function BpmnOrderingProvider(eventBus, canvas, translate) {

      OrderingProvider.call(this, eventBus);

      var orders = [
        { type: 'bpmn:SubProcess', order: { level: 6 } },

        // handle SequenceFlow(s) like message flows and render them always on top
        {
          type: 'bpmn:SequenceFlow',
          order: {
            level: 9,
            containers: [
              'bpmn:Participant',
              'bpmn:FlowElementsContainer'
            ]
          }
        },

        // handle DataAssociation(s) like message flows and render them always on top
        {
          type: 'bpmn:DataAssociation',
          order: {
            level: 9,
            containers: [
              'bpmn:Collaboration',
              'bpmn:FlowElementsContainer'
            ]
          }
        },
        {
          type: 'bpmn:MessageFlow', order: {
            level: 9,
            containers: [ 'bpmn:Collaboration' ]
          }
        },
        {
          type: 'bpmn:Association',
          order: {
            level: 6,
            containers: [
              'bpmn:Participant',
              'bpmn:FlowElementsContainer',
              'bpmn:Collaboration'
            ]
          }
        },
        { type: 'bpmn:BoundaryEvent', order: { level: 8 } },
        {
          type: 'bpmn:Group',
          order: {
            level: 10,
            containers: [
              'bpmn:Collaboration',
              'bpmn:FlowElementsContainer'
            ]
          }
        },
        { type: 'bpmn:FlowElement', order: { level: 5 } },
        { type: 'bpmn:Participant', order: { level: -2 } },
        { type: 'bpmn:Lane', order: { level: -1 } }
      ];

      function computeOrder(element) {
        if (element.labelTarget) {
          return { level: 10 };
        }

        var entry = find$1(orders, function(o) {
          return isAny(element, [ o.type ]);
        });

        return entry && entry.order || { level: 1 };
      }

      function getOrder(element) {

        var order = element.order;

        if (!order) {
          element.order = order = computeOrder(element);
        }

        if (!order) {
          throw new Error('no order for <' + element.id + '>');
        }

        return order;
      }

      function findActualParent(element, newParent, containers) {

        var actualParent = newParent;

        while (actualParent) {

          if (isAny(actualParent, containers)) {
            break;
          }

          actualParent = actualParent.parent;
        }

        if (!actualParent) {
          throw new Error('no parent for <' + element.id + '> in <' + (newParent && newParent.id) + '>');
        }

        return actualParent;
      }

      this.getOrdering = function(element, newParent) {

        // render labels always on top
        if (element.labelTarget) {
          return {
            parent: canvas.findRoot(newParent) || canvas.getRootElement(),
            index: -1
          };
        }

        var elementOrder = getOrder(element);

        if (elementOrder.containers) {
          newParent = findActualParent(element, newParent, elementOrder.containers);
        }

        var currentIndex = newParent.children.indexOf(element);

        var insertIndex = findIndex(newParent.children, function(child) {

          // do not compare with labels, they are created
          // in the wrong order (right after elements) during import and
          // mess up the positioning.
          if (!element.labelTarget && child.labelTarget) {
            return false;
          }

          return elementOrder.level < getOrder(child).level;
        });


        // if the element is already in the child list at
        // a smaller index, we need to adjust the insert index.
        // this takes into account that the element is being removed
        // before being re-inserted
        if (insertIndex !== -1) {
          if (currentIndex !== -1 && currentIndex < insertIndex) {
            insertIndex -= 1;
          }
        }

        return {
          index: insertIndex,
          parent: newParent
        };
      };
    }

    BpmnOrderingProvider.$inject = [ 'eventBus', 'canvas', 'translate' ];

    e(BpmnOrderingProvider, OrderingProvider);

    var OrderingModule = {
      __depends__: [
        TranslateModule
      ],
      __init__: [ 'bpmnOrderingProvider' ],
      bpmnOrderingProvider: [ 'type', BpmnOrderingProvider ]
    };

    /**
     * A clip board stub
     */
    function Clipboard() {}


    Clipboard.prototype.get = function() {
      return this._data;
    };

    Clipboard.prototype.set = function(data) {
      this._data = data;
    };

    Clipboard.prototype.clear = function() {
      var data = this._data;

      delete this._data;

      return data;
    };

    Clipboard.prototype.isEmpty = function() {
      return !this._data;
    };

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var ClipboardModule = {
      clipboard: [ 'type', Clipboard ]
    };

    function _mergeNamespaces$1(n, m) {
      m.forEach(function (e) {
        e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
          if (k !== 'default' && !(k in n)) {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: function () { return e[k]; }
            });
          }
        });
      });
      return Object.freeze(n);
    }

    /**
     * Flatten array, one level deep.
     *
     * @param {Array<?>} arr
     *
     * @return {Array<?>}
     */

    const nativeToString = Object.prototype.toString;
    const nativeHasOwnProperty = Object.prototype.hasOwnProperty;

    function isUndefined$1(obj) {
      return obj === undefined;
    }

    function isArray(obj) {
      return nativeToString.call(obj) === '[object Array]';
    }

    /**
     * Return true, if target owns a property with the given key.
     *
     * @param {Object} target
     * @param {String} key
     *
     * @return {Boolean}
     */
    function has(target, key) {
      return nativeHasOwnProperty.call(target, key);
    }


    /**
     * Iterate over collection; returning something
     * (non-undefined) will stop iteration.
     *
     * @param  {Array|Object} collection
     * @param  {Function} iterator
     *
     * @return {Object} return result that stopped the iteration
     */
    function forEach(collection, iterator) {

      let val,
          result;

      if (isUndefined$1(collection)) {
        return;
      }

      const convertKey = isArray(collection) ? toNum : identity;

      for (let key in collection) {

        if (has(collection, key)) {
          val = collection[key];

          result = iterator(val, convertKey(key));

          if (result === false) {
            return val;
          }
        }
      }
    }


    function identity(arg) {
      return arg;
    }

    function toNum(arg) {
      return Number(arg);
    }

    /**
     * Assigns style attributes in a style-src compliant way.
     *
     * @param {Element} element
     * @param {...Object} styleSources
     *
     * @return {Element} the element
     */
    function assign(element, ...styleSources) {
      const target = element.style;

      forEach(styleSources, function(style) {
        if (!style) {
          return;
        }

        forEach(style, function(value, key) {
          target[key] = value;
        });
      });

      return element;
    }

    /**
     * Set attribute `name` to `val`, or get attr `name`.
     *
     * @param {Element} el
     * @param {String} name
     * @param {String} [val]
     * @api public
     */
    function attr$1(el, name, val) {

      // get
      if (arguments.length == 2) {
        return el.getAttribute(name);
      }

      // remove
      if (val === null) {
        return el.removeAttribute(name);
      }

      // set
      el.setAttribute(name, val);

      return el;
    }

    /**
     * Taken from https://github.com/component/classes
     *
     * Without the component bits.
     */

    /**
     * toString reference.
     */

    const toString$1 = Object.prototype.toString;

    /**
     * Wrap `el` in a `ClassList`.
     *
     * @param {Element} el
     * @return {ClassList}
     * @api public
     */

    function classes$1(el) {
      return new ClassList$1(el);
    }

    /**
     * Initialize a new ClassList for `el`.
     *
     * @param {Element} el
     * @api private
     */

    function ClassList$1(el) {
      if (!el || !el.nodeType) {
        throw new Error('A DOM element reference is required');
      }
      this.el = el;
      this.list = el.classList;
    }

    /**
     * Add class `name` if not already present.
     *
     * @param {String} name
     * @return {ClassList}
     * @api public
     */

    ClassList$1.prototype.add = function(name) {
      this.list.add(name);
      return this;
    };

    /**
     * Remove class `name` when present, or
     * pass a regular expression to remove
     * any which match.
     *
     * @param {String|RegExp} name
     * @return {ClassList}
     * @api public
     */

    ClassList$1.prototype.remove = function(name) {
      if ('[object RegExp]' == toString$1.call(name)) {
        return this.removeMatching(name);
      }

      this.list.remove(name);
      return this;
    };

    /**
     * Remove all classes matching `re`.
     *
     * @param {RegExp} re
     * @return {ClassList}
     * @api private
     */

    ClassList$1.prototype.removeMatching = function(re) {
      const arr = this.array();
      for (let i = 0; i < arr.length; i++) {
        if (re.test(arr[i])) {
          this.remove(arr[i]);
        }
      }
      return this;
    };

    /**
     * Toggle class `name`, can force state via `force`.
     *
     * For browsers that support classList, but do not support `force` yet,
     * the mistake will be detected and corrected.
     *
     * @param {String} name
     * @param {Boolean} force
     * @return {ClassList}
     * @api public
     */

    ClassList$1.prototype.toggle = function(name, force) {
      if ('undefined' !== typeof force) {
        if (force !== this.list.toggle(name, force)) {
          this.list.toggle(name); // toggle again to correct
        }
      } else {
        this.list.toggle(name);
      }
      return this;
    };

    /**
     * Return an array of classes.
     *
     * @return {Array}
     * @api public
     */

    ClassList$1.prototype.array = function() {
      return Array.from(this.list);
    };

    /**
     * Check if class `name` is present.
     *
     * @param {String} name
     * @return {ClassList}
     * @api public
     */

    ClassList$1.prototype.has =
    ClassList$1.prototype.contains = function(name) {
      return this.list.contains(name);
    };

    /**
     * Remove all children from the given element.
     */
    function clear$1(el) {

      var c;

      while (el.childNodes.length) {
        c = el.childNodes[0];
        el.removeChild(c);
      }

      return el;
    }

    /**
     * @param { HTMLElement } element
     * @param { String } selector
     *
     * @return { boolean }
     */
    function matches(element, selector) {
      return element && typeof element.matches === 'function' && element.matches(selector);
    }

    /**
     * Closest
     *
     * @param {Element} el
     * @param {String} selector
     * @param {Boolean} checkYourSelf (optional)
     */
    function closest(element, selector, checkYourSelf) {
      var currentElem = checkYourSelf ? element : element.parentNode;

      while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE &&
          currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {

        if (matches(currentElem, selector)) {
          return currentElem;
        }

        currentElem = currentElem.parentNode;
      }

      return matches(currentElem, selector) ? currentElem : null;
    }

    var componentEvent = {};

    var bind$1, unbind$1, prefix$6;

    function detect () {
      bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent';
      unbind$1 = window.removeEventListener ? 'removeEventListener' : 'detachEvent';
      prefix$6 = bind$1 !== 'addEventListener' ? 'on' : '';
    }

    /**
     * Bind `el` event `type` to `fn`.
     *
     * @param {Element} el
     * @param {String} type
     * @param {Function} fn
     * @param {Boolean} capture
     * @return {Function}
     * @api public
     */

    var bind_1 = componentEvent.bind = function(el, type, fn, capture){
      if (!bind$1) detect();
      el[bind$1](prefix$6 + type, fn, capture || false);
      return fn;
    };

    /**
     * Unbind `el` event `type`'s callback `fn`.
     *
     * @param {Element} el
     * @param {String} type
     * @param {Function} fn
     * @param {Boolean} capture
     * @return {Function}
     * @api public
     */

    var unbind_1 = componentEvent.unbind = function(el, type, fn, capture){
      if (!unbind$1) detect();
      el[unbind$1](prefix$6 + type, fn, capture || false);
      return fn;
    };

    var event = /*#__PURE__*/_mergeNamespaces$1({
      __proto__: null,
      bind: bind_1,
      unbind: unbind_1,
      'default': componentEvent
    }, [componentEvent]);

    /**
     * Module dependencies.
     */

    /**
     * Delegate event `type` to `selector`
     * and invoke `fn(e)`. A callback function
     * is returned which may be passed to `.unbind()`.
     *
     * @param {Element} el
     * @param {String} selector
     * @param {String} type
     * @param {Function} fn
     * @param {Boolean} capture
     * @return {Function}
     * @api public
     */

    // Some events don't bubble, so we want to bind to the capture phase instead
    // when delegating.
    var forceCaptureEvents = [ 'focus', 'blur' ];

    function bind(el, selector, type, fn, capture) {
      if (forceCaptureEvents.indexOf(type) !== -1) {
        capture = true;
      }

      return event.bind(el, type, function(e) {
        var target = e.target || e.srcElement;
        e.delegateTarget = closest(target, selector, true);
        if (e.delegateTarget) {
          fn.call(el, e);
        }
      }, capture);
    }

    /**
     * Unbind event `type`'s callback `fn`.
     *
     * @param {Element} el
     * @param {String} type
     * @param {Function} fn
     * @param {Boolean} capture
     * @api public
     */
    function unbind(el, type, fn, capture) {
      if (forceCaptureEvents.indexOf(type) !== -1) {
        capture = true;
      }

      return event.unbind(el, type, fn, capture);
    }

    var delegate = {
      bind,
      unbind
    };

    /**
     * Expose `parse`.
     */

    var domify = parse$1;

    /**
     * Tests for browser support.
     */

    var innerHTMLBug = false;
    var bugTestDiv;
    if (typeof document !== 'undefined') {
      bugTestDiv = document.createElement('div');
      // Setup
      bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
      // Make sure that link elements get serialized correctly by innerHTML
      // This requires a wrapper element in IE
      innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
      bugTestDiv = undefined;
    }

    /**
     * Wrap map from jquery.
     */

    var map = {
      legend: [1, '<fieldset>', '</fieldset>'],
      tr: [2, '<table><tbody>', '</tbody></table>'],
      col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
      // for script/link/style tags to work in IE6-8, you have to wrap
      // in a div with a non-whitespace character in front, ha!
      _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
    };

    map.td =
    map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

    map.option =
    map.optgroup = [1, '<select multiple="multiple">', '</select>'];

    map.thead =
    map.tbody =
    map.colgroup =
    map.caption =
    map.tfoot = [1, '<table>', '</table>'];

    map.polyline =
    map.ellipse =
    map.polygon =
    map.circle =
    map.text =
    map.line =
    map.path =
    map.rect =
    map.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

    /**
     * Parse `html` and return a DOM Node instance, which could be a TextNode,
     * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
     * instance, depending on the contents of the `html` string.
     *
     * @param {String} html - HTML string to "domify"
     * @param {Document} doc - The `document` instance to create the Node for
     * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
     * @api private
     */

    function parse$1(html, doc) {
      if ('string' != typeof html) throw new TypeError('String expected');

      // default to the global `document` object
      if (!doc) doc = document;

      // tag name
      var m = /<([\w:]+)/.exec(html);
      if (!m) return doc.createTextNode(html);

      html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

      var tag = m[1];

      // body support
      if (tag == 'body') {
        var el = doc.createElement('html');
        el.innerHTML = html;
        return el.removeChild(el.lastChild);
      }

      // wrap map
      var wrap = Object.prototype.hasOwnProperty.call(map, tag) ? map[tag] : map._default;
      var depth = wrap[0];
      var prefix = wrap[1];
      var suffix = wrap[2];
      var el = doc.createElement('div');
      el.innerHTML = prefix + html + suffix;
      while (depth--) el = el.lastChild;

      // one element
      if (el.firstChild == el.lastChild) {
        return el.removeChild(el.firstChild);
      }

      // several elements
      var fragment = doc.createDocumentFragment();
      while (el.firstChild) {
        fragment.appendChild(el.removeChild(el.firstChild));
      }

      return fragment;
    }

    var domify$1 = domify;

    function query(selector, el) {
      el = el || document;

      return el.querySelector(selector);
    }

    function all(selector, el) {
      el = el || document;

      return el.querySelectorAll(selector);
    }

    function remove$1(el) {
      el.parentNode && el.parentNode.removeChild(el);
    }

    /**
     * @typedef {import('didi').Injector} Injector
     *
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     */

    var HIGH_PRIORITY$4 = 1500;


    /**
     * Browsers may swallow certain events (hover, out ...) if users are to
     * fast with the mouse.
     *
     * @see http://stackoverflow.com/questions/7448468/why-cant-i-reliably-capture-a-mouseout-event
     *
     * The fix implemented in this component ensure that we
     *
     * 1) have a hover state after a successful drag.move event
     * 2) have an out event when dragging leaves an element
     *
     * @param {ElementRegistry} elementRegistry
     * @param {EventBus} eventBus
     * @param {Injector} injector
     */
    function HoverFix(elementRegistry, eventBus, injector) {

      var self = this;

      var dragging = injector.get('dragging', false);

      /**
       * Make sure we are god damn hovering!
       *
       * @param {Event} dragging event
       */
      function ensureHover(event) {

        if (event.hover) {
          return;
        }

        var originalEvent = event.originalEvent;

        var gfx = self._findTargetGfx(originalEvent);

        var element = gfx && elementRegistry.get(gfx);

        if (gfx && element) {

          // 1) cancel current mousemove
          event.stopPropagation();

          // 2) emit fake hover for new target
          dragging.hover({ element: element, gfx: gfx });

          // 3) re-trigger move event
          dragging.move(originalEvent);
        }
      }


      if (dragging) {

        /**
         * We wait for a specific sequence of events before
         * emitting a fake drag.hover event.
         *
         * Event Sequence:
         *
         * drag.start
         * drag.move >> ensure we are hovering
         */
        eventBus.on('drag.start', function(event) {

          eventBus.once('drag.move', HIGH_PRIORITY$4, function(event) {

            ensureHover(event);

          });

        });
      }


      /**
       * We make sure that element.out is always fired, even if the
       * browser swallows an element.out event.
       *
       * Event sequence:
       *
       * element.hover
       * (element.out >> sometimes swallowed)
       * element.hover >> ensure we fired element.out
       */
      (function() {
        var hoverGfx;
        var hover;

        eventBus.on('element.hover', function(event) {

          // (1) remember current hover element
          hoverGfx = event.gfx;
          hover = event.element;
        });

        eventBus.on('element.hover', HIGH_PRIORITY$4, function(event) {

          // (3) am I on an element still?
          if (hover) {

            // (4) that is a problem, gotta "simulate the out"
            eventBus.fire('element.out', {
              element: hover,
              gfx: hoverGfx
            });
          }

        });

        eventBus.on('element.out', function() {

          // (2) unset hover state if we correctly outed us *GG*
          hoverGfx = null;
          hover = null;
        });

      })();

      this._findTargetGfx = function(event) {
        var position,
            target;

        if (!(event instanceof MouseEvent)) {
          return;
        }

        position = toPoint(event);

        // damn expensive operation, ouch!
        target = document.elementFromPoint(position.x, position.y);

        return getGfx(target);
      };

    }

    HoverFix.$inject = [
      'elementRegistry',
      'eventBus',
      'injector'
    ];


    // helpers /////////////////////

    function getGfx(target) {
      return closest(target, 'svg, .djs-element', true);
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var HoverFixModule = {
      __init__: [
        'hoverFix'
      ],
      hoverFix: [ 'type', HoverFix ],
    };

    function ensureImported(element, target) {

      if (element.ownerDocument !== target.ownerDocument) {
        try {

          // may fail on webkit
          return target.ownerDocument.importNode(element, true);
        } catch (e) {

          // ignore
        }
      }

      return element;
    }

    /**
     * appendTo utility
     */

    /**
     * Append a node to a target element and return the appended node.
     *
     * @param  {SVGElement} element
     * @param  {SVGElement} target
     *
     * @return {SVGElement} the appended node
     */
    function appendTo(element, target) {
      return target.appendChild(ensureImported(element, target));
    }

    /**
     * append utility
     */

    /**
     * Append a node to an element
     *
     * @param  {SVGElement} element
     * @param  {SVGElement} node
     *
     * @return {SVGElement} the element
     */
    function append(target, node) {
      appendTo(node, target);
      return target;
    }

    /**
     * attribute accessor utility
     */

    var LENGTH_ATTR = 2;

    var CSS_PROPERTIES = {
      'alignment-baseline': 1,
      'baseline-shift': 1,
      'clip': 1,
      'clip-path': 1,
      'clip-rule': 1,
      'color': 1,
      'color-interpolation': 1,
      'color-interpolation-filters': 1,
      'color-profile': 1,
      'color-rendering': 1,
      'cursor': 1,
      'direction': 1,
      'display': 1,
      'dominant-baseline': 1,
      'enable-background': 1,
      'fill': 1,
      'fill-opacity': 1,
      'fill-rule': 1,
      'filter': 1,
      'flood-color': 1,
      'flood-opacity': 1,
      'font': 1,
      'font-family': 1,
      'font-size': LENGTH_ATTR,
      'font-size-adjust': 1,
      'font-stretch': 1,
      'font-style': 1,
      'font-variant': 1,
      'font-weight': 1,
      'glyph-orientation-horizontal': 1,
      'glyph-orientation-vertical': 1,
      'image-rendering': 1,
      'kerning': 1,
      'letter-spacing': 1,
      'lighting-color': 1,
      'marker': 1,
      'marker-end': 1,
      'marker-mid': 1,
      'marker-start': 1,
      'mask': 1,
      'opacity': 1,
      'overflow': 1,
      'pointer-events': 1,
      'shape-rendering': 1,
      'stop-color': 1,
      'stop-opacity': 1,
      'stroke': 1,
      'stroke-dasharray': 1,
      'stroke-dashoffset': 1,
      'stroke-linecap': 1,
      'stroke-linejoin': 1,
      'stroke-miterlimit': 1,
      'stroke-opacity': 1,
      'stroke-width': LENGTH_ATTR,
      'text-anchor': 1,
      'text-decoration': 1,
      'text-rendering': 1,
      'unicode-bidi': 1,
      'visibility': 1,
      'word-spacing': 1,
      'writing-mode': 1
    };


    function getAttribute(node, name) {
      if (CSS_PROPERTIES[name]) {
        return node.style[name];
      } else {
        return node.getAttributeNS(null, name);
      }
    }

    function setAttribute(node, name, value) {
      var hyphenated = name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();

      var type = CSS_PROPERTIES[hyphenated];

      if (type) {

        // append pixel unit, unless present
        if (type === LENGTH_ATTR && typeof value === 'number') {
          value = String(value) + 'px';
        }

        node.style[hyphenated] = value;
      } else {
        node.setAttributeNS(null, name, value);
      }
    }

    function setAttributes(node, attrs) {

      var names = Object.keys(attrs), i, name;

      for (i = 0, name; (name = names[i]); i++) {
        setAttribute(node, name, attrs[name]);
      }
    }

    /**
     * Gets or sets raw attributes on a node.
     *
     * @param  {SVGElement} node
     * @param  {Object} [attrs]
     * @param  {String} [name]
     * @param  {String} [value]
     *
     * @return {String}
     */
    function attr(node, name, value) {
      if (typeof name === 'string') {
        if (value !== undefined) {
          setAttribute(node, name, value);
        } else {
          return getAttribute(node, name);
        }
      } else {
        setAttributes(node, name);
      }

      return node;
    }

    /**
     * Taken from https://github.com/component/classes
     *
     * Without the component bits.
     */

    /**
     * toString reference.
     */

    const toString = Object.prototype.toString;

    /**
      * Wrap `el` in a `ClassList`.
      *
      * @param {Element} el
      * @return {ClassList}
      * @api public
      */

    function classes(el) {
      return new ClassList(el);
    }

    function ClassList(el) {
      if (!el || !el.nodeType) {
        throw new Error('A DOM element reference is required');
      }
      this.el = el;
      this.list = el.classList;
    }

    /**
      * Add class `name` if not already present.
      *
      * @param {String} name
      * @return {ClassList}
      * @api public
      */

    ClassList.prototype.add = function(name) {
      this.list.add(name);
      return this;
    };

    /**
      * Remove class `name` when present, or
      * pass a regular expression to remove
      * any which match.
      *
      * @param {String|RegExp} name
      * @return {ClassList}
      * @api public
      */

    ClassList.prototype.remove = function(name) {
      if ('[object RegExp]' == toString.call(name)) {
        return this.removeMatching(name);
      }

      this.list.remove(name);
      return this;
    };

    /**
      * Remove all classes matching `re`.
      *
      * @param {RegExp} re
      * @return {ClassList}
      * @api private
      */

    ClassList.prototype.removeMatching = function(re) {
      const arr = this.array();
      for (let i = 0; i < arr.length; i++) {
        if (re.test(arr[i])) {
          this.remove(arr[i]);
        }
      }
      return this;
    };

    /**
      * Toggle class `name`, can force state via `force`.
      *
      * For browsers that support classList, but do not support `force` yet,
      * the mistake will be detected and corrected.
      *
      * @param {String} name
      * @param {Boolean} force
      * @return {ClassList}
      * @api public
      */

    ClassList.prototype.toggle = function(name, force) {
      if ('undefined' !== typeof force) {
        if (force !== this.list.toggle(name, force)) {
          this.list.toggle(name); // toggle again to correct
        }
      } else {
        this.list.toggle(name);
      }
      return this;
    };

    /**
      * Return an array of classes.
      *
      * @return {Array}
      * @api public
      */

    ClassList.prototype.array = function() {
      return Array.from(this.list);
    };

    /**
      * Check if class `name` is present.
      *
      * @param {String} name
      * @return {ClassList}
      * @api public
      */

    ClassList.prototype.has =
     ClassList.prototype.contains = function(name) {
       return this.list.contains(name);
     };

    function remove(element) {
      var parent = element.parentNode;

      if (parent) {
        parent.removeChild(element);
      }

      return element;
    }

    /**
     * Clear utility
     */

    /**
     * Removes all children from the given element
     *
     * @param  {DOMElement} element
     * @return {DOMElement} the element (for chaining)
     */
    function clear(element) {
      var child;

      while ((child = element.firstChild)) {
        remove(child);
      }

      return element;
    }

    function clone(element) {
      return element.cloneNode(true);
    }

    var ns = {
      svg: 'http://www.w3.org/2000/svg'
    };

    /**
     * DOM parsing utility
     */

    var SVG_START = '<svg xmlns="' + ns.svg + '"';

    function parse(svg) {

      var unwrap = false;

      // ensure we import a valid svg document
      if (svg.substring(0, 4) === '<svg') {
        if (svg.indexOf(ns.svg) === -1) {
          svg = SVG_START + svg.substring(4);
        }
      } else {

        // namespace svg
        svg = SVG_START + '>' + svg + '</svg>';
        unwrap = true;
      }

      var parsed = parseDocument(svg);

      if (!unwrap) {
        return parsed;
      }

      var fragment = document.createDocumentFragment();

      var parent = parsed.firstChild;

      while (parent.firstChild) {
        fragment.appendChild(parent.firstChild);
      }

      return fragment;
    }

    function parseDocument(svg) {

      var parser;

      // parse
      parser = new DOMParser();
      parser.async = false;

      return parser.parseFromString(svg, 'text/xml');
    }

    /**
     * Create utility for SVG elements
     */


    /**
     * Create a specific type from name or SVG markup.
     *
     * @param {String} name the name or markup of the element
     * @param {Object} [attrs] attributes to set on the element
     *
     * @returns {SVGElement}
     */
    function create$1(name, attrs) {
      var element;

      if (name.charAt(0) === '<') {
        element = parse(name).firstChild;
        element = document.importNode(element, true);
      } else {
        element = document.createElementNS(ns.svg, name);
      }

      if (attrs) {
        attr(element, attrs);
      }

      return element;
    }

    /**
     * Geometry helpers
     */

    // fake node used to instantiate svg geometry elements
    var node = null;

    function getNode() {
      if (node === null) {
        node = create$1('svg');
      }

      return node;
    }

    function extend$1(object, props) {
      var i, k, keys = Object.keys(props);

      for (i = 0; (k = keys[i]); i++) {
        object[k] = props[k];
      }

      return object;
    }

    /**
     * Create matrix via args.
     *
     * @example
     *
     * createMatrix({ a: 1, b: 1 });
     * createMatrix();
     * createMatrix(1, 2, 0, 0, 30, 20);
     *
     * @return {SVGMatrix}
     */
    function createMatrix(a, b, c, d, e, f) {
      var matrix = getNode().createSVGMatrix();

      switch (arguments.length) {
      case 0:
        return matrix;
      case 1:
        return extend$1(matrix, a);
      case 6:
        return extend$1(matrix, {
          a: a,
          b: b,
          c: c,
          d: d,
          e: e,
          f: f
        });
      }
    }

    function createTransform(matrix) {
      if (matrix) {
        return getNode().createSVGTransformFromMatrix(matrix);
      } else {
        return getNode().createSVGTransform();
      }
    }

    /**
     * Serialization util
     */

    var TEXT_ENTITIES = /([&<>]{1})/g;
    var ATTR_ENTITIES = /([\n\r"]{1})/g;

    var ENTITY_REPLACEMENT = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '\''
    };

    function escape$1(str, pattern) {

      function replaceFn(match, entity) {
        return ENTITY_REPLACEMENT[entity] || entity;
      }

      return str.replace(pattern, replaceFn);
    }

    function serialize(node, output) {

      var i, len, attrMap, attrNode, childNodes;

      switch (node.nodeType) {

      // TEXT
      case 3:

        // replace special XML characters
        output.push(escape$1(node.textContent, TEXT_ENTITIES));
        break;

      // ELEMENT
      case 1:
        output.push('<', node.tagName);

        if (node.hasAttributes()) {
          attrMap = node.attributes;
          for (i = 0, len = attrMap.length; i < len; ++i) {
            attrNode = attrMap.item(i);
            output.push(' ', attrNode.name, '="', escape$1(attrNode.value, ATTR_ENTITIES), '"');
          }
        }

        if (node.hasChildNodes()) {
          output.push('>');
          childNodes = node.childNodes;
          for (i = 0, len = childNodes.length; i < len; ++i) {
            serialize(childNodes.item(i), output);
          }
          output.push('</', node.tagName, '>');
        } else {
          output.push('/>');
        }
        break;

      // COMMENT
      case 8:
        output.push('<!--', escape$1(node.nodeValue, TEXT_ENTITIES), '-->');
        break;

      // CDATA
      case 4:
        output.push('<![CDATA[', node.nodeValue, ']]>');
        break;

      default:
        throw new Error('unable to handle node ' + node.nodeType);
      }

      return output;
    }

    /**
     * innerHTML like functionality for SVG elements.
     * based on innerSVG (https://code.google.com/p/innersvg)
     */


    function set$1(element, svg) {

      var parsed = parse(svg);

      // clear element contents
      clear(element);

      if (!svg) {
        return;
      }

      if (!isFragment(parsed)) {

        // extract <svg> from parsed document
        parsed = parsed.documentElement;
      }

      var nodes = slice$1(parsed.childNodes);

      // import + append each node
      for (var i = 0; i < nodes.length; i++) {
        appendTo(nodes[i], element);
      }

    }

    function get(element) {
      var child = element.firstChild,
          output = [];

      while (child) {
        serialize(child, output);
        child = child.nextSibling;
      }

      return output.join('');
    }

    function isFragment(node) {
      return node.nodeName === '#document-fragment';
    }

    function innerSVG(element, svg) {

      if (svg !== undefined) {

        try {
          set$1(element, svg);
        } catch (e) {
          throw new Error('error parsing SVG: ' + e.message);
        }

        return element;
      } else {
        return get(element);
      }
    }


    function slice$1(arr) {
      return Array.prototype.slice.call(arr);
    }

    /**
     * transform accessor utility
     */

    function wrapMatrix(transformList, transform) {
      if (transform instanceof SVGMatrix) {
        return transformList.createSVGTransformFromMatrix(transform);
      }

      return transform;
    }


    function setTransforms(transformList, transforms) {
      var i, t;

      transformList.clear();

      for (i = 0; (t = transforms[i]); i++) {
        transformList.appendItem(wrapMatrix(transformList, t));
      }
    }

    /**
     * Get or set the transforms on the given node.
     *
     * @param {SVGElement} node
     * @param  {SVGTransform|SVGMatrix|Array<SVGTransform|SVGMatrix>} [transforms]
     *
     * @return {SVGTransform} the consolidated transform
     */
    function transform$1(node, transforms) {
      var transformList = node.transform.baseVal;

      if (transforms) {

        if (!Array.isArray(transforms)) {
          transforms = [ transforms ];
        }

        setTransforms(transformList, transforms);
      }

      return transformList.consolidate();
    }

    /**
     * @typedef {(string|number)[]} Component
     *
     * @typedef {import('../util/Types').Point} Point
     */

    /**
     * @param {Component[]} elements
     *
     * @return {string}
     */
    function componentsToPath(elements) {
      return elements.flat().join(',').replace(/,?([A-z]),?/g, '$1');
    }

    /**
     * @param {Point} point
     *
     * @return {Component[]}
     */
    function move(point) {
      return [ 'M', point.x, point.y ];
    }

    /**
     * @param {Point} point
     *
     * @return {Component[]}
     */
    function lineTo(point) {
      return [ 'L', point.x, point.y ];
    }

    /**
     * @param {Point} p1
     * @param {Point} p2
     * @param {Point} p3
     *
     * @return {Component[]}
     */
    function curveTo(p1, p2, p3) {
      return [ 'C', p1.x, p1.y, p2.x, p2.y, p3.x, p3.y ];
    }

    function drawPath(waypoints, cornerRadius) {
      const pointCount = waypoints.length;

      const path = [ move(waypoints[0]) ];

      for (let i = 1; i < pointCount; i++) {

        const pointBefore = waypoints[i - 1];
        const point = waypoints[i];
        const pointAfter = waypoints[i + 1];

        if (!pointAfter || !cornerRadius) {
          path.push(lineTo(point));

          continue;
        }

        const effectiveRadius = Math.min(
          cornerRadius,
          vectorLength(point.x - pointBefore.x, point.y - pointBefore.y),
          vectorLength(pointAfter.x - point.x, pointAfter.y - point.y)
        );

        if (!effectiveRadius) {
          path.push(lineTo(point));

          continue;
        }

        const beforePoint = getPointAtLength(point, pointBefore, effectiveRadius);
        const beforePoint2 = getPointAtLength(point, pointBefore, effectiveRadius * .5);

        const afterPoint = getPointAtLength(point, pointAfter, effectiveRadius);
        const afterPoint2 = getPointAtLength(point, pointAfter, effectiveRadius * .5);

        path.push(lineTo(beforePoint));
        path.push(curveTo(beforePoint2, afterPoint2, afterPoint));
      }

      return path;
    }

    function getPointAtLength(start, end, length) {

      const deltaX = end.x - start.x;
      const deltaY = end.y - start.y;

      const totalLength = vectorLength(deltaX, deltaY);

      const percent = length / totalLength;

      return {
        x: start.x + deltaX * percent,
        y: start.y + deltaY * percent
      };
    }

    function vectorLength(x, y) {
      return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    }

    /**
     * @param {Point[]} points
     * @param {any} [attrs]
     * @param {number} [radius]
     *
     * @return {SVGElement}
     */
    function createLine(points, attrs, radius) {

      if (isNumber$3(attrs)) {
        radius = attrs;
        attrs = null;
      }

      if (!attrs) {
        attrs = {};
      }

      const line = create$1('path', attrs);

      if (isNumber$3(radius)) {
        line.dataset.cornerRadius = String(radius);
      }

      return updateLine(line, points);
    }

    /**
     * @param {SVGElement} gfx
     * @param {Point[]} points
     *
     * @return {SVGElement}
     */
    function updateLine(gfx, points) {

      const cornerRadius = parseInt(gfx.dataset.cornerRadius, 10) || 0;

      attr(gfx, {
        d: componentsToPath(drawPath(points, cornerRadius))
      });

      return gfx;
    }

    /**
     * @typedef {import('../../model/Types').Element} Element
     *
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../../draw/Styles').default} Styles
     *
     * @typedef {import('../../util/Types').Point} Point
     */

    function allowAll(event) { return true; }

    function allowPrimaryAndAuxiliary(event) {
      return isPrimaryButton(event) || isAuxiliaryButton(event);
    }

    var LOW_PRIORITY$a = 500;


    /**
     * A plugin that provides interaction events for diagram elements.
     *
     * It emits the following events:
     *
     *   * element.click
     *   * element.contextmenu
     *   * element.dblclick
     *   * element.hover
     *   * element.mousedown
     *   * element.mousemove
     *   * element.mouseup
     *   * element.out
     *
     * Each event is a tuple { element, gfx, originalEvent }.
     *
     * Canceling the event via Event#preventDefault()
     * prevents the original DOM operation.
     *
     * @param {EventBus} eventBus
     * @param {ElementRegistry} elementRegistry
     * @param {Styles} styles
     */
    function InteractionEvents(eventBus, elementRegistry, styles) {

      var self = this;

      /**
       * Fire an interaction event.
       *
       * @param {string} type local event name, e.g. element.click.
       * @param {MouseEvent|TouchEvent} event native event
       * @param {Element} [element] the diagram element to emit the event on;
       *                                   defaults to the event target
       */
      function fire(type, event, element) {

        if (isIgnored(type, event)) {
          return;
        }

        var target, gfx, returnValue;

        if (!element) {
          target = event.delegateTarget || event.target;

          if (target) {
            gfx = target;
            element = elementRegistry.get(gfx);
          }
        } else {
          gfx = elementRegistry.getGraphics(element);
        }

        if (!gfx || !element) {
          return;
        }

        returnValue = eventBus.fire(type, {
          element: element,
          gfx: gfx,
          originalEvent: event
        });

        if (returnValue === false) {
          event.stopPropagation();
          event.preventDefault();
        }
      }

      // TODO(nikku): document this
      var handlers = {};

      function mouseHandler(localEventName) {
        return handlers[localEventName];
      }

      function isIgnored(localEventName, event) {

        var filter = ignoredFilters[localEventName] || isPrimaryButton;

        // only react on left mouse button interactions
        // except for interaction events that are enabled
        // for secundary mouse button
        return !filter(event);
      }

      var bindings = {
        click: 'element.click',
        contextmenu: 'element.contextmenu',
        dblclick: 'element.dblclick',
        mousedown: 'element.mousedown',
        mousemove: 'element.mousemove',
        mouseover: 'element.hover',
        mouseout: 'element.out',
        mouseup: 'element.mouseup',
      };

      var ignoredFilters = {
        'element.contextmenu': allowAll,
        'element.mousedown': allowPrimaryAndAuxiliary,
        'element.mouseup': allowPrimaryAndAuxiliary,
        'element.click': allowPrimaryAndAuxiliary,
        'element.dblclick': allowPrimaryAndAuxiliary
      };


      // manual event trigger //////////

      /**
       * Trigger an interaction event (based on a native dom event)
       * on the target shape or connection.
       *
       * @param {string} eventName the name of the triggered DOM event
       * @param {MouseEvent|TouchEvent} event
       * @param {Element} targetElement
       */
      function triggerMouseEvent(eventName, event, targetElement) {

        // i.e. element.mousedown...
        var localEventName = bindings[eventName];

        if (!localEventName) {
          throw new Error('unmapped DOM event name <' + eventName + '>');
        }

        return fire(localEventName, event, targetElement);
      }


      var ELEMENT_SELECTOR = 'svg, .djs-element';

      // event handling ///////

      function registerEvent(node, event, localEvent, ignoredFilter) {

        var handler = handlers[localEvent] = function(event) {
          fire(localEvent, event);
        };

        if (ignoredFilter) {
          ignoredFilters[localEvent] = ignoredFilter;
        }

        handler.$delegate = delegate.bind(node, ELEMENT_SELECTOR, event, handler);
      }

      function unregisterEvent(node, event, localEvent) {

        var handler = mouseHandler(localEvent);

        if (!handler) {
          return;
        }

        delegate.unbind(node, event, handler.$delegate);
      }

      function registerEvents(svg) {
        forEach$1(bindings, function(val, key) {
          registerEvent(svg, key, val);
        });
      }

      function unregisterEvents(svg) {
        forEach$1(bindings, function(val, key) {
          unregisterEvent(svg, key, val);
        });
      }

      eventBus.on('canvas.destroy', function(event) {
        unregisterEvents(event.svg);
      });

      eventBus.on('canvas.init', function(event) {
        registerEvents(event.svg);
      });


      // hit box updating ////////////////

      eventBus.on([ 'shape.added', 'connection.added' ], function(event) {
        var element = event.element,
            gfx = event.gfx;

        eventBus.fire('interactionEvents.createHit', { element: element, gfx: gfx });
      });

      // Update djs-hit on change.
      // A low priortity is necessary, because djs-hit of labels has to be updated
      // after the label bounds have been updated in the renderer.
      eventBus.on([
        'shape.changed',
        'connection.changed'
      ], LOW_PRIORITY$a, function(event) {

        var element = event.element,
            gfx = event.gfx;

        eventBus.fire('interactionEvents.updateHit', { element: element, gfx: gfx });
      });

      eventBus.on('interactionEvents.createHit', LOW_PRIORITY$a, function(event) {
        var element = event.element,
            gfx = event.gfx;

        self.createDefaultHit(element, gfx);
      });

      eventBus.on('interactionEvents.updateHit', function(event) {
        var element = event.element,
            gfx = event.gfx;

        self.updateDefaultHit(element, gfx);
      });


      // hit styles ////////////

      var STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-stroke');

      var CLICK_STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-click-stroke');

      var ALL_HIT_STYLE = createHitStyle('djs-hit djs-hit-all');

      var NO_MOVE_HIT_STYLE = createHitStyle('djs-hit djs-hit-no-move');

      var HIT_TYPES = {
        'all': ALL_HIT_STYLE,
        'click-stroke': CLICK_STROKE_HIT_STYLE,
        'stroke': STROKE_HIT_STYLE,
        'no-move': NO_MOVE_HIT_STYLE
      };

      function createHitStyle(classNames, attrs) {

        attrs = assign$1({
          stroke: 'white',
          strokeWidth: 15
        }, attrs || {});

        return styles.cls(classNames, [ 'no-fill', 'no-border' ], attrs);
      }


      // style helpers ///////////////

      function applyStyle(hit, type) {

        var attrs = HIT_TYPES[type];

        if (!attrs) {
          throw new Error('invalid hit type <' + type + '>');
        }

        attr(hit, attrs);

        return hit;
      }

      function appendHit(gfx, hit) {
        append(gfx, hit);
      }


      // API

      /**
       * Remove hints on the given graphics.
       *
       * @param {SVGElement} gfx
       */
      this.removeHits = function(gfx) {
        var hits = all('.djs-hit', gfx);

        forEach$1(hits, remove);
      };

      /**
       * Create default hit for the given element.
       *
       * @param {Element} element
       * @param {SVGElement} gfx
       *
       * @return {SVGElement} created hit
       */
      this.createDefaultHit = function(element, gfx) {
        var waypoints = element.waypoints,
            isFrame = element.isFrame,
            boxType;

        if (waypoints) {
          return this.createWaypointsHit(gfx, waypoints);
        } else {

          boxType = isFrame ? 'stroke' : 'all';

          return this.createBoxHit(gfx, boxType, {
            width: element.width,
            height: element.height
          });
        }
      };

      /**
       * Create hits for the given waypoints.
       *
       * @param {SVGElement} gfx
       * @param {Point[]} waypoints
       *
       * @return {SVGElement}
       */
      this.createWaypointsHit = function(gfx, waypoints) {

        var hit = createLine(waypoints);

        applyStyle(hit, 'stroke');

        appendHit(gfx, hit);

        return hit;
      };

      /**
       * Create hits for a box.
       *
       * @param {SVGElement} gfx
       * @param {string} type
       * @param {Object} attrs
       *
       * @return {SVGElement}
       */
      this.createBoxHit = function(gfx, type, attrs) {

        attrs = assign$1({
          x: 0,
          y: 0
        }, attrs);

        var hit = create$1('rect');

        applyStyle(hit, type);

        attr(hit, attrs);

        appendHit(gfx, hit);

        return hit;
      };

      /**
       * Update default hit of the element.
       *
       * @param {Element} element
       * @param {SVGElement} gfx
       *
       * @return {SVGElement} updated hit
       */
      this.updateDefaultHit = function(element, gfx) {

        var hit = query('.djs-hit', gfx);

        if (!hit) {
          return;
        }

        if (element.waypoints) {
          updateLine(hit, element.waypoints);
        } else {
          attr(hit, {
            width: element.width,
            height: element.height
          });
        }

        return hit;
      };

      this.fire = fire;

      this.triggerMouseEvent = triggerMouseEvent;

      this.mouseHandler = mouseHandler;

      this.registerEvent = registerEvent;
      this.unregisterEvent = unregisterEvent;
    }


    InteractionEvents.$inject = [
      'eventBus',
      'elementRegistry',
      'styles'
    ];


    /**
     * An event indicating that the mouse hovered over an element
     *
     * @event element.hover
     *
     * @type {Object}
     * @property {Element} element
     * @property {SVGElement} gfx
     * @property {Event} originalEvent
     */

    /**
     * An event indicating that the mouse has left an element
     *
     * @event element.out
     *
     * @type {Object}
     * @property {Element} element
     * @property {SVGElement} gfx
     * @property {Event} originalEvent
     */

    /**
     * An event indicating that the mouse has clicked an element
     *
     * @event element.click
     *
     * @type {Object}
     * @property {Element} element
     * @property {SVGElement} gfx
     * @property {Event} originalEvent
     */

    /**
     * An event indicating that the mouse has double clicked an element
     *
     * @event element.dblclick
     *
     * @type {Object}
     * @property {Element} element
     * @property {SVGElement} gfx
     * @property {Event} originalEvent
     */

    /**
     * An event indicating that the mouse has gone down on an element.
     *
     * @event element.mousedown
     *
     * @type {Object}
     * @property {Element} element
     * @property {SVGElement} gfx
     * @property {Event} originalEvent
     */

    /**
     * An event indicating that the mouse has gone up on an element.
     *
     * @event element.mouseup
     *
     * @type {Object}
     * @property {Element} element
     * @property {SVGElement} gfx
     * @property {Event} originalEvent
     */

    /**
     * An event indicating that the context menu action is triggered
     * via mouse or touch controls.
     *
     * @event element.contextmenu
     *
     * @type {Object}
     * @property {Element} element
     * @property {SVGElement} gfx
     * @property {Event} originalEvent
     */

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var InteractionEventsModule = {
      __init__: [ 'interactionEvents' ],
      interactionEvents: [ 'type', InteractionEvents ]
    };

    var LOW_PRIORITY$9 = 500;

    /**
     * @typedef {import('../../model/Types').Element} Element
     *
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../../draw/Styles').default} Styles
     */

    /**
     * @class
     *
     * A plugin that adds an outline to shapes and connections that may be activated and styled
     * via CSS classes.
     *
     * @param {EventBus} eventBus
     * @param {Styles} styles
     */
    function Outline(eventBus, styles) {

      this.offset = 6;

      var OUTLINE_STYLE = styles.cls('djs-outline', [ 'no-fill' ]);

      var self = this;

      function createOutline(gfx, bounds) {
        var outline = create$1('rect');

        attr(outline, assign$1({
          x: 10,
          y: 10,
          rx: 4,
          width: 100,
          height: 100
        }, OUTLINE_STYLE));

        append(gfx, outline);

        return outline;
      }

      // A low priortity is necessary, because outlines of labels have to be updated
      // after the label bounds have been updated in the renderer.
      eventBus.on([ 'shape.added', 'shape.changed' ], LOW_PRIORITY$9, function(event) {
        var element = event.element,
            gfx = event.gfx;

        var outline = query('.djs-outline', gfx);

        if (!outline) {
          outline = createOutline(gfx);
        }

        self.updateShapeOutline(outline, element);
      });

      eventBus.on([ 'connection.added', 'connection.changed' ], function(event) {
        var element = event.element,
            gfx = event.gfx;

        var outline = query('.djs-outline', gfx);

        if (!outline) {
          outline = createOutline(gfx);
        }

        self.updateConnectionOutline(outline, element);
      });
    }


    /**
     * Updates the outline of a shape respecting the dimension of the
     * element and an outline offset.
     *
     * @param {SVGElement} outline
     * @param {Element} element
     */
    Outline.prototype.updateShapeOutline = function(outline, element) {

      attr(outline, {
        x: -this.offset,
        y: -this.offset,
        width: element.width + this.offset * 2,
        height: element.height + this.offset * 2
      });

    };


    /**
     * Updates the outline of a connection respecting the bounding box of
     * the connection and an outline offset.
     *
     * @param {SVGElement} outline
     * @param {Element} connection
     */
    Outline.prototype.updateConnectionOutline = function(outline, connection) {

      var bbox = getBBox(connection);

      attr(outline, {
        x: bbox.x - this.offset,
        y: bbox.y - this.offset,
        width: bbox.width + this.offset * 2,
        height: bbox.height + this.offset * 2
      });

    };


    Outline.$inject = [ 'eventBus', 'styles', 'elementRegistry' ];

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var OutlineModule = {
      __init__: [ 'outline' ],
      outline: [ 'type', Outline ]
    };

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/EventBus').default} EventBus
     */

    /**
     * A service that offers the current selection in a diagram.
     * Offers the api to control the selection, too.
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     */
    function Selection(eventBus, canvas) {

      this._eventBus = eventBus;
      this._canvas = canvas;

      /**
       * @type {Object[]}
       */
      this._selectedElements = [];

      var self = this;

      eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {
        var element = e.element;
        self.deselect(element);
      });

      eventBus.on([ 'diagram.clear', 'root.set' ], function(e) {
        self.select(null);
      });
    }

    Selection.$inject = [ 'eventBus', 'canvas' ];

    /**
     * Deselect an element.
     *
     * @param {Object} element The element to deselect.
     */
    Selection.prototype.deselect = function(element) {
      var selectedElements = this._selectedElements;

      var idx = selectedElements.indexOf(element);

      if (idx !== -1) {
        var oldSelection = selectedElements.slice();

        selectedElements.splice(idx, 1);

        this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });
      }
    };

    /**
     * Get the selected elements.
     *
     * @return {Object[]} The selected elements.
     */
    Selection.prototype.get = function() {
      return this._selectedElements;
    };

    /**
     * Check whether an element is selected.
     *
     * @param {Object} element The element.
     *
     * @return {boolean} Whether the element is selected.
     */
    Selection.prototype.isSelected = function(element) {
      return this._selectedElements.indexOf(element) !== -1;
    };


    /**
     * Select one or many elements.
     *
     * @param {Object|Object[]} elements The element(s) to select.
     * @param {boolean} [add] Whether to add the element(s) to the selected elements.
     * Defaults to `false`.
     */
    Selection.prototype.select = function(elements, add) {
      var selectedElements = this._selectedElements,
          oldSelection = selectedElements.slice();

      if (!isArray$5(elements)) {
        elements = elements ? [ elements ] : [];
      }

      var canvas = this._canvas;

      var rootElement = canvas.getRootElement();

      elements = elements.filter(function(element) {
        var elementRoot = canvas.findRoot(element);

        return rootElement === elementRoot;
      });

      // selection may be cleared by passing an empty array or null
      // to the method
      if (add) {
        forEach$1(elements, function(element) {
          if (selectedElements.indexOf(element) !== -1) {

            // already selected
            return;
          } else {
            selectedElements.push(element);
          }
        });
      } else {
        this._selectedElements = selectedElements = elements.slice();
      }

      this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });
    };

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('./Selection').default} Selection
     */

    var MARKER_HOVER = 'hover',
        MARKER_SELECTED = 'selected';

    var SELECTION_OUTLINE_PADDING = 6;


    /**
     * A plugin that adds a visible selection UI to shapes and connections
     * by appending the <code>hover</code> and <code>selected</code> classes to them.
     *
     * @class
     *
     * Makes elements selectable, too.
     *
     * @param {Canvas} canvas
     * @param {EventBus} eventBus
     * @param {Selection} selection
     */
    function SelectionVisuals(canvas, eventBus, selection) {
      this._canvas = canvas;

      var self = this;

      this._multiSelectionBox = null;

      function addMarker(e, cls) {
        canvas.addMarker(e, cls);
      }

      function removeMarker(e, cls) {
        canvas.removeMarker(e, cls);
      }

      eventBus.on('element.hover', function(event) {
        addMarker(event.element, MARKER_HOVER);
      });

      eventBus.on('element.out', function(event) {
        removeMarker(event.element, MARKER_HOVER);
      });

      eventBus.on('selection.changed', function(event) {

        function deselect(s) {
          removeMarker(s, MARKER_SELECTED);
        }

        function select(s) {
          addMarker(s, MARKER_SELECTED);
        }

        var oldSelection = event.oldSelection,
            newSelection = event.newSelection;

        forEach$1(oldSelection, function(e) {
          if (newSelection.indexOf(e) === -1) {
            deselect(e);
          }
        });

        forEach$1(newSelection, function(e) {
          if (oldSelection.indexOf(e) === -1) {
            select(e);
          }
        });

        self._updateSelectionOutline(newSelection);
      });


      eventBus.on('element.changed', function(event) {
        if (selection.isSelected(event.element)) {
          self._updateSelectionOutline(selection.get());
        }
      });
    }

    SelectionVisuals.$inject = [
      'canvas',
      'eventBus',
      'selection'
    ];

    SelectionVisuals.prototype._updateSelectionOutline = function(selection) {
      var layer = this._canvas.getLayer('selectionOutline');

      clear(layer);

      var enabled = selection.length > 1;

      var container = this._canvas.getContainer();

      classes(container)[enabled ? 'add' : 'remove']('djs-multi-select');

      if (!enabled) {
        return;
      }

      var bBox = addSelectionOutlinePadding(getBBox(selection));

      var rect = create$1('rect');

      attr(rect, assign$1({
        rx: 3
      }, bBox));

      classes(rect).add('djs-selection-outline');

      append(layer, rect);
    };

    // helpers //////////

    function addSelectionOutlinePadding(bBox) {
      return {
        x: bBox.x - SELECTION_OUTLINE_PADDING,
        y: bBox.y - SELECTION_OUTLINE_PADDING,
        width: bBox.width + SELECTION_OUTLINE_PADDING * 2,
        height: bBox.height + SELECTION_OUTLINE_PADDING * 2
      };
    }

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('./Selection').default} Selection
     */

    /**
     * @param {EventBus} eventBus
     * @param {Selection} selection
     * @param {Canvas} canvas
     * @param {ElementRegistry} elementRegistry
     */
    function SelectionBehavior(eventBus, selection, canvas, elementRegistry) {

      // Select elements on create
      eventBus.on('create.end', 500, function(event) {
        var context = event.context,
            canExecute = context.canExecute,
            elements = context.elements,
            hints = context.hints || {},
            autoSelect = hints.autoSelect;

        if (canExecute) {
          if (autoSelect === false) {

            // Select no elements
            return;
          }

          if (isArray$5(autoSelect)) {
            selection.select(autoSelect);
          } else {

            // Select all elements by default
            selection.select(elements.filter(isShown));
          }
        }
      });

      // Select connection targets on connect
      eventBus.on('connect.end', 500, function(event) {
        var context = event.context,
            connection = context.connection;

        if (connection) {
          selection.select(connection);
        }
      });

      // Select shapes on move
      eventBus.on('shape.move.end', 500, function(event) {
        var previousSelection = event.previousSelection || [];

        var shape = elementRegistry.get(event.context.shape.id);

        // Always select main shape on move
        var isSelected = find$1(previousSelection, function(selectedShape) {
          return shape.id === selectedShape.id;
        });

        if (!isSelected) {
          selection.select(shape);
        }
      });

      // Select elements on click
      eventBus.on('element.click', function(event) {

        if (!isPrimaryButton(event)) {
          return;
        }

        var element = event.element;

        if (element === canvas.getRootElement()) {
          element = null;
        }

        var isSelected = selection.isSelected(element),
            isMultiSelect = selection.get().length > 1;

        // Add to selection if CTRL or SHIFT pressed
        var add = hasPrimaryModifier(event) || hasSecondaryModifier(event);

        if (isSelected && isMultiSelect) {
          if (add) {

            // Deselect element
            return selection.deselect(element);
          } else {

            // Select element only
            return selection.select(element);
          }
        } else if (!isSelected) {

          // Select element
          selection.select(element, add);
        } else {

          // Deselect element
          selection.deselect(element);
        }
      });
    }

    SelectionBehavior.$inject = [
      'eventBus',
      'selection',
      'canvas',
      'elementRegistry'
    ];


    function isShown(element) {
      return !element.hidden;
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var SelectionModule = {
      __init__: [ 'selectionVisuals', 'selectionBehavior' ],
      __depends__: [
        InteractionEventsModule,
        OutlineModule
      ],
      selection: [ 'type', Selection ],
      selectionVisuals: [ 'type', SelectionVisuals ],
      selectionBehavior: [ 'type', SelectionBehavior ]
    };

    var CURSOR_CLS_PATTERN = /^djs-cursor-.*$/;


    function set(mode) {
      var classes = classes$1(document.body);

      classes.removeMatching(CURSOR_CLS_PATTERN);

      if (mode) {
        classes.add('djs-cursor-' + mode);
      }
    }

    function unset() {
      set(null);
    }

    var TRAP_PRIORITY = 5000;

    /**
     * Installs a click trap that prevents a ghost click following a dragging operation.
     *
     * @return {Function} a function to immediately remove the installed trap.
     */
    function install(eventBus, eventName) {

      eventName = eventName || 'element.click';

      function trap() {
        return false;
      }

      eventBus.once(eventName, TRAP_PRIORITY, trap);

      return function() {
        eventBus.off(eventName, trap);
      };
    }

    var KEYS_COPY = [ 'c', 'C' ];
    var KEYS_PASTE = [ 'v', 'V' ];
    var KEYS_REDO = [ 'y', 'Y' ];
    var KEYS_UNDO = [ 'z', 'Z' ];

    /**
     * Returns true if event was triggered with any modifier
     * @param {KeyboardEvent} event
     */
    function hasModifier(event) {
      return (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey);
    }

    /**
     * @param {KeyboardEvent} event
     */
    function isCmd(event) {

      // ensure we don't react to AltGr
      // (mapped to CTRL + ALT)
      if (event.altKey) {
        return false;
      }

      return event.ctrlKey || event.metaKey;
    }

    /**
     * Checks if key pressed is one of provided keys.
     *
     * @param {string|string[]} keys
     * @param {KeyboardEvent} event
     */
    function isKey(keys, event) {
      keys = isArray$5(keys) ? keys : [ keys ];

      return keys.indexOf(event.key) !== -1 || keys.indexOf(event.code) !== -1;
    }

    /**
     * @param {KeyboardEvent} event
     */
    function isShift(event) {
      return event.shiftKey;
    }

    function isCopy(event) {
      return isCmd(event) && isKey(KEYS_COPY, event);
    }

    function isPaste(event) {
      return isCmd(event) && isKey(KEYS_PASTE, event);
    }

    function isUndo(event) {
      return isCmd(event) && !isShift(event) && isKey(KEYS_UNDO, event);
    }

    function isRedo(event) {
      return isCmd(event) && (
        isKey(KEYS_REDO, event) || (
          isKey(KEYS_UNDO, event) && isShift(event)
        )
      );
    }

    var round$6 = Math.round;

    /**
     * @typedef {import('../../util/Types').Point} Point
     *
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../selection/Selection').default} Selection
     */

    var DRAG_ACTIVE_CLS = 'djs-drag-active';


    function preventDefault(event) {
      event.preventDefault();
    }

    function isTouchEvent(event) {

      // check for TouchEvent being available first
      // (i.e. not available on desktop Firefox)
      return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;
    }

    function getLength(point) {
      return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
    }

    /**
     * A helper that fires canvas localized drag events and realizes
     * the general "drag-and-drop" look and feel.
     *
     * Calling {@link Dragging#activate} activates dragging on a canvas.
     *
     * It provides the following:
     *
     *   * emits life cycle events, namespaced with a prefix assigned
     *     during dragging activation
     *   * sets and restores the cursor
     *   * sets and restores the selection if elements still exist
     *   * ensures there can be only one drag operation active at a time
     *
     * Dragging may be canceled manually by calling {@link Dragging#cancel}
     * or by pressing ESC.
     *
     *
     * ## Life-cycle events
     *
     * Dragging can be in three different states, off, initialized
     * and active.
     *
     * (1) off: no dragging operation is in progress
     * (2) initialized: a new drag operation got initialized but not yet
     *                  started (i.e. because of no initial move)
     * (3) started: dragging is in progress
     *
     * Eventually dragging will be off again after a drag operation has
     * been ended or canceled via user click or ESC key press.
     *
     * To indicate transitions between these states dragging emits generic
     * life-cycle events with the `drag.` prefix _and_ events namespaced
     * to a prefix choosen by a user during drag initialization.
     *
     * The following events are emitted (appropriately prefixed) via
     * the {@link EventBus}.
     *
     * * `init`
     * * `start`
     * * `move`
     * * `end`
     * * `ended` (dragging already in off state)
     * * `cancel` (only if previously started)
     * * `canceled` (dragging already in off state, only if previously started)
     * * `cleanup`
     *
     *
     * @example
     *
     * function MyDragComponent(eventBus, dragging) {
     *
     *   eventBus.on('mydrag.start', function(event) {
     *     console.log('yes, we start dragging');
     *   });
     *
     *   eventBus.on('mydrag.move', function(event) {
     *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);
     *
     *     // local drag data is passed with the event
     *     event.context.foo; // "BAR"
     *
     *     // the original mouse event, too
     *     event.originalEvent; // MouseEvent(...)
     *   });
     *
     *   eventBus.on('element.click', function(event) {
     *     dragging.init(event, 'mydrag', {
     *       cursor: 'grabbing',
     *       data: {
     *         context: {
     *           foo: "BAR"
     *         }
     *       }
     *     });
     *   });
     * }
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     * @param {Selection} selection
     * @param {ElementRegistry} elementRegistry
     */
    function Dragging(eventBus, canvas, selection, elementRegistry) {

      var defaultOptions = {
        threshold: 5,
        trapClick: true
      };

      // the currently active drag operation
      // dragging is active as soon as this context exists.
      //
      // it is visually _active_ only when a context.active flag is set to true.
      var context;

      /* convert a global event into local coordinates */
      function toLocalPoint(globalPosition) {

        var viewbox = canvas.viewbox();

        var clientRect = canvas._container.getBoundingClientRect();

        return {
          x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,
          y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale
        };
      }

      // helpers

      function fire(type, dragContext) {
        dragContext = dragContext || context;

        var event = eventBus.createEvent(
          assign$1(
            {},
            dragContext.payload,
            dragContext.data,
            { isTouch: dragContext.isTouch }
          )
        );

        // default integration
        if (eventBus.fire('drag.' + type, event) === false) {
          return false;
        }

        return eventBus.fire(dragContext.prefix + '.' + type, event);
      }

      function restoreSelection(previousSelection) {
        var existingSelection = previousSelection.filter(function(element) {
          return elementRegistry.get(element.id);
        });

        existingSelection.length && selection.select(existingSelection);
      }

      // event listeners

      function move(event, activate) {
        var payload = context.payload,
            displacement = context.displacement;

        var globalStart = context.globalStart,
            globalCurrent = toPoint(event),
            globalDelta = delta(globalCurrent, globalStart);

        var localStart = context.localStart,
            localCurrent = toLocalPoint(globalCurrent),
            localDelta = delta(localCurrent, localStart);


        // activate context explicitly or once threshold is reached
        if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {

          // fire start event with original
          // starting coordinates

          assign$1(payload, {
            x: round$6(localStart.x + displacement.x),
            y: round$6(localStart.y + displacement.y),
            dx: 0,
            dy: 0
          }, { originalEvent: event });

          if (false === fire('start')) {
            return cancel();
          }

          context.active = true;

          // unset selection and remember old selection
          // the previous (old) selection will always passed
          // with the event via the event.previousSelection property
          if (!context.keepSelection) {
            payload.previousSelection = selection.get();
            selection.select(null);
          }

          // allow custom cursor
          if (context.cursor) {
            set(context.cursor);
          }

          // indicate dragging via marker on root element
          canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);
        }

        stopPropagation(event);

        if (context.active) {

          // update payload with actual coordinates
          assign$1(payload, {
            x: round$6(localCurrent.x + displacement.x),
            y: round$6(localCurrent.y + displacement.y),
            dx: round$6(localDelta.x),
            dy: round$6(localDelta.y)
          }, { originalEvent: event });

          // emit move event
          fire('move');
        }
      }

      function end(event) {
        var previousContext,
            returnValue = true;

        if (context.active) {

          if (event) {
            context.payload.originalEvent = event;

            // suppress original event (click, ...)
            // because we just ended a drag operation
            stopPropagation(event);
          }

          // implementations may stop restoring the
          // original state (selections, ...) by preventing the
          // end events default action
          returnValue = fire('end');
        }

        if (returnValue === false) {
          fire('rejected');
        }

        previousContext = cleanup(returnValue !== true);

        // last event to be fired when all drag operations are done
        // at this point in time no drag operation is in progress anymore
        fire('ended', previousContext);
      }


      // cancel active drag operation if the user presses
      // the ESC key on the keyboard

      function checkCancel(event) {

        if (isKey('Escape', event)) {
          preventDefault(event);

          cancel();
        }
      }


      // prevent ghost click that might occur after a finished
      // drag and drop session

      function trapClickAndEnd(event) {

        var untrap;

        // trap the click in case we are part of an active
        // drag operation. This will effectively prevent
        // the ghost click that cannot be canceled otherwise.
        if (context.active) {

          untrap = install(eventBus);

          // remove trap after minimal delay
          setTimeout(untrap, 400);

          // prevent default action (click)
          preventDefault(event);
        }

        end(event);
      }

      function trapTouch(event) {
        move(event);
      }

      // update the drag events model element (`hover`) and graphical element (`hoverGfx`)
      // properties during hover and out and fire {prefix}.hover and {prefix}.out properties
      // respectively

      function hover(event) {
        var payload = context.payload;

        payload.hoverGfx = event.gfx;
        payload.hover = event.element;

        fire('hover');
      }

      function out(event) {
        fire('out');

        var payload = context.payload;

        payload.hoverGfx = null;
        payload.hover = null;
      }


      // life-cycle methods

      function cancel(restore) {
        var previousContext;

        if (!context) {
          return;
        }

        var wasActive = context.active;

        if (wasActive) {
          fire('cancel');
        }

        previousContext = cleanup(restore);

        if (wasActive) {

          // last event to be fired when all drag operations are done
          // at this point in time no drag operation is in progress anymore
          fire('canceled', previousContext);
        }
      }

      function cleanup(restore) {
        var previousContext,
            endDrag;

        fire('cleanup');

        // reset cursor
        unset();

        if (context.trapClick) {
          endDrag = trapClickAndEnd;
        } else {
          endDrag = end;
        }

        // reset dom listeners
        event.unbind(document, 'mousemove', move);

        event.unbind(document, 'dragstart', preventDefault);
        event.unbind(document, 'selectstart', preventDefault);

        event.unbind(document, 'mousedown', endDrag, true);
        event.unbind(document, 'mouseup', endDrag, true);

        event.unbind(document, 'keyup', checkCancel);

        event.unbind(document, 'touchstart', trapTouch, true);
        event.unbind(document, 'touchcancel', cancel, true);
        event.unbind(document, 'touchmove', move, true);
        event.unbind(document, 'touchend', end, true);

        eventBus.off('element.hover', hover);
        eventBus.off('element.out', out);

        // remove drag marker on root element
        canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);

        // restore selection, unless it has changed
        var previousSelection = context.payload.previousSelection;

        if (restore !== false && previousSelection && !selection.get().length) {
          restoreSelection(previousSelection);
        }

        previousContext = context;

        context = null;

        return previousContext;
      }

      /**
       * Initialize a drag operation.
       *
       * If `localPosition` is given, drag events will be emitted
       * relative to it.
       *
       * @param {MouseEvent|TouchEvent} [event]
       * @param {Point} [localPosition] actual diagram local position this drag operation should start at
       * @param {string} prefix
       * @param {Object} [options]
       */
      function init(event$1, relativeTo, prefix, options) {

        // only one drag operation may be active, at a time
        if (context) {
          cancel(false);
        }

        if (typeof relativeTo === 'string') {
          options = prefix;
          prefix = relativeTo;
          relativeTo = null;
        }

        options = assign$1({}, defaultOptions, options || {});

        var data = options.data || {},
            originalEvent,
            globalStart,
            localStart,
            endDrag,
            isTouch;

        if (options.trapClick) {
          endDrag = trapClickAndEnd;
        } else {
          endDrag = end;
        }

        if (event$1) {
          originalEvent = getOriginal(event$1) || event$1;
          globalStart = toPoint(event$1);

          stopPropagation(event$1);

          // prevent default browser dragging behavior
          if (originalEvent.type === 'dragstart') {
            preventDefault(originalEvent);
          }
        } else {
          originalEvent = null;
          globalStart = { x: 0, y: 0 };
        }

        localStart = toLocalPoint(globalStart);

        if (!relativeTo) {
          relativeTo = localStart;
        }

        isTouch = isTouchEvent(originalEvent);

        context = assign$1({
          prefix: prefix,
          data: data,
          payload: {},
          globalStart: globalStart,
          displacement: delta(relativeTo, localStart),
          localStart: localStart,
          isTouch: isTouch
        }, options);

        // skip dom registration if trigger
        // is set to manual (during testing)
        if (!options.manual) {

          // add dom listeners

          if (isTouch) {
            event.bind(document, 'touchstart', trapTouch, true);
            event.bind(document, 'touchcancel', cancel, true);
            event.bind(document, 'touchmove', move, true);
            event.bind(document, 'touchend', end, true);
          } else {

            // assume we use the mouse to interact per default
            event.bind(document, 'mousemove', move);

            // prevent default browser drag and text selection behavior
            event.bind(document, 'dragstart', preventDefault);
            event.bind(document, 'selectstart', preventDefault);

            event.bind(document, 'mousedown', endDrag, true);
            event.bind(document, 'mouseup', endDrag, true);
          }

          event.bind(document, 'keyup', checkCancel);

          eventBus.on('element.hover', hover);
          eventBus.on('element.out', out);
        }

        fire('init');

        if (options.autoActivate) {
          move(event$1, true);
        }
      }

      // cancel on diagram destruction
      eventBus.on('diagram.destroy', cancel);


      // API

      this.init = init;
      this.move = move;
      this.hover = hover;
      this.out = out;
      this.end = end;

      this.cancel = cancel;

      // for introspection

      this.context = function() {
        return context;
      };

      this.setOptions = function(options) {
        assign$1(defaultOptions, options);
      };
    }

    Dragging.$inject = [
      'eventBus',
      'canvas',
      'selection',
      'elementRegistry'
    ];

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var DraggingModule = {
      __depends__: [
        HoverFixModule,
        SelectionModule,
      ],
      dragging: [ 'type', Dragging ],
    };

    /**
     * SVGs for elements are generated by the {@link GraphicsFactory}.
     *
     * This utility gives quick access to the important semantic
     * parts of an element.
     */

    /**
     * Returns the visual part of a diagram element.
     *
     * @param {SVGElement} gfx
     *
     * @return {SVGElement}
     */
    function getVisual(gfx) {
      return gfx.childNodes[0];
    }

    /**
     * Returns the children for a given diagram element.
     *
     * @param {SVGElement} gfx
     * @return {SVGElement}
     */
    function getChildren(gfx) {
      return gfx.parentNode.childNodes[1];
    }

    /**
     * @typedef {import('../../core/Types').ElementLike} Element
     * @typedef {import('../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../../draw/Styles').default} Styles
     */

    var MARKER_TYPES = [
      'marker-start',
      'marker-mid',
      'marker-end'
    ];

    var NODES_CAN_HAVE_MARKER = [
      'circle',
      'ellipse',
      'line',
      'path',
      'polygon',
      'polyline',
      'path',
      'rect'
    ];


    /**
     * Adds support for previews of moving/resizing elements.
     *
     * @param {ElementRegistry} elementRegistry
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     * @param {Styles} styles
     */
    function PreviewSupport(elementRegistry, eventBus, canvas, styles) {
      this._elementRegistry = elementRegistry;
      this._canvas = canvas;
      this._styles = styles;

      this._clonedMarkers = {};

      var self = this;

      eventBus.on('drag.cleanup', function() {
        forEach$1(self._clonedMarkers, function(clonedMarker) {
          remove(clonedMarker);
        });

        self._clonedMarkers = {};
      });
    }

    PreviewSupport.$inject = [
      'elementRegistry',
      'eventBus',
      'canvas',
      'styles'
    ];


    /**
     * Returns graphics of an element.
     *
     * @param {Element} element
     *
     * @return {SVGElement}
     */
    PreviewSupport.prototype.getGfx = function(element) {
      return this._elementRegistry.getGraphics(element);
    };

    /**
     * Adds a move preview of a given shape to a given SVG group.
     *
     * @param {Element} element The element to be moved.
     * @param {SVGElement} group The SVG group to add the preview to.
     * @param {SVGElement} [gfx] The optional graphical element of the element.
     *
     * @return {SVGElement} The preview.
     */
    PreviewSupport.prototype.addDragger = function(element, group, gfx) {
      gfx = gfx || this.getGfx(element);

      var dragger = clone(gfx);
      var bbox = gfx.getBoundingClientRect();

      this._cloneMarkers(getVisual(dragger));

      attr(dragger, this._styles.cls('djs-dragger', [], {
        x: bbox.top,
        y: bbox.left
      }));

      append(group, dragger);

      return dragger;
    };

    /**
     * Adds a resize preview of a given shape to a given SVG group.
     *
     * @param {Shape} shape The element to be resized.
     * @param {SVGElement} group The SVG group to add the preview to.
     *
     * @return {SVGElement} The preview.
     */
    PreviewSupport.prototype.addFrame = function(shape, group) {

      var frame = create$1('rect', {
        class: 'djs-resize-overlay',
        width:  shape.width,
        height: shape.height,
        x: shape.x,
        y: shape.y
      });

      append(group, frame);

      return frame;
    };

    /**
     * Clone all markers referenced by a node and its child nodes.
     *
     * @param {SVGElement} gfx
     */
    PreviewSupport.prototype._cloneMarkers = function(gfx) {
      var self = this;

      if (gfx.childNodes) {

        // TODO: use forEach once we drop PhantomJS
        for (var i = 0; i < gfx.childNodes.length; i++) {

          // recursively clone markers of child nodes
          self._cloneMarkers(gfx.childNodes[ i ]);
        }
      }

      if (!canHaveMarker(gfx)) {
        return;
      }

      MARKER_TYPES.forEach(function(markerType) {
        if (attr(gfx, markerType)) {
          var marker = getMarker(gfx, markerType, self._canvas.getContainer());

          self._cloneMarker(gfx, marker, markerType);
        }
      });
    };

    /**
     * Clone marker referenced by an element.
     *
     * @param {SVGElement} gfx
     * @param {SVGElement} marker
     * @param {string} markerType
     */
    PreviewSupport.prototype._cloneMarker = function(gfx, marker, markerType) {
      var markerId = marker.id;

      var clonedMarker = this._clonedMarkers[ markerId ];

      if (!clonedMarker) {
        clonedMarker = clone(marker);

        var clonedMarkerId = markerId + '-clone';

        clonedMarker.id = clonedMarkerId;

        classes(clonedMarker)
          .add('djs-dragger')
          .add('djs-dragger-marker');

        this._clonedMarkers[ markerId ] = clonedMarker;

        var defs = query('defs', this._canvas._svg);

        if (!defs) {
          defs = create$1('defs');

          append(this._canvas._svg, defs);
        }

        append(defs, clonedMarker);
      }

      var reference = idToReference(this._clonedMarkers[ markerId ].id);

      attr(gfx, markerType, reference);
    };

    // helpers //////////

    /**
     * Get marker of given type referenced by node.
     *
     * @param {HTMLElement} node
     * @param {string} markerType
     * @param {HTMLElement} [parentNode]
     *
     * @param {HTMLElement}
     */
    function getMarker(node, markerType, parentNode) {
      var id = referenceToId(attr(node, markerType));

      return query('marker#' + id, parentNode || document);
    }

    /**
     * Get ID of fragment within current document from its functional IRI reference.
     * References may use single or double quotes.
     *
     * @param {string} reference
     *
     * @return {string}
     */
    function referenceToId(reference) {
      return reference.match(/url\(['"]?#([^'"]*)['"]?\)/)[1];
    }

    /**
     * Get functional IRI reference for given ID of fragment within current document.
     *
     * @param {string} id
     *
     * @return {string}
     */
    function idToReference(id) {
      return 'url(#' + id + ')';
    }

    /**
     * Check wether node type can have marker attributes.
     *
     * @param {HTMLElement} node
     *
     * @return {boolean}
     */
    function canHaveMarker(node) {
      return NODES_CAN_HAVE_MARKER.indexOf(node.nodeName) !== -1;
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var PreviewSupportModule = {
      __init__: [ 'previewSupport' ],
      previewSupport: [ 'type', PreviewSupport ]
    };

    var MARKER_OK = 'drop-ok',
        MARKER_NOT_OK = 'drop-not-ok',
        MARKER_ATTACH$1 = 'attach-ok',
        MARKER_NEW_PARENT = 'new-parent';

    /**
     * @typedef {import('../../core/Types').ElementLike} Element
     * @typedef {import('../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../util/Types').Point} Point
     *
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../dragging/Dragging').default} Dragging
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../modeling/Modeling').default} Modeling
     * @typedef {import('../rules/Rules').default} Rules
     */

    var PREFIX = 'create';

    var HIGH_PRIORITY$3 = 2000;


    /**
     * Create new elements through drag and drop.
     *
     * @param {Canvas} canvas
     * @param {Dragging} dragging
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     * @param {Rules} rules
     */
    function Create(
        canvas,
        dragging,
        eventBus,
        modeling,
        rules
    ) {

      // rules //////////

      /**
       * Check wether elements can be created.
       *
       * @param {Element[]} elements
       * @param {Shape} target
       * @param {Point} position
       * @param {Element} [source]
       *
       * @return {boolean|null|Object}
       */
      function canCreate(elements, target, position, source, hints) {
        if (!target) {
          return false;
        }

        // ignore child elements and external labels
        elements = filter(elements, function(element) {
          var labelTarget = element.labelTarget;

          return !element.parent && !(isLabel$2(element) && elements.indexOf(labelTarget) !== -1);
        });

        var shape = find$1(elements, function(element) {
          return !isConnection$6(element);
        });

        var attach = false,
            connect = false,
            create = false;

        // (1) attaching single shapes
        if (isSingleShape(elements)) {
          attach = rules.allowed('shape.attach', {
            position: position,
            shape: shape,
            target: target
          });
        }

        if (!attach) {

          // (2) creating elements
          if (isSingleShape(elements)) {
            create = rules.allowed('shape.create', {
              position: position,
              shape: shape,
              source: source,
              target: target
            });
          } else {
            create = rules.allowed('elements.create', {
              elements: elements,
              position: position,
              target: target
            });
          }

        }

        var connectionTarget = hints.connectionTarget;

        // (3) appending single shapes
        if (create || attach) {
          if (shape && source) {
            connect = rules.allowed('connection.create', {
              source: connectionTarget === source ? shape : source,
              target: connectionTarget === source ? source : shape,
              hints: {
                targetParent: target,
                targetAttach: attach
              }
            });
          }

          return {
            attach: attach,
            connect: connect
          };
        }

        // ignore wether or not elements can be created
        if (create === null || attach === null) {
          return null;
        }

        return false;
      }

      function setMarker(element, marker) {
        [ MARKER_ATTACH$1, MARKER_OK, MARKER_NOT_OK, MARKER_NEW_PARENT ].forEach(function(m) {

          if (m === marker) {
            canvas.addMarker(element, m);
          } else {
            canvas.removeMarker(element, m);
          }
        });
      }

      // event handling //////////

      eventBus.on([ 'create.move', 'create.hover' ], function(event) {
        var context = event.context,
            elements = context.elements,
            hover = event.hover,
            source = context.source,
            hints = context.hints || {};

        if (!hover) {
          context.canExecute = false;
          context.target = null;

          return;
        }

        ensureConstraints$1(event);

        var position = {
          x: event.x,
          y: event.y
        };

        var canExecute = context.canExecute = hover && canCreate(elements, hover, position, source, hints);

        if (hover && canExecute !== null) {
          context.target = hover;

          if (canExecute && canExecute.attach) {
            setMarker(hover, MARKER_ATTACH$1);
          } else {
            setMarker(hover, canExecute ? MARKER_NEW_PARENT : MARKER_NOT_OK);
          }
        }
      });

      eventBus.on([ 'create.end', 'create.out', 'create.cleanup' ], function(event) {
        var hover = event.hover;

        if (hover) {
          setMarker(hover, null);
        }
      });

      eventBus.on('create.end', function(event) {
        var context = event.context,
            source = context.source,
            shape = context.shape,
            elements = context.elements,
            target = context.target,
            canExecute = context.canExecute,
            attach = canExecute && canExecute.attach,
            connect = canExecute && canExecute.connect,
            hints = context.hints || {};

        if (canExecute === false || !target) {
          return false;
        }

        ensureConstraints$1(event);

        var position = {
          x: event.x,
          y: event.y
        };

        if (connect) {
          shape = modeling.appendShape(source, shape, position, target, {
            attach: attach,
            connection: connect === true ? {} : connect,
            connectionTarget: hints.connectionTarget
          });
        } else {
          elements = modeling.createElements(elements, position, target, assign$1({}, hints, {
            attach: attach
          }));

          // update shape
          shape = find$1(elements, function(element) {
            return !isConnection$6(element);
          });
        }

        // update elements and shape
        assign$1(context, {
          elements: elements,
          shape: shape
        });

        assign$1(event, {
          elements: elements,
          shape: shape
        });
      });

      function cancel() {
        var context = dragging.context();

        if (context && context.prefix === PREFIX) {
          dragging.cancel();
        }
      }

      // cancel on <elements.changed> that is not result of <drag.end>
      eventBus.on('create.init', function() {
        eventBus.on('elements.changed', cancel);

        eventBus.once([ 'create.cancel', 'create.end' ], HIGH_PRIORITY$3, function() {
          eventBus.off('elements.changed', cancel);
        });
      });

      // API //////////

      this.start = function(event, elements, context) {
        if (!isArray$5(elements)) {
          elements = [ elements ];
        }

        var shape = find$1(elements, function(element) {
          return !isConnection$6(element);
        });

        if (!shape) {

          // at least one shape is required
          return;
        }

        context = assign$1({
          elements: elements,
          hints: {},
          shape: shape
        }, context || {});

        // make sure each element has x and y
        forEach$1(elements, function(element) {
          if (!isNumber$3(element.x)) {
            element.x = 0;
          }

          if (!isNumber$3(element.y)) {
            element.y = 0;
          }
        });

        var visibleElements = filter(elements, function(element) {
          return !element.hidden;
        });

        var bbox = getBBox(visibleElements);

        // center elements around cursor
        forEach$1(elements, function(element) {
          if (isConnection$6(element)) {
            element.waypoints = map$1(element.waypoints, function(waypoint) {
              return {
                x: waypoint.x - bbox.x - bbox.width / 2,
                y: waypoint.y - bbox.y - bbox.height / 2
              };
            });
          }

          assign$1(element, {
            x: element.x - bbox.x - bbox.width / 2,
            y: element.y - bbox.y - bbox.height / 2
          });
        });

        dragging.init(event, PREFIX, {
          cursor: 'grabbing',
          autoActivate: true,
          data: {
            shape: shape,
            elements: elements,
            context: context
          }
        });
      };
    }

    Create.$inject = [
      'canvas',
      'dragging',
      'eventBus',
      'modeling',
      'rules'
    ];

    // helpers //////////

    function ensureConstraints$1(event) {
      var context = event.context,
          createConstraints = context.createConstraints;

      if (!createConstraints) {
        return;
      }

      if (createConstraints.left) {
        event.x = Math.max(event.x, createConstraints.left);
      }

      if (createConstraints.right) {
        event.x = Math.min(event.x, createConstraints.right);
      }

      if (createConstraints.top) {
        event.y = Math.max(event.y, createConstraints.top);
      }

      if (createConstraints.bottom) {
        event.y = Math.min(event.y, createConstraints.bottom);
      }
    }

    function isConnection$6(element) {
      return !!element.waypoints;
    }

    function isSingleShape(elements) {
      return elements && elements.length === 1 && !isConnection$6(elements[0]);
    }

    function isLabel$2(element) {
      return !!element.labelTarget;
    }

    /**
     * @param {SVGElement} gfx
     * @param {number} x
     * @param {number} y
     * @param {number} angle
     * @param {number} amount
     */
    function transform(gfx, x, y, angle, amount) {
      var translate = createTransform();
      translate.setTranslate(x, y);

      var rotate = createTransform();
      rotate.setRotate(angle || 0, 0, 0);

      var scale = createTransform();
      scale.setScale(amount || 1, amount || 1);

      transform$1(gfx, [ translate, rotate, scale ]);
    }


    /**
     * @param {SVGElement} gfx
     * @param {number} x
     * @param {number} y
     */
    function translate(gfx, x, y) {
      var translate = createTransform();
      translate.setTranslate(x, y);

      transform$1(gfx, translate);
    }


    /**
     * @param {SVGElement} gfx
     * @param {number} angle
     */
    function rotate(gfx, angle) {
      var rotate = createTransform();
      rotate.setRotate(angle, 0, 0);

      transform$1(gfx, rotate);
    }

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory
     * @typedef {import('../preview-support/PreviewSupport').default} PreviewSupport
     * @typedef {import('../../draw/Styles').default} Styles
     */

    var LOW_PRIORITY$8 = 750;

    /**
     * @param {Canvas} canvas
     * @param {EventBus} eventBus
     * @param {GraphicsFactory} graphicsFactory
     * @param {PreviewSupport} previewSupport
     * @param {Styles} styles
     */
    function CreatePreview(
        canvas,
        eventBus,
        graphicsFactory,
        previewSupport,
        styles
    ) {
      function createDragGroup(elements) {
        var dragGroup = create$1('g');

        attr(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

        var childrenGfx = create$1('g');

        elements.forEach(function(element) {

          // create graphics
          var gfx;

          if (element.hidden) {
            return;
          }

          if (element.waypoints) {
            gfx = graphicsFactory._createContainer('connection', childrenGfx);

            graphicsFactory.drawConnection(getVisual(gfx), element);
          } else {
            gfx = graphicsFactory._createContainer('shape', childrenGfx);

            graphicsFactory.drawShape(getVisual(gfx), element);

            translate(gfx, element.x, element.y);
          }

          // add preview
          previewSupport.addDragger(element, dragGroup, gfx);
        });

        return dragGroup;
      }

      eventBus.on('create.move', LOW_PRIORITY$8, function(event) {

        var hover = event.hover,
            context = event.context,
            elements = context.elements,
            dragGroup = context.dragGroup;

        // lazily create previews
        if (!dragGroup) {
          dragGroup = context.dragGroup = createDragGroup(elements);
        }

        var activeLayer;

        if (hover) {
          if (!dragGroup.parentNode) {
            activeLayer = canvas.getActiveLayer();

            append(activeLayer, dragGroup);
          }

          translate(dragGroup, event.x, event.y);
        } else {
          remove(dragGroup);
        }
      });

      eventBus.on('create.cleanup', function(event) {
        var context = event.context,
            dragGroup = context.dragGroup;

        if (dragGroup) {
          remove(dragGroup);
        }
      });
    }

    CreatePreview.$inject = [
      'canvas',
      'eventBus',
      'graphicsFactory',
      'previewSupport',
      'styles'
    ];

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var CreateModule = {
      __depends__: [
        DraggingModule,
        PreviewSupportModule,
        RulesModule$1,
        SelectionModule
      ],
      __init__: [
        'create',
        'createPreview'
      ],
      create: [ 'type', Create ],
      createPreview: [ 'type', CreatePreview ]
    };

    /**
     * @typedef {import('../../core/EventBus').default} EventBus
     */

    /**
     * @param {EventBus} eventBus
     */
    function Mouse(eventBus) {
      var self = this;

      this._lastMoveEvent = null;

      function setLastMoveEvent(mousemoveEvent) {
        self._lastMoveEvent = mousemoveEvent;
      }

      eventBus.on('canvas.init', function(context) {
        var svg = self._svg = context.svg;

        svg.addEventListener('mousemove', setLastMoveEvent);
      });

      eventBus.on('canvas.destroy', function() {
        self._lastMouseEvent = null;

        self._svg.removeEventListener('mousemove', setLastMoveEvent);
      });
    }

    Mouse.$inject = [ 'eventBus' ];

    Mouse.prototype.getLastMoveEvent = function() {
      return this._lastMoveEvent || createMoveEvent(0, 0);
    };

    // helpers //////////

    function createMoveEvent(x, y) {
      var event = document.createEvent('MouseEvent');

      var screenX = x,
          screenY = y,
          clientX = x,
          clientY = y;

      if (event.initMouseEvent) {
        event.initMouseEvent(
          'mousemove',
          true,
          true,
          window,
          0,
          screenX,
          screenY,
          clientX,
          clientY,
          false,
          false,
          false,
          false,
          0,
          null
        );
      }

      return event;
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var MouseModule = {
      __init__: [ 'mouse' ],
      mouse: [ 'type', Mouse ]
    };

    /**
     * @typedef {import('../../core/Types').ElementLike} Element
     * @typedef {import('../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../util/Types').Point} Point
     *
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../clipboard/Clipboard').default} Clipboard
     * @typedef {import('../create/Create').default} Create
     * @typedef {import('../../core/ElementFactory').default} ElementFactory
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../modeling/Modeling').default} Modeling
     * @typedef {import('../mouse/Mouse').default} Mouse
     * @typedef {import('../rules/Rules').default} Rules
     */

    /**
     * @typedef { (event: { elements: Element[] }) => Element[]|boolean } CopyPasteCanCopyElementsListener
     */

    /**
     * @typedef { (event: { descriptor: any, element: Element, elements: Element[] }) => void } CopyPasteCopyElementListener
     */

    /**
     * @typedef { (event: { element: Element, children: Element[] }) => void } CopyPasteCreateTreeListener
     */

    /**
     * @typedef { (event: { elements: any, tree: any }) => void } CopyPasteElementsCopiedListener
     */

    /**
     * @typedef { (event: { cache: any, descriptor: any }) => void } CopyPastePasteElementListener
     */

    /**
     * @typedef { (event: { hints: any }) => void } CopyPastePasteElementsListener
     */

    /**
     * Copy and paste elements.
     *
     * @param {Canvas} canvas
     * @param {Create} create
     * @param {Clipboard} clipboard
     * @param {ElementFactory} elementFactory
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     * @param {Mouse} mouse
     * @param {Rules} rules
     */
    function CopyPaste(
        canvas,
        create,
        clipboard,
        elementFactory,
        eventBus,
        modeling,
        mouse,
        rules
    ) {

      this._canvas = canvas;
      this._create = create;
      this._clipboard = clipboard;
      this._elementFactory = elementFactory;
      this._eventBus = eventBus;
      this._modeling = modeling;
      this._mouse = mouse;
      this._rules = rules;

      eventBus.on('copyPaste.copyElement', function(context) {
        var descriptor = context.descriptor,
            element = context.element,
            elements = context.elements;

        // default priority (priority = 1)
        descriptor.priority = 1;

        descriptor.id = element.id;

        var parentCopied = find$1(elements, function(e) {
          return e === element.parent;
        });

        // do NOT reference parent if parent wasn't copied
        if (parentCopied) {
          descriptor.parent = element.parent.id;
        }

        // attachers (priority = 2)
        if (isAttacher$2(element)) {
          descriptor.priority = 2;

          descriptor.host = element.host.id;
        }

        // connections (priority = 3)
        if (isConnection$5(element)) {
          descriptor.priority = 3;

          descriptor.source = element.source.id;
          descriptor.target = element.target.id;

          descriptor.waypoints = copyWaypoints$1(element);
        }

        // labels (priority = 4)
        if (isLabel$1(element)) {
          descriptor.priority = 4;

          descriptor.labelTarget = element.labelTarget.id;
        }

        forEach$1([ 'x', 'y', 'width', 'height' ], function(property) {
          if (isNumber$3(element[ property ])) {
            descriptor[ property ] = element[ property ];
          }
        });

        descriptor.hidden = element.hidden;
        descriptor.collapsed = element.collapsed;

      });

      eventBus.on('copyPaste.pasteElements', function(context) {
        var hints = context.hints;

        assign$1(hints, {
          createElementsBehavior: false
        });
      });
    }

    CopyPaste.$inject = [
      'canvas',
      'create',
      'clipboard',
      'elementFactory',
      'eventBus',
      'modeling',
      'mouse',
      'rules'
    ];


    /**
     * Copy elements.
     *
     * @param {Element[]} elements
     *
     * @return {Object}
     */
    CopyPaste.prototype.copy = function(elements) {
      var allowed,
          tree;

      if (!isArray$5(elements)) {
        elements = elements ? [ elements ] : [];
      }

      allowed = this._eventBus.fire('copyPaste.canCopyElements', {
        elements: elements
      });

      if (allowed === false) {
        tree = {};
      } else {
        tree = this.createTree(isArray$5(allowed) ? allowed : elements);
      }

      // we set an empty tree, selection of elements
      // to copy was empty.
      this._clipboard.set(tree);

      this._eventBus.fire('copyPaste.elementsCopied', {
        elements: elements,
        tree: tree
      });

      return tree;
    };

    /**
     * Paste elements.
     *
     * @param {Object} [context]
     * @param {Shape} [context.element] The optional parent.
     * @param {Point} [context.point] The optional osition.
     * @param {Object} [context.hints] The optional hints.
     */
    CopyPaste.prototype.paste = function(context) {
      var tree = this._clipboard.get();

      if (this._clipboard.isEmpty()) {
        return;
      }

      var hints = context && context.hints || {};

      this._eventBus.fire('copyPaste.pasteElements', {
        hints: hints
      });

      var elements = this._createElements(tree);

      // paste directly
      if (context && context.element && context.point) {
        return this._paste(elements, context.element, context.point, hints);
      }

      this._create.start(this._mouse.getLastMoveEvent(), elements, {
        hints: hints || {}
      });
    };

    /**
     * Paste elements directly.
     *
     * @param {Element[]} elements
     * @param {Shape} target
     * @param {Point} position
     * @param {Object} [hints]
     */
    CopyPaste.prototype._paste = function(elements, target, position, hints) {

      // make sure each element has x and y
      forEach$1(elements, function(element) {
        if (!isNumber$3(element.x)) {
          element.x = 0;
        }

        if (!isNumber$3(element.y)) {
          element.y = 0;
        }
      });

      var bbox = getBBox(elements);

      // center elements around cursor
      forEach$1(elements, function(element) {
        if (isConnection$5(element)) {
          element.waypoints = map$1(element.waypoints, function(waypoint) {
            return {
              x: waypoint.x - bbox.x - bbox.width / 2,
              y: waypoint.y - bbox.y - bbox.height / 2
            };
          });
        }

        assign$1(element, {
          x: element.x - bbox.x - bbox.width / 2,
          y: element.y - bbox.y - bbox.height / 2
        });
      });

      return this._modeling.createElements(elements, position, target, assign$1({}, hints));
    };

    /**
     * Create elements from tree.
     */
    CopyPaste.prototype._createElements = function(tree) {
      var self = this;

      var eventBus = this._eventBus;

      var cache = {};

      var elements = [];

      forEach$1(tree, function(branch, depth) {

        // sort by priority
        branch = sortBy(branch, 'priority');

        forEach$1(branch, function(descriptor) {

          // remove priority
          var attrs = assign$1({}, omit(descriptor, [ 'priority' ]));

          if (cache[ descriptor.parent ]) {
            attrs.parent = cache[ descriptor.parent ];
          } else {
            delete attrs.parent;
          }

          eventBus.fire('copyPaste.pasteElement', {
            cache: cache,
            descriptor: attrs
          });

          var element;

          if (isConnection$5(attrs)) {
            attrs.source = cache[ descriptor.source ];
            attrs.target = cache[ descriptor.target ];

            element = cache[ descriptor.id ] = self.createConnection(attrs);

            elements.push(element);

            return;
          }

          if (isLabel$1(attrs)) {
            attrs.labelTarget = cache[ attrs.labelTarget ];

            element = cache[ descriptor.id ] = self.createLabel(attrs);

            elements.push(element);

            return;
          }

          if (attrs.host) {
            attrs.host = cache[ attrs.host ];
          }

          element = cache[ descriptor.id ] = self.createShape(attrs);

          elements.push(element);
        });

      });

      return elements;
    };

    CopyPaste.prototype.createConnection = function(attrs) {
      var connection = this._elementFactory.createConnection(omit(attrs, [ 'id' ]));

      return connection;
    };

    CopyPaste.prototype.createLabel = function(attrs) {
      var label = this._elementFactory.createLabel(omit(attrs, [ 'id' ]));

      return label;
    };

    CopyPaste.prototype.createShape = function(attrs) {
      var shape = this._elementFactory.createShape(omit(attrs, [ 'id' ]));

      return shape;
    };

    /**
     * Check wether element has relations to other elements e.g. attachers, labels and connections.
     *
     * @param {Object} element
     * @param {Element[]} elements
     *
     * @return {boolean}
     */
    CopyPaste.prototype.hasRelations = function(element, elements) {
      var labelTarget,
          source,
          target;

      if (isConnection$5(element)) {
        source = find$1(elements, matchPattern({ id: element.source.id }));
        target = find$1(elements, matchPattern({ id: element.target.id }));

        if (!source || !target) {
          return false;
        }
      }

      if (isLabel$1(element)) {
        labelTarget = find$1(elements, matchPattern({ id: element.labelTarget.id }));

        if (!labelTarget) {
          return false;
        }
      }

      return true;
    };

    /**
     * Create a tree-like structure from elements.
     *
     * @example
     * tree: {
     *  0: [
     *    { id: 'Shape_1', priority: 1, ... },
     *    { id: 'Shape_2', priority: 1, ... },
     *    { id: 'Connection_1', source: 'Shape_1', target: 'Shape_2', priority: 3, ... },
     *    ...
     *  ],
     *  1: [
     *    { id: 'Shape_3', parent: 'Shape1', priority: 1, ... },
     *    ...
     *  ]
     * };
     *
     * @param {Element[]} elements
     *
     * @return {Object}
     */
    CopyPaste.prototype.createTree = function(elements) {
      var rules = this._rules,
          self = this;

      var tree = {},
          elementsData = [];

      var parents = getParents$1(elements);

      function canCopy(element, elements) {
        return rules.allowed('element.copy', {
          element: element,
          elements: elements
        });
      }

      function addElementData(element, depth) {

        // (1) check wether element has already been added
        var foundElementData = find$1(elementsData, function(elementsData) {
          return element === elementsData.element;
        });

        // (2) add element if not already added
        if (!foundElementData) {
          elementsData.push({
            element: element,
            depth: depth
          });

          return;
        }

        // (3) update depth
        if (foundElementData.depth < depth) {
          elementsData = removeElementData(foundElementData, elementsData);

          elementsData.push({
            element: foundElementData.element,
            depth: depth
          });
        }
      }

      function removeElementData(elementData, elementsData) {
        var index = elementsData.indexOf(elementData);

        if (index !== -1) {
          elementsData.splice(index, 1);
        }

        return elementsData;
      }

      // (1) add elements
      eachElement(parents, function(element, _index, depth) {

        // do NOT add external labels directly
        if (isLabel$1(element)) {
          return;
        }

        // always copy external labels
        forEach$1(element.labels, function(label) {
          addElementData(label, depth);
        });

        function addRelatedElements(elements) {
          elements && elements.length && forEach$1(elements, function(element) {

            // add external labels
            forEach$1(element.labels, function(label) {
              addElementData(label, depth);
            });

            addElementData(element, depth);
          });
        }

        forEach$1([ element.attachers, element.incoming, element.outgoing ], addRelatedElements);

        addElementData(element, depth);

        var children = [];

        if (element.children) {
          children = element.children.slice();
        }

        // allow others to add children to tree
        self._eventBus.fire('copyPaste.createTree', {
          element: element,
          children: children
        });

        return children;
      });

      elements = map$1(elementsData, function(elementData) {
        return elementData.element;
      });

      // (2) copy elements
      elementsData = map$1(elementsData, function(elementData) {
        elementData.descriptor = {};

        self._eventBus.fire('copyPaste.copyElement', {
          descriptor: elementData.descriptor,
          element: elementData.element,
          elements: elements
        });

        return elementData;
      });

      // (3) sort elements by priority
      elementsData = sortBy(elementsData, function(elementData) {
        return elementData.descriptor.priority;
      });

      elements = map$1(elementsData, function(elementData) {
        return elementData.element;
      });

      // (4) create tree
      forEach$1(elementsData, function(elementData) {
        var depth = elementData.depth;

        if (!self.hasRelations(elementData.element, elements)) {
          removeElement(elementData.element, elements);

          return;
        }

        if (!canCopy(elementData.element, elements)) {
          removeElement(elementData.element, elements);

          return;
        }

        if (!tree[depth]) {
          tree[depth] = [];
        }

        tree[depth].push(elementData.descriptor);
      });

      return tree;
    };

    // helpers //////////

    function isAttacher$2(element) {
      return !!element.host;
    }

    function isConnection$5(element) {
      return !!element.waypoints;
    }

    function isLabel$1(element) {
      return !!element.labelTarget;
    }

    function copyWaypoints$1(element) {
      return map$1(element.waypoints, function(waypoint) {

        waypoint = copyWaypoint$1(waypoint);

        if (waypoint.original) {
          waypoint.original = copyWaypoint$1(waypoint.original);
        }

        return waypoint;
      });
    }

    function copyWaypoint$1(waypoint) {
      return assign$1({}, waypoint);
    }

    function removeElement(element, elements) {
      var index = elements.indexOf(element);

      if (index === -1) {
        return elements;
      }

      return elements.splice(index, 1);
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var CopyPasteModule$1 = {
      __depends__: [
        ClipboardModule,
        CreateModule,
        MouseModule,
        RulesModule$1
      ],
      __init__: [ 'copyPaste' ],
      copyPaste: [ 'type', CopyPaste ]
    };

    /**
     * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('./ModdleCopy').default} ModdleCopy
     */

    function copyProperties$1(source, target, properties) {
      if (!isArray$5(properties)) {
        properties = [ properties ];
      }

      forEach$1(properties, function(property) {
        if (!isUndefined$3(source[property])) {
          target[property] = source[property];
        }
      });
    }

    var LOW_PRIORITY$7 = 750;

    /**
     * BPMN-specific copy & paste.
     *
     * @param {BpmnFactory} bpmnFactory
     * @param {EventBus} eventBus
     * @param {ModdleCopy} moddleCopy
     */
    function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {

      function copy(bo, clone) {
        var targetBo = bpmnFactory.create(bo.$type);

        return moddleCopy.copyElement(bo, targetBo, null, clone);
      }

      eventBus.on('copyPaste.copyElement', LOW_PRIORITY$7, function(context) {
        var descriptor = context.descriptor,
            element = context.element,
            businessObject = getBusinessObject(element);

        // do not copy business object + di for labels;
        // will be pulled from the referenced label target
        if (isLabel$3(element)) {
          return descriptor;
        }

        var businessObjectCopy = descriptor.businessObject = copy(businessObject, true);
        var diCopy = descriptor.di = copy(getDi(element), true);
        diCopy.bpmnElement = businessObjectCopy;

        copyProperties$1(businessObjectCopy, descriptor, 'name');
        copyProperties$1(diCopy, descriptor, 'isExpanded');

        // default sequence flow
        if (businessObject.default) {
          descriptor.default = businessObject.default.id;
        }
      });

      var referencesKey = '-bpmn-js-refs';

      function getReferences(cache) {
        return (cache[referencesKey] = cache[referencesKey] || {});
      }

      function setReferences(cache, references) {
        cache[referencesKey] = references;
      }

      function resolveReferences(descriptor, cache, references) {
        var businessObject = getBusinessObject(descriptor);

        // default sequence flows
        if (descriptor.default) {

          // relationship cannot be resolved immediately
          references[ descriptor.default ] = {
            element: businessObject,
            property: 'default'
          };
        }

        // boundary events
        if (descriptor.host) {

          // relationship can be resolved immediately
          getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);
        }

        return omit(references, reduce(references, function(array, reference, key) {
          var element = reference.element,
              property = reference.property;

          if (key === descriptor.id) {
            element[ property ] = businessObject;

            array.push(descriptor.id);
          }

          return array;
        }, []));
      }

      eventBus.on('copyPaste.pasteElement', function(context) {
        var cache = context.cache,
            descriptor = context.descriptor,
            businessObject = descriptor.businessObject,
            di = descriptor.di;

        // wire existing di + businessObject for external label
        if (isLabel$3(descriptor)) {
          descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);
          descriptor.di = getDi(cache[ descriptor.labelTarget ]);

          return;
        }

        businessObject = descriptor.businessObject = copy(businessObject);

        di = descriptor.di = copy(di);
        di.bpmnElement = businessObject;

        copyProperties$1(descriptor, businessObject, [
          'isExpanded',
          'name'
        ]);

        descriptor.type = businessObject.$type;
      });

      // copy + paste processRef with participant

      eventBus.on('copyPaste.copyElement', LOW_PRIORITY$7, function(context) {
        var descriptor = context.descriptor,
            element = context.element;

        if (!is$2(element, 'bpmn:Participant')) {
          return;
        }

        var participantBo = getBusinessObject(element);

        if (participantBo.processRef) {
          descriptor.processRef = copy(participantBo.processRef, true);
        }
      });

      eventBus.on('copyPaste.pasteElement', function(context) {
        var descriptor = context.descriptor,
            processRef = descriptor.processRef;

        if (processRef) {
          descriptor.processRef = copy(processRef);
        }
      });

      // resolve references

      eventBus.on('copyPaste.pasteElement', LOW_PRIORITY$7, function(context) {
        var cache = context.cache,
            descriptor = context.descriptor;

        // resolve references e.g. default sequence flow
        setReferences(
          cache,
          resolveReferences(descriptor, cache, getReferences(cache))
        );
      });

    }


    BpmnCopyPaste.$inject = [
      'bpmnFactory',
      'eventBus',
      'moddleCopy'
    ];

    var DISALLOWED_PROPERTIES = [
      'artifacts',
      'dataInputAssociations',
      'dataOutputAssociations',
      'default',
      'flowElements',
      'lanes',
      'incoming',
      'outgoing',
      'categoryValue'
    ];

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
     * @typedef {import('../../model/Types').Moddle} Moddle
     *
     * @typedef {import('../../model/Types').ModdleElement} ModdleElement
     */

    /**
     * Utility for copying model properties from source element to target element.
     *
     * @param {EventBus} eventBus
     * @param {BpmnFactory} bpmnFactory
     * @param {Moddle} moddle
     */
    function ModdleCopy(eventBus, bpmnFactory, moddle) {
      this._bpmnFactory = bpmnFactory;
      this._eventBus = eventBus;
      this._moddle = moddle;

      // copy extension elements last
      eventBus.on('moddleCopy.canCopyProperties', function(context) {
        var propertyNames = context.propertyNames;

        if (!propertyNames || !propertyNames.length) {
          return;
        }

        return sortBy(propertyNames, function(propertyName) {
          return propertyName === 'extensionElements';
        });
      });

      // default check whether property can be copied
      eventBus.on('moddleCopy.canCopyProperty', function(context) {
        var parent = context.parent,
            parentDescriptor = isObject(parent) && parent.$descriptor,
            propertyName = context.propertyName;

        if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {

          // disallow copying property
          return false;
        }

        if (propertyName &&
          parentDescriptor &&
          !find$1(parentDescriptor.properties, matchPattern({ name: propertyName }))) {

          // disallow copying property
          return false;
        }
      });

      // do NOT allow to copy empty extension elements
      eventBus.on('moddleCopy.canSetCopiedProperty', function(context) {
        var property = context.property;

        if (is$1(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {

          // disallow setting copied property
          return false;
        }
      });
    }

    ModdleCopy.$inject = [
      'eventBus',
      'bpmnFactory',
      'moddle'
    ];

    /**
     * Copy model properties of source element to target element.
     *
     * @param {ModdleElement} sourceElement
     * @param {ModdleElement} targetElement
     * @param {string[]} [propertyNames]
     * @param {boolean} [clone=false]
     *
     * @return {ModdleElement}
     */
    ModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames, clone = false) {
      var self = this;

      if (propertyNames && !isArray$5(propertyNames)) {
        propertyNames = [ propertyNames ];
      }

      propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);

      var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {
        propertyNames: propertyNames,
        sourceElement: sourceElement,
        targetElement: targetElement,
        clone: clone
      });

      if (canCopyProperties === false) {
        return targetElement;
      }

      if (isArray$5(canCopyProperties)) {
        propertyNames = canCopyProperties;
      }

      // copy properties
      forEach$1(propertyNames, function(propertyName) {
        var sourceProperty;

        if (has$1(sourceElement, propertyName)) {
          sourceProperty = sourceElement.get(propertyName);
        }

        var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName, clone);

        if (!isDefined(copiedProperty)) {
          return;
        }

        var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {
          parent: targetElement,
          property: copiedProperty,
          propertyName: propertyName
        });

        if (canSetProperty === false) {
          return;
        }

        // TODO(nikku): unclaim old IDs if ID property is copied over
        // this._moddle.getPropertyDescriptor(parent, propertyName)
        targetElement.set(propertyName, copiedProperty);
      });

      return targetElement;
    };

    /**
     * Copy model property.
     *
     * @param {any} property
     * @param {ModdleElement} parent
     * @param {string} propertyName
     * @param {boolean} [clone=false]
     *
     * @return {any}
     */
    ModdleCopy.prototype.copyProperty = function(property, parent, propertyName, clone = false) {
      var self = this;

      // allow others to copy property
      var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {
        parent: parent,
        property: property,
        propertyName: propertyName,
        clone: clone
      });

      // return if copying is NOT allowed
      if (copiedProperty === false) {
        return;
      }

      if (copiedProperty) {
        if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {
          copiedProperty.$parent = parent;
        }

        return copiedProperty;
      }

      var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);

      // do NOT copy references
      if (propertyDescriptor.isReference) {
        return;
      }

      // copy id
      if (propertyDescriptor.isId) {
        return property && this._copyId(property, parent, clone);
      }

      // copy arrays
      if (isArray$5(property)) {
        return reduce(property, function(childProperties, childProperty) {

          // recursion
          copiedProperty = self.copyProperty(childProperty, parent, propertyName, clone);

          // copying might NOT be allowed
          if (copiedProperty) {
            return childProperties.concat(copiedProperty);
          }

          return childProperties;
        }, []);
      }

      // copy model elements
      if (isObject(property) && property.$type) {
        if (this._moddle.getElementDescriptor(property).isGeneric) {
          return;
        }

        copiedProperty = self._bpmnFactory.create(property.$type);

        copiedProperty.$parent = parent;

        // recursion
        copiedProperty = self.copyElement(property, copiedProperty, null, clone);

        return copiedProperty;
      }

      // copy primitive properties
      return property;
    };

    ModdleCopy.prototype._copyId = function(id, element, clone = false) {
      if (clone) {
        return id;
      }

      // disallow if already taken
      if (this._moddle.ids.assigned(id)) {
        return;
      } else {

        this._moddle.ids.claim(id, element);
        return id;
      }
    };

    // helpers //////////

    function getPropertyNames(descriptor, keepDefaultProperties) {
      return reduce(descriptor.properties, function(properties, property) {

        if (keepDefaultProperties && property.default) {
          return properties;
        }

        return properties.concat(property.name);
      }, []);
    }

    function is$1(element, type) {
      return element && isFunction(element.$instanceOf) && element.$instanceOf(type);
    }

    var CopyPasteModule = {
      __depends__: [
        CopyPasteModule$1
      ],
      __init__: [ 'bpmnCopyPaste', 'moddleCopy' ],
      bpmnCopyPaste: [ 'type', BpmnCopyPaste ],
      moddleCopy: [ 'type', ModdleCopy ]
    };

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../modeling/Modeling').default} Modeling
     *
     * @typedef {import('../../core/Types').ShapeLike} Shape
     */

    var round$5 = Math.round;

    /**
     * Service that allows replacing of elements.
     *
     * @param {Modeling} modeling
     * @param {EventBus} eventBus
     */
    function Replace(modeling, eventBus) {
      this._modeling = modeling;
      this._eventBus = eventBus;
    }

    Replace.$inject = [ 'modeling', 'eventBus' ];

    /**
     * Replace an element.
     *
     * @param {Shape} oldElement The element to be replaced.
     * @param {Object} attrs Containing information about the new element, for
     * example the new bounds and type.
     * @param {Object} hints Custom hints that will be attached to the context. It
     * can be used to inject data that is needed in the command chain. For example
     * it could be used in eventbus.on('commandStack.shape.replace.postExecute') to
     * change shape attributes after shape creation.
     *
     * @return {Shape}
     */
    Replace.prototype.replaceElement = function(oldElement, attrs, hints) {

      if (oldElement.waypoints) {

        // TODO(nikku): we do not replace connections, yet
        return null;
      }

      var modeling = this._modeling;
      var eventBus = this._eventBus;

      eventBus.fire('replace.start', {
        element: oldElement,
        attrs,
        hints
      });

      var width = attrs.width || oldElement.width,
          height = attrs.height || oldElement.height,
          x = attrs.x || oldElement.x,
          y = attrs.y || oldElement.y,
          centerX = round$5(x + width / 2),
          centerY = round$5(y + height / 2);

      // modeling API requires center coordinates,
      // account for that when handling shape bounds

      var newElement = modeling.replaceShape(
        oldElement,
        assign$1(
          {},
          attrs,
          {
            x: centerX,
            y: centerY,
            width: width,
            height: height
          }
        ),
        hints
      );

      eventBus.fire('replace.end', {
        element: oldElement,
        newElement,
        hints
      });

      return newElement;
    };

    function ReplaceSelectionBehavior(selection, eventBus) {

      eventBus.on('replace.end', 500, function(event) {
        const {
          newElement,
          hints = {}
        } = event;

        if (hints.select === false) {
          return;
        }

        selection.select(newElement);
      });

    }

    ReplaceSelectionBehavior.$inject = [ 'selection', 'eventBus' ];

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var ReplaceModule$1 = {
      __init__: [ 'replace', 'replaceSelectionBehavior' ],
      replaceSelectionBehavior: [ 'type', ReplaceSelectionBehavior ],
      replace: [ 'type', Replace ]
    };

    /**
     * @typedef {import('../modeling/BpmnFactory').default} BpmnFactory
     * @typedef {import('../modeling/ElementFactory').default} ElementFactory
     * @typedef {import('../copy-paste/ModdleCopy').default} ModdleCopy
     * @typedef {import('../modeling/Modeling').default} Modeling
     * @typedef {import('diagram-js/lib/features/replace/Replace').default} Replace
     * @typedef {import('diagram-js/lib/features/rules/Rules').default} Rules
     *
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Shape} Shape
     * @typedef {import('../../model/Types').ModdleElement} ModdleElement
     *
     * @typedef { {
     *   type: string;
     *   cancelActivity: boolean;
     *   instantiate: boolean;
     *   eventGatewayType: string;
     *   triggeredByEvent: boolean;
     *   isInterrupting: boolean;
     *   collapsed: boolean;
     *   isExpanded: boolean;
     *   eventDefinitionType: string;
     *   eventDefinitionAttrs: Object;
     *   host: Shape;
     * } } TargetElement
     *
     * @typedef { {
     *   moveChildren: boolean;
     * } & Record<string, any> } Hints
     */

    function copyProperties(source, target, properties) {
      if (!isArray$5(properties)) {
        properties = [ properties ];
      }

      forEach$1(properties, function(property) {
        if (!isUndefined$3(source[property])) {
          target[property] = source[property];
        }
      });
    }


    var CUSTOM_PROPERTIES = [
      'cancelActivity',
      'instantiate',
      'eventGatewayType',
      'triggeredByEvent',
      'isInterrupting'
    ];

    /**
     * Check if element should be collapsed or expanded.
     */
    function shouldToggleCollapsed(element, targetElement) {

      var oldCollapsed = (
        element && has$1(element, 'collapsed') ? element.collapsed : !isExpanded(element)
      );

      var targetCollapsed;

      if (targetElement && (has$1(targetElement, 'collapsed') || has$1(targetElement, 'isExpanded'))) {

        // property is explicitly set so use it
        targetCollapsed = (
          has$1(targetElement, 'collapsed') ? targetElement.collapsed : !targetElement.isExpanded
        );
      } else {

        // keep old state
        targetCollapsed = oldCollapsed;
      }

      if (oldCollapsed !== targetCollapsed) {
        return true;
      }

      return false;
    }


    /**
     * BPMN-specific replace.
     *
     * @param {BpmnFactory} bpmnFactory
     * @param {ElementFactory} elementFactory
     * @param {ModdleCopy} moddleCopy
     * @param {Modeling} modeling
     * @param {Replace} replace
     * @param {Rules} rules
     */
    function BpmnReplace(
        bpmnFactory,
        elementFactory,
        moddleCopy,
        modeling,
        replace,
        rules
    ) {

      /**
       * Prepares a new business object for the replacement element
       * and triggers the replace operation.
       *
       * @param  {Element} element
       * @param  {TargetElement} targetElement
       * @param  {Hints} [hints]
       *
       * @return {Element}
       */
      function replaceElement(element, targetElement, hints) {

        hints = hints || {};

        var type = targetElement.type,
            oldBusinessObject = element.businessObject;

        if (isSubProcess(oldBusinessObject) && type === 'bpmn:SubProcess') {
          if (shouldToggleCollapsed(element, targetElement)) {

            // expanding or collapsing process
            modeling.toggleCollapse(element);

            return element;
          }
        }

        var newBusinessObject = bpmnFactory.create(type);

        var newElement = {
          type: type,
          businessObject: newBusinessObject,
        };

        newElement.di = {};

        // colors will be set to DI
        copyProperties(element.di, newElement.di, [
          'fill',
          'stroke',
          'background-color',
          'border-color',
          'color'
        ]);

        var elementProps = getPropertyNames(oldBusinessObject.$descriptor),
            newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),
            copyProps = intersection(elementProps, newElementProps);

        // initialize special properties defined in target definition
        assign$1(newBusinessObject, pick$1(targetElement, CUSTOM_PROPERTIES));

        var properties = filter(copyProps, function(propertyName) {

          // copying event definitions, unless we replace
          if (propertyName === 'eventDefinitions') {
            return hasEventDefinition(element, targetElement.eventDefinitionType);
          }

          // retain loop characteristics if the target element
          // is not an event sub process
          if (propertyName === 'loopCharacteristics') {
            return !isEventSubProcess(newBusinessObject);
          }

          // so the applied properties from 'target' don't get lost
          if (has$1(newBusinessObject, propertyName)) {
            return false;
          }

          if (propertyName === 'processRef' && targetElement.isExpanded === false) {
            return false;
          }

          if (propertyName === 'triggeredByEvent') {
            return false;
          }

          return true;
        });

        newBusinessObject = moddleCopy.copyElement(
          oldBusinessObject,
          newBusinessObject,
          properties
        );

        // initialize custom BPMN extensions
        if (targetElement.eventDefinitionType) {

          // only initialize with new eventDefinition
          // if we did not set an event definition yet,
          // i.e. because we copied it
          if (!hasEventDefinition(newBusinessObject, targetElement.eventDefinitionType)) {
            newElement.eventDefinitionType = targetElement.eventDefinitionType;
            newElement.eventDefinitionAttrs = targetElement.eventDefinitionAttrs;
          }
        }

        if (is$2(oldBusinessObject, 'bpmn:Activity')) {

          if (isSubProcess(oldBusinessObject)) {

            // no toggeling, so keep old state
            newElement.isExpanded = isExpanded(element);
          }

          // else if property is explicitly set, use it
          else if (targetElement && has$1(targetElement, 'isExpanded')) {
            newElement.isExpanded = targetElement.isExpanded;

            // assign default size of new expanded element
            var defaultSize = elementFactory.getDefaultSize(newBusinessObject, {
              isExpanded: newElement.isExpanded
            });

            newElement.width = defaultSize.width;
            newElement.height = defaultSize.height;

            // keep element centered
            newElement.x = element.x - (newElement.width - element.width) / 2;
            newElement.y = element.y - (newElement.height - element.height) / 2;
          }

          // TODO: need also to respect min/max Size
          // copy size, from an expanded subprocess to an expanded alternative subprocess
          // except bpmn:Task, because Task is always expanded
          if ((isExpanded(element) && !is$2(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {
            newElement.width = element.width;
            newElement.height = element.height;
          }
        }

        // remove children if not expanding sub process
        if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {
          hints.moveChildren = false;
        }

        // transform collapsed/expanded pools
        if (is$2(oldBusinessObject, 'bpmn:Participant')) {

          // create expanded pool
          if (targetElement.isExpanded === true) {
            newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');
          } else {

            // remove children when transforming to collapsed pool
            hints.moveChildren = false;
          }

          // apply same width and default height
          newElement.width = element.width;
          newElement.height = elementFactory.getDefaultSize(newElement).height;
        }

        if (!rules.allowed('shape.resize', { shape: newBusinessObject })) {
          newElement.height = elementFactory.getDefaultSize(newElement).height;
          newElement.width = elementFactory.getDefaultSize(newElement).width;
        }

        newBusinessObject.name = oldBusinessObject.name;

        // retain default flow's reference between inclusive <-> exclusive gateways and activities
        if (
          isAny(oldBusinessObject, [
            'bpmn:ExclusiveGateway',
            'bpmn:InclusiveGateway',
            'bpmn:Activity'
          ]) &&
          isAny(newBusinessObject, [
            'bpmn:ExclusiveGateway',
            'bpmn:InclusiveGateway',
            'bpmn:Activity'
          ])
        ) {
          newBusinessObject.default = oldBusinessObject.default;
        }

        if (
          targetElement.host &&
          !is$2(oldBusinessObject, 'bpmn:BoundaryEvent') &&
          is$2(newBusinessObject, 'bpmn:BoundaryEvent')
        ) {
          newElement.host = targetElement.host;
        }

        // The DataStoreReference element is 14px wider than the DataObjectReference element
        // This ensures that they stay centered on the x axis when replaced
        if (
          newElement.type === 'bpmn:DataStoreReference' ||
          newElement.type === 'bpmn:DataObjectReference'
        ) {
          newElement.x = element.x + (element.width - newElement.width) / 2;
        }

        return replace.replaceElement(element, newElement, hints);
      }

      this.replaceElement = replaceElement;
    }

    BpmnReplace.$inject = [
      'bpmnFactory',
      'elementFactory',
      'moddleCopy',
      'modeling',
      'replace',
      'rules'
    ];

    /**
     * @param {ModdleElement} businessObject
     *
     * @return {boolean}
     */
    function isSubProcess(businessObject) {
      return is$2(businessObject, 'bpmn:SubProcess');
    }

    /**
     * @param {Element|ModdleElement} element
     * @param {string} type
     *
     * @return {boolean}
     */
    function hasEventDefinition(element, type) {
      var businessObject = getBusinessObject(element);

      return type && businessObject.get('eventDefinitions').some(function(definition) {
        return is$2(definition, type);
      });
    }

    /**
     * Compute intersection between two arrays.
     *
     * @param {Array} a
     * @param {Array} b
     *
     * @return {Array}
     */
    function intersection(a, b) {
      return a.filter(function(item) {
        return b.includes(item);
      });
    }

    var ReplaceModule = {
      __depends__: [
        CopyPasteModule,
        ReplaceModule$1,
        SelectionModule
      ],
      bpmnReplace: [ 'type', BpmnReplace ]
    };

    /**
     * @typedef {import('../dragging/Dragging').default} Dragging
     * @typedef {import('../../core/EventBus').default} EventBus
     *
     * @typedef {import('../../core/EventBus').Event} Event
     */

    var LOW_PRIORITY$6 = 250;

    /**
     * The tool manager acts as middle-man between the available tool's and the Palette,
     * it takes care of making sure that the correct active state is set.
     *
     * @param {EventBus} eventBus
     * @param {Dragging} dragging
     */
    function ToolManager(eventBus, dragging) {
      this._eventBus = eventBus;
      this._dragging = dragging;

      this._tools = [];
      this._active = null;
    }

    ToolManager.$inject = [ 'eventBus', 'dragging' ];

    /**
     * Register a tool.
     *
     * @param {string} name
     * @param { {
     *   dragging: string;
     *   tool: string;
     * } } events
     */
    ToolManager.prototype.registerTool = function(name, events) {
      var tools = this._tools;

      if (!events) {
        throw new Error('A tool has to be registered with it\'s "events"');
      }

      tools.push(name);

      this.bindEvents(name, events);
    };

    ToolManager.prototype.isActive = function(tool) {
      return tool && this._active === tool;
    };

    ToolManager.prototype.length = function(tool) {
      return this._tools.length;
    };

    ToolManager.prototype.setActive = function(tool) {
      var eventBus = this._eventBus;

      if (this._active !== tool) {
        this._active = tool;

        eventBus.fire('tool-manager.update', { tool: tool });
      }
    };

    ToolManager.prototype.bindEvents = function(name, events) {
      var eventBus = this._eventBus,
          dragging = this._dragging;

      var eventsToRegister = [];

      eventBus.on(events.tool + '.init', function(event) {
        var context = event.context;

        // Active tools that want to reactivate themselves must do this explicitly
        if (!context.reactivate && this.isActive(name)) {
          this.setActive(null);

          dragging.cancel();
          return;
        }

        this.setActive(name);

      }, this);

      // TODO: add test cases
      forEach$1(events, function(event) {
        eventsToRegister.push(event + '.ended');
        eventsToRegister.push(event + '.canceled');
      });

      eventBus.on(eventsToRegister, LOW_PRIORITY$6, function(event) {

        // We defer the de-activation of the tool to the .activate phase,
        // so we're able to check if we want to toggle off the current
        // active tool or switch to a new one
        if (!this._active) {
          return;
        }

        if (isPaletteClick(event)) {
          return;
        }

        this.setActive(null);
      }, this);

    };


    // helpers ///////////////

    /**
     * Check if a given event is a palette click event.
     *
     * @param {Event} event
     *
     * @return {boolean}
     */
    function isPaletteClick(event) {
      var target = event.originalEvent && event.originalEvent.target;

      return target && closest(target, '.group[data-group="tools"]');
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var ToolManagerModule = {
      __depends__: [
        DraggingModule
      ],
      __init__: [ 'toolManager' ],
      toolManager: [ 'type', ToolManager ]
    };

    /**
     * @typedef {import('../../core/Types').ConnectionLike} Connection
     * @typedef {import('../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../util/Types').Axis} Axis
     * @typedef {import('../../util/Types').Direction} Direction
     * @typedef {import('../../util/Types').Point} Point
     * @typedef {import('../../util/Types').Rect} Rect
     */

    /**
     * Return direction given axis and delta.
     *
     * @param {Axis} axis
     * @param {number} delta
     *
     * @return {Direction}
     */
    function getDirection(axis, delta) {

      if (axis === 'x') {
        if (delta > 0) {
          return 'e';
        }

        if (delta < 0) {
          return 'w';
        }
      }

      if (axis === 'y') {
        if (delta > 0) {
          return 's';
        }

        if (delta < 0) {
          return 'n';
        }
      }

      return null;
    }

    /**
     * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start
     * or end is to be moved or resized.
     *
     * @param {Array<Shape>} movingShapes
     * @param {Array<Shape>} resizingShapes
     *
     * @return {Array<Connection>}
     */
    function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {
      var waypointsUpdatingConnections = [];

      forEach$1(movingShapes.concat(resizingShapes), function(shape) {
        var incoming = shape.incoming,
            outgoing = shape.outgoing;

        forEach$1(incoming.concat(outgoing), function(connection) {
          var source = connection.source,
              target = connection.target;

          if (includes$3(movingShapes, source) ||
            includes$3(movingShapes, target) ||
            includes$3(resizingShapes, source) ||
            includes$3(resizingShapes, target)) {

            if (!includes$3(waypointsUpdatingConnections, connection)) {
              waypointsUpdatingConnections.push(connection);
            }
          }
        });
      });

      return waypointsUpdatingConnections;
    }

    function includes$3(array, item) {
      return array.indexOf(item) !== -1;
    }

    /**
     * Resize bounds.
     *
     * @param {Rect} bounds
     * @param {Direction} direction
     * @param {Point} delta
     *
     * @return {Rect}
     */
    function resizeBounds(bounds, direction, delta) {
      var x = bounds.x,
          y = bounds.y,
          width = bounds.width,
          height = bounds.height,
          dx = delta.x,
          dy = delta.y;

      switch (direction) {
      case 'n':
        return {
          x: x,
          y: y + dy,
          width: width,
          height: height - dy
        };
      case 's':
        return {
          x: x,
          y: y,
          width: width,
          height: height + dy
        };
      case 'w':
        return {
          x: x + dx,
          y: y,
          width: width - dx,
          height: height
        };
      case 'e':
        return {
          x: x,
          y: y,
          width: width + dx,
          height: height
        };
      default:
        throw new Error('unknown direction: ' + direction);
      }
    }

    /**
     * @typedef {import('../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../dragging/Dragging').default} Dragging
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../modeling/Modeling').default} Modeling
     * @typedef {import('../mouse/Mouse').default} Mouse
     * @typedef {import('../rules/Rules').default} Rules
     * @typedef {import('../tool-manager/ToolManager').default} ToolManager
     *
     * @typedef {import('../../util/Types').Axis} Axis
     * @typedef {import('../../util/Types').Direction} Direction
     * @typedef {import('../../util/Types').Point} Point
     */

    var abs = Math.abs,
        round$4 = Math.round;

    var AXIS_TO_DIMENSION = {
      x: 'width',
      y: 'height'
    };

    var CURSOR_CROSSHAIR = 'crosshair';

    var DIRECTION_TO_TRBL = {
      n: 'top',
      w: 'left',
      s: 'bottom',
      e: 'right'
    };

    var HIGH_PRIORITY$2 = 1500;

    var DIRECTION_TO_OPPOSITE = {
      n: 's',
      w: 'e',
      s: 'n',
      e: 'w'
    };

    var PADDING = 20;


    /**
     * Add or remove space by moving and resizing elements.
     *
     * @param {Canvas} canvas
     * @param {Dragging} dragging
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     * @param {Rules} rules
     * @param {ToolManager} toolManager
     * @param {Mouse} mouse
     */
    function SpaceTool(
        canvas, dragging, eventBus,
        modeling, rules, toolManager,
        mouse) {

      this._canvas = canvas;
      this._dragging = dragging;
      this._eventBus = eventBus;
      this._modeling = modeling;
      this._rules = rules;
      this._toolManager = toolManager;
      this._mouse = mouse;

      var self = this;

      toolManager.registerTool('space', {
        tool: 'spaceTool.selection',
        dragging: 'spaceTool'
      });

      eventBus.on('spaceTool.selection.end', function(event) {
        eventBus.once('spaceTool.selection.ended', function() {
          self.activateMakeSpace(event.originalEvent);
        });
      });

      eventBus.on('spaceTool.move', HIGH_PRIORITY$2 , function(event) {
        var context = event.context,
            initialized = context.initialized;

        if (!initialized) {
          initialized = context.initialized = self.init(event, context);
        }

        if (initialized) {
          ensureConstraints(event);
        }
      });

      eventBus.on('spaceTool.end', function(event) {
        var context = event.context,
            axis = context.axis,
            direction = context.direction,
            movingShapes = context.movingShapes,
            resizingShapes = context.resizingShapes,
            start = context.start;

        if (!context.initialized) {
          return;
        }

        ensureConstraints(event);

        var delta = {
          x: 0,
          y: 0
        };

        delta[ axis ] = round$4(event[ 'd' + axis ]);

        self.makeSpace(movingShapes, resizingShapes, delta, direction, start);

        eventBus.once('spaceTool.ended', function(event) {

          // activate space tool selection after make space
          self.activateSelection(event.originalEvent, true, true);
        });
      });
    }

    SpaceTool.$inject = [
      'canvas',
      'dragging',
      'eventBus',
      'modeling',
      'rules',
      'toolManager',
      'mouse'
    ];

    /**
     * Activate space tool selection.
     *
     * @param {MouseEvent|TouchEvent} event
     * @param {boolean} autoActivate
     * @param {boolean} reactivate
     */
    SpaceTool.prototype.activateSelection = function(event, autoActivate, reactivate) {
      this._dragging.init(event, 'spaceTool.selection', {
        autoActivate: autoActivate,
        cursor: CURSOR_CROSSHAIR,
        data: {
          context: {
            reactivate: reactivate
          }
        },
        trapClick: false
      });
    };

    /**
     * Activate space tool make space.
     *
     * @param {MouseEvent|TouchEvent} event
     */
    SpaceTool.prototype.activateMakeSpace = function(event) {
      this._dragging.init(event, 'spaceTool', {
        autoActivate: true,
        cursor: CURSOR_CROSSHAIR,
        data: {
          context: {}
        }
      });
    };

    /**
     * Make space.
     *
     * @param {Array<Shape>} movingShapes
     * @param {Array<Shape>} resizingShapes
     * @param {Point} delta
     * @param {Direction} direction
     * @param {number} start
     */
    SpaceTool.prototype.makeSpace = function(movingShapes, resizingShapes, delta, direction, start) {
      return this._modeling.createSpace(movingShapes, resizingShapes, delta, direction, start);
    };

    /**
     * Initialize make space and return true if that was successful.
     *
     * @param {MouseEvent|TouchEvent} event
     * @param {Object} context
     *
     * @return {boolean}
     */
    SpaceTool.prototype.init = function(event, context) {
      var axis = abs(event.dx) > abs(event.dy) ? 'x' : 'y',
          delta = event[ 'd' + axis ],
          start = event[ axis ] - delta;

      if (abs(delta) < 5) {
        return false;
      }

      // invert delta to remove space when moving left
      if (delta < 0) {
        delta *= -1;
      }

      // invert delta to add/remove space when removing/adding space if modifier key is pressed
      if (hasPrimaryModifier(event)) {
        delta *= -1;
      }

      var direction = getDirection(axis, delta);

      var root = this._canvas.getRootElement();

      var children = selfAndAllChildren(root, true);

      var elements = this.calculateAdjustments(children, axis, delta, start);

      var minDimensions = this._eventBus.fire('spaceTool.getMinDimensions', {
        axis: axis,
        direction: direction,
        shapes: elements.resizingShapes,
        start: start
      });

      var spaceToolConstraints = getSpaceToolConstraints(elements, axis, direction, start, minDimensions);

      assign$1(
        context,
        elements,
        {
          axis: axis,
          direction: direction,
          spaceToolConstraints: spaceToolConstraints,
          start: start
        }
      );

      set('resize-' + (axis === 'x' ? 'ew' : 'ns'));

      return true;
    };

    /**
     * Get elements to be moved and resized.
     *
     * @param {Array<Shape>} elements
     * @param {Axis} axis
     * @param {Point} delta
     * @param {number} start
     *
     * @return {Object}
     */
    SpaceTool.prototype.calculateAdjustments = function(elements, axis, delta, start) {
      var rules = this._rules;

      var movingShapes = [],
          resizingShapes = [];

      var attachers = [],
          connections = [];

      function moveShape(shape) {
        if (!movingShapes.includes(shape)) {
          movingShapes.push(shape);
        }

        var label = shape.label;

        // move external label if its label target is moving
        if (label && !movingShapes.includes(label)) {
          movingShapes.push(label);
        }
      }

      function resizeShape(shape) {
        if (!resizingShapes.includes(shape)) {
          resizingShapes.push(shape);
        }
      }

      forEach$1(elements, function(element) {
        if (!element.parent || isLabel(element)) {
          return;
        }

        // handle connections separately
        if (isConnection$4(element)) {
          connections.push(element);

          return;
        }

        var shapeStart = element[ axis ],
            shapeEnd = shapeStart + element[ AXIS_TO_DIMENSION[ axis ] ];

        // handle attachers separately
        if (isAttacher$1(element)
          && ((delta > 0 && getMid(element)[ axis ] > start)
            || (delta < 0 && getMid(element)[ axis ] < start))) {
          attachers.push(element);

          return;
        }

        // move shape if its start is after space tool
        if ((delta > 0 && shapeStart > start)
          || (delta < 0 && shapeEnd < start)) {
          moveShape(element);

          return;
        }

        // resize shape if it's resizable and its start is before and its end is after space tool
        if (shapeStart < start
          && shapeEnd > start
          && rules.allowed('shape.resize', { shape: element })
        ) {
          resizeShape(element);

          return;
        }
      });

      // move attacher if its host is moving
      forEach$1(movingShapes, function(shape) {
        var attachers = shape.attachers;

        if (attachers) {
          forEach$1(attachers, function(attacher) {
            moveShape(attacher);
          });
        }
      });

      var allShapes = movingShapes.concat(resizingShapes);

      // move attacher if its mid is after space tool and its host is moving or resizing
      forEach$1(attachers, function(attacher) {
        var host = attacher.host;

        if (includes$2(allShapes, host)) {
          moveShape(attacher);
        }
      });

      allShapes = movingShapes.concat(resizingShapes);

      // move external label if its label target's (connection) source and target are moving
      forEach$1(connections, function(connection) {
        var source = connection.source,
            target = connection.target,
            label = connection.label;

        if (includes$2(allShapes, source)
          && includes$2(allShapes, target)
          && label) {
          moveShape(label);
        }
      });

      return {
        movingShapes: movingShapes,
        resizingShapes: resizingShapes
      };
    };

    SpaceTool.prototype.toggle = function() {

      if (this.isActive()) {
        return this._dragging.cancel();
      }

      var mouseEvent = this._mouse.getLastMoveEvent();

      this.activateSelection(mouseEvent, !!mouseEvent);
    };

    SpaceTool.prototype.isActive = function() {
      var context = this._dragging.context();

      if (context) {
        return /^spaceTool/.test(context.prefix);
      }

      return false;
    };

    // helpers //////////

    function addPadding(trbl) {
      return {
        top: trbl.top - PADDING,
        right: trbl.right + PADDING,
        bottom: trbl.bottom + PADDING,
        left: trbl.left - PADDING
      };
    }

    function ensureConstraints(event) {
      var context = event.context,
          spaceToolConstraints = context.spaceToolConstraints;

      if (!spaceToolConstraints) {
        return;
      }

      var x, y;

      if (isNumber$3(spaceToolConstraints.left)) {
        x = Math.max(event.x, spaceToolConstraints.left);

        event.dx = event.dx + x - event.x;
        event.x = x;
      }

      if (isNumber$3(spaceToolConstraints.right)) {
        x = Math.min(event.x, spaceToolConstraints.right);

        event.dx = event.dx + x - event.x;
        event.x = x;
      }

      if (isNumber$3(spaceToolConstraints.top)) {
        y = Math.max(event.y, spaceToolConstraints.top);

        event.dy = event.dy + y - event.y;
        event.y = y;
      }

      if (isNumber$3(spaceToolConstraints.bottom)) {
        y = Math.min(event.y, spaceToolConstraints.bottom);

        event.dy = event.dy + y - event.y;
        event.y = y;
      }
    }

    function getSpaceToolConstraints(elements, axis, direction, start, minDimensions) {
      var movingShapes = elements.movingShapes,
          resizingShapes = elements.resizingShapes;

      if (!resizingShapes.length) {
        return;
      }

      var spaceToolConstraints = {},
          min,
          max;

      forEach$1(resizingShapes, function(resizingShape) {
        var attachers = resizingShape.attachers,
            children = resizingShape.children;

        var resizingShapeBBox = asTRBL(resizingShape);

        // find children that are not moving or resizing
        var nonMovingResizingChildren = filter(children, function(child) {
          return !isConnection$4(child) &&
            !isLabel(child) &&
            !includes$2(movingShapes, child) &&
            !includes$2(resizingShapes, child);
        });

        // find children that are moving
        var movingChildren = filter(children, function(child) {
          return !isConnection$4(child) && !isLabel(child) && includes$2(movingShapes, child);
        });

        var minOrMax,
            nonMovingResizingChildrenBBox,
            movingChildrenBBox,
            movingAttachers = [],
            nonMovingAttachers = [],
            movingAttachersBBox,
            movingAttachersConstraint,
            nonMovingAttachersBBox,
            nonMovingAttachersConstraint;

        if (nonMovingResizingChildren.length) {
          nonMovingResizingChildrenBBox = addPadding(asTRBL(getBBox(nonMovingResizingChildren)));

          minOrMax = start -
            resizingShapeBBox[ DIRECTION_TO_TRBL[ direction ] ] +
            nonMovingResizingChildrenBBox[ DIRECTION_TO_TRBL[ direction ] ];

          if (direction === 'n') {
            spaceToolConstraints.bottom = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 'w') {
            spaceToolConstraints.right = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 's') {
            spaceToolConstraints.top = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          } else if (direction === 'e') {
            spaceToolConstraints.left = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          }
        }

        if (movingChildren.length) {
          movingChildrenBBox = addPadding(asTRBL(getBBox(movingChildren)));

          minOrMax = start -
            movingChildrenBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ] +
            resizingShapeBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ];

          if (direction === 'n') {
            spaceToolConstraints.bottom = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 'w') {
            spaceToolConstraints.right = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 's') {
            spaceToolConstraints.top = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          } else if (direction === 'e') {
            spaceToolConstraints.left = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          }
        }

        if (attachers && attachers.length) {
          attachers.forEach(function(attacher) {
            if (includes$2(movingShapes, attacher)) {
              movingAttachers.push(attacher);
            } else {
              nonMovingAttachers.push(attacher);
            }
          });

          if (movingAttachers.length) {
            movingAttachersBBox = asTRBL(getBBox(movingAttachers.map(getMid)));

            movingAttachersConstraint = resizingShapeBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ]
                  - (movingAttachersBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ] - start);
          }

          if (nonMovingAttachers.length) {
            nonMovingAttachersBBox = asTRBL(getBBox(nonMovingAttachers.map(getMid)));

            nonMovingAttachersConstraint = nonMovingAttachersBBox[ DIRECTION_TO_TRBL[ direction ] ]
                  - (resizingShapeBBox[ DIRECTION_TO_TRBL[ direction ] ] - start);
          }

          if (direction === 'n') {
            minOrMax = Math.min(movingAttachersConstraint || Infinity, nonMovingAttachersConstraint || Infinity);

            spaceToolConstraints.bottom = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 'w') {
            minOrMax = Math.min(movingAttachersConstraint || Infinity, nonMovingAttachersConstraint || Infinity);

            spaceToolConstraints.right = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 's') {
            minOrMax = Math.max(movingAttachersConstraint || -Infinity, nonMovingAttachersConstraint || -Infinity);

            spaceToolConstraints.top = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          } else if (direction === 'e') {
            minOrMax = Math.max(movingAttachersConstraint || -Infinity, nonMovingAttachersConstraint || -Infinity);

            spaceToolConstraints.left = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          }
        }

        var resizingShapeMinDimensions = minDimensions && minDimensions[ resizingShape.id ];

        if (resizingShapeMinDimensions) {

          if (direction === 'n') {
            minOrMax = start +
              resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -
              resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

            spaceToolConstraints.bottom = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 'w') {
            minOrMax = start +
              resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -
              resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

            spaceToolConstraints.right = max = isNumber$3(max) ? Math.min(max, minOrMax) : minOrMax;
          } else if (direction === 's') {
            minOrMax = start -
              resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +
              resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

            spaceToolConstraints.top = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          } else if (direction === 'e') {
            minOrMax = start -
              resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +
              resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

            spaceToolConstraints.left = min = isNumber$3(min) ? Math.max(min, minOrMax) : minOrMax;
          }
        }
      });

      return spaceToolConstraints;
    }

    function includes$2(array, item) {
      return array.indexOf(item) !== -1;
    }

    function isAttacher$1(element) {
      return !!element.host;
    }

    function isConnection$4(element) {
      return !!element.waypoints;
    }

    function isLabel(element) {
      return !!element.labelTarget;
    }

    var MARKER_DRAGGING = 'djs-dragging',
        MARKER_RESIZING = 'djs-resizing';

    var LOW_PRIORITY$5 = 250;

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../../draw/Styles').default} Styles
     */

    var max = Math.max;


    /**
     * Provides previews for selecting/moving/resizing shapes when creating/removing space.
     *
     * @param {EventBus} eventBus
     * @param {ElementRegistry} elementRegistry
     * @param {Canvas} canvas
     * @param {Styles} styles
     */
    function SpaceToolPreview(
        eventBus, elementRegistry, canvas,
        styles, previewSupport) {

      function addPreviewGfx(collection, dragGroup) {
        forEach$1(collection, function(element) {
          previewSupport.addDragger(element, dragGroup);

          canvas.addMarker(element, MARKER_DRAGGING);
        });
      }

      // add crosshair
      eventBus.on('spaceTool.selection.start', function(event) {
        var space = canvas.getLayer('space'),
            context = event.context;

        var orientation = {
          x: 'M 0,-10000 L 0,10000',
          y: 'M -10000,0 L 10000,0'
        };

        var crosshairGroup = create$1('g');
        attr(crosshairGroup, styles.cls('djs-crosshair-group', [ 'no-events' ]));

        append(space, crosshairGroup);

        // horizontal path
        var pathX = create$1('path');
        attr(pathX, 'd', orientation.x);
        classes(pathX).add('djs-crosshair');

        append(crosshairGroup, pathX);

        // vertical path
        var pathY = create$1('path');
        attr(pathY, 'd', orientation.y);
        classes(pathY).add('djs-crosshair');

        append(crosshairGroup, pathY);

        context.crosshairGroup = crosshairGroup;
      });

      // update crosshair
      eventBus.on('spaceTool.selection.move', function(event) {
        var crosshairGroup = event.context.crosshairGroup;

        translate(crosshairGroup, event.x, event.y);
      });

      // remove crosshair
      eventBus.on('spaceTool.selection.cleanup', function(event) {
        var context = event.context,
            crosshairGroup = context.crosshairGroup;

        if (crosshairGroup) {
          remove(crosshairGroup);
        }
      });

      // add and update move/resize previews
      eventBus.on('spaceTool.move', LOW_PRIORITY$5, function(event) {

        var context = event.context,
            line = context.line,
            axis = context.axis,
            movingShapes = context.movingShapes,
            resizingShapes = context.resizingShapes;

        if (!context.initialized) {
          return;
        }

        if (!context.dragGroup) {
          var spaceLayer = canvas.getLayer('space');

          line = create$1('path');
          attr(line, 'd', 'M0,0 L0,0');
          classes(line).add('djs-crosshair');

          append(spaceLayer, line);

          context.line = line;

          var dragGroup = create$1('g');
          attr(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

          append(canvas.getActiveLayer(), dragGroup);

          // shapes
          addPreviewGfx(movingShapes, dragGroup);

          // connections
          var movingConnections = context.movingConnections = elementRegistry.filter(function(element) {
            var sourceIsMoving = false;

            forEach$1(movingShapes, function(shape) {
              forEach$1(shape.outgoing, function(connection) {
                if (element === connection) {
                  sourceIsMoving = true;
                }
              });
            });

            var targetIsMoving = false;

            forEach$1(movingShapes, function(shape) {
              forEach$1(shape.incoming, function(connection) {
                if (element === connection) {
                  targetIsMoving = true;
                }
              });
            });

            var sourceIsResizing = false;

            forEach$1(resizingShapes, function(shape) {
              forEach$1(shape.outgoing, function(connection) {
                if (element === connection) {
                  sourceIsResizing = true;
                }
              });
            });

            var targetIsResizing = false;

            forEach$1(resizingShapes, function(shape) {
              forEach$1(shape.incoming, function(connection) {
                if (element === connection) {
                  targetIsResizing = true;
                }
              });
            });

            return isConnection$3(element)
              && (sourceIsMoving || sourceIsResizing)
              && (targetIsMoving || targetIsResizing);
          });


          addPreviewGfx(movingConnections, dragGroup);

          context.dragGroup = dragGroup;
        }

        if (!context.frameGroup) {
          var frameGroup = create$1('g');
          attr(frameGroup, styles.cls('djs-frame-group', [ 'no-events' ]));

          append(canvas.getActiveLayer(), frameGroup);

          var frames = [];

          forEach$1(resizingShapes, function(shape) {
            var frame = previewSupport.addFrame(shape, frameGroup);

            var initialBounds = frame.getBBox();

            frames.push({
              element: frame,
              initialBounds: initialBounds
            });

            canvas.addMarker(shape, MARKER_RESIZING);
          });

          context.frameGroup = frameGroup;
          context.frames = frames;
        }

        var orientation = {
          x: 'M' + event.x + ', -10000 L' + event.x + ', 10000',
          y: 'M -10000, ' + event.y + ' L 10000, ' + event.y
        };

        attr(line, { d: orientation[ axis ] });

        var opposite = { x: 'y', y: 'x' };
        var delta = { x: event.dx, y: event.dy };
        delta[ opposite[ context.axis ] ] = 0;

        // update move previews
        translate(context.dragGroup, delta.x, delta.y);

        // update resize previews
        forEach$1(context.frames, function(frame) {
          var element = frame.element,
              initialBounds = frame.initialBounds,
              width,
              height;

          if (context.direction === 'e') {
            attr(element, {
              width: max(initialBounds.width + delta.x, 5)
            });
          } else {
            width = max(initialBounds.width - delta.x, 5);

            attr(element, {
              width: width,
              x: initialBounds.x + initialBounds.width - width
            });
          }

          if (context.direction === 's') {
            attr(element, {
              height: max(initialBounds.height + delta.y, 5)
            });
          } else {
            height = max(initialBounds.height - delta.y, 5);

            attr(element, {
              height: height,
              y: initialBounds.y + initialBounds.height - height
            });
          }
        });

      });

      // remove move/resize previews
      eventBus.on('spaceTool.cleanup', function(event) {

        var context = event.context,
            movingShapes = context.movingShapes,
            movingConnections = context.movingConnections,
            resizingShapes = context.resizingShapes,
            line = context.line,
            dragGroup = context.dragGroup,
            frameGroup = context.frameGroup;

        // moving shapes
        forEach$1(movingShapes, function(shape) {
          canvas.removeMarker(shape, MARKER_DRAGGING);
        });

        // moving connections
        forEach$1(movingConnections, function(connection) {
          canvas.removeMarker(connection, MARKER_DRAGGING);
        });

        if (dragGroup) {
          remove(line);
          remove(dragGroup);
        }

        forEach$1(resizingShapes, function(shape) {
          canvas.removeMarker(shape, MARKER_RESIZING);
        });

        if (frameGroup) {
          remove(frameGroup);
        }
      });
    }

    SpaceToolPreview.$inject = [
      'eventBus',
      'elementRegistry',
      'canvas',
      'styles',
      'previewSupport'
    ];


    // helpers //////////////////////

    /**
     * Checks if an element is a connection.
     */
    function isConnection$3(element) {
      return element.waypoints;
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var SpaceToolModule$1 = {
      __init__: [ 'spaceToolPreview' ],
      __depends__: [
        DraggingModule,
        RulesModule$1,
        ToolManagerModule,
        PreviewSupportModule,
        MouseModule
      ],
      spaceTool: [ 'type', SpaceTool ],
      spaceToolPreview: [ 'type', SpaceToolPreview ]
    };

    /**
     * @typedef {import('didi').Injector} Injector
     *
     * @typedef {import('../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').Axis} Axis
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     */

    /**
     * @param {Injector} injector
     */
    function BpmnSpaceTool(injector) {
      injector.invoke(SpaceTool, this);
    }

    BpmnSpaceTool.$inject = [
      'injector'
    ];

    e(BpmnSpaceTool, SpaceTool);

    /**
     * @param {Shape[]} elements
     * @param {Axis} axis
     * @param {Point} delta
     * @param {number} start
     *
     * @return {Object}
     */
    BpmnSpaceTool.prototype.calculateAdjustments = function(elements, axis, delta, start) {
      var adjustments = SpaceTool.prototype.calculateAdjustments.call(this, elements, axis, delta, start);

      // do not resize text annotations
      adjustments.resizingShapes = adjustments.resizingShapes.filter(function(shape) {
        return !is$2(shape, 'bpmn:TextAnnotation');
      });

      return adjustments;
    };

    var SpaceToolModule = {
      __depends__: [ SpaceToolModule$1 ],
      spaceTool: [ 'type', BpmnSpaceTool ]
    };

    /**
     * @typedef {import('didi').Injector} Injector
     *
     * @typedef {import('../core/Types').ElementLike} ElementLike
     *
     * @typedef {import('../core/EventBus').default} EventBus
     * @typedef {import('./CommandHandler').default} CommandHandler
     *
     * @typedef { any } CommandContext
     * @typedef { {
     *   new (...args: any[]) : CommandHandler
     * } } CommandHandlerConstructor
     * @typedef { {
     *   [key: string]: CommandHandler;
     * } } CommandHandlerMap
     * @typedef { {
     *   command: string;
     *   context: any;
     *   id?: any;
     * } } CommandStackAction
     * @typedef { {
     *   actions: CommandStackAction[];
     *   dirty: ElementLike[];
     *   trigger: 'execute' | 'undo' | 'redo' | 'clear' | null;
     *   atomic?: boolean;
     * } } CurrentExecution
     */

    /**
     * A service that offers un- and redoable execution of commands.
     *
     * The command stack is responsible for executing modeling actions
     * in a un- and redoable manner. To do this it delegates the actual
     * command execution to {@link CommandHandler}s.
     *
     * Command handlers provide {@link CommandHandler#execute(ctx)} and
     * {@link CommandHandler#revert(ctx)} methods to un- and redo a command
     * identified by a command context.
     *
     *
     * ## Life-Cycle events
     *
     * In the process the command stack fires a number of life-cycle events
     * that other components to participate in the command execution.
     *
     *    * preExecute
     *    * preExecuted
     *    * execute
     *    * executed
     *    * postExecute
     *    * postExecuted
     *    * revert
     *    * reverted
     *
     * A special event is used for validating, whether a command can be
     * performed prior to its execution.
     *
     *    * canExecute
     *
     * Each of the events is fired as `commandStack.{eventName}` and
     * `commandStack.{commandName}.{eventName}`, respectively. This gives
     * components fine grained control on where to hook into.
     *
     * The event object fired transports `command`, the name of the
     * command and `context`, the command context.
     *
     *
     * ## Creating Command Handlers
     *
     * Command handlers should provide the {@link CommandHandler#execute(ctx)}
     * and {@link CommandHandler#revert(ctx)} methods to implement
     * redoing and undoing of a command.
     *
     * A command handler _must_ ensure undo is performed properly in order
     * not to break the undo chain. It must also return the shapes that
     * got changed during the `execute` and `revert` operations.
     *
     * Command handlers may execute other modeling operations (and thus
     * commands) in their `preExecute(d)` and `postExecute(d)` phases. The command
     * stack will properly group all commands together into a logical unit
     * that may be re- and undone atomically.
     *
     * Command handlers must not execute other commands from within their
     * core implementation (`execute`, `revert`).
     *
     *
     * ## Change Tracking
     *
     * During the execution of the CommandStack it will keep track of all
     * elements that have been touched during the command's execution.
     *
     * At the end of the CommandStack execution it will notify interested
     * components via an 'elements.changed' event with all the dirty
     * elements.
     *
     * The event can be picked up by components that are interested in the fact
     * that elements have been changed. One use case for this is updating
     * their graphical representation after moving / resizing or deletion.
     *
     * @see CommandHandler
     *
     * @param {EventBus} eventBus
     * @param {Injector} injector
     */
    function CommandStack(eventBus, injector) {

      /**
       * A map of all registered command handlers.
       *
       * @type {CommandHandlerMap}
       */
      this._handlerMap = {};

      /**
       * A stack containing all re/undoable actions on the diagram
       *
       * @type {CommandStackAction[]}
       */
      this._stack = [];

      /**
       * The current index on the stack
       *
       * @type {number}
       */
      this._stackIdx = -1;

      /**
       * Current active commandStack execution
       *
       * @type {CurrentExecution}
       */
      this._currentExecution = {
        actions: [],
        dirty: [],
        trigger: null
      };

      /**
       * @type {Injector}
       */
      this._injector = injector;

      /**
       * @type EventBus
       */
      this._eventBus = eventBus;

      /**
       * @type { number }
       */
      this._uid = 1;

      eventBus.on([
        'diagram.destroy',
        'diagram.clear'
      ], function() {
        this.clear(false);
      }, this);
    }

    CommandStack.$inject = [ 'eventBus', 'injector' ];


    /**
     * Execute a command.
     *
     * @param {string} command The command to execute.
     * @param {CommandContext} context The context with which to execute the command.
     */
    CommandStack.prototype.execute = function(command, context) {
      if (!command) {
        throw new Error('command required');
      }

      this._currentExecution.trigger = 'execute';

      const action = { command: command, context: context };

      this._pushAction(action);
      this._internalExecute(action);
      this._popAction();
    };


    /**
     * Check whether a command can be executed.
     *
     * Implementors may hook into the mechanism on two ways:
     *
     *   * in event listeners:
     *
     *     Users may prevent the execution via an event listener.
     *     It must prevent the default action for `commandStack.(<command>.)canExecute` events.
     *
     *   * in command handlers:
     *
     *     If the method {@link CommandHandler#canExecute} is implemented in a handler
     *     it will be called to figure out whether the execution is allowed.
     *
     * @param {string} command The command to execute.
     * @param {CommandContext} context The context with which to execute the command.
     *
     * @return {boolean} Whether the command can be executed with the given context.
     */
    CommandStack.prototype.canExecute = function(command, context) {

      const action = { command: command, context: context };

      const handler = this._getHandler(command);

      let result = this._fire(command, 'canExecute', action);

      // handler#canExecute will only be called if no listener
      // decided on a result already
      if (result === undefined) {
        if (!handler) {
          return false;
        }

        if (handler.canExecute) {
          result = handler.canExecute(context);
        }
      }

      return result;
    };


    /**
     * Clear the command stack, erasing all undo / redo history.
     *
     * @param {boolean} [emit=true] Whether to fire an event. Defaults to `true`.
     */
    CommandStack.prototype.clear = function(emit) {
      this._stack.length = 0;
      this._stackIdx = -1;

      if (emit !== false) {
        this._fire('changed', { trigger: 'clear' });
      }
    };


    /**
     * Undo last command(s)
     */
    CommandStack.prototype.undo = function() {
      let action = this._getUndoAction(),
          next;

      if (action) {
        this._currentExecution.trigger = 'undo';

        this._pushAction(action);

        while (action) {
          this._internalUndo(action);
          next = this._getUndoAction();

          if (!next || next.id !== action.id) {
            break;
          }

          action = next;
        }

        this._popAction();
      }
    };


    /**
     * Redo last command(s)
     */
    CommandStack.prototype.redo = function() {
      let action = this._getRedoAction(),
          next;

      if (action) {
        this._currentExecution.trigger = 'redo';

        this._pushAction(action);

        while (action) {
          this._internalExecute(action, true);
          next = this._getRedoAction();

          if (!next || next.id !== action.id) {
            break;
          }

          action = next;
        }

        this._popAction();
      }
    };


    /**
     * Register a handler instance with the command stack.
     *
     * @param {string} command Command to be executed.
     * @param {CommandHandler} handler Handler to execute the command.
     */
    CommandStack.prototype.register = function(command, handler) {
      this._setHandler(command, handler);
    };


    /**
     * Register a handler type with the command stack  by instantiating it and
     * injecting its dependencies.
     *
     * @param {string} command Command to be executed.
     * @param {CommandHandlerConstructor} handlerCls Constructor to instantiate a {@link CommandHandler}.
     */
    CommandStack.prototype.registerHandler = function(command, handlerCls) {

      if (!command || !handlerCls) {
        throw new Error('command and handlerCls must be defined');
      }

      const handler = this._injector.instantiate(handlerCls);
      this.register(command, handler);
    };

    /**
     * @return {boolean}
     */
    CommandStack.prototype.canUndo = function() {
      return !!this._getUndoAction();
    };

    /**
     * @return {boolean}
     */
    CommandStack.prototype.canRedo = function() {
      return !!this._getRedoAction();
    };

    // stack access  //////////////////////

    CommandStack.prototype._getRedoAction = function() {
      return this._stack[this._stackIdx + 1];
    };


    CommandStack.prototype._getUndoAction = function() {
      return this._stack[this._stackIdx];
    };


    // internal functionality //////////////////////

    CommandStack.prototype._internalUndo = function(action) {
      const command = action.command,
            context = action.context;

      const handler = this._getHandler(command);

      // guard against illegal nested command stack invocations
      this._atomicDo(() => {
        this._fire(command, 'revert', action);

        if (handler.revert) {
          this._markDirty(handler.revert(context));
        }

        this._revertedAction(action);

        this._fire(command, 'reverted', action);
      });
    };


    CommandStack.prototype._fire = function(command, qualifier, event) {
      if (arguments.length < 3) {
        event = qualifier;
        qualifier = null;
      }

      const names = qualifier ? [ command + '.' + qualifier, qualifier ] : [ command ];
      let result;

      event = this._eventBus.createEvent(event);

      for (const name of names) {
        result = this._eventBus.fire('commandStack.' + name, event);

        if (event.cancelBubble) {
          break;
        }
      }

      return result;
    };

    CommandStack.prototype._createId = function() {
      return this._uid++;
    };

    CommandStack.prototype._atomicDo = function(fn) {

      const execution = this._currentExecution;

      execution.atomic = true;

      try {
        fn();
      } finally {
        execution.atomic = false;
      }
    };

    CommandStack.prototype._internalExecute = function(action, redo) {
      const command = action.command,
            context = action.context;

      const handler = this._getHandler(command);

      if (!handler) {
        throw new Error('no command handler registered for <' + command + '>');
      }

      this._pushAction(action);

      if (!redo) {
        this._fire(command, 'preExecute', action);

        if (handler.preExecute) {
          handler.preExecute(context);
        }

        this._fire(command, 'preExecuted', action);
      }

      // guard against illegal nested command stack invocations
      this._atomicDo(() => {

        this._fire(command, 'execute', action);

        if (handler.execute) {

          // actual execute + mark return results as dirty
          this._markDirty(handler.execute(context));
        }

        // log to stack
        this._executedAction(action, redo);

        this._fire(command, 'executed', action);
      });

      if (!redo) {
        this._fire(command, 'postExecute', action);

        if (handler.postExecute) {
          handler.postExecute(context);
        }

        this._fire(command, 'postExecuted', action);
      }

      this._popAction();
    };


    CommandStack.prototype._pushAction = function(action) {

      const execution = this._currentExecution,
            actions = execution.actions;

      const baseAction = actions[0];

      if (execution.atomic) {
        throw new Error('illegal invocation in <execute> or <revert> phase (action: ' + action.command + ')');
      }

      if (!action.id) {
        action.id = (baseAction && baseAction.id) || this._createId();
      }

      actions.push(action);
    };


    CommandStack.prototype._popAction = function() {
      const execution = this._currentExecution,
            trigger = execution.trigger,
            actions = execution.actions,
            dirty = execution.dirty;

      actions.pop();

      if (!actions.length) {
        this._eventBus.fire('elements.changed', { elements: uniqueBy('id', dirty.reverse()) });

        dirty.length = 0;

        this._fire('changed', { trigger: trigger });

        execution.trigger = null;
      }
    };


    CommandStack.prototype._markDirty = function(elements) {
      const execution = this._currentExecution;

      if (!elements) {
        return;
      }

      elements = isArray$5(elements) ? elements : [ elements ];

      execution.dirty = execution.dirty.concat(elements);
    };


    CommandStack.prototype._executedAction = function(action, redo) {
      const stackIdx = ++this._stackIdx;

      if (!redo) {
        this._stack.splice(stackIdx, this._stack.length, action);
      }
    };


    CommandStack.prototype._revertedAction = function(action) {
      this._stackIdx--;
    };


    CommandStack.prototype._getHandler = function(command) {
      return this._handlerMap[command];
    };

    CommandStack.prototype._setHandler = function(command, handler) {
      if (!command || !handler) {
        throw new Error('command and handler required');
      }

      if (this._handlerMap[command]) {
        throw new Error('overriding handler for command <' + command + '>');
      }

      this._handlerMap[command] = handler;
    };

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var CommandModule = {
      commandStack: [ 'type', CommandStack ]
    };

    /**
     * Util that provides unique IDs.
     *
     * @class
     * @constructor
     *
     * The ids can be customized via a given prefix and contain a random value to avoid collisions.
     *
     * @param {string} prefix a prefix to prepend to generated ids (for better readability)
     */
    function IdGenerator(prefix) {

      this._counter = 0;
      this._prefix = (prefix ? prefix + '-' : '') + Math.floor(Math.random() * 1000000000) + '-';
    }

    /**
     * Returns a next unique ID.
     *
     * @return {string} the id
     */
    IdGenerator.prototype.next = function() {
      return this._prefix + (++this._counter);
    };

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/EventBus').default} EventBus
     *
     * @typedef {import('../../util/Types').RectTRBL} RectTRBL
     *
     * @typedef { {
     *   html: string | HTMLElement;
     *   position: RectTRBL;
     *   show?: {
     *     minZoom?: number;
     *     maxZoom?: number;
     *   };
     *   timeout?: number;
     * } } Tooltip
     */

    // document wide unique tooltip ids
    var ids$1 = new IdGenerator('tt');


    function createRoot$1(parentNode) {
      var root = domify$1(
        '<div class="djs-tooltip-container" />'
      );

      assign(root, {
        position: 'absolute',
        width: '0',
        height: '0'
      });

      parentNode.insertBefore(root, parentNode.firstChild);

      return root;
    }


    function setPosition$1(el, x, y) {
      assign(el, { left: x + 'px', top: y + 'px' });
    }

    function setVisible$1(el, visible) {
      el.style.display = visible === false ? 'none' : '';
    }


    var tooltipClass = 'djs-tooltip',
        tooltipSelector = '.' + tooltipClass;

    /**
     * A service that allows users to render tool tips on the diagram.
     *
     * The tooltip service will take care of updating the tooltip positioning
     * during navigation + zooming.
     *
     * @example
     *
     * ```javascript
     *
     * // add a pink badge on the top left of the shape
     * tooltips.add({
     *   position: {
     *     x: 50,
     *     y: 100
     *   },
     *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
     * });
     *
     * // or with optional life span
     * tooltips.add({
     *   position: {
     *     top: -5,
     *     left: -5
     *   },
     *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>',
     *   ttl: 2000
     * });
     *
     * // remove a tool tip
     * var id = tooltips.add(...);
     *
     * tooltips.remove(id);
     * ```
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     */
    function Tooltips(eventBus, canvas) {

      this._eventBus = eventBus;
      this._canvas = canvas;

      this._ids = ids$1;

      this._tooltipDefaults = {
        show: {
          minZoom: 0.7,
          maxZoom: 5.0
        }
      };

      /**
       * @type {Record<string, Tooltip>}
       */
      this._tooltips = {};

      // root html element for all tooltips
      this._tooltipRoot = createRoot$1(canvas.getContainer());


      var self = this;

      delegate.bind(this._tooltipRoot, tooltipSelector, 'mousedown', function(event) {
        event.stopPropagation();
      });

      delegate.bind(this._tooltipRoot, tooltipSelector, 'mouseover', function(event) {
        self.trigger('mouseover', event);
      });

      delegate.bind(this._tooltipRoot, tooltipSelector, 'mouseout', function(event) {
        self.trigger('mouseout', event);
      });

      this._init();
    }


    Tooltips.$inject = [ 'eventBus', 'canvas' ];


    /**
     * Adds an HTML tooltip to the diagram.
     *
     * @param {Tooltip} tooltip
     *
     * @return {string} ID of the tooltip.
     */
    Tooltips.prototype.add = function(tooltip) {

      if (!tooltip.position) {
        throw new Error('must specifiy tooltip position');
      }

      if (!tooltip.html) {
        throw new Error('must specifiy tooltip html');
      }

      var id = this._ids.next();

      tooltip = assign$1({}, this._tooltipDefaults, tooltip, {
        id: id
      });

      this._addTooltip(tooltip);

      if (tooltip.timeout) {
        this.setTimeout(tooltip);
      }

      return id;
    };

    /**
     * @param {string} action
     * @param {Event} event
     */
    Tooltips.prototype.trigger = function(action, event) {

      var node = event.delegateTarget || event.target;

      var tooltip = this.get(attr$1(node, 'data-tooltip-id'));

      if (!tooltip) {
        return;
      }

      if (action === 'mouseover' && tooltip.timeout) {
        this.clearTimeout(tooltip);
      }

      if (action === 'mouseout' && tooltip.timeout) {

        // cut timeout after mouse out
        tooltip.timeout = 1000;

        this.setTimeout(tooltip);
      }
    };

    /**
     * Get tooltip with given ID.
     *
     * @param {Tooltip|string} id
     *
     * @return {Tooltip|undefined}
     */
    Tooltips.prototype.get = function(id) {

      if (typeof id !== 'string') {
        id = id.id;
      }

      return this._tooltips[id];
    };

    /**
     * @param {Tooltip} tooltip
     */
    Tooltips.prototype.clearTimeout = function(tooltip) {

      tooltip = this.get(tooltip);

      if (!tooltip) {
        return;
      }

      var removeTimer = tooltip.removeTimer;

      if (removeTimer) {
        clearTimeout(removeTimer);
        tooltip.removeTimer = null;
      }
    };

    /**
     * @param {Tooltip} tooltip
     */
    Tooltips.prototype.setTimeout = function(tooltip) {

      tooltip = this.get(tooltip);

      if (!tooltip) {
        return;
      }

      this.clearTimeout(tooltip);

      var self = this;

      tooltip.removeTimer = setTimeout(function() {
        self.remove(tooltip);
      }, tooltip.timeout);
    };

    /**
     * Remove tooltip with given ID.
     *
     * @param {string} id
     */
    Tooltips.prototype.remove = function(id) {

      var tooltip = this.get(id);

      if (tooltip) {
        remove$1(tooltip.html);
        remove$1(tooltip.htmlContainer);

        delete tooltip.htmlContainer;

        delete this._tooltips[tooltip.id];
      }
    };


    Tooltips.prototype.show = function() {
      setVisible$1(this._tooltipRoot);
    };


    Tooltips.prototype.hide = function() {
      setVisible$1(this._tooltipRoot, false);
    };


    Tooltips.prototype._updateRoot = function(viewbox) {
      var a = viewbox.scale || 1;
      var d = viewbox.scale || 1;

      var matrix = 'matrix(' + a + ',0,0,' + d + ',' + (-1 * viewbox.x * a) + ',' + (-1 * viewbox.y * d) + ')';

      this._tooltipRoot.style.transform = matrix;
      this._tooltipRoot.style['-ms-transform'] = matrix;
    };


    Tooltips.prototype._addTooltip = function(tooltip) {

      var id = tooltip.id,
          html = tooltip.html,
          htmlContainer,
          tooltipRoot = this._tooltipRoot;

      // unwrap jquery (for those who need it)
      if (html.get && html.constructor.prototype.jquery) {
        html = html.get(0);
      }

      // create proper html elements from
      // tooltip HTML strings
      if (isString$3(html)) {
        html = domify$1(html);
      }

      htmlContainer = domify$1('<div data-tooltip-id="' + id + '" class="' + tooltipClass + '">');
      assign(htmlContainer, { position: 'absolute' });

      htmlContainer.appendChild(html);

      if (tooltip.type) {
        classes$1(htmlContainer).add('djs-tooltip-' + tooltip.type);
      }

      if (tooltip.className) {
        classes$1(htmlContainer).add(tooltip.className);
      }

      tooltip.htmlContainer = htmlContainer;

      tooltipRoot.appendChild(htmlContainer);

      this._tooltips[id] = tooltip;

      this._updateTooltip(tooltip);
    };


    Tooltips.prototype._updateTooltip = function(tooltip) {

      var position = tooltip.position,
          htmlContainer = tooltip.htmlContainer;

      // update overlay html based on tooltip x, y

      setPosition$1(htmlContainer, position.x, position.y);
    };


    Tooltips.prototype._updateTooltipVisibilty = function(viewbox) {

      forEach$1(this._tooltips, function(tooltip) {
        var show = tooltip.show,
            htmlContainer = tooltip.htmlContainer,
            visible = true;

        if (show) {
          if (show.minZoom > viewbox.scale ||
              show.maxZoom < viewbox.scale) {
            visible = false;
          }

          setVisible$1(htmlContainer, visible);
        }
      });
    };

    Tooltips.prototype._init = function() {

      var self = this;

      // scroll/zoom integration

      function updateViewbox(viewbox) {
        self._updateRoot(viewbox);
        self._updateTooltipVisibilty(viewbox);

        self.show();
      }

      this._eventBus.on('canvas.viewbox.changing', function(event) {
        self.hide();
      });

      this._eventBus.on('canvas.viewbox.changed', function(event) {
        updateViewbox(event.viewbox);
      });
    };

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var TooltipsModule = {
      __init__: [ 'tooltips' ],
      tooltips: [ 'type', Tooltips ]
    };

    /**
     * Remove from the beginning of a collection until it is empty.
     *
     * This is a null-safe operation that ensures elements
     * are being removed from the given collection until the
     * collection is empty.
     *
     * The implementation deals with the fact that a remove operation
     * may touch, i.e. remove multiple elements in the collection
     * at a time.
     *
     * @param {Object[]} [collection]
     * @param {Function} removeFn
     *
     * @return {Object[]} the cleared collection
     */
    function saveClear(collection, removeFn) {

      if (typeof removeFn !== 'function') {
        throw new Error('removeFn iterator must be a function');
      }

      if (!collection) {
        return;
      }

      var e;

      while ((e = collection[0])) {
        removeFn(e);
      }

      return collection;
    }

    var LOW_PRIORITY$4 = 250,
        HIGH_PRIORITY$1 = 1400;

    /**
     * @typedef {import('../../model/Types').Element} Element
     *
     * @typedef {import('didi').Injector} Injector
     *
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../modeling/Modeling').default} Modeling
     */

    /**
     * A handler that makes sure labels are properly moved with
     * their label targets.
     *
     * @param {Injector} injector
     * @param {EventBus} eventBus
     * @param {Modeling} modeling
     */
    function LabelSupport(injector, eventBus, modeling) {

      CommandInterceptor.call(this, eventBus);

      var movePreview = injector.get('movePreview', false);

      // remove labels from the collection that are being
      // moved with other elements anyway
      eventBus.on('shape.move.start', HIGH_PRIORITY$1, function(e) {

        var context = e.context,
            shapes = context.shapes,
            validatedShapes = context.validatedShapes;

        context.shapes = removeLabels(shapes);
        context.validatedShapes = removeLabels(validatedShapes);
      });

      // add labels to visual's group
      movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$4, function(e) {

        var context = e.context,
            shapes = context.shapes;

        var labels = [];

        forEach$1(shapes, function(element) {

          forEach$1(element.labels, function(label) {

            if (!label.hidden && context.shapes.indexOf(label) === -1) {
              labels.push(label);
            }

            if (element.labelTarget) {
              labels.push(element);
            }
          });
        });

        forEach$1(labels, function(label) {
          movePreview.makeDraggable(context, label, true);
        });

      });

      // add all labels to move closure
      this.preExecuted('elements.move', HIGH_PRIORITY$1, function(e) {
        var context = e.context,
            closure = context.closure,
            enclosedElements = closure.enclosedElements;

        var enclosedLabels = [];

        // find labels that are not part of
        // move closure yet and add them
        forEach$1(enclosedElements, function(element) {
          forEach$1(element.labels, function(label) {

            if (!enclosedElements[label.id]) {
              enclosedLabels.push(label);
            }
          });
        });

        closure.addAll(enclosedLabels);
      });


      this.preExecute([
        'connection.delete',
        'shape.delete'
      ], function(e) {

        var context = e.context,
            element = context.connection || context.shape;

        saveClear(element.labels, function(label) {
          modeling.removeShape(label, { nested: true });
        });
      });


      this.execute('shape.delete', function(e) {

        var context = e.context,
            shape = context.shape,
            labelTarget = shape.labelTarget;

        // unset labelTarget
        if (labelTarget) {
          context.labelTargetIndex = indexOf(labelTarget.labels, shape);
          context.labelTarget = labelTarget;

          shape.labelTarget = null;
        }
      });

      this.revert('shape.delete', function(e) {

        var context = e.context,
            shape = context.shape,
            labelTarget = context.labelTarget,
            labelTargetIndex = context.labelTargetIndex;

        // restore labelTarget
        if (labelTarget) {
          add(labelTarget.labels, shape, labelTargetIndex);

          shape.labelTarget = labelTarget;
        }
      });

    }

    e(LabelSupport, CommandInterceptor);

    LabelSupport.$inject = [
      'injector',
      'eventBus',
      'modeling'
    ];


    /**
     * Return a filtered list of elements that do not
     * contain attached elements with hosts being part
     * of the selection.
     *
     * @param {Element[]} elements
     *
     * @return {Element[]} filtered
     */
    function removeLabels(elements) {

      return filter(elements, function(element) {

        // filter out labels that are move together
        // with their label targets
        return elements.indexOf(element.labelTarget) === -1;
      });
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var LabelSupportModule = {
      __init__: [ 'labelSupport' ],
      labelSupport: [ 'type', LabelSupport ]
    };

    /**
     * @typedef {import('didi').Injector} Injector
     *
     * @typedef {import('../../model/Types').Element} Element
     *
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../rules/Rules').default} Rules
     * @typedef {import('../modeling/Modeling').default} Modeling
     */

    var LOW_PRIORITY$3 = 251,
        HIGH_PRIORITY = 1401;

    var MARKER_ATTACH = 'attach-ok';


    /**
     * Adds the notion of attached elements to the modeler.
     *
     * Optionally depends on `diagram-js/lib/features/move` to render
     * the attached elements during move preview.
     *
     * Optionally depends on `diagram-js/lib/features/label-support`
     * to render attached labels during move preview.
     *
     * @param {Injector} injector
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     * @param {Rules} rules
     * @param {Modeling} modeling
     */
    function AttachSupport(injector, eventBus, canvas, rules, modeling) {

      CommandInterceptor.call(this, eventBus);

      var movePreview = injector.get('movePreview', false);


      // remove all the attached elements from the shapes to be validated
      // add all the attached shapes to the overall list of moved shapes
      eventBus.on('shape.move.start', HIGH_PRIORITY, function(e) {

        var context = e.context,
            shapes = context.shapes,
            validatedShapes = context.validatedShapes;

        context.shapes = addAttached(shapes);

        context.validatedShapes = removeAttached(validatedShapes);
      });

      // add attachers to the visual's group
      movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$3, function(e) {

        var context = e.context,
            shapes = context.shapes,
            attachers = getAttachers(shapes);

        forEach$1(attachers, function(attacher) {
          movePreview.makeDraggable(context, attacher, true);

          forEach$1(attacher.labels, function(label) {
            movePreview.makeDraggable(context, label, true);
          });
        });
      });

      // add attach-ok marker to current host
      movePreview && eventBus.on('shape.move.start', function(event) {
        var context = event.context,
            shapes = context.shapes;

        if (shapes.length !== 1) {
          return;
        }

        var shape = shapes[0];

        var host = shape.host;

        if (host) {
          canvas.addMarker(host, MARKER_ATTACH);

          eventBus.once([
            'shape.move.out',
            'shape.move.cleanup'
          ], function() {
            canvas.removeMarker(host, MARKER_ATTACH);
          });
        }
      });

      // add all attachers to move closure
      this.preExecuted('elements.move', HIGH_PRIORITY, function(e) {
        var context = e.context,
            closure = context.closure,
            shapes = context.shapes,
            attachers = getAttachers(shapes);

        forEach$1(attachers, function(attacher) {
          closure.add(attacher, closure.topLevel[attacher.host.id]);
        });
      });

      // perform the attaching after shapes are done moving
      this.postExecuted('elements.move', function(e) {

        var context = e.context,
            shapes = context.shapes,
            newHost = context.newHost,
            attachers;

        // only single elements can be attached
        // multiply elements can be detached
        if (newHost && shapes.length !== 1) {
          return;
        }

        if (newHost) {
          attachers = shapes;
        } else {

          // find attachers moved without host
          attachers = filter(shapes, function(shape) {
            var host = shape.host;

            return isAttacher(shape) && !includes$1(shapes, host);
          });
        }

        forEach$1(attachers, function(attacher) {
          modeling.updateAttachment(attacher, newHost);
        });
      });

      // ensure invalid attachment connections are removed
      this.postExecuted('elements.move', function(e) {

        var shapes = e.context.shapes;

        forEach$1(shapes, function(shape) {

          forEach$1(shape.attachers, function(attacher) {

            // remove invalid outgoing connections
            forEach$1(attacher.outgoing.slice(), function(connection) {
              var allowed = rules.allowed('connection.reconnect', {
                connection: connection,
                source: connection.source,
                target: connection.target
              });

              if (!allowed) {
                modeling.removeConnection(connection);
              }
            });

            // remove invalid incoming connections
            forEach$1(attacher.incoming.slice(), function(connection) {
              var allowed = rules.allowed('connection.reconnect', {
                connection: connection,
                source: connection.source,
                target: connection.target
              });

              if (!allowed) {
                modeling.removeConnection(connection);
              }
            });
          });
        });
      });

      this.postExecute('shape.create', function(e) {
        var context = e.context,
            shape = context.shape,
            host = context.host;

        if (host) {
          modeling.updateAttachment(shape, host);
        }
      });

      // update attachments if the host is replaced
      this.postExecute('shape.replace', function(e) {

        var context = e.context,
            oldShape = context.oldShape,
            newShape = context.newShape;

        // move the attachers to the new host
        saveClear(oldShape.attachers, function(attacher) {
          var allowed = rules.allowed('elements.move', {
            target: newShape,
            shapes: [ attacher ]
          });

          if (allowed === 'attach') {
            modeling.updateAttachment(attacher, newShape);
          } else {
            modeling.removeShape(attacher);
          }
        });

        // move attachers if new host has different size
        if (newShape.attachers.length) {

          forEach$1(newShape.attachers, function(attacher) {
            var delta = getNewAttachShapeDelta(attacher, oldShape, newShape);
            modeling.moveShape(attacher, delta, attacher.parent);
          });
        }

      });

      // move shape on host resize
      this.postExecute('shape.resize', function(event) {
        var context = event.context,
            shape = context.shape,
            oldBounds = context.oldBounds,
            newBounds = context.newBounds,
            attachers = shape.attachers,
            hints = context.hints || {};

        if (hints.attachSupport === false) {
          return;
        }

        forEach$1(attachers, function(attacher) {
          var delta = getNewAttachShapeDelta(attacher, oldBounds, newBounds);

          modeling.moveShape(attacher, delta, attacher.parent);

          forEach$1(attacher.labels, function(label) {
            modeling.moveShape(label, delta, label.parent);
          });
        });
      });

      // remove attachments
      this.preExecute('shape.delete', function(event) {

        var shape = event.context.shape;

        saveClear(shape.attachers, function(attacher) {
          modeling.removeShape(attacher);
        });

        if (shape.host) {
          modeling.updateAttachment(shape, null);
        }
      });
    }

    e(AttachSupport, CommandInterceptor);

    AttachSupport.$inject = [
      'injector',
      'eventBus',
      'canvas',
      'rules',
      'modeling'
    ];


    /**
     * Return attachers of the given shapes
     *
     * @param {Element[]} shapes
     * @return {Element[]}
     */
    function getAttachers(shapes) {
      return flatten$3(map$1(shapes, function(s) {
        return s.attachers || [];
      }));
    }

    /**
     * Return a combined list of elements and
     * attachers.
     *
     * @param {Element[]} elements
     * @return {Element[]} filtered
     */
    function addAttached(elements) {
      var attachers = getAttachers(elements);

      return unionBy('id', elements, attachers);
    }

    /**
     * Return a filtered list of elements that do not
     * contain attached elements with hosts being part
     * of the selection.
     *
     * @param {Element[]} elements
     *
     * @return {Element[]} filtered
     */
    function removeAttached(elements) {

      var ids = groupBy(elements, 'id');

      return filter(elements, function(element) {
        while (element) {

          // host in selection
          if (element.host && ids[element.host.id]) {
            return false;
          }

          element = element.parent;
        }

        return true;
      });
    }

    function isAttacher(shape) {
      return !!shape.host;
    }

    function includes$1(array, item) {
      return array.indexOf(item) !== -1;
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var AttachSupportModule = {
      __depends__: [
        RulesModule$1
      ],
      __init__: [ 'attachSupport' ],
      attachSupport: [ 'type', AttachSupport ]
    };

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     * @typedef {import('../../core/GraphicsFactory').default} GraphicsFactory
     */

    /**
     * Adds change support to the diagram, including
     *
     * <ul>
     *   <li>redrawing shapes and connections on change</li>
     * </ul>
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     * @param {ElementRegistry} elementRegistry
     * @param {GraphicsFactory} graphicsFactory
     */
    function ChangeSupport(
        eventBus, canvas, elementRegistry,
        graphicsFactory) {


      // redraw shapes / connections on change

      eventBus.on('element.changed', function(event) {

        var element = event.element;

        // element might have been deleted and replaced by new element with same ID
        // thus check for parent of element except for root element
        if (element.parent || element === canvas.getRootElement()) {
          event.gfx = elementRegistry.getGraphics(element);
        }

        // shape + gfx may have been deleted
        if (!event.gfx) {
          return;
        }

        eventBus.fire(getType(element) + '.changed', event);
      });

      eventBus.on('elements.changed', function(event) {

        var elements = event.elements;

        elements.forEach(function(e) {
          eventBus.fire('element.changed', { element: e });
        });

        graphicsFactory.updateContainments(elements);
      });

      eventBus.on('shape.changed', function(event) {
        graphicsFactory.update('shape', event.element, event.gfx);
      });

      eventBus.on('connection.changed', function(event) {
        graphicsFactory.update('connection', event.element, event.gfx);
      });
    }

    ChangeSupport.$inject = [
      'eventBus',
      'canvas',
      'elementRegistry',
      'graphicsFactory'
    ];

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var ChangeSupportModule = {
      __init__: [ 'changeSupport' ],
      changeSupport: [ 'type', ChangeSupport ]
    };

    /**
     * @typedef {import('../../model/Types').Moddle} Moddle
     * @typedef {import('../../model/Types').ModdleElement} ModdleElement
     *
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     */

    /**
     * @param {Moddle} moddle
     */
    function BpmnFactory(moddle) {
      this._model = moddle;
    }

    BpmnFactory.$inject = [ 'moddle' ];

    /**
     * @param {ModdleElement} element
     *
     * @return {boolean}
     */
    BpmnFactory.prototype._needsId = function(element) {
      return isAny(element, [
        'bpmn:RootElement',
        'bpmn:FlowElement',
        'bpmn:MessageFlow',
        'bpmn:DataAssociation',
        'bpmn:Artifact',
        'bpmn:Participant',
        'bpmn:Lane',
        'bpmn:LaneSet',
        'bpmn:Process',
        'bpmn:Collaboration',
        'bpmndi:BPMNShape',
        'bpmndi:BPMNEdge',
        'bpmndi:BPMNDiagram',
        'bpmndi:BPMNPlane',
        'bpmn:Property',
        'bpmn:CategoryValue'
      ]);
    };

    /**
     * @param {ModdleElement} element
     */
    BpmnFactory.prototype._ensureId = function(element) {
      if (element.id) {
        this._model.ids.claim(element.id, element);
        return;
      }

      // generate semantic ids for elements
      // bpmn:SequenceFlow -> SequenceFlow_ID
      var prefix;

      if (is$2(element, 'bpmn:Activity')) {
        prefix = 'Activity';
      } else if (is$2(element, 'bpmn:Event')) {
        prefix = 'Event';
      } else if (is$2(element, 'bpmn:Gateway')) {
        prefix = 'Gateway';
      } else if (isAny(element, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ])) {
        prefix = 'Flow';
      } else {
        prefix = (element.$type || '').replace(/^[^:]*:/g, '');
      }

      prefix += '_';

      if (!element.id && this._needsId(element)) {
        element.id = this._model.ids.nextPrefixed(prefix, element);
      }
    };

    /**
     * Create BPMN element.
     *
     * @param {string} type
     * @param {Object} [attrs]
     *
     * @return {ModdleElement}
     */
    BpmnFactory.prototype.create = function(type, attrs) {
      var element = this._model.create(type, attrs || {});

      this._ensureId(element);

      return element;
    };

    /**
     * @return {ModdleElement}
     */
    BpmnFactory.prototype.createDiLabel = function() {
      return this.create('bpmndi:BPMNLabel', {
        bounds: this.createDiBounds()
      });
    };

    /**
     * @return {ModdleElement}
     */
    BpmnFactory.prototype.createDiShape = function(semantic, attrs) {
      return this.create('bpmndi:BPMNShape', assign$1({
        bpmnElement: semantic,
        bounds: this.createDiBounds()
      }, attrs));
    };

    /**
     * @return {ModdleElement}
     */
    BpmnFactory.prototype.createDiBounds = function(bounds) {
      return this.create('dc:Bounds', bounds);
    };

    /**
     * @param {Point[]} waypoints
     *
     * @return {ModdleElement[]}
     */
    BpmnFactory.prototype.createDiWaypoints = function(waypoints) {
      var self = this;

      return map$1(waypoints, function(pos) {
        return self.createDiWaypoint(pos);
      });
    };

    /**
     * @param {Point} point
     *
     * @return {ModdleElement}
     */
    BpmnFactory.prototype.createDiWaypoint = function(point) {
      return this.create('dc:Point', pick$1(point, [ 'x', 'y' ]));
    };

    /**
     * @param {ModdleElement} semantic
     * @param {Object} attrs
     *
     * @return {ModdleElement}
     */
    BpmnFactory.prototype.createDiEdge = function(semantic, attrs) {
      return this.create('bpmndi:BPMNEdge', assign$1({
        bpmnElement: semantic,
        waypoint: this.createDiWaypoints([])
      }, attrs));
    };

    /**
     * @param {ModdleElement} semantic
     * @param {Object} attrs
     *
     * @return {ModdleElement}
     */
    BpmnFactory.prototype.createDiPlane = function(semantic, attrs) {
      return this.create('bpmndi:BPMNPlane', assign$1({
        bpmnElement: semantic
      }, attrs));
    };

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('./BpmnFactory').default} BpmnFactory
     * @typedef {import('diagram-js/lib/layout/CroppingConnectionDocking').default} CroppingConnectionDocking
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     *
     * @typedef {import('../../model/Types').Connection} Connection
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Shape} Shape
     * @typedef {import('../../model/Types').Parent} Parent
     * @typedef {import('../../model/Types').ModdleElement} ModdleElement
     */

    /**
     * A handler responsible for updating the underlying BPMN 2.0 XML & DI
     * once changes on the diagram happen.
     *
     * @param {EventBus} eventBus
     * @param {BpmnFactory} bpmnFactory
     * @param {CroppingConnectionDocking} connectionDocking
     * @param {Translate} translate
     */
    function BpmnUpdater(
        eventBus,
        bpmnFactory,
        connectionDocking,
        translate
    ) {

      CommandInterceptor.call(this, eventBus);

      this._bpmnFactory = bpmnFactory;
      this._translate = translate;

      var self = this;



      // connection cropping //////////////////////

      // crop connection ends during create/update
      function cropConnection(e) {
        var context = e.context,
            hints = context.hints || {},
            connection;

        if (!context.cropped && hints.createElementsBehavior !== false) {
          connection = context.connection;
          connection.waypoints = connectionDocking.getCroppedWaypoints(connection);
          context.cropped = true;
        }
      }

      this.executed([
        'connection.layout',
        'connection.create'
      ], cropConnection);

      this.reverted([ 'connection.layout' ], function(e) {
        delete e.context.cropped;
      });



      // BPMN + DI update //////////////////////


      // update parent
      function updateParent(e) {
        var context = e.context;

        self.updateParent(context.shape || context.connection, context.oldParent);
      }

      function reverseUpdateParent(e) {
        var context = e.context;

        var element = context.shape || context.connection,

            // oldParent is the (old) new parent, because we are undoing
            oldParent = context.parent || context.newParent;

        self.updateParent(element, oldParent);
      }

      this.executed([
        'shape.move',
        'shape.create',
        'shape.delete',
        'connection.create',
        'connection.move',
        'connection.delete'
      ], ifBpmn(updateParent));

      this.reverted([
        'shape.move',
        'shape.create',
        'shape.delete',
        'connection.create',
        'connection.move',
        'connection.delete'
      ], ifBpmn(reverseUpdateParent));

      /*
       * ## Updating Parent
       *
       * When morphing a Process into a Collaboration or vice-versa,
       * make sure that both the *semantic* and *di* parent of each element
       * is updated.
       *
       */
      function updateRoot(event) {
        var context = event.context,
            oldRoot = context.oldRoot,
            children = oldRoot.children;

        forEach$1(children, function(child) {
          if (is$2(child, 'bpmn:BaseElement')) {
            self.updateParent(child);
          }
        });
      }

      this.executed([ 'canvas.updateRoot' ], updateRoot);
      this.reverted([ 'canvas.updateRoot' ], updateRoot);


      // update bounds
      function updateBounds(e) {
        var shape = e.context.shape;

        if (!is$2(shape, 'bpmn:BaseElement')) {
          return;
        }

        self.updateBounds(shape);
      }

      this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {

        // exclude labels because they're handled separately during shape.changed
        if (event.context.shape.type === 'label') {
          return;
        }

        updateBounds(event);
      }));

      this.reverted([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {

        // exclude labels because they're handled separately during shape.changed
        if (event.context.shape.type === 'label') {
          return;
        }

        updateBounds(event);
      }));

      // Handle labels separately. This is necessary, because the label bounds have to be updated
      // every time its shape changes, not only on move, create and resize.
      eventBus.on('shape.changed', function(event) {
        if (event.element.type === 'label') {
          updateBounds({ context: { shape: event.element } });
        }
      });

      // attach / detach connection
      function updateConnection(e) {
        self.updateConnection(e.context);
      }

      this.executed([
        'connection.create',
        'connection.move',
        'connection.delete',
        'connection.reconnect'
      ], ifBpmn(updateConnection));

      this.reverted([
        'connection.create',
        'connection.move',
        'connection.delete',
        'connection.reconnect'
      ], ifBpmn(updateConnection));


      // update waypoints
      function updateConnectionWaypoints(e) {
        self.updateConnectionWaypoints(e.context.connection);
      }

      this.executed([
        'connection.layout',
        'connection.move',
        'connection.updateWaypoints',
      ], ifBpmn(updateConnectionWaypoints));

      this.reverted([
        'connection.layout',
        'connection.move',
        'connection.updateWaypoints',
      ], ifBpmn(updateConnectionWaypoints));

      // update conditional/default flows
      this.executed('connection.reconnect', ifBpmn(function(event) {
        var context = event.context,
            connection = context.connection,
            oldSource = context.oldSource,
            newSource = context.newSource,
            connectionBo = getBusinessObject(connection),
            oldSourceBo = getBusinessObject(oldSource),
            newSourceBo = getBusinessObject(newSource);

        // remove condition from connection on reconnect to new source
        // if new source can NOT have condional sequence flow
        if (connectionBo.conditionExpression && !isAny(newSourceBo, [
          'bpmn:Activity',
          'bpmn:ExclusiveGateway',
          'bpmn:InclusiveGateway'
        ])) {
          context.oldConditionExpression = connectionBo.conditionExpression;

          delete connectionBo.conditionExpression;
        }

        // remove default from old source flow on reconnect to new source
        // if source changed
        if (oldSource !== newSource && oldSourceBo.default === connectionBo) {
          context.oldDefault = oldSourceBo.default;

          delete oldSourceBo.default;
        }
      }));

      this.reverted('connection.reconnect', ifBpmn(function(event) {
        var context = event.context,
            connection = context.connection,
            oldSource = context.oldSource,
            newSource = context.newSource,
            connectionBo = getBusinessObject(connection),
            oldSourceBo = getBusinessObject(oldSource),
            newSourceBo = getBusinessObject(newSource);

        // add condition to connection on revert reconnect to new source
        if (context.oldConditionExpression) {
          connectionBo.conditionExpression = context.oldConditionExpression;
        }

        // add default to old source on revert reconnect to new source
        if (context.oldDefault) {
          oldSourceBo.default = context.oldDefault;

          delete newSourceBo.default;
        }
      }));

      // update attachments
      function updateAttachment(e) {
        self.updateAttachment(e.context);
      }

      this.executed([ 'element.updateAttachment' ], ifBpmn(updateAttachment));
      this.reverted([ 'element.updateAttachment' ], ifBpmn(updateAttachment));
    }

    e(BpmnUpdater, CommandInterceptor);

    BpmnUpdater.$inject = [
      'eventBus',
      'bpmnFactory',
      'connectionDocking',
      'translate'
    ];


    // implementation //////////////////////

    /**
     * @param { {
     *   shape: Shape;
     *   host: Shape;
     * } } context
     */
    BpmnUpdater.prototype.updateAttachment = function(context) {

      var shape = context.shape,
          businessObject = shape.businessObject,
          host = shape.host;

      businessObject.attachedToRef = host && host.businessObject;
    };

    /**
     * @param {Element} element
     * @param {Parent} oldParent
     */
    BpmnUpdater.prototype.updateParent = function(element, oldParent) {

      // do not update BPMN 2.0 label parent
      if (isLabel$3(element)) {
        return;
      }

      // data stores in collaborations are handled separately by DataStoreBehavior
      if (is$2(element, 'bpmn:DataStoreReference') &&
          element.parent &&
          is$2(element.parent, 'bpmn:Collaboration')) {
        return;
      }

      var parentShape = element.parent;

      var businessObject = element.businessObject,
          di = getDi(element),
          parentBusinessObject = parentShape && parentShape.businessObject,
          parentDi = getDi(parentShape);

      if (is$2(element, 'bpmn:FlowNode')) {
        this.updateFlowNodeRefs(businessObject, parentBusinessObject, oldParent && oldParent.businessObject);
      }

      if (is$2(element, 'bpmn:DataOutputAssociation')) {
        if (element.source) {
          parentBusinessObject = element.source.businessObject;
        } else {
          parentBusinessObject = null;
        }
      }

      if (is$2(element, 'bpmn:DataInputAssociation')) {
        if (element.target) {
          parentBusinessObject = element.target.businessObject;
        } else {
          parentBusinessObject = null;
        }
      }

      this.updateSemanticParent(businessObject, parentBusinessObject);

      if (is$2(element, 'bpmn:DataObjectReference') && businessObject.dataObjectRef) {
        this.updateSemanticParent(businessObject.dataObjectRef, parentBusinessObject);
      }

      this.updateDiParent(di, parentDi);
    };

    /**
     * @param {Shape} shape
     */
    BpmnUpdater.prototype.updateBounds = function(shape) {

      var di = getDi(shape),
          embeddedLabelBounds = getEmbeddedLabelBounds(shape);

      // update embedded label bounds if possible
      if (embeddedLabelBounds) {
        var embeddedLabelBoundsDelta = delta(embeddedLabelBounds, di.get('bounds'));

        assign$1(embeddedLabelBounds, {
          x: shape.x + embeddedLabelBoundsDelta.x,
          y: shape.y + embeddedLabelBoundsDelta.y
        });
      }

      var target = isLabel$3(shape) ? this._getLabel(di) : di;

      var bounds = target.bounds;

      if (!bounds) {
        bounds = this._bpmnFactory.createDiBounds();
        target.set('bounds', bounds);
      }

      assign$1(bounds, {
        x: shape.x,
        y: shape.y,
        width: shape.width,
        height: shape.height
      });
    };

    /**
     * @param {ModdleElement} businessObject
     * @param {ModdleElement} newContainment
     * @param {ModdleElement} oldContainment
     */
    BpmnUpdater.prototype.updateFlowNodeRefs = function(businessObject, newContainment, oldContainment) {

      if (oldContainment === newContainment) {
        return;
      }

      var oldRefs, newRefs;

      if (is$2 (oldContainment, 'bpmn:Lane')) {
        oldRefs = oldContainment.get('flowNodeRef');
        remove$2(oldRefs, businessObject);
      }

      if (is$2(newContainment, 'bpmn:Lane')) {
        newRefs = newContainment.get('flowNodeRef');
        add(newRefs, businessObject);
      }
    };

    /**
     * @param {Connection} connection
     * @param {Element} newSource
     * @param {Element} newTarget
     */
    BpmnUpdater.prototype.updateDiConnection = function(connection, newSource, newTarget) {
      var connectionDi = getDi(connection),
          newSourceDi = getDi(newSource),
          newTargetDi = getDi(newTarget);

      if (connectionDi.sourceElement && connectionDi.sourceElement.bpmnElement !== getBusinessObject(newSource)) {
        connectionDi.sourceElement = newSource && newSourceDi;
      }

      if (connectionDi.targetElement && connectionDi.targetElement.bpmnElement !== getBusinessObject(newTarget)) {
        connectionDi.targetElement = newTarget && newTargetDi;
      }

    };

    /**
     * @param {ModdleElement} di
     * @param {ModdleElement} parentDi
     */
    BpmnUpdater.prototype.updateDiParent = function(di, parentDi) {

      if (parentDi && !is$2(parentDi, 'bpmndi:BPMNPlane')) {
        parentDi = parentDi.$parent;
      }

      if (di.$parent === parentDi) {
        return;
      }

      var planeElements = (parentDi || di.$parent).get('planeElement');

      if (parentDi) {
        planeElements.push(di);
        di.$parent = parentDi;
      } else {
        remove$2(planeElements, di);
        di.$parent = null;
      }
    };

    /**
     * @param {ModdleElement} element
     *
     * @return {ModdleElement}
     */
    function getDefinitions(element) {
      while (element && !is$2(element, 'bpmn:Definitions')) {
        element = element.$parent;
      }

      return element;
    }

    /**
     * @param {ModdleElement} container
     *
     * @return {ModdleElement}
     */
    BpmnUpdater.prototype.getLaneSet = function(container) {

      var laneSet, laneSets;

      // bpmn:Lane
      if (is$2(container, 'bpmn:Lane')) {
        laneSet = container.childLaneSet;

        if (!laneSet) {
          laneSet = this._bpmnFactory.create('bpmn:LaneSet');
          container.childLaneSet = laneSet;
          laneSet.$parent = container;
        }

        return laneSet;
      }

      // bpmn:Participant
      if (is$2(container, 'bpmn:Participant')) {
        container = container.processRef;
      }

      // bpmn:FlowElementsContainer
      laneSets = container.get('laneSets');
      laneSet = laneSets[0];

      if (!laneSet) {
        laneSet = this._bpmnFactory.create('bpmn:LaneSet');
        laneSet.$parent = container;
        laneSets.push(laneSet);
      }

      return laneSet;
    };

    /**
     * @param {ModdleElement} businessObject
     * @param {ModdleElement} newParent
     * @param {ModdleElement} visualParent
     */
    BpmnUpdater.prototype.updateSemanticParent = function(businessObject, newParent, visualParent) {

      var containment,
          translate = this._translate;

      if (businessObject.$parent === newParent) {
        return;
      }

      if (is$2(businessObject, 'bpmn:DataInput') || is$2(businessObject, 'bpmn:DataOutput')) {

        if (is$2(newParent, 'bpmn:Participant') && 'processRef' in newParent) {
          newParent = newParent.processRef;
        }

        // already in correct ioSpecification
        if ('ioSpecification' in newParent && newParent.ioSpecification === businessObject.$parent) {
          return;
        }
      }

      if (is$2(businessObject, 'bpmn:Lane')) {

        if (newParent) {
          newParent = this.getLaneSet(newParent);
        }

        containment = 'lanes';
      } else

      if (is$2(businessObject, 'bpmn:FlowElement')) {

        if (newParent) {

          if (is$2(newParent, 'bpmn:Participant')) {
            newParent = newParent.processRef;
          } else

          if (is$2(newParent, 'bpmn:Lane')) {
            do {

              // unwrap Lane -> LaneSet -> (Lane | FlowElementsContainer)
              newParent = newParent.$parent.$parent;
            } while (is$2(newParent, 'bpmn:Lane'));

          }
        }

        containment = 'flowElements';

      } else

      if (is$2(businessObject, 'bpmn:Artifact')) {

        while (newParent &&
               !is$2(newParent, 'bpmn:Process') &&
               !is$2(newParent, 'bpmn:SubProcess') &&
               !is$2(newParent, 'bpmn:Collaboration')) {

          if (is$2(newParent, 'bpmn:Participant')) {
            newParent = newParent.processRef;
            break;
          } else {
            newParent = newParent.$parent;
          }
        }

        containment = 'artifacts';
      } else

      if (is$2(businessObject, 'bpmn:MessageFlow')) {
        containment = 'messageFlows';

      } else

      if (is$2(businessObject, 'bpmn:Participant')) {
        containment = 'participants';

        // make sure the participants process is properly attached / detached
        // from the XML document

        var process = businessObject.processRef,
            definitions;

        if (process) {
          definitions = getDefinitions(businessObject.$parent || newParent);

          if (businessObject.$parent) {
            remove$2(definitions.get('rootElements'), process);
            process.$parent = null;
          }

          if (newParent) {
            add(definitions.get('rootElements'), process);
            process.$parent = definitions;
          }
        }
      } else

      if (is$2(businessObject, 'bpmn:DataOutputAssociation')) {
        containment = 'dataOutputAssociations';
      } else

      if (is$2(businessObject, 'bpmn:DataInputAssociation')) {
        containment = 'dataInputAssociations';
      }

      if (!containment) {
        throw new Error(translate(
          'no parent for {element} in {parent}',
          {
            element: businessObject.id,
            parent: newParent.id
          }
        ));
      }

      var children;

      if (businessObject.$parent) {

        // remove from old parent
        children = businessObject.$parent.get(containment);
        remove$2(children, businessObject);
      }

      if (!newParent) {
        businessObject.$parent = null;
      } else {

        // add to new parent
        children = newParent.get(containment);
        children.push(businessObject);
        businessObject.$parent = newParent;
      }

      if (visualParent) {
        var diChildren = visualParent.get(containment);

        remove$2(children, businessObject);

        if (newParent) {

          if (!diChildren) {
            diChildren = [];
            newParent.set(containment, diChildren);
          }

          diChildren.push(businessObject);
        }
      }
    };

    /**
     * @param {Connection} connection
     */
    BpmnUpdater.prototype.updateConnectionWaypoints = function(connection) {
      var di = getDi(connection);

      di.set('waypoint', this._bpmnFactory.createDiWaypoints(connection.waypoints));
    };

    /**
     * @param { {
     *   connection: Connection;
     *   parent: Parent;
     *   newParent: Parent;
     * } } context
     */
    BpmnUpdater.prototype.updateConnection = function(context) {
      var connection = context.connection,
          businessObject = getBusinessObject(connection),
          newSource = connection.source,
          newSourceBo = getBusinessObject(newSource),
          newTarget = connection.target,
          newTargetBo = getBusinessObject(connection.target),
          visualParent;

      if (!is$2(businessObject, 'bpmn:DataAssociation')) {

        var inverseSet = is$2(businessObject, 'bpmn:SequenceFlow');

        if (businessObject.sourceRef !== newSourceBo) {
          if (inverseSet) {
            remove$2(businessObject.sourceRef && businessObject.sourceRef.get('outgoing'), businessObject);

            if (newSourceBo && newSourceBo.get('outgoing')) {
              newSourceBo.get('outgoing').push(businessObject);
            }
          }

          businessObject.sourceRef = newSourceBo;
        }

        if (businessObject.targetRef !== newTargetBo) {
          if (inverseSet) {
            remove$2(businessObject.targetRef && businessObject.targetRef.get('incoming'), businessObject);

            if (newTargetBo && newTargetBo.get('incoming')) {
              newTargetBo.get('incoming').push(businessObject);
            }
          }

          businessObject.targetRef = newTargetBo;
        }
      } else

      if (is$2(businessObject, 'bpmn:DataInputAssociation')) {

        // handle obnoxious isMsome sourceRef
        businessObject.get('sourceRef')[0] = newSourceBo;

        visualParent = context.parent || context.newParent || newTargetBo;

        this.updateSemanticParent(businessObject, newTargetBo, visualParent);
      } else

      if (is$2(businessObject, 'bpmn:DataOutputAssociation')) {
        visualParent = context.parent || context.newParent || newSourceBo;

        this.updateSemanticParent(businessObject, newSourceBo, visualParent);

        // targetRef = new target
        businessObject.targetRef = newTargetBo;
      }

      this.updateConnectionWaypoints(connection);

      this.updateDiConnection(connection, newSource, newTarget);
    };


    // helpers //////////////////////

    BpmnUpdater.prototype._getLabel = function(di) {
      if (!di.label) {
        di.label = this._bpmnFactory.createDiLabel();
      }

      return di.label;
    };


    /**
     * Call function if shape or connection is BPMN element.
     *
     * @param  {Function} fn
     *
     * @return {Function}
     */
    function ifBpmn(fn) {

      return function(event) {

        var context = event.context,
            element = context.shape || context.connection;

        if (is$2(element, 'bpmn:BaseElement')) {
          fn(event);
        }
      };
    }

    /**
     * Return dc:Bounds of bpmndi:BPMNLabel if exists.
     *
     * @param {Shape} shape
     *
     * @return {ModdleElement|undefined}
     */
    function getEmbeddedLabelBounds(shape) {
      if (!is$2(shape, 'bpmn:Activity')) {
        return;
      }

      var di = getDi(shape);

      if (!di) {
        return;
      }

      var label = di.get('label');

      if (!label) {
        return;
      }

      return label.get('bounds');
    }

    var objectRefs = {exports: {}};

    var collection = {};

    /**
     * An empty collection stub. Use {@link RefsCollection.extend} to extend a
     * collection with ref semantics.
     *
     * @class RefsCollection
     */

    /**
     * Extends a collection with {@link Refs} aware methods
     *
     * @memberof RefsCollection
     * @static
     *
     * @param  {Array<Object>} collection
     * @param  {Refs} refs instance
     * @param  {Object} property represented by the collection
     * @param  {Object} target object the collection is attached to
     *
     * @return {RefsCollection<Object>} the extended array
     */
    function extend(collection, refs, property, target) {

      var inverseProperty = property.inverse;

      /**
       * Removes the given element from the array and returns it.
       *
       * @method RefsCollection#remove
       *
       * @param {Object} element the element to remove
       */
      Object.defineProperty(collection, 'remove', {
        value: function(element) {
          var idx = this.indexOf(element);
          if (idx !== -1) {
            this.splice(idx, 1);

            // unset inverse
            refs.unset(element, inverseProperty, target);
          }

          return element;
        }
      });

      /**
       * Returns true if the collection contains the given element
       *
       * @method RefsCollection#contains
       *
       * @param {Object} element the element to check for
       */
      Object.defineProperty(collection, 'contains', {
        value: function(element) {
          return this.indexOf(element) !== -1;
        }
      });

      /**
       * Adds an element to the array, unless it exists already (set semantics).
       *
       * @method RefsCollection#add
       *
       * @param {Object} element the element to add
       * @param {Number} optional index to add element to
       *                 (possibly moving other elements around)
       */
      Object.defineProperty(collection, 'add', {
        value: function(element, idx) {

          var currentIdx = this.indexOf(element);

          if (typeof idx === 'undefined') {

            if (currentIdx !== -1) {
              // element already in collection (!)
              return;
            }

            // add to end of array, as no idx is specified
            idx = this.length;
          }

          // handle already in collection
          if (currentIdx !== -1) {

            // remove element from currentIdx
            this.splice(currentIdx, 1);
          }

          // add element at idx
          this.splice(idx, 0, element);

          if (currentIdx === -1) {
            // set inverse, unless element was
            // in collection already
            refs.set(element, inverseProperty, target);
          }
        }
      });

      // a simple marker, identifying this element
      // as being a refs collection
      Object.defineProperty(collection, '__refs_collection', {
        value: true
      });

      return collection;
    }


    function isExtended(collection) {
      return collection.__refs_collection === true;
    }

    collection.extend = extend;

    collection.isExtended = isExtended;

    var Collection = collection;

    function hasOwnProperty$1(e, property) {
      return Object.prototype.hasOwnProperty.call(e, property.name || property);
    }

    function defineCollectionProperty(ref, property, target) {

      var collection = Collection.extend(target[property.name] || [], ref, property, target);

      Object.defineProperty(target, property.name, {
        enumerable: property.enumerable,
        value: collection
      });

      if (collection.length) {

        collection.forEach(function(o) {
          ref.set(o, property.inverse, target);
        });
      }
    }


    function defineProperty$1(ref, property, target) {

      var inverseProperty = property.inverse;

      var _value = target[property.name];

      Object.defineProperty(target, property.name, {
        configurable: property.configurable,
        enumerable: property.enumerable,

        get: function() {
          return _value;
        },

        set: function(value) {

          // return if we already performed all changes
          if (value === _value) {
            return;
          }

          var old = _value;

          // temporary set null
          _value = null;

          if (old) {
            ref.unset(old, inverseProperty, target);
          }

          // set new value
          _value = value;

          // set inverse value
          ref.set(_value, inverseProperty, target);
        }
      });

    }

    /**
     * Creates a new references object defining two inversly related
     * attribute descriptors a and b.
     *
     * <p>
     *   When bound to an object using {@link Refs#bind} the references
     *   get activated and ensure that add and remove operations are applied
     *   reversely, too.
     * </p>
     *
     * <p>
     *   For attributes represented as collections {@link Refs} provides the
     *   {@link RefsCollection#add}, {@link RefsCollection#remove} and {@link RefsCollection#contains} extensions
     *   that must be used to properly hook into the inverse change mechanism.
     * </p>
     *
     * @class Refs
     *
     * @classdesc A bi-directional reference between two attributes.
     *
     * @param {Refs.AttributeDescriptor} a property descriptor
     * @param {Refs.AttributeDescriptor} b property descriptor
     *
     * @example
     *
     * var refs = Refs({ name: 'wheels', collection: true, enumerable: true }, { name: 'car' });
     *
     * var car = { name: 'toyota' };
     * var wheels = [{ pos: 'front-left' }, { pos: 'front-right' }];
     *
     * refs.bind(car, 'wheels');
     *
     * car.wheels // []
     * car.wheels.add(wheels[0]);
     * car.wheels.add(wheels[1]);
     *
     * car.wheels // [{ pos: 'front-left' }, { pos: 'front-right' }]
     *
     * wheels[0].car // { name: 'toyota' };
     * car.wheels.remove(wheels[0]);
     *
     * wheels[0].car // undefined
     */
    function Refs$1(a, b) {

      if (!(this instanceof Refs$1)) {
        return new Refs$1(a, b);
      }

      // link
      a.inverse = b;
      b.inverse = a;

      this.props = {};
      this.props[a.name] = a;
      this.props[b.name] = b;
    }

    /**
     * Binds one side of a bi-directional reference to a
     * target object.
     *
     * @memberOf Refs
     *
     * @param  {Object} target
     * @param  {String} property
     */
    Refs$1.prototype.bind = function(target, property) {
      if (typeof property === 'string') {
        if (!this.props[property]) {
          throw new Error('no property <' + property + '> in ref');
        }
        property = this.props[property];
      }

      if (property.collection) {
        defineCollectionProperty(this, property, target);
      } else {
        defineProperty$1(this, property, target);
      }
    };

    Refs$1.prototype.ensureRefsCollection = function(target, property) {

      var collection = target[property.name];

      if (!Collection.isExtended(collection)) {
        defineCollectionProperty(this, property, target);
      }

      return collection;
    };

    Refs$1.prototype.ensureBound = function(target, property) {
      if (!hasOwnProperty$1(target, property)) {
        this.bind(target, property);
      }
    };

    Refs$1.prototype.unset = function(target, property, value) {

      if (target) {
        this.ensureBound(target, property);

        if (property.collection) {
          this.ensureRefsCollection(target, property).remove(value);
        } else {
          target[property.name] = undefined;
        }
      }
    };

    Refs$1.prototype.set = function(target, property, value) {

      if (target) {
        this.ensureBound(target, property);

        if (property.collection) {
          this.ensureRefsCollection(target, property).add(value);
        } else {
          target[property.name] = value;
        }
      }
    };

    var refs = Refs$1;

    objectRefs.exports = refs;

    objectRefs.exports.Collection = collection;

    var objectRefsExports = objectRefs.exports;
    var Refs = /*@__PURE__*/getDefaultExportFromCjs(objectRefsExports);

    var parentRefs = new Refs({ name: 'children', enumerable: true, collection: true }, { name: 'parent' }),
        labelRefs = new Refs({ name: 'labels', enumerable: true, collection: true }, { name: 'labelTarget' }),
        attacherRefs = new Refs({ name: 'attachers', collection: true }, { name: 'host' }),
        outgoingRefs = new Refs({ name: 'outgoing', collection: true }, { name: 'source' }),
        incomingRefs = new Refs({ name: 'incoming', collection: true }, { name: 'target' });

    /**
     * @typedef {import('./Types').Element} Element
     * @typedef {import('./Types').Shape} Shape
     * @typedef {import('./Types').Root} Root
     * @typedef {import('./Types').Label} Label
     * @typedef {import('./Types').Connection} Connection
     */

    /**
     * The basic graphical representation
     *
     * @class
     * @constructor
     */
    function ElementImpl() {

      /**
       * The object that backs up the shape
       *
       * @name Element#businessObject
       * @type Object
       */
      Object.defineProperty(this, 'businessObject', {
        writable: true
      });


      /**
       * Single label support, will mapped to multi label array
       *
       * @name Element#label
       * @type Object
       */
      Object.defineProperty(this, 'label', {
        get: function() {
          return this.labels[0];
        },
        set: function(newLabel) {

          var label = this.label,
              labels = this.labels;

          if (!newLabel && label) {
            labels.remove(label);
          } else {
            labels.add(newLabel, 0);
          }
        }
      });

      /**
       * The parent shape
       *
       * @name Element#parent
       * @type Shape
       */
      parentRefs.bind(this, 'parent');

      /**
       * The list of labels
       *
       * @name Element#labels
       * @type Label
       */
      labelRefs.bind(this, 'labels');

      /**
       * The list of outgoing connections
       *
       * @name Element#outgoing
       * @type Array<Connection>
       */
      outgoingRefs.bind(this, 'outgoing');

      /**
       * The list of incoming connections
       *
       * @name Element#incoming
       * @type Array<Connection>
       */
      incomingRefs.bind(this, 'incoming');
    }


    /**
     * A graphical object
     *
     * @class
     * @constructor
     *
     * @extends ElementImpl
     */
    function ShapeImpl() {
      ElementImpl.call(this);

      /**
       * Indicates frame shapes
       *
       * @name ShapeImpl#isFrame
       * @type boolean
       */

      /**
       * The list of children
       *
       * @name ShapeImpl#children
       * @type Element[]
       */
      parentRefs.bind(this, 'children');

      /**
       * @name ShapeImpl#host
       * @type Shape
       */
      attacherRefs.bind(this, 'host');

      /**
       * @name ShapeImpl#attachers
       * @type Shape
       */
      attacherRefs.bind(this, 'attachers');
    }

    e(ShapeImpl, ElementImpl);


    /**
     * A root graphical object
     *
     * @class
     * @constructor
     *
     * @extends ElementImpl
     */
    function RootImpl() {
      ElementImpl.call(this);

      /**
       * The list of children
       *
       * @name RootImpl#children
       * @type Element[]
       */
      parentRefs.bind(this, 'children');
    }

    e(RootImpl, ShapeImpl);


    /**
     * A label for an element
     *
     * @class
     * @constructor
     *
     * @extends ShapeImpl
     */
    function LabelImpl() {
      ShapeImpl.call(this);

      /**
       * The labeled element
       *
       * @name LabelImpl#labelTarget
       * @type Element
       */
      labelRefs.bind(this, 'labelTarget');
    }

    e(LabelImpl, ShapeImpl);


    /**
     * A connection between two elements
     *
     * @class
     * @constructor
     *
     * @extends ElementImpl
     */
    function ConnectionImpl() {
      ElementImpl.call(this);

      /**
       * The element this connection originates from
       *
       * @name ConnectionImpl#source
       * @type Element
       */
      outgoingRefs.bind(this, 'source');

      /**
       * The element this connection points to
       *
       * @name ConnectionImpl#target
       * @type Element
       */
      incomingRefs.bind(this, 'target');
    }

    e(ConnectionImpl, ElementImpl);


    var types$6 = {
      connection: ConnectionImpl,
      shape: ShapeImpl,
      label: LabelImpl,
      root: RootImpl
    };

    /**
     * Creates a root element.
     *
     * @overlord
     *
     * @example
     *
     * ```
     * import * as Model from 'diagram-js/lib/model';
     *
     * const root = Model.create('root', {
     *   x: 100,
     *   y: 100,
     *   width: 100,
     *   height: 100
     * });
     * ```
     *
     * @param {'root'} type
     * @param {any} [attrs]
     *
     * @return {Root}
     */
    /**
     * Creates a connection.
     *
     * @overlord
     *
     * @example
     *
     * ```
     * import * as Model from 'diagram-js/lib/model';
     *
     * const connection = Model.create('connection', {
     *   waypoints: [
     *     { x: 100, y: 100 },
     *     { x: 200, y: 100 }
     *   ]
     * });
     * ```
     *
     * @param {'connection'} type
     * @param {any} [attrs]
     *
     * @return {Connection}
     */
    /**
     * Creates a shape.
     *
     * @overlord
     *
     * @example
     *
     * ```
     * import * as Model from 'diagram-js/lib/model';
     *
     * const shape = Model.create('shape', {
     *   x: 100,
     *   y: 100,
     *   width: 100,
     *   height: 100
     * });
     * ```
     *
     * @param {'shape'} type
     * @param {any} [attrs]
     *
     * @return {Shape}
     */
    /**
     * Creates a label.
     *
     * @example
     *
     * ```
     * import * as Model from 'diagram-js/lib/model';
     *
     * const label = Model.create('label', {
     *   x: 100,
     *   y: 100,
     *   width: 100,
     *   height: 100,
     *   labelTarget: shape
     * });
     * ```
     *
     * @param {'label'} type
     * @param {any} [attrs]
     * @return {Label}
     */
    function create(type, attrs) {
      var Type = types$6[type];
      if (!Type) {
        throw new Error('unknown type: <' + type + '>');
      }
      return assign$1(new Type(), attrs);
    }

    /**
     * Checks whether an object is a model instance.
     *
     * @param {any} obj
     * @return {boolean}
     */
    function isModelElement(obj) {
      return obj instanceof ElementImpl;
    }

    /**
     * @typedef {import('../model/Types').Element} Element
     * @typedef {import('../model/Types').Connection} Connection
     * @typedef {import('../model/Types').Label} Label
     * @typedef {import('../model/Types').Root} Root
     * @typedef {import('../model/Types').Shape} Shape
     */

    /**
     * A factory for model elements.
     *
     * @template {Connection} [T=Connection]
     * @template {Label} [U=Label]
     * @template {Root} [V=Root]
     * @template {Shape} [W=Shape]
     */
    function ElementFactory$1() {
      this._uid = 12;
    }

    /**
     * Create a root element.
     *
     * @param {Partial<Root>} [attrs]
     *
     * @return {V} The created root element.
     */
    ElementFactory$1.prototype.createRoot = function(attrs) {
      return this.create('root', attrs);
    };

    /**
     * Create a label.
     *
     * @param {Partial<Label>} [attrs]
     *
     * @return {U} The created label.
     */
    ElementFactory$1.prototype.createLabel = function(attrs) {
      return this.create('label', attrs);
    };

    /**
     * Create a shape.
     *
     * @param {Partial<Shape>} [attrs]
     *
     * @return {W} The created shape.
     */
    ElementFactory$1.prototype.createShape = function(attrs) {
      return this.create('shape', attrs);
    };

    /**
     * Create a connection.
     *
     * @param {Partial<Connection>} [attrs]
     *
     * @return {T} The created connection.
     */
    ElementFactory$1.prototype.createConnection = function(attrs) {
      return this.create('connection', attrs);
    };

    /**
     * Create a root element.
     *
     * @overlord
     * @param {'root'} type
     * @param {Partial<Root>} [attrs]
     * @return {V}
     */
    /**
     * Create a shape.
     *
     * @overlord
     * @param {'shape'} type
     * @param {Partial<Shape>} [attrs]
     * @return {W}
     */
    /**
     * Create a connection.
     *
     * @overlord
     * @param {'connection'} type
     * @param {Partial<Connection>} [attrs]
     * @return {T}
     */
    /**
     * Create a label.
     *
     * @param {'label'} type
     * @param {Partial<Label>} [attrs]
     * @return {U}
     */
    ElementFactory$1.prototype.create = function(type, attrs) {

      attrs = assign$1({}, attrs || {});

      if (!attrs.id) {
        attrs.id = type + '_' + (this._uid++);
      }

      return create(type, attrs);
    };

    /**
     * @typedef {import('../model/Types').ModdleElement} ModdleElement
     */

    // TODO(nikku): remove with future bpmn-js version

    /**
     * Wraps APIs to check:
     *
     * 1) If a callback is passed -> Warn users about callback deprecation.
     * 2) If Promise class is implemented in current environment.
     *
     * @private
     *
     * @param {Function} api
     *
     * @return {Function}
     */
    function wrapForCompatibility(api) {

      return function() {

        if (!window.Promise) {
          throw new Error('Promises is not supported in this environment. Please polyfill Promise.');
        }

        var argLen = arguments.length;
        if (argLen >= 1 && isFunction(arguments[argLen - 1])) {

          var callback = arguments[argLen - 1];

          console.warn(new Error(
            'Passing callbacks to ' + api.name + ' is deprecated and will be removed in a future major release. ' +
            'Please switch to promises: https://bpmn.io/l/moving-to-promises.html'
          ));

          var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);

          api.apply(this, argsWithoutCallback).then(function(result) {

            var firstKey = Object.keys(result)[0];

            // The APIs we are wrapping all resolve a single item depending on the API.
            // For instance, importXML resolves { warnings } and saveXML returns { xml }.
            // That's why we can call the callback with the first item of result.
            return callback(null, result[firstKey]);

            // Passing a second paramter instead of catch because we don't want to
            // catch errors thrown by callback().
          }, function(err) {

            return callback(err, err.warnings);
          });
        } else {

          return api.apply(this, arguments);
        }
      };
    }


    // TODO(nikku): remove with future bpmn-js version

    var DI_ERROR_MESSAGE = 'Tried to access di from the businessObject. The di is available through the diagram element only. For more information, see https://github.com/bpmn-io/bpmn-js/issues/1472';

    /**
     * @private
     *
     * @param {ModdleElement} businessObject
     */
    function ensureCompatDiRef(businessObject) {

      // bpmnElement can have multiple independent DIs
      if (!has$1(businessObject, 'di')) {
        Object.defineProperty(businessObject, 'di', {
          enumerable: false,
          get: function() {
            throw new Error(DI_ERROR_MESSAGE);
          }
        });
      }
    }

    /**
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     *
     * @typedef {import('diagram-js/lib/util/Types').Dimensions} Dimensions
     *
     * @typedef {import('./BpmnFactory').default} BpmnFactory
     *
     * @typedef {import('../../model/Types').BpmnAttributes} BpmnAttributes
     * @typedef {import('../../model/Types').Connection} Connection
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Label} Label
     * @typedef {import('../../model/Types').Root} Root
     * @typedef {import('../../model/Types').Shape} Shape
     * @typedef {import('../../model/Types').Moddle} Moddle
     * @typedef {import('../../model/Types').ModdleElement} ModdleElement
     */

    /**
     * A BPMN-specific element factory.
     *
     * @template {Connection} [T=Connection]
     * @template {Label} [U=Label]
     * @template {Root} [V=Root]
     * @template {Shape} [W=Shape]
     *
     * @extends {BaseElementFactory<T, U, V, W>}
     *
     * @param {BpmnFactory} bpmnFactory
     * @param {Moddle} moddle
     * @param {Translate} translate
     */
    function ElementFactory(bpmnFactory, moddle, translate) {
      ElementFactory$1.call(this);

      this._bpmnFactory = bpmnFactory;
      this._moddle = moddle;
      this._translate = translate;
    }

    e(ElementFactory, ElementFactory$1);

    ElementFactory.$inject = [
      'bpmnFactory',
      'moddle',
      'translate'
    ];

    ElementFactory.prototype._baseCreate = ElementFactory$1.prototype.create;

    /**
     * Create a root element.
     *
     * @overlord
     * @param {'root'} type
     * @param {Partial<Root> & Partial<BpmnAttributes>} [attrs]
     * @return {V}
     */

    /**
     * Create a shape.
     *
     * @overlord
     * @param {'shape'} type
     * @param {Partial<Shape> & Partial<BpmnAttributes>} [attrs]
     * @return {W}
     */

    /**
     * Create a connection.
     *
     * @overlord
     * @param {'connection'} type
     * @param {Partial<Connection> & Partial<BpmnAttributes>} [attrs]
     * @return {T}
     */

    /**
     * Create a label.
     *
     * @param {'label'} type
     * @param {Partial<Label> & Partial<BpmnAttributes>} [attrs]
     * @return {U}
     */
    ElementFactory.prototype.create = function(elementType, attrs) {

      // no special magic for labels,
      // we assume their businessObjects have already been created
      // and wired via attrs
      if (elementType === 'label') {
        var di = attrs.di || this._bpmnFactory.createDiLabel();
        return this._baseCreate(elementType, assign$1({ type: 'label', di: di }, DEFAULT_LABEL_SIZE$1, attrs));
      }

      return this.createElement(elementType, attrs);
    };

    /**
     * Create a BPMN root element.
     *
     * @overlord
     * @param {'root'} elementType
     * @param {Partial<Root> & Partial<BpmnAttributes>} [attrs]
     * @return {V}
     */

    /**
     * Create a BPMN shape.
     *
     * @overlord
     * @param {'shape'} elementType
     * @param {Partial<Shape> & Partial<BpmnAttributes>} [attrs]
     * @return {W}
     */

    /**
     * Create a BPMN connection.
     *
     * @param {'connection'} elementType
     * @param {Partial<Connection> & Partial<BpmnAttributes>} [attrs]
     * @return {T}
     */
    ElementFactory.prototype.createElement = function(elementType, attrs) {
      var size,
          translate = this._translate;

      attrs = assign$1({}, attrs || {});

      var businessObject = attrs.businessObject,
          di = attrs.di;

      if (!businessObject) {
        if (!attrs.type) {
          throw new Error(translate('no shape type specified'));
        }

        businessObject = this._bpmnFactory.create(attrs.type);

        ensureCompatDiRef(businessObject);
      }

      if (!isModdleDi(di)) {
        var diAttrs = assign$1(
          {},
          di || {},
          { id: businessObject.id + '_di' }
        );

        if (elementType === 'root') {
          di = this._bpmnFactory.createDiPlane(businessObject, diAttrs);
        } else
        if (elementType === 'connection') {
          di = this._bpmnFactory.createDiEdge(businessObject, diAttrs);
        } else {
          di = this._bpmnFactory.createDiShape(businessObject, diAttrs);
        }
      }

      if (is$2(businessObject, 'bpmn:Group')) {
        attrs = assign$1({
          isFrame: true
        }, attrs);
      }

      attrs = applyAttributes(businessObject, attrs, [
        'processRef',
        'isInterrupting',
        'associationDirection',
        'isForCompensation'
      ]);

      if (attrs.isExpanded) {
        attrs = applyAttribute(di, attrs, 'isExpanded');
      }

      if (is$2(businessObject, 'bpmn:SubProcess')) {
        attrs.collapsed = !isExpanded(businessObject, di);
      }

      if (is$2(businessObject, 'bpmn:ExclusiveGateway')) {
        di.isMarkerVisible = true;
      }

      if (isDefined(attrs.triggeredByEvent)) {
        businessObject.triggeredByEvent = attrs.triggeredByEvent;
        delete attrs.triggeredByEvent;
      }

      if (isDefined(attrs.cancelActivity)) {
        businessObject.cancelActivity = attrs.cancelActivity;
        delete attrs.cancelActivity;
      }

      var eventDefinitions,
          newEventDefinition;

      if (attrs.eventDefinitionType) {
        eventDefinitions = businessObject.get('eventDefinitions') || [];
        newEventDefinition = this._bpmnFactory.create(attrs.eventDefinitionType, attrs.eventDefinitionAttrs);

        if (attrs.eventDefinitionType === 'bpmn:ConditionalEventDefinition') {
          newEventDefinition.condition = this._bpmnFactory.create('bpmn:FormalExpression');
        }

        eventDefinitions.push(newEventDefinition);

        newEventDefinition.$parent = businessObject;
        businessObject.eventDefinitions = eventDefinitions;

        delete attrs.eventDefinitionType;
      }

      size = this.getDefaultSize(businessObject, di);

      attrs = assign$1({
        id: businessObject.id
      }, size, attrs, {
        businessObject: businessObject,
        di: di
      });

      return this._baseCreate(elementType, attrs);
    };

    /**
     * Get the default size of a diagram element.
     *
     * @param {Element} element The element.
     * @param {ModdleElement} di The DI.
     *
     * @return {Dimensions} Default width and height of the element.
     */
    ElementFactory.prototype.getDefaultSize = function(element, di) {

      var bo = getBusinessObject(element);
      di = di || getDi(element);

      if (is$2(bo, 'bpmn:SubProcess')) {
        if (isExpanded(bo, di)) {
          return { width: 350, height: 200 };
        } else {
          return { width: 100, height: 80 };
        }
      }

      if (is$2(bo, 'bpmn:Task')) {
        return { width: 100, height: 80 };
      }

      if (is$2(bo, 'bpmn:Gateway')) {
        return { width: 50, height: 50 };
      }

      if (is$2(bo, 'bpmn:Event')) {
        return { width: 36, height: 36 };
      }

      if (is$2(bo, 'bpmn:Participant')) {
        if (isExpanded(bo, di)) {
          return { width: 600, height: 250 };
        } else {
          return { width: 400, height: 60 };
        }
      }

      if (is$2(bo, 'bpmn:Lane')) {
        return { width: 400, height: 100 };
      }

      if (is$2(bo, 'bpmn:DataObjectReference')) {
        return { width: 36, height: 50 };
      }

      if (is$2(bo, 'bpmn:DataStoreReference')) {
        return { width: 50, height: 50 };
      }

      if (is$2(bo, 'bpmn:TextAnnotation')) {
        return { width: 100, height: 30 };
      }

      if (is$2(bo, 'bpmn:Group')) {
        return { width: 300, height: 300 };
      }

      return { width: 100, height: 80 };
    };


    /**
     * Create participant.
     *
     * @param {boolean|Partial<Shape> & Partial<BpmnAttributes>} [attrs]
     * Attributes or whether the participant is expanded.
     *
     * @return {W} The created participant.
     */
    ElementFactory.prototype.createParticipantShape = function(attrs) {

      if (!isObject(attrs)) {
        attrs = { isExpanded: attrs };
      }

      attrs = assign$1({ type: 'bpmn:Participant' }, attrs || {});

      // participants are expanded by default
      if (attrs.isExpanded !== false) {
        attrs.processRef = this._bpmnFactory.create('bpmn:Process');
      }

      return this.createShape(attrs);
    };


    // helpers //////////////////////

    /**
     * Apply attributes from a map to the given element, remove attribute from the
     * map on application.
     *
     * @param {Element} element
     * @param {Object} attrs (in/out map of attributes)
     * @param {string[]} attributeNames name of attributes to apply
     *
     * @return {Object} changed attrs
     */
    function applyAttributes(element, attrs, attributeNames) {

      forEach$1(attributeNames, function(property) {
        attrs = applyAttribute(element, attrs, property);
      });

      return attrs;
    }

    /**
     * Apply named property to element and drain it from the attrs collection.
     *
     * @param {Element} element
     * @param {Object} attrs (in/out map of attributes)
     * @param {string} attributeName to apply
     *
     * @return {Object} changed attrs
     */
    function applyAttribute(element, attrs, attributeName) {
      if (attrs[attributeName] === undefined) {
        return attrs;
      }

      element[attributeName] = attrs[attributeName];

      return omit(attrs, [ attributeName ]);
    }

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    function isModdleDi(element) {
      return isAny(element, [
        'bpmndi:BPMNShape',
        'bpmndi:BPMNEdge',
        'bpmndi:BPMNDiagram',
        'bpmndi:BPMNPlane',
      ]);
    }

    /**
     * @typedef {import('../../../core/Canvas').default} Canvas
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that align elements in a certain way.
     *
     * @param {Modeling} modeling
     * @param {Canvas} canvas
     */
    function AlignElements(modeling, canvas) {
      this._modeling = modeling;
      this._canvas = canvas;
    }

    AlignElements.$inject = [ 'modeling', 'canvas' ];


    AlignElements.prototype.preExecute = function(context) {
      var modeling = this._modeling;

      var elements = context.elements,
          alignment = context.alignment;


      forEach$1(elements, function(element) {
        var delta = {
          x: 0,
          y: 0
        };

        if (isDefined(alignment.left)) {
          delta.x = alignment.left - element.x;

        } else if (isDefined(alignment.right)) {
          delta.x = (alignment.right - element.width) - element.x;

        } else if (isDefined(alignment.center)) {
          delta.x = (alignment.center - Math.round(element.width / 2)) - element.x;

        } else if (isDefined(alignment.top)) {
          delta.y = alignment.top - element.y;

        } else if (isDefined(alignment.bottom)) {
          delta.y = (alignment.bottom - element.height) - element.y;

        } else if (isDefined(alignment.middle)) {
          delta.y = (alignment.middle - Math.round(element.height / 2)) - element.y;
        }

        modeling.moveElements([ element ], delta, element.parent);
      });
    };

    AlignElements.prototype.postExecute = function(context) {

    };

    /**
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Parent} Parent
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('../../../util/Types').Point} Point
     *
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that implements reversible appending of shapes
     * to a source shape.
     *
     * @param {Modeling} modeling
     */
    function AppendShapeHandler(modeling) {
      this._modeling = modeling;
    }

    AppendShapeHandler.$inject = [ 'modeling' ];


    // api //////////////////////


    /**
     * Creates a new shape.
     *
     * @param {Object} context
     * @param {Partial<Shape>} context.shape The new shape.
     * @param {Element} context.source The element to which to append the new shape to.
     * @param {Parent} context.parent The parent.
     * @param {Point} context.position The position at which to create the new shape.
     */
    AppendShapeHandler.prototype.preExecute = function(context) {

      var source = context.source;

      if (!source) {
        throw new Error('source required');
      }

      var target = context.target || source.parent,
          shape = context.shape,
          hints = context.hints || {};

      shape = context.shape =
        this._modeling.createShape(
          shape,
          context.position,
          target, { attach: hints.attach });

      context.shape = shape;
    };

    AppendShapeHandler.prototype.postExecute = function(context) {
      var hints = context.hints || {};

      if (!existsConnection(context.source, context.shape)) {

        // create connection
        if (hints.connectionTarget === context.source) {
          this._modeling.connect(context.shape, context.source, context.connection);
        } else {
          this._modeling.connect(context.source, context.shape, context.connection);
        }
      }
    };


    function existsConnection(source, target) {
      return some(source.outgoing, function(c) {
        return c.target === target;
      });
    }

    /**
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('../../../util/Types').Point} Point
     *
     * @typedef {import('../Modeling').ModelingHints} ModelingHints
     *
     * @typedef {import('../../../core/Canvas').default} Canvas
     * @typedef {import('../../../layout/BaseLayouter').default} Layouter
     */

    /**
     * @param {Canvas} canvas
     * @param {Layouter} layouter
     */
    function CreateConnectionHandler(canvas, layouter) {
      this._canvas = canvas;
      this._layouter = layouter;
    }

    CreateConnectionHandler.$inject = [ 'canvas', 'layouter' ];


    // api //////////////////////


    /**
     * Creates a new connection between two elements.
     *
     * @param {Object} context
     * @param {Element} context.source The source.
     * @param {Element} context.target The target.
     * @param {Shape} context.parent The parent.
     * @param {number} [context.parentIndex] The optional index at which to add the
     * connection to the parent's children.
     * @param {ModelingHints} [context.hints] The optional hints.
     */
    CreateConnectionHandler.prototype.execute = function(context) {

      var connection = context.connection,
          source = context.source,
          target = context.target,
          parent = context.parent,
          parentIndex = context.parentIndex,
          hints = context.hints;

      if (!source || !target) {
        throw new Error('source and target required');
      }

      if (!parent) {
        throw new Error('parent required');
      }

      connection.source = source;
      connection.target = target;

      if (!connection.waypoints) {
        connection.waypoints = this._layouter.layoutConnection(connection, hints);
      }

      // add connection
      this._canvas.addConnection(connection, parent, parentIndex);

      return connection;
    };

    CreateConnectionHandler.prototype.revert = function(context) {
      var connection = context.connection;

      this._canvas.removeConnection(connection);

      connection.source = null;
      connection.target = null;

      return connection;
    };

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    var round$3 = Math.round;

    /**
     * @param {Modeling} modeling
     */
    function CreateElementsHandler(modeling) {
      this._modeling = modeling;
    }

    CreateElementsHandler.$inject = [
      'modeling'
    ];

    CreateElementsHandler.prototype.preExecute = function(context) {
      var elements = context.elements,
          parent = context.parent,
          parentIndex = context.parentIndex,
          position = context.position,
          hints = context.hints;

      var modeling = this._modeling;

      // make sure each element has x and y
      forEach$1(elements, function(element) {
        if (!isNumber$3(element.x)) {
          element.x = 0;
        }

        if (!isNumber$3(element.y)) {
          element.y = 0;
        }
      });

      var visibleElements = filter(elements, function(element) {
        return !element.hidden;
      });

      var bbox = getBBox(visibleElements);

      // center elements around position
      forEach$1(elements, function(element) {
        if (isConnection$2(element)) {
          element.waypoints = map$1(element.waypoints, function(waypoint) {
            return {
              x: round$3(waypoint.x - bbox.x - bbox.width / 2 + position.x),
              y: round$3(waypoint.y - bbox.y - bbox.height / 2 + position.y)
            };
          });
        }

        assign$1(element, {
          x: round$3(element.x - bbox.x - bbox.width / 2 + position.x),
          y: round$3(element.y - bbox.y - bbox.height / 2 + position.y)
        });
      });

      var parents = getParents$1(elements);

      var cache = {};

      forEach$1(elements, function(element) {
        if (isConnection$2(element)) {
          cache[ element.id ] = isNumber$3(parentIndex) ?
            modeling.createConnection(
              cache[ element.source.id ],
              cache[ element.target.id ],
              parentIndex,
              element,
              element.parent || parent,
              hints
            ) :
            modeling.createConnection(
              cache[ element.source.id ],
              cache[ element.target.id ],
              element,
              element.parent || parent,
              hints
            );

          return;
        }

        var createShapeHints = assign$1({}, hints);

        if (parents.indexOf(element) === -1) {
          createShapeHints.autoResize = false;
        }

        cache[ element.id ] = isNumber$3(parentIndex) ?
          modeling.createShape(
            element,
            pick$1(element, [ 'x', 'y', 'width', 'height' ]),
            element.parent || parent,
            parentIndex,
            createShapeHints
          ) :
          modeling.createShape(
            element,
            pick$1(element, [ 'x', 'y', 'width', 'height' ]),
            element.parent || parent,
            createShapeHints
          );
      });

      context.elements = values(cache);
    };

    // helpers //////////

    function isConnection$2(element) {
      return !!element.waypoints;
    }

    /**
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../util/Types').Point} Point
     *
     * @typedef {import('../../../core/Canvas').default} Canvas
     */

    var round$2 = Math.round;


    /**
     * A handler that implements reversible addition of shapes.
     *
     * @param {Canvas} canvas
     */
    function CreateShapeHandler(canvas) {
      this._canvas = canvas;
    }

    CreateShapeHandler.$inject = [ 'canvas' ];


    // api //////////////////////


    /**
     * Appends a shape to a target shape
     *
     * @param {Object} context
     * @param {Element} context.parent The parent.
     * @param {Point} context.position The position at which to create the new shape.
     * @param {number} [context.parentIndex] The optional index at which to add the
     * shape to the parent's children.
     */
    CreateShapeHandler.prototype.execute = function(context) {

      var shape = context.shape,
          positionOrBounds = context.position,
          parent = context.parent,
          parentIndex = context.parentIndex;

      if (!parent) {
        throw new Error('parent required');
      }

      if (!positionOrBounds) {
        throw new Error('position required');
      }

      // (1) add at event center position _or_ at given bounds
      if (positionOrBounds.width !== undefined) {
        assign$1(shape, positionOrBounds);
      } else {
        assign$1(shape, {
          x: positionOrBounds.x - round$2(shape.width / 2),
          y: positionOrBounds.y - round$2(shape.height / 2)
        });
      }

      // (2) add to canvas
      this._canvas.addShape(shape, parent, parentIndex);

      return shape;
    };


    /**
     * Undo append by removing the shape
     */
    CreateShapeHandler.prototype.revert = function(context) {

      var shape = context.shape;

      // (3) remove form canvas
      this._canvas.removeShape(shape);

      return shape;
    };

    /**
     * @typedef {import('../../../core/Canvas').default} Canvas
     *
     * @typedef {import('../../../model/Types').Element} Element
     * @typedef {import('../../../model/Types').Parent} Parent
     * @typedef {import('../../../model/Types').Shape} Shape
     * @typedef {import('../../../util/Types').Point} Point
     */

    /**
     * A handler that attaches a label to a given target shape.
     *
     * @param {Canvas} canvas
     */
    function CreateLabelHandler(canvas) {
      CreateShapeHandler.call(this, canvas);
    }

    e(CreateLabelHandler, CreateShapeHandler);

    CreateLabelHandler.$inject = [ 'canvas' ];


    // api //////////////////////


    var originalExecute = CreateShapeHandler.prototype.execute;

    /**
     * Append label to element.
     *
     * @param { {
     *   parent: Parent;
     *   position: Point;
     *   shape: Shape;
     *   target: Element;
     * } } context
     */
    CreateLabelHandler.prototype.execute = function(context) {

      var label = context.shape;

      ensureValidDimensions(label);

      label.labelTarget = context.labelTarget;

      return originalExecute.call(this, context);
    };

    var originalRevert = CreateShapeHandler.prototype.revert;

    /**
     * Revert appending by removing label.
     */
    CreateLabelHandler.prototype.revert = function(context) {
      context.shape.labelTarget = null;

      return originalRevert.call(this, context);
    };


    // helpers //////////////////////

    function ensureValidDimensions(label) {

      // make sure a label has valid { width, height } dimensions
      [ 'width', 'height' ].forEach(function(prop) {
        if (typeof label[prop] === 'undefined') {
          label[prop] = 0;
        }
      });
    }

    /**
     * @typedef {import('../../../core/Canvas').default} Canvas
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that implements reversible deletion of Connections.
     */
    function DeleteConnectionHandler(canvas, modeling) {
      this._canvas = canvas;
      this._modeling = modeling;
    }

    DeleteConnectionHandler.$inject = [
      'canvas',
      'modeling'
    ];


    /**
     * - Remove connections
     */
    DeleteConnectionHandler.prototype.preExecute = function(context) {

      var modeling = this._modeling;

      var connection = context.connection;

      // remove connections
      saveClear(connection.incoming, function(connection) {

        // To make sure that the connection isn't removed twice
        // For example if a container is removed
        modeling.removeConnection(connection, { nested: true });
      });

      saveClear(connection.outgoing, function(connection) {
        modeling.removeConnection(connection, { nested: true });
      });

    };


    DeleteConnectionHandler.prototype.execute = function(context) {

      var connection = context.connection,
          parent = connection.parent;

      context.parent = parent;

      // remember containment
      context.parentIndex = indexOf(parent.children, connection);

      context.source = connection.source;
      context.target = connection.target;

      this._canvas.removeConnection(connection);

      connection.source = null;
      connection.target = null;

      return connection;
    };

    /**
     * Command revert implementation.
     */
    DeleteConnectionHandler.prototype.revert = function(context) {

      var connection = context.connection,
          parent = context.parent,
          parentIndex = context.parentIndex;

      connection.source = context.source;
      connection.target = context.target;

      // restore containment
      add(parent.children, connection, parentIndex);

      this._canvas.addConnection(connection, parent);

      return connection;
    };

    /**
     * @typedef {import('../../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * @param {Modeling} modeling
     * @param {ElementRegistry} elementRegistry
     */
    function DeleteElementsHandler(modeling, elementRegistry) {
      this._modeling = modeling;
      this._elementRegistry = elementRegistry;
    }

    DeleteElementsHandler.$inject = [
      'modeling',
      'elementRegistry'
    ];


    DeleteElementsHandler.prototype.postExecute = function(context) {

      var modeling = this._modeling,
          elementRegistry = this._elementRegistry,
          elements = context.elements;

      forEach$1(elements, function(element) {

        // element may have been removed with previous
        // remove operations already (e.g. in case of nesting)
        if (!elementRegistry.get(element.id)) {
          return;
        }

        if (element.waypoints) {
          modeling.removeConnection(element);
        } else {
          modeling.removeShape(element);
        }
      });
    };

    /**
     * @typedef {import('../../../core/Canvas').default} Canvas
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that implements reversible deletion of shapes.
     *
     * @param {Canvas} canvas
     * @param {Modeling} modeling
     */
    function DeleteShapeHandler(canvas, modeling) {
      this._canvas = canvas;
      this._modeling = modeling;
    }

    DeleteShapeHandler.$inject = [ 'canvas', 'modeling' ];


    /**
     * - Remove connections
     * - Remove all direct children
     */
    DeleteShapeHandler.prototype.preExecute = function(context) {

      var modeling = this._modeling;

      var shape = context.shape;

      // remove connections
      saveClear(shape.incoming, function(connection) {

        // To make sure that the connection isn't removed twice
        // For example if a container is removed
        modeling.removeConnection(connection, { nested: true });
      });

      saveClear(shape.outgoing, function(connection) {
        modeling.removeConnection(connection, { nested: true });
      });

      // remove child shapes and connections
      saveClear(shape.children, function(child) {
        if (isConnection$1(child)) {
          modeling.removeConnection(child, { nested: true });
        } else {
          modeling.removeShape(child, { nested: true });
        }
      });
    };

    /**
     * Remove shape and remember the parent
     */
    DeleteShapeHandler.prototype.execute = function(context) {
      var canvas = this._canvas;

      var shape = context.shape,
          oldParent = shape.parent;

      context.oldParent = oldParent;

      // remove containment
      context.oldParentIndex = indexOf(oldParent.children, shape);

      // remove shape
      canvas.removeShape(shape);

      return shape;
    };


    /**
     * Command revert implementation
     */
    DeleteShapeHandler.prototype.revert = function(context) {

      var canvas = this._canvas;

      var shape = context.shape,
          oldParent = context.oldParent,
          oldParentIndex = context.oldParentIndex;

      // restore containment
      add(oldParent.children, shape, oldParentIndex);

      canvas.addShape(shape, oldParent);

      return shape;
    };

    function isConnection$1(element) {
      return element.waypoints;
    }

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that distributes elements evenly.
     *
     * @param {Modeling} modeling
     */
    function DistributeElements(modeling) {
      this._modeling = modeling;
    }

    DistributeElements.$inject = [ 'modeling' ];

    var OFF_AXIS = {
      x: 'y',
      y: 'x'
    };

    DistributeElements.prototype.preExecute = function(context) {
      var modeling = this._modeling;

      var groups = context.groups,
          axis = context.axis,
          dimension = context.dimension;

      function updateRange(group, element) {
        group.range.min = Math.min(element[axis], group.range.min);
        group.range.max = Math.max(element[axis] + element[dimension], group.range.max);
      }

      function center(element) {
        return element[axis] + element[dimension] / 2;
      }

      function lastIdx(arr) {
        return arr.length - 1;
      }

      function rangeDiff(range) {
        return range.max - range.min;
      }

      function centerElement(refCenter, element) {
        var delta = { y: 0 };

        delta[axis] = refCenter - center(element);

        if (delta[axis]) {

          delta[OFF_AXIS[axis]] = 0;

          modeling.moveElements([ element ], delta, element.parent);
        }
      }

      var firstGroup = groups[0],
          lastGroupIdx = lastIdx(groups),
          lastGroup = groups[ lastGroupIdx ];

      var margin,
          spaceInBetween,
          groupsSize = 0; // the size of each range

      forEach$1(groups, function(group, idx) {
        var sortedElements,
            refElem,
            refCenter;

        if (group.elements.length < 2) {
          if (idx && idx !== groups.length - 1) {
            updateRange(group, group.elements[0]);

            groupsSize += rangeDiff(group.range);
          }
          return;
        }

        sortedElements = sortBy(group.elements, axis);

        refElem = sortedElements[0];

        if (idx === lastGroupIdx) {
          refElem = sortedElements[lastIdx(sortedElements)];
        }

        refCenter = center(refElem);

        // wanna update the ranges after the shapes have been centered
        group.range = null;

        forEach$1(sortedElements, function(element) {

          centerElement(refCenter, element);

          if (group.range === null) {
            group.range = {
              min: element[axis],
              max: element[axis] + element[dimension]
            };

            return;
          }

          // update group's range after centering the range elements
          updateRange(group, element);
        });

        if (idx && idx !== groups.length - 1) {
          groupsSize += rangeDiff(group.range);
        }
      });

      spaceInBetween = Math.abs(lastGroup.range.min - firstGroup.range.max);

      margin = Math.round((spaceInBetween - groupsSize) / (groups.length - 1));

      if (margin < groups.length - 1) {
        return;
      }

      forEach$1(groups, function(group, groupIdx) {
        var delta = {},
            prevGroup;

        if (group === firstGroup || group === lastGroup) {
          return;
        }

        prevGroup = groups[groupIdx - 1];

        group.range.max = 0;

        forEach$1(group.elements, function(element, idx) {
          delta[OFF_AXIS[axis]] = 0;
          delta[axis] = (prevGroup.range.max - element[axis]) + margin;

          if (group.range.min !== element[axis]) {
            delta[axis] += element[axis] - group.range.min;
          }

          if (delta[axis]) {
            modeling.moveElements([ element ], delta, element.parent);
          }

          group.range.max = Math.max(element[axis] + element[dimension], idx ? group.range.max : 0);
        });
      });
    };

    DistributeElements.prototype.postExecute = function(context) {

    };

    /**
     * @typedef {import('../../../core/Canvas').default} Canvas
     * @typedef {import('../../../layout/BaseLayouter').default} Layouter
     */

    /**
     * A handler that implements reversible moving of shapes.
     *
     * @param {Layouter} layouter
     * @param {Canvas} canvas
     */
    function LayoutConnectionHandler(layouter, canvas) {
      this._layouter = layouter;
      this._canvas = canvas;
    }

    LayoutConnectionHandler.$inject = [ 'layouter', 'canvas' ];

    LayoutConnectionHandler.prototype.execute = function(context) {

      var connection = context.connection;

      var oldWaypoints = connection.waypoints;

      assign$1(context, {
        oldWaypoints: oldWaypoints
      });

      connection.waypoints = this._layouter.layoutConnection(connection, context.hints);

      return connection;
    };

    LayoutConnectionHandler.prototype.revert = function(context) {

      var connection = context.connection;

      connection.waypoints = context.oldWaypoints;

      return connection;
    };

    /**
     * A handler that implements reversible moving of connections.
     *
     * The handler differs from the layout connection handler in a sense
     * that it preserves the connection layout.
     */
    function MoveConnectionHandler() { }


    MoveConnectionHandler.prototype.execute = function(context) {

      var connection = context.connection,
          delta = context.delta;

      var newParent = context.newParent || connection.parent,
          newParentIndex = context.newParentIndex,
          oldParent = connection.parent;

      // save old parent in context
      context.oldParent = oldParent;
      context.oldParentIndex = remove$2(oldParent.children, connection);

      // add to new parent at position
      add(newParent.children, connection, newParentIndex);

      // update parent
      connection.parent = newParent;

      // update waypoint positions
      forEach$1(connection.waypoints, function(p) {
        p.x += delta.x;
        p.y += delta.y;

        if (p.original) {
          p.original.x += delta.x;
          p.original.y += delta.y;
        }
      });

      return connection;
    };

    MoveConnectionHandler.prototype.revert = function(context) {

      var connection = context.connection,
          newParent = connection.parent,
          oldParent = context.oldParent,
          oldParentIndex = context.oldParentIndex,
          delta = context.delta;

      // remove from newParent
      remove$2(newParent.children, connection);

      // restore previous location in old parent
      add(oldParent.children, connection, oldParentIndex);

      // restore parent
      connection.parent = oldParent;

      // revert to old waypoint positions
      forEach$1(connection.waypoints, function(p) {
        p.x -= delta.x;
        p.y -= delta.y;

        if (p.original) {
          p.original.x -= delta.x;
          p.original.y -= delta.y;
        }
      });

      return connection;
    };

    function MoveClosure() {

      this.allShapes = {};
      this.allConnections = {};

      this.enclosedElements = {};
      this.enclosedConnections = {};

      this.topLevel = {};
    }


    MoveClosure.prototype.add = function(element, isTopLevel) {
      return this.addAll([ element ], isTopLevel);
    };


    MoveClosure.prototype.addAll = function(elements, isTopLevel) {

      var newClosure = getClosure(elements, !!isTopLevel, this);

      assign$1(this, newClosure);

      return this;
    };

    /**
     * @typedef {import('../../../../core/Types').ElementLike} Element
     * @typedef {import('../../../../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../../../../util/Types').Point} Point
     *
     * @typedef {import('../../Modeling').default} Modeling
     */

    /**
     * A helper that is able to carry out serialized move
     * operations on multiple elements.
     *
     * @param {Modeling} modeling
     */
    function MoveHelper(modeling) {
      this._modeling = modeling;
    }

    /**
     * Move the specified elements and all children by the given delta.
     *
     * This moves all enclosed connections, too and layouts all affected
     * external connections.
     *
     * @template {Element} T
     *
     * @param {T[]} elements
     * @param {Point} delta
     * @param {Shape} newParent The new parent of all elements that are not nested.
     *
     * @return {T[]}
     */
    MoveHelper.prototype.moveRecursive = function(elements, delta, newParent) {
      if (!elements) {
        return [];
      } else {
        return this.moveClosure(this.getClosure(elements), delta, newParent);
      }
    };

    /**
     * Move the given closure of elmements.
     *
     * @param {Object} closure
     * @param {Point} delta
     * @param {Shape} [newParent]
     * @param {Shape} [newHost]
     */
    MoveHelper.prototype.moveClosure = function(closure, delta, newParent, newHost, primaryShape) {
      var modeling = this._modeling;

      var allShapes = closure.allShapes,
          allConnections = closure.allConnections,
          enclosedConnections = closure.enclosedConnections,
          topLevel = closure.topLevel,
          keepParent = false;

      if (primaryShape && primaryShape.parent === newParent) {
        keepParent = true;
      }

      // move all shapes
      forEach$1(allShapes, function(shape) {

        // move the element according to the given delta
        modeling.moveShape(shape, delta, topLevel[shape.id] && !keepParent && newParent, {
          recurse: false,
          layout: false
        });
      });

      // move all child connections / layout external connections
      forEach$1(allConnections, function(c) {

        var sourceMoved = !!allShapes[c.source.id],
            targetMoved = !!allShapes[c.target.id];

        if (enclosedConnections[c.id] && sourceMoved && targetMoved) {
          modeling.moveConnection(c, delta, topLevel[c.id] && !keepParent && newParent);
        } else {
          modeling.layoutConnection(c, {
            connectionStart: sourceMoved && getMovedSourceAnchor(c, c.source, delta),
            connectionEnd: targetMoved && getMovedTargetAnchor(c, c.target, delta)
          });
        }
      });
    };

    /**
     * Returns the closure for the selected elements
     *
     * @param {Element[]} elements
     *
     * @return {MoveClosure}
     */
    MoveHelper.prototype.getClosure = function(elements) {
      return new MoveClosure().addAll(elements, true);
    };

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that implements reversible moving of shapes.
     *
     * @param {Modeling} modeling
     */
    function MoveElementsHandler(modeling) {
      this._helper = new MoveHelper(modeling);
    }

    MoveElementsHandler.$inject = [ 'modeling' ];

    MoveElementsHandler.prototype.preExecute = function(context) {
      context.closure = this._helper.getClosure(context.shapes);
    };

    MoveElementsHandler.prototype.postExecute = function(context) {

      var hints = context.hints,
          primaryShape;

      if (hints && hints.primaryShape) {
        primaryShape = hints.primaryShape;
        hints.oldParent = primaryShape.parent;
      }

      this._helper.moveClosure(
        context.closure,
        context.delta,
        context.newParent,
        context.newHost,
        primaryShape
      );
    };

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that implements reversible moving of shapes.
     *
     * @param {Modeling} modeling
     */
    function MoveShapeHandler(modeling) {
      this._modeling = modeling;

      this._helper = new MoveHelper(modeling);
    }

    MoveShapeHandler.$inject = [ 'modeling' ];


    MoveShapeHandler.prototype.execute = function(context) {

      var shape = context.shape,
          delta = context.delta,
          newParent = context.newParent || shape.parent,
          newParentIndex = context.newParentIndex,
          oldParent = shape.parent;

      context.oldBounds = pick$1(shape, [ 'x', 'y', 'width', 'height' ]);

      // save old parent in context
      context.oldParent = oldParent;
      context.oldParentIndex = remove$2(oldParent.children, shape);

      // add to new parent at position
      add(newParent.children, shape, newParentIndex);

      // update shape parent + position
      assign$1(shape, {
        parent: newParent,
        x: shape.x + delta.x,
        y: shape.y + delta.y
      });

      return shape;
    };

    MoveShapeHandler.prototype.postExecute = function(context) {

      var shape = context.shape,
          delta = context.delta,
          hints = context.hints;

      var modeling = this._modeling;

      if (hints.layout !== false) {

        forEach$1(shape.incoming, function(c) {
          modeling.layoutConnection(c, {
            connectionEnd: getMovedTargetAnchor(c, shape, delta)
          });
        });

        forEach$1(shape.outgoing, function(c) {
          modeling.layoutConnection(c, {
            connectionStart: getMovedSourceAnchor(c, shape, delta)
          });
        });
      }

      if (hints.recurse !== false) {
        this.moveChildren(context);
      }
    };

    MoveShapeHandler.prototype.revert = function(context) {

      var shape = context.shape,
          oldParent = context.oldParent,
          oldParentIndex = context.oldParentIndex,
          delta = context.delta;

      // restore previous location in old parent
      add(oldParent.children, shape, oldParentIndex);

      // revert to old position and parent
      assign$1(shape, {
        parent: oldParent,
        x: shape.x - delta.x,
        y: shape.y - delta.y
      });

      return shape;
    };

    MoveShapeHandler.prototype.moveChildren = function(context) {

      var delta = context.delta,
          shape = context.shape;

      this._helper.moveRecursive(shape.children, delta, null);
    };

    MoveShapeHandler.prototype.getNewParent = function(context) {
      return context.newParent || context.shape.parent;
    };

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * Reconnect connection handler.
     *
     * @param {Modeling} modeling
     */
    function ReconnectConnectionHandler(modeling) {
      this._modeling = modeling;
    }

    ReconnectConnectionHandler.$inject = [ 'modeling' ];

    ReconnectConnectionHandler.prototype.execute = function(context) {
      var newSource = context.newSource,
          newTarget = context.newTarget,
          connection = context.connection,
          dockingOrPoints = context.dockingOrPoints;

      if (!newSource && !newTarget) {
        throw new Error('newSource or newTarget required');
      }

      if (isArray$5(dockingOrPoints)) {
        context.oldWaypoints = connection.waypoints;
        connection.waypoints = dockingOrPoints;
      }

      if (newSource) {
        context.oldSource = connection.source;
        connection.source = newSource;
      }

      if (newTarget) {
        context.oldTarget = connection.target;
        connection.target = newTarget;
      }

      return connection;
    };

    ReconnectConnectionHandler.prototype.postExecute = function(context) {
      var connection = context.connection,
          newSource = context.newSource,
          newTarget = context.newTarget,
          dockingOrPoints = context.dockingOrPoints,
          hints = context.hints || {};

      var layoutConnectionHints = {};

      if (hints.connectionStart) {
        layoutConnectionHints.connectionStart = hints.connectionStart;
      }

      if (hints.connectionEnd) {
        layoutConnectionHints.connectionEnd = hints.connectionEnd;
      }

      if (hints.layoutConnection === false) {
        return;
      }

      if (newSource && (!newTarget || hints.docking === 'source')) {
        layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart
          || getDocking(isArray$5(dockingOrPoints) ? dockingOrPoints[ 0 ] : dockingOrPoints);
      }

      if (newTarget && (!newSource || hints.docking === 'target')) {
        layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd
          || getDocking(isArray$5(dockingOrPoints) ? dockingOrPoints[ dockingOrPoints.length - 1 ] : dockingOrPoints);
      }

      if (hints.newWaypoints) {
        layoutConnectionHints.waypoints = hints.newWaypoints;
      }

      this._modeling.layoutConnection(connection, layoutConnectionHints);
    };

    ReconnectConnectionHandler.prototype.revert = function(context) {
      var oldSource = context.oldSource,
          oldTarget = context.oldTarget,
          oldWaypoints = context.oldWaypoints,
          connection = context.connection;

      if (oldSource) {
        connection.source = oldSource;
      }

      if (oldTarget) {
        connection.target = oldTarget;
      }

      if (oldWaypoints) {
        connection.waypoints = oldWaypoints;
      }

      return connection;
    };



    // helpers //////////

    function getDocking(point) {
      return point.original || point;
    }

    /**
     * @typedef {import('../../model/Types').Shape} Shape
     *
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('../../rules/Rules').default} Rules
     */

    /**
     * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will
     * be kept if possible.
     *
     * @class
     * @constructor
     *
     * @param {Modeling} modeling
     * @param {Rules} rules
     */
    function ReplaceShapeHandler(modeling, rules) {
      this._modeling = modeling;
      this._rules = rules;
    }

    ReplaceShapeHandler.$inject = [ 'modeling', 'rules' ];


    /**
     * Add new shape.
     *
     * @param {Object} context
     * @param {Shape} context.oldShape
     * @param {Object} context.newData
     * @param {string} context.newData.type
     * @param {number} context.newData.x
     * @param {number} context.newData.y
     * @param {Object} [context.hints]
     */
    ReplaceShapeHandler.prototype.preExecute = function(context) {
      var self = this,
          modeling = this._modeling,
          rules = this._rules;

      var oldShape = context.oldShape,
          newData = context.newData,
          hints = context.hints || {},
          newShape;

      function canReconnect(source, target, connection) {
        return rules.allowed('connection.reconnect', {
          connection: connection,
          source: source,
          target: target
        });
      }

      // (1) add new shape at given position
      var position = {
        x: newData.x,
        y: newData.y
      };

      var oldBounds = {
        x: oldShape.x,
        y: oldShape.y,
        width: oldShape.width,
        height: oldShape.height
      };

      newShape = context.newShape =
        context.newShape ||
        self.createShape(newData, position, oldShape.parent, hints);

      // (2) update host
      if (oldShape.host) {
        modeling.updateAttachment(newShape, oldShape.host);
      }

      // (3) adopt all children from old shape
      var children;

      if (hints.moveChildren !== false) {
        children = oldShape.children.slice();

        modeling.moveElements(children, { x: 0, y: 0 }, newShape, hints);
      }

      // (4) reconnect connections to new shape if possible
      var incoming = oldShape.incoming.slice(),
          outgoing = oldShape.outgoing.slice();

      forEach$1(incoming, function(connection) {
        var source = connection.source,
            allowed = canReconnect(source, newShape, connection);

        if (allowed) {
          self.reconnectEnd(
            connection, newShape,
            getResizedTargetAnchor(connection, newShape, oldBounds),
            hints
          );
        }
      });

      forEach$1(outgoing, function(connection) {
        var target = connection.target,
            allowed = canReconnect(newShape, target, connection);

        if (allowed) {
          self.reconnectStart(
            connection, newShape,
            getResizedSourceAnchor(connection, newShape, oldBounds),
            hints
          );
        }
      });
    };


    /**
     * Remove old shape.
     */
    ReplaceShapeHandler.prototype.postExecute = function(context) {
      var oldShape = context.oldShape;

      this._modeling.removeShape(oldShape);
    };


    ReplaceShapeHandler.prototype.execute = function(context) {};


    ReplaceShapeHandler.prototype.revert = function(context) {};


    ReplaceShapeHandler.prototype.createShape = function(shape, position, target, hints) {
      return this._modeling.createShape(shape, position, target, hints);
    };


    ReplaceShapeHandler.prototype.reconnectStart = function(connection, newSource, dockingPoint, hints) {
      this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);
    };


    ReplaceShapeHandler.prototype.reconnectEnd = function(connection, newTarget, dockingPoint, hints) {
      this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);
    };

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that implements reversible resizing of shapes.
     *
     * @param {Modeling} modeling
     */
    function ResizeShapeHandler(modeling) {
      this._modeling = modeling;
    }

    ResizeShapeHandler.$inject = [ 'modeling' ];

    /**
     * {
     *   shape: {....}
     *   newBounds: {
     *     width:  20,
     *     height: 40,
     *     x:       5,
     *     y:      10
     *   }
     *
     * }
     */
    ResizeShapeHandler.prototype.execute = function(context) {
      var shape = context.shape,
          newBounds = context.newBounds,
          minBounds = context.minBounds;

      if (newBounds.x === undefined || newBounds.y === undefined ||
          newBounds.width === undefined || newBounds.height === undefined) {
        throw new Error('newBounds must have {x, y, width, height} properties');
      }

      if (minBounds && (newBounds.width < minBounds.width
        || newBounds.height < minBounds.height)) {
        throw new Error('width and height cannot be less than minimum height and width');
      } else if (!minBounds
        && newBounds.width < 10 || newBounds.height < 10) {
        throw new Error('width and height cannot be less than 10px');
      }

      // save old bbox in context
      context.oldBounds = {
        width:  shape.width,
        height: shape.height,
        x:      shape.x,
        y:      shape.y
      };

      // update shape
      assign$1(shape, {
        width:  newBounds.width,
        height: newBounds.height,
        x:      newBounds.x,
        y:      newBounds.y
      });

      return shape;
    };

    ResizeShapeHandler.prototype.postExecute = function(context) {
      var modeling = this._modeling;

      var shape = context.shape,
          oldBounds = context.oldBounds,
          hints = context.hints || {};

      if (hints.layout === false) {
        return;
      }

      forEach$1(shape.incoming, function(c) {
        modeling.layoutConnection(c, {
          connectionEnd: getResizedTargetAnchor(c, shape, oldBounds)
        });
      });

      forEach$1(shape.outgoing, function(c) {
        modeling.layoutConnection(c, {
          connectionStart: getResizedSourceAnchor(c, shape, oldBounds)
        });
      });

    };

    ResizeShapeHandler.prototype.revert = function(context) {

      var shape = context.shape,
          oldBounds = context.oldBounds;

      // restore previous bbox
      assign$1(shape, {
        width:  oldBounds.width,
        height: oldBounds.height,
        x:      oldBounds.x,
        y:      oldBounds.y
      });

      return shape;
    };

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * Add or remove space by moving and resizing shapes and updating connection waypoints.
     *
     * @param {Modeling} modeling
     */
    function SpaceToolHandler(modeling) {
      this._modeling = modeling;
    }

    SpaceToolHandler.$inject = [ 'modeling' ];

    SpaceToolHandler.prototype.preExecute = function(context) {
      var delta = context.delta,
          direction = context.direction,
          movingShapes = context.movingShapes,
          resizingShapes = context.resizingShapes,
          start = context.start,
          oldBounds = {};

      // (1) move shapes
      this.moveShapes(movingShapes, delta);

      // (2a) save old bounds of resized shapes
      forEach$1(resizingShapes, function(shape) {
        oldBounds[shape.id] = getBounds(shape);
      });

      // (2b) resize shapes
      this.resizeShapes(resizingShapes, delta, direction);

      // (3) update connection waypoints
      this.updateConnectionWaypoints(
        getWaypointsUpdatingConnections(movingShapes, resizingShapes),
        delta,
        direction,
        start,
        movingShapes,
        resizingShapes,
        oldBounds
      );
    };

    SpaceToolHandler.prototype.execute = function() {};
    SpaceToolHandler.prototype.revert = function() {};

    SpaceToolHandler.prototype.moveShapes = function(shapes, delta) {
      var self = this;

      forEach$1(shapes, function(element) {
        self._modeling.moveShape(element, delta, null, {
          autoResize: false,
          layout: false,
          recurse: false
        });
      });
    };

    SpaceToolHandler.prototype.resizeShapes = function(shapes, delta, direction) {
      var self = this;

      forEach$1(shapes, function(shape) {
        var newBounds = resizeBounds(shape, direction, delta);

        self._modeling.resizeShape(shape, newBounds, null, {
          attachSupport: false,
          autoResize: false,
          layout: false
        });
      });
    };

    /**
     * Update connections waypoints according to the rules:
     *   1. Both source and target are moved/resized => move waypoints by the delta
     *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end
     */
    SpaceToolHandler.prototype.updateConnectionWaypoints = function(
        connections,
        delta,
        direction,
        start,
        movingShapes,
        resizingShapes,
        oldBounds
    ) {
      var self = this,
          affectedShapes = movingShapes.concat(resizingShapes);

      forEach$1(connections, function(connection) {
        var source = connection.source,
            target = connection.target,
            waypoints = copyWaypoints(connection),
            axis = getAxisFromDirection(direction),
            layoutHints = {};

        if (includes(affectedShapes, source) && includes(affectedShapes, target)) {

          // move waypoints
          waypoints = map$1(waypoints, function(waypoint) {
            if (shouldMoveWaypoint(waypoint, start, direction)) {

              // move waypoint
              waypoint[ axis ] = waypoint[ axis ] + delta[ axis ];
            }

            if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {

              // move waypoint original
              waypoint.original[ axis ] = waypoint.original[ axis ] + delta[ axis ];
            }

            return waypoint;
          });

          self._modeling.updateWaypoints(connection, waypoints, {
            labelBehavior: false
          });
        } else if (includes(affectedShapes, source) || includes(affectedShapes, target)) {

          // re-layout connection with moved start/end
          if (includes(movingShapes, source)) {
            layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);
          } else if (includes(movingShapes, target)) {
            layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);
          } else if (includes(resizingShapes, source)) {
            layoutHints.connectionStart = getResizedSourceAnchor(
              connection, source, oldBounds[source.id]
            );
          } else if (includes(resizingShapes, target)) {
            layoutHints.connectionEnd = getResizedTargetAnchor(
              connection, target, oldBounds[target.id]
            );
          }

          self._modeling.layoutConnection(connection, layoutHints);
        }
      });
    };


    // helpers //////////

    function copyWaypoint(waypoint) {
      return assign$1({}, waypoint);
    }

    function copyWaypoints(connection) {
      return map$1(connection.waypoints, function(waypoint) {

        waypoint = copyWaypoint(waypoint);

        if (waypoint.original) {
          waypoint.original = copyWaypoint(waypoint.original);
        }

        return waypoint;
      });
    }

    function getAxisFromDirection(direction) {
      switch (direction) {
      case 'n':
        return 'y';
      case 'w':
        return 'x';
      case 's':
        return 'y';
      case 'e':
        return 'x';
      }
    }

    function shouldMoveWaypoint(waypoint, start, direction) {
      var relevantAxis = getAxisFromDirection(direction);

      if (/e|s/.test(direction)) {
        return waypoint[ relevantAxis ] > start;
      } else if (/n|w/.test(direction)) {
        return waypoint[ relevantAxis ] < start;
      }
    }

    function includes(array, item) {
      return array.indexOf(item) !== -1;
    }

    function getBounds(shape) {
      return {
        x: shape.x,
        y: shape.y,
        height: shape.height,
        width: shape.width
      };
    }

    /**
     * @typedef {import('../../model/Types').Shape} Shape
     *
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that toggles the collapsed state of an element
     * and the visibility of all its children.
     *
     * @param {Modeling} modeling
     */
    function ToggleShapeCollapseHandler(modeling) {
      this._modeling = modeling;
    }

    ToggleShapeCollapseHandler.$inject = [ 'modeling' ];


    ToggleShapeCollapseHandler.prototype.execute = function(context) {

      var shape = context.shape,
          children = shape.children;

      // recursively remember previous visibility of children
      context.oldChildrenVisibility = getElementsVisibilityRecursive(children);

      // toggle state
      shape.collapsed = !shape.collapsed;

      // recursively hide/show children
      var result = setHiddenRecursive(children, shape.collapsed);

      return [ shape ].concat(result);
    };


    ToggleShapeCollapseHandler.prototype.revert = function(context) {

      var shape = context.shape,
          oldChildrenVisibility = context.oldChildrenVisibility;

      var children = shape.children;

      // recursively set old visability of children
      var result = restoreVisibilityRecursive(children, oldChildrenVisibility);

      // retoggle state
      shape.collapsed = !shape.collapsed;

      return [ shape ].concat(result);
    };


    // helpers //////////////////////

    /**
     * Return a map { elementId -> hiddenState}.
     *
     * @param {Shape[]} elements
     *
     * @return {Object}
     */
    function getElementsVisibilityRecursive(elements) {

      var result = {};

      forEach$1(elements, function(element) {
        result[element.id] = element.hidden;

        if (element.children) {
          result = assign$1({}, result, getElementsVisibilityRecursive(element.children));
        }
      });

      return result;
    }


    function setHiddenRecursive(elements, newHidden) {
      var result = [];
      forEach$1(elements, function(element) {
        element.hidden = newHidden;

        result = result.concat(element);

        if (element.children) {
          result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));
        }
      });

      return result;
    }

    function restoreVisibilityRecursive(elements, lastState) {
      var result = [];
      forEach$1(elements, function(element) {
        element.hidden = lastState[element.id];

        result = result.concat(element);

        if (element.children) {
          result = result.concat(restoreVisibilityRecursive(element.children, lastState));
        }
      });

      return result;
    }

    /**
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * A handler that implements reversible attaching/detaching of shapes.
     *
     * @param {Modeling} modeling
     */
    function UpdateAttachmentHandler(modeling) {
      this._modeling = modeling;
    }

    UpdateAttachmentHandler.$inject = [ 'modeling' ];


    UpdateAttachmentHandler.prototype.execute = function(context) {
      var shape = context.shape,
          newHost = context.newHost,
          oldHost = shape.host;

      // (0) detach from old host
      context.oldHost = oldHost;
      context.attacherIdx = removeAttacher(oldHost, shape);

      // (1) attach to new host
      addAttacher(newHost, shape);

      // (2) update host
      shape.host = newHost;

      return shape;
    };

    UpdateAttachmentHandler.prototype.revert = function(context) {
      var shape = context.shape,
          newHost = context.newHost,
          oldHost = context.oldHost,
          attacherIdx = context.attacherIdx;

      // (2) update host
      shape.host = oldHost;

      // (1) attach to new host
      removeAttacher(newHost, shape);

      // (0) detach from old host
      addAttacher(oldHost, shape, attacherIdx);

      return shape;
    };


    function removeAttacher(host, attacher) {

      // remove attacher from host
      return remove$2(host && host.attachers, attacher);
    }

    function addAttacher(host, attacher, idx) {

      if (!host) {
        return;
      }

      var attachers = host.attachers;

      if (!attachers) {
        host.attachers = attachers = [];
      }

      add(attachers, attacher, idx);
    }

    function UpdateWaypointsHandler() { }

    UpdateWaypointsHandler.prototype.execute = function(context) {

      var connection = context.connection,
          newWaypoints = context.newWaypoints;

      context.oldWaypoints = connection.waypoints;

      connection.waypoints = newWaypoints;

      return connection;
    };

    UpdateWaypointsHandler.prototype.revert = function(context) {

      var connection = context.connection,
          oldWaypoints = context.oldWaypoints;

      connection.waypoints = oldWaypoints;

      return connection;
    };

    /**
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Connection} Connection
     * @typedef {import('../../model/Types').Parent} Parent
     * @typedef {import('../../model/Types').Shape} Shape
     * @typedef {import('../../model/Types').Label} Label
     *
     * @typedef {import('../../command/CommandStack').default} CommandStack
     * @typedef {import('../../core/ElementFactory').default} ElementFactory
     * @typedef {import('../../core/EventBus').default} EventBus
     *
     * @typedef {import('../../command/CommandStack').CommandHandlerConstructor} CommandHandlerConstructor
     *
     * @typedef {import('../../util/Types').Dimensions} Dimensions
     * @typedef {import('../../util/Types').Direction} Direction
     * @typedef {import('../../util/Types').Point} Point
     * @typedef {import('../../util/Types').Rect} Rect
     *
     * @typedef { 'x' | 'y' } ModelingDistributeAxis
     *
     * @typedef { 'width' | 'height' } ModelingDistributeDimension
     *
     * @typedef { {
     *   bottom?: number;
     *   center?: number;
     *   left?: number;
     *   middle?: number;
     *   right?: number;
     *   top?: number;
     * } } ModelingAlignAlignment
     *
     * @typedef { {
     *   [key: string]: any;
     * } } ModelingHints
     *
     * @typedef { {
     *   attach?: boolean;
     * } & ModelingHints } ModelingMoveElementsHints
     *
     * @typedef { {
     *   attach?: boolean;
     * } & ModelingHints } ModelingCreateShapeHints
     */

    /**
     * @template {Element} U
     *
     * @typedef { {
     *   elements: U[],
     *   range: {
     *     min: number;
     *     max: number;
     *   } }
     * } ModelingDistributeGroup
     */

    /**
     * The basic modeling entry point.
     *
     * @template {Connection} [T=Connection]
     * @template {Element} [U=Element]
     * @template {Label} [V=Label]
     * @template {Parent} [W=Parent]
     * @template {Shape} [X=Shape]
     *
     * @param {EventBus} eventBus
     * @param {ElementFactory} elementFactory
     * @param {CommandStack} commandStack
     */
    function Modeling$1(eventBus, elementFactory, commandStack) {
      this._eventBus = eventBus;
      this._elementFactory = elementFactory;
      this._commandStack = commandStack;

      var self = this;

      eventBus.on('diagram.init', function() {

        // register modeling handlers
        self.registerHandlers(commandStack);
      });
    }

    Modeling$1.$inject = [ 'eventBus', 'elementFactory', 'commandStack' ];

    /**
     * Get a map of all command handlers.
     *
     * @return {Map<string, CommandHandlerConstructor>}
     */
    Modeling$1.prototype.getHandlers = function() {
      return {
        'shape.append': AppendShapeHandler,
        'shape.create': CreateShapeHandler,
        'shape.delete': DeleteShapeHandler,
        'shape.move': MoveShapeHandler,
        'shape.resize': ResizeShapeHandler,
        'shape.replace': ReplaceShapeHandler,
        'shape.toggleCollapse': ToggleShapeCollapseHandler,

        'spaceTool': SpaceToolHandler,

        'label.create': CreateLabelHandler,

        'connection.create': CreateConnectionHandler,
        'connection.delete': DeleteConnectionHandler,
        'connection.move': MoveConnectionHandler,
        'connection.layout': LayoutConnectionHandler,

        'connection.updateWaypoints': UpdateWaypointsHandler,

        'connection.reconnect': ReconnectConnectionHandler,

        'elements.create': CreateElementsHandler,
        'elements.move': MoveElementsHandler,
        'elements.delete': DeleteElementsHandler,

        'elements.distribute': DistributeElements,
        'elements.align': AlignElements,

        'element.updateAttachment': UpdateAttachmentHandler
      };
    };

    /**
     * Register handlers with the command stack
     *
     * @param {CommandStack} commandStack
     */
    Modeling$1.prototype.registerHandlers = function(commandStack) {
      forEach$1(this.getHandlers(), function(handler, id) {
        commandStack.registerHandler(id, handler);
      });
    };


    /**
     * Move a shape by the given delta and optionally to a new parent.
     *
     * @param {X} shape
     * @param {Point} delta
     * @param {W} [newParent]
     * @param {number} [newParentIndex]
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.moveShape = function(shape, delta, newParent, newParentIndex, hints) {

      if (typeof newParentIndex === 'object') {
        hints = newParentIndex;
        newParentIndex = null;
      }

      var context = {
        shape: shape,
        delta:  delta,
        newParent: newParent,
        newParentIndex: newParentIndex,
        hints: hints || {}
      };

      this._commandStack.execute('shape.move', context);
    };


    /**
     * Update the attachment of a shape.
     *
     * @param {X} shape
     * @param {X} [newHost=undefined]
     */
    Modeling$1.prototype.updateAttachment = function(shape, newHost) {
      var context = {
        shape: shape,
        newHost: newHost
      };

      this._commandStack.execute('element.updateAttachment', context);
    };


    /**
     * Move elements by a given delta and optionally to a new parent.
     *
     * @param {U[]} shapes
     * @param {Point} delta
     * @param {W} [target]
     * @param {ModelingMoveElementsHints} [hints]
     */
    Modeling$1.prototype.moveElements = function(shapes, delta, target, hints) {

      hints = hints || {};

      var attach = hints.attach;

      var newParent = target,
          newHost;

      if (attach === true) {
        newHost = target;
        newParent = target.parent;
      } else

      if (attach === false) {
        newHost = null;
      }

      var context = {
        shapes: shapes,
        delta: delta,
        newParent: newParent,
        newHost: newHost,
        hints: hints
      };

      this._commandStack.execute('elements.move', context);
    };

    /**
     * Move a shape by the given delta and optionally to a new parent.
     *
     * @param {T} connection
     * @param {Point} delta
     * @param {W} [newParent]
     * @param {number} [newParentIndex]
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.moveConnection = function(connection, delta, newParent, newParentIndex, hints) {

      if (typeof newParentIndex === 'object') {
        hints = newParentIndex;
        newParentIndex = undefined;
      }

      var context = {
        connection: connection,
        delta: delta,
        newParent: newParent,
        newParentIndex: newParentIndex,
        hints: hints || {}
      };

      this._commandStack.execute('connection.move', context);
    };

    /**
     * Layout a connection.
     *
     * @param {T} connection
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.layoutConnection = function(connection, hints) {
      var context = {
        connection: connection,
        hints: hints || {}
      };

      this._commandStack.execute('connection.layout', context);
    };

    /**
     * Create a connection.
     *
     * @overlord
     *
     * @param {U} source
     * @param {U} target
     * @param {Partial<T>} connection
     * @param {W} parent
     * @param {ModelingHints} [hints]
     *
     * @return {T}
     */

    /**
     * Create a connection.
     *
     * @param {U} source
     * @param {U} target
     * @param {number} parentIndex
     * @param {Partial<T>} connection
     * @param {W} parent
     * @param {ModelingHints} [hints]
     *
     * @return {T}
     */
    Modeling$1.prototype.createConnection = function(source, target, parentIndex, connection, parent, hints) {

      if (typeof parentIndex === 'object') {
        hints = parent;
        parent = connection;
        connection = parentIndex;
        parentIndex = undefined;
      }

      connection = this._create('connection', connection);

      var context = {
        source: source,
        target: target,
        parent: parent,
        parentIndex: parentIndex,
        connection: connection,
        hints: hints
      };

      this._commandStack.execute('connection.create', context);

      return context.connection;
    };


    /**
     * Create a shape.
     *
     * @overlord
     *
     * @param {Partial<X>} shape
     * @param {Point} position
     * @param {W} target
     * @param {ModelingCreateShapeHints} [hints]
     *
     * @return {X}
     */

    /**
     * Create a shape.
     *
     * @param {Partial<X>} shape
     * @param {Point} position
     * @param {W} target
     * @param {number} parentIndex
     * @param {ModelingCreateShapeHints} [hints]
     *
     * @return {X}
     */
    Modeling$1.prototype.createShape = function(shape, position, target, parentIndex, hints) {

      if (typeof parentIndex !== 'number') {
        hints = parentIndex;
        parentIndex = undefined;
      }

      hints = hints || {};

      var attach = hints.attach,
          parent,
          host;

      shape = this._create('shape', shape);

      if (attach) {
        parent = target.parent;
        host = target;
      } else {
        parent = target;
      }

      var context = {
        position: position,
        shape: shape,
        parent: parent,
        parentIndex: parentIndex,
        host: host,
        hints: hints
      };

      this._commandStack.execute('shape.create', context);

      return context.shape;
    };

    /**
     * Create elements.
     *
     * @param {Partial<U>[]} elements
     * @param {Point} position
     * @param {W} parent
     * @param {number} [parentIndex]
     * @param {ModelingHints} [hints]
     *
     * @return {U[]}
     */
    Modeling$1.prototype.createElements = function(elements, position, parent, parentIndex, hints) {
      if (!isArray$5(elements)) {
        elements = [ elements ];
      }

      if (typeof parentIndex !== 'number') {
        hints = parentIndex;
        parentIndex = undefined;
      }

      hints = hints || {};

      var context = {
        position: position,
        elements: elements,
        parent: parent,
        parentIndex: parentIndex,
        hints: hints
      };

      this._commandStack.execute('elements.create', context);

      return context.elements;
    };

    /**
     * Create a label.
     *
     * @param {U} labelTarget
     * @param {Point} position
     * @param {Partial<V>} label
     * @param {W} [parent]
     *
     * @return {V}
     */
    Modeling$1.prototype.createLabel = function(labelTarget, position, label, parent) {

      label = this._create('label', label);

      var context = {
        labelTarget: labelTarget,
        position: position,
        parent: parent || labelTarget.parent,
        shape: label
      };

      this._commandStack.execute('label.create', context);

      return context.shape;
    };


    /**
     * Create and connect a shape to a source.
     *
     * @param {U} source
     * @param {Partial<X>} shape
     * @param {Point} position
     * @param {W} target
     * @param {ModelingHints} [hints]
     *
     * @return {X}
     */
    Modeling$1.prototype.appendShape = function(source, shape, position, target, hints) {

      hints = hints || {};

      shape = this._create('shape', shape);

      var context = {
        source: source,
        position: position,
        target: target,
        shape: shape,
        connection: hints.connection,
        connectionParent: hints.connectionParent,
        hints: hints
      };

      this._commandStack.execute('shape.append', context);

      return context.shape;
    };

    /**
     * Remove elements.
     *
     * @param {U[]} elements
     */
    Modeling$1.prototype.removeElements = function(elements) {
      var context = {
        elements: elements
      };

      this._commandStack.execute('elements.delete', context);
    };

    /**
     * Distribute elements along a given axis.
     *
     * @param {ModelingDistributeGroup<U>[]} groups
     * @param {ModelingDistributeAxis} axis
     * @param {ModelingDistributeDimension} dimension
     */
    Modeling$1.prototype.distributeElements = function(groups, axis, dimension) {
      var context = {
        groups: groups,
        axis: axis,
        dimension: dimension
      };

      this._commandStack.execute('elements.distribute', context);
    };

    /**
     * Remove a shape.
     *
     * @param {X} shape
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.removeShape = function(shape, hints) {
      var context = {
        shape: shape,
        hints: hints || {}
      };

      this._commandStack.execute('shape.delete', context);
    };

    /**
     * Remove a connection.
     *
     * @param {T} connection
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.removeConnection = function(connection, hints) {
      var context = {
        connection: connection,
        hints: hints || {}
      };

      this._commandStack.execute('connection.delete', context);
    };

    /**
     * Replace a shape.
     *
     * @param {X} oldShape
     * @param {Partial<X>} newShape
     * @param {ModelingHints} [hints]
     *
     * @return {X}
     */
    Modeling$1.prototype.replaceShape = function(oldShape, newShape, hints) {
      var context = {
        oldShape: oldShape,
        newData: newShape,
        hints: hints || {}
      };

      this._commandStack.execute('shape.replace', context);

      return context.newShape;
    };

    /**
     * Align elements.
     *
     * @param {U[]} elements
     * @param {ModelingAlignAlignment} alignment
     */
    Modeling$1.prototype.alignElements = function(elements, alignment) {
      var context = {
        elements: elements,
        alignment: alignment
      };

      this._commandStack.execute('elements.align', context);
    };

    /**
     * Resize a shape.
     *
     * @param {X} shape
     * @param {Rect} newBounds
     * @param {Dimensions} [minBounds]
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.resizeShape = function(shape, newBounds, minBounds, hints) {
      var context = {
        shape: shape,
        newBounds: newBounds,
        minBounds: minBounds,
        hints: hints
      };

      this._commandStack.execute('shape.resize', context);
    };

    /**
     * Create space along an horizontally or vertically.
     *
     * @param {X[]} movingShapes
     * @param {X[]} resizingShapes
     * @param {Point} delta
     * @param {Direction} direction
     * @param {number} start
     */
    Modeling$1.prototype.createSpace = function(movingShapes, resizingShapes, delta, direction, start) {
      var context = {
        delta: delta,
        direction: direction,
        movingShapes: movingShapes,
        resizingShapes: resizingShapes,
        start: start
      };

      this._commandStack.execute('spaceTool', context);
    };

    /**
     * Update a connetions waypoints.
     *
     * @param {T} connection
     * @param {Point[]} newWaypoints
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.updateWaypoints = function(connection, newWaypoints, hints) {
      var context = {
        connection: connection,
        newWaypoints: newWaypoints,
        hints: hints || {}
      };

      this._commandStack.execute('connection.updateWaypoints', context);
    };

    /**
     * Reconnect a connections source and/or target.
     *
     * @param {T} connection
     * @param {U} source
     * @param {U} target
     * @param {Point|Point[]} dockingOrPoints
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.reconnect = function(connection, source, target, dockingOrPoints, hints) {
      var context = {
        connection: connection,
        newSource: source,
        newTarget: target,
        dockingOrPoints: dockingOrPoints,
        hints: hints || {}
      };

      this._commandStack.execute('connection.reconnect', context);
    };

    /**
     * Reconnect a connections source.
     *
     * @param {T} connection
     * @param {U} newSource
     * @param {Point|Point[]} dockingOrPoints
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.reconnectStart = function(connection, newSource, dockingOrPoints, hints) {
      if (!hints) {
        hints = {};
      }

      this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign$1(hints, {
        docking: 'source'
      }));
    };

    /**
     * Reconnect a connections target.
     *
     * @param {T} connection
     * @param {U} newTarget
     * @param {Point|Point[]} dockingOrPoints
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.reconnectEnd = function(connection, newTarget, dockingOrPoints, hints) {
      if (!hints) {
        hints = {};
      }

      this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign$1(hints, {
        docking: 'target'
      }));
    };

    /**
     * Connect two elements.
     *
     * @param {U} source
     * @param {U} target
     * @param {Partial<T>} [attrs]
     * @param {ModelingHints} [hints]
     *
     * @return {T}
     */
    Modeling$1.prototype.connect = function(source, target, attrs, hints) {
      return this.createConnection(source, target, attrs || {}, source.parent, hints);
    };

    Modeling$1.prototype._create = function(type, attrs) {
      if (isModelElement(attrs)) {
        return attrs;
      } else {
        return this._elementFactory.create(type, attrs);
      }
    };

    /**
     * Collapse or expand a shape.
     *
     * @param {X} shape
     * @param {ModelingHints} [hints]
     */
    Modeling$1.prototype.toggleCollapse = function(shape, hints) {
      var context = {
        shape: shape,
        hints: hints || {}
      };

      this._commandStack.execute('shape.toggleCollapse', context);
    };

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     *
     * @typedef {import('../../../model/Types').Shape} Shape
     * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
     */

    /**
     * @implements {CommandHandler}
     *
     * @param {ElementRegistry} elementRegistry
     */
    function UpdateModdlePropertiesHandler(elementRegistry) {
      this._elementRegistry = elementRegistry;
    }

    UpdateModdlePropertiesHandler.$inject = [ 'elementRegistry' ];

    UpdateModdlePropertiesHandler.prototype.execute = function(context) {

      var element = context.element,
          moddleElement = context.moddleElement,
          properties = context.properties;

      if (!moddleElement) {
        throw new Error('<moddleElement> required');
      }

      // TODO(nikku): we need to ensure that ID properties
      // are properly registered / unregistered via
      // this._moddle.ids.assigned(id)
      var changed = context.changed || this._getVisualReferences(moddleElement).concat(element);
      var oldProperties = context.oldProperties || getModdleProperties(moddleElement, keys(properties));

      setModdleProperties(moddleElement, properties);

      context.oldProperties = oldProperties;
      context.changed = changed;

      return changed;
    };

    UpdateModdlePropertiesHandler.prototype.revert = function(context) {
      var oldProperties = context.oldProperties,
          moddleElement = context.moddleElement,
          changed = context.changed;

      setModdleProperties(moddleElement, oldProperties);

      return changed;
    };

    /**
     * Return visual references of given moddle element within the diagram.
     *
     * @param {ModdleElement} moddleElement
     *
     * @return {Shape[]}
     */
    UpdateModdlePropertiesHandler.prototype._getVisualReferences = function(moddleElement) {

      var elementRegistry = this._elementRegistry;

      if (is$2(moddleElement, 'bpmn:DataObject')) {
        return getAllDataObjectReferences(moddleElement, elementRegistry);
      }

      return [];
    };


    // helpers /////////////////

    function getModdleProperties(moddleElement, propertyNames) {
      return reduce(propertyNames, function(result, key) {
        result[key] = moddleElement.get(key);
        return result;
      }, {});
    }

    function setModdleProperties(moddleElement, properties) {
      forEach$1(properties, function(value, key) {
        moddleElement.set(key, value);
      });
    }

    function getAllDataObjectReferences(dataObject, elementRegistry) {
      return elementRegistry.filter(function(element) {
        return (
          is$2(element, 'bpmn:DataObjectReference') &&
              getBusinessObject(element).dataObjectRef === dataObject
        );
      });
    }

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     * @typedef {import('diagram-js/lib/command/CommandStack').CommandContext} CommandContext
     *
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../../model/Types').Moddle} Moddle
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('../../../draw/TextRenderer').default} TextRenderer
     *
     * @typedef {import('../../../model/Types').Element} Element
     */

    var DEFAULT_FLOW = 'default',
        ID = 'id',
        DI = 'di';

    var NULL_DIMENSIONS$1 = {
      width: 0,
      height: 0
    };

    /**
     * A handler that implements a BPMN 2.0 property update.
     *
     * This should be used to set simple properties on elements with
     * an underlying BPMN business object.
     *
     * Use respective diagram-js provided handlers if you would
     * like to perform automated modeling.
     *
     * @implements {CommandHandler}
     *
     * @param {ElementRegistry} elementRegistry
     * @param {Moddle} moddle
     * @param {Translate} translate
     * @param {Modeling} modeling
     * @param {TextRenderer} textRenderer
     */
    function UpdatePropertiesHandler(
        elementRegistry, moddle, translate,
        modeling, textRenderer) {

      this._elementRegistry = elementRegistry;
      this._moddle = moddle;
      this._translate = translate;
      this._modeling = modeling;
      this._textRenderer = textRenderer;
    }

    UpdatePropertiesHandler.$inject = [
      'elementRegistry',
      'moddle',
      'translate',
      'modeling',
      'textRenderer'
    ];


    // api //////////////////////

    /**
     * Update a BPMN element's properties.
     *
     * @param { {
     *   element: Element;
     *   properties: Record<string, any>;
     * } & CommandContext } context
     *
     * @return {Element[]}
     */
    UpdatePropertiesHandler.prototype.execute = function(context) {

      var element = context.element,
          changed = [ element ],
          translate = this._translate;

      if (!element) {
        throw new Error(translate('element required'));
      }

      var elementRegistry = this._elementRegistry,
          ids = this._moddle.ids;

      var businessObject = element.businessObject,
          properties = unwrapBusinessObjects(context.properties),
          oldProperties = context.oldProperties || getProperties(element, properties);

      if (isIdChange(properties, businessObject)) {
        ids.unclaim(businessObject[ID]);

        elementRegistry.updateId(element, properties[ID]);

        ids.claim(properties[ID], businessObject);
      }

      // correctly indicate visual changes on default flow updates
      if (DEFAULT_FLOW in properties) {

        if (properties[DEFAULT_FLOW]) {
          changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));
        }

        if (businessObject[DEFAULT_FLOW]) {
          changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));
        }
      }

      // update properties
      setProperties(element, properties);

      // store old values
      context.oldProperties = oldProperties;
      context.changed = changed;

      // indicate changed on objects affected by the update
      return changed;
    };


    UpdatePropertiesHandler.prototype.postExecute = function(context) {
      var element = context.element,
          label = element.label;

      var text = label && getBusinessObject(label).name;

      if (!text) {
        return;
      }

      // get layouted text bounds and resize external
      // external label accordingly
      var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);

      this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS$1);
    };

    /**
     * Revert updating a BPMN element's properties.
     *
     * @param { {
     *   element: Element;
     *   properties: Record<string, any>;
     *   oldProperties: Record<string, any>;
     * } & CommandContext } context
     *
     * @return {Element[]}
     */
    UpdatePropertiesHandler.prototype.revert = function(context) {

      var element = context.element,
          properties = context.properties,
          oldProperties = context.oldProperties,
          businessObject = element.businessObject,
          elementRegistry = this._elementRegistry,
          ids = this._moddle.ids;

      // update properties
      setProperties(element, oldProperties);

      if (isIdChange(properties, businessObject)) {
        ids.unclaim(properties[ID]);

        elementRegistry.updateId(element, oldProperties[ID]);

        ids.claim(oldProperties[ID], businessObject);
      }

      return context.changed;
    };


    function isIdChange(properties, businessObject) {
      return ID in properties && properties[ID] !== businessObject[ID];
    }


    function getProperties(element, properties) {
      var propertyNames = keys(properties),
          businessObject = element.businessObject,
          di = getDi(element);

      return reduce(propertyNames, function(result, key) {

        // handle DI separately
        if (key !== DI) {
          result[key] = businessObject.get(key);

        } else {
          result[key] = getDiProperties(di, keys(properties.di));
        }

        return result;
      }, {});
    }


    function getDiProperties(di, propertyNames) {
      return reduce(propertyNames, function(result, key) {
        result[key] = di && di.get(key);

        return result;
      }, {});
    }


    function setProperties(element, properties) {
      var businessObject = element.businessObject,
          di = getDi(element);

      forEach$1(properties, function(value, key) {

        if (key !== DI) {
          businessObject.set(key, value);
        } else {

          // only update, if di exists
          if (di) {
            setDiProperties(di, value);
          }
        }
      });
    }


    function setDiProperties(di, properties) {
      forEach$1(properties, function(value, key) {
        di.set(key, value);
      });
    }


    var referencePropertyNames = [ 'default' ];

    /**
     * Make sure we unwrap the actual business object behind diagram element that
     * may have been passed as arguments.
     *
     * @param  {Record<string, any>} properties
     *
     * @return {Record<string, any>} unwrappedProps
     */
    function unwrapBusinessObjects(properties) {

      var unwrappedProps = assign$1({}, properties);

      referencePropertyNames.forEach(function(name) {
        if (name in properties) {
          unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);
        }
      });

      return unwrappedProps;
    }

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('../Modeling').default} Modeling
     */

    /**
     * @implements {CommandHandler}
     *
     * @param {Canvas} canvas
     * @param {Modeling} modeling
     */
    function UpdateCanvasRootHandler(canvas, modeling) {
      this._canvas = canvas;
      this._modeling = modeling;
    }

    UpdateCanvasRootHandler.$inject = [
      'canvas',
      'modeling'
    ];


    UpdateCanvasRootHandler.prototype.execute = function(context) {

      var canvas = this._canvas;

      var newRoot = context.newRoot,
          newRootBusinessObject = newRoot.businessObject,
          oldRoot = canvas.getRootElement(),
          oldRootBusinessObject = oldRoot.businessObject,
          bpmnDefinitions = oldRootBusinessObject.$parent,
          diPlane = getDi(oldRoot);

      // (1) replace process old <> new root
      canvas.setRootElement(newRoot);
      canvas.removeRootElement(oldRoot);

      // (2) update root elements
      add(bpmnDefinitions.rootElements, newRootBusinessObject);
      newRootBusinessObject.$parent = bpmnDefinitions;

      remove$2(bpmnDefinitions.rootElements, oldRootBusinessObject);
      oldRootBusinessObject.$parent = null;

      // (3) wire di
      oldRoot.di = null;

      diPlane.bpmnElement = newRootBusinessObject;
      newRoot.di = diPlane;

      context.oldRoot = oldRoot;

      // TODO(nikku): return changed elements?
      // return [ newRoot, oldRoot ];
      return [];
    };


    UpdateCanvasRootHandler.prototype.revert = function(context) {

      var canvas = this._canvas;

      var newRoot = context.newRoot,
          newRootBusinessObject = newRoot.businessObject,
          oldRoot = context.oldRoot,
          oldRootBusinessObject = oldRoot.businessObject,
          bpmnDefinitions = newRootBusinessObject.$parent,
          diPlane = getDi(newRoot);

      // (1) replace process old <> new root
      canvas.setRootElement(oldRoot);
      canvas.removeRootElement(newRoot);

      // (2) update root elements
      remove$2(bpmnDefinitions.rootElements, newRootBusinessObject);
      newRootBusinessObject.$parent = null;

      add(bpmnDefinitions.rootElements, oldRootBusinessObject);
      oldRootBusinessObject.$parent = bpmnDefinitions;

      // (3) wire di
      newRoot.di = null;

      diPlane.bpmnElement = oldRootBusinessObject;
      oldRoot.di = diPlane;

      // TODO(nikku): return changed elements?
      // return [ newRoot, oldRoot ];

      return [];
    };

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool
     */

    /**
     * A handler that allows us to add a new lane
     * above or below an existing one.
     *
     * @implements {CommandHandler}
     *
     * @param {Modeling} modeling
     * @param {SpaceTool} spaceTool
     */
    function AddLaneHandler(modeling, spaceTool) {
      this._modeling = modeling;
      this._spaceTool = spaceTool;
    }

    AddLaneHandler.$inject = [
      'modeling',
      'spaceTool'
    ];


    AddLaneHandler.prototype.preExecute = function(context) {

      var spaceTool = this._spaceTool,
          modeling = this._modeling;

      var shape = context.shape,
          location = context.location;

      var lanesRoot = getLanesRoot(shape);

      var isRoot = lanesRoot === shape,
          laneParent = isRoot ? shape : shape.parent;

      var existingChildLanes = getChildLanes(laneParent);

      // (0) add a lane if we currently got none and are adding to root
      if (!existingChildLanes.length) {
        modeling.createShape({ type: 'bpmn:Lane' }, {
          x: shape.x + LANE_INDENTATION,
          y: shape.y,
          width: shape.width - LANE_INDENTATION,
          height: shape.height
        }, laneParent);
      }

      // (1) collect affected elements to create necessary space
      var allAffected = [];

      eachElement(lanesRoot, function(element) {
        allAffected.push(element);

        // handle element labels in the diagram root
        if (element.label) {
          allAffected.push(element.label);
        }

        if (element === shape) {
          return [];
        }

        return filter(element.children, function(c) {
          return c !== shape;
        });
      });

      var offset = location === 'top' ? -120 : 120,
          lanePosition = location === 'top' ? shape.y : shape.y + shape.height,
          spacePos = lanePosition + (location === 'top' ? 10 : -10),
          direction = location === 'top' ? 'n' : 's';

      var adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);

      spaceTool.makeSpace(
        adjustments.movingShapes,
        adjustments.resizingShapes,
        { x: 0, y: offset },
        direction,
        spacePos
      );

      // (2) create new lane at open space
      context.newLane = modeling.createShape({ type: 'bpmn:Lane' }, {
        x: shape.x + (isRoot ? LANE_INDENTATION : 0),
        y: lanePosition - (location === 'top' ? 120 : 0),
        width: shape.width - (isRoot ? LANE_INDENTATION : 0),
        height: 120
      }, laneParent);
    };

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     */

    /**
     * A handler that splits a lane into a number of sub-lanes,
     * creating new sub lanes, if necessary.
     *
     * @implements {CommandHandler}
     *
     * @param {Modeling} modeling
     * @param {Translate} translate
     */
    function SplitLaneHandler(modeling, translate) {
      this._modeling = modeling;
      this._translate = translate;
    }

    SplitLaneHandler.$inject = [
      'modeling',
      'translate'
    ];


    SplitLaneHandler.prototype.preExecute = function(context) {

      var modeling = this._modeling,
          translate = this._translate;

      var shape = context.shape,
          newLanesCount = context.count;

      var childLanes = getChildLanes(shape),
          existingLanesCount = childLanes.length;

      if (existingLanesCount > newLanesCount) {
        throw new Error(translate('more than {count} child lanes', { count: newLanesCount }));
      }

      var newLanesHeight = Math.round(shape.height / newLanesCount);

      // Iterate from top to bottom in child lane order,
      // resizing existing lanes and creating new ones
      // so that they split the parent proportionally.
      //
      // Due to rounding related errors, the bottom lane
      // needs to take up all the remaining space.
      var laneY,
          laneHeight,
          laneBounds,
          newLaneAttrs,
          idx;

      for (idx = 0; idx < newLanesCount; idx++) {

        laneY = shape.y + idx * newLanesHeight;

        // if bottom lane
        if (idx === newLanesCount - 1) {
          laneHeight = shape.height - (newLanesHeight * idx);
        } else {
          laneHeight = newLanesHeight;
        }

        laneBounds = {
          x: shape.x + LANE_INDENTATION,
          y: laneY,
          width: shape.width - LANE_INDENTATION,
          height: laneHeight
        };

        if (idx < existingLanesCount) {

          // resize existing lane
          modeling.resizeShape(childLanes[idx], laneBounds);
        } else {

          // create a new lane at position
          newLaneAttrs = {
            type: 'bpmn:Lane'
          };

          modeling.createShape(newLaneAttrs, laneBounds, shape);
        }
      }
    };

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('../Modeling').default} Modeling
     * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool
     *
     * @typedef {import('../../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     */

    /**
     * A handler that resizes a lane.
     *
     * @implements {CommandHandler}
     *
     * @param {Modeling} modeling
     * @param {SpaceTool} spaceTool
     */
    function ResizeLaneHandler(modeling, spaceTool) {
      this._modeling = modeling;
      this._spaceTool = spaceTool;
    }

    ResizeLaneHandler.$inject = [
      'modeling',
      'spaceTool'
    ];


    ResizeLaneHandler.prototype.preExecute = function(context) {

      var shape = context.shape,
          newBounds = context.newBounds,
          balanced = context.balanced;

      if (balanced !== false) {
        this.resizeBalanced(shape, newBounds);
      } else {
        this.resizeSpace(shape, newBounds);
      }
    };


    /**
     * Resize balanced, adjusting next / previous lane sizes.
     *
     * @param {Shape} shape
     * @param {Rect} newBounds
     */
    ResizeLaneHandler.prototype.resizeBalanced = function(shape, newBounds) {

      var modeling = this._modeling;

      var resizeNeeded = computeLanesResize(shape, newBounds);

      // resize the lane
      modeling.resizeShape(shape, newBounds);

      // resize other lanes as needed
      resizeNeeded.forEach(function(r) {
        modeling.resizeShape(r.shape, r.newBounds);
      });
    };


    /**
     * Resize, making actual space and moving below / above elements.
     *
     * @param {Shape} shape
     * @param {Rect} newBounds
     */
    ResizeLaneHandler.prototype.resizeSpace = function(shape, newBounds) {
      var spaceTool = this._spaceTool;

      var shapeTrbl = asTRBL(shape),
          newTrbl = asTRBL(newBounds);

      var trblDiff = substractTRBL(newTrbl, shapeTrbl);

      var lanesRoot = getLanesRoot(shape);

      var allAffected = [],
          allLanes = [];

      eachElement(lanesRoot, function(element) {
        allAffected.push(element);

        if (is$2(element, 'bpmn:Lane') || is$2(element, 'bpmn:Participant')) {
          allLanes.push(element);
        }

        return element.children;
      });

      var change,
          spacePos,
          direction,
          offset,
          adjustments;

      if (trblDiff.bottom || trblDiff.top) {

        change = trblDiff.bottom || trblDiff.top;
        spacePos = shape.y + (trblDiff.bottom ? shape.height : 0) + (trblDiff.bottom ? -10 : 10);
        direction = trblDiff.bottom ? 's' : 'n';

        offset = trblDiff.top > 0 || trblDiff.bottom < 0 ? -change : change;

        adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);

        spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: 0, y: change }, direction);
      }


      if (trblDiff.left || trblDiff.right) {

        change = trblDiff.right || trblDiff.left;
        spacePos = shape.x + (trblDiff.right ? shape.width : 0) + (trblDiff.right ? -10 : 100);
        direction = trblDiff.right ? 'e' : 'w';

        offset = trblDiff.left > 0 || trblDiff.right < 0 ? -change : change;

        adjustments = spaceTool.calculateAdjustments(allLanes, 'x', offset, spacePos);

        spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: change, y: 0 }, direction);
      }
    };

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     *
     * @typedef {import('../../../model/Types').Shape} Shape
     */

    var FLOW_NODE_REFS_ATTR = 'flowNodeRef',
        LANES_ATTR = 'lanes';


    /**
     * A handler that updates lane refs on changed elements.
     *
     * @implements {CommandHandler}
     *
     * @param {ElementRegistry} elementRegistry
     */
    function UpdateFlowNodeRefsHandler(elementRegistry) {
      this._elementRegistry = elementRegistry;
    }

    UpdateFlowNodeRefsHandler.$inject = [
      'elementRegistry'
    ];

    /**
     * @param {Shape} flowNodeShapes
     * @param {Shape} laneShapes
     *
     * @return { {
     *   flowNode: Shape;
     *   add: Shape[];
     *   remove: Shape[];
     * }[] }
     */
    UpdateFlowNodeRefsHandler.prototype._computeUpdates = function(flowNodeShapes, laneShapes) {

      var handledNodes = [];

      var updates = [];

      var participantCache = {};

      var allFlowNodeShapes = [];

      function isInLaneShape(element, laneShape) {

        var laneTrbl = asTRBL(laneShape);

        var elementMid = {
          x: element.x + element.width / 2,
          y: element.y + element.height / 2
        };

        return elementMid.x > laneTrbl.left &&
               elementMid.x < laneTrbl.right &&
               elementMid.y > laneTrbl.top &&
               elementMid.y < laneTrbl.bottom;
      }

      function addFlowNodeShape(flowNodeShape) {
        if (handledNodes.indexOf(flowNodeShape) === -1) {
          allFlowNodeShapes.push(flowNodeShape);
          handledNodes.push(flowNodeShape);
        }
      }

      function getAllLaneShapes(flowNodeShape) {

        var root = getLanesRoot(flowNodeShape);

        if (!participantCache[root.id]) {
          participantCache[root.id] = collectLanes(root);
        }

        return participantCache[root.id];
      }

      function getNewLanes(flowNodeShape) {
        if (!flowNodeShape.parent) {
          return [];
        }

        var allLaneShapes = getAllLaneShapes(flowNodeShape);

        return allLaneShapes.filter(function(l) {
          return isInLaneShape(flowNodeShape, l);
        }).map(function(shape) {
          return shape.businessObject;
        });
      }

      laneShapes.forEach(function(laneShape) {
        var root = getLanesRoot(laneShape);

        if (!root || handledNodes.indexOf(root) !== -1) {
          return;
        }

        var children = root.children.filter(function(c) {
          return is$2(c, 'bpmn:FlowNode');
        });

        children.forEach(addFlowNodeShape);

        handledNodes.push(root);
      });

      flowNodeShapes.forEach(addFlowNodeShape);


      allFlowNodeShapes.forEach(function(flowNodeShape) {

        var flowNode = flowNodeShape.businessObject;

        var lanes = flowNode.get(LANES_ATTR),
            remove = lanes.slice(),
            add = getNewLanes(flowNodeShape);

        updates.push({ flowNode: flowNode, remove: remove, add: add });
      });

      laneShapes.forEach(function(laneShape) {

        var lane = laneShape.businessObject;

        // lane got removed XX-)
        if (!laneShape.parent) {
          lane.get(FLOW_NODE_REFS_ATTR).forEach(function(flowNode) {
            updates.push({ flowNode: flowNode, remove: [ lane ], add: [] });
          });
        }
      });

      return updates;
    };

    UpdateFlowNodeRefsHandler.prototype.execute = function(context) {

      var updates = context.updates;

      if (!updates) {
        updates = context.updates = this._computeUpdates(context.flowNodeShapes, context.laneShapes);
      }


      updates.forEach(function(update) {

        var flowNode = update.flowNode,
            lanes = flowNode.get(LANES_ATTR);

        // unwire old
        update.remove.forEach(function(oldLane) {
          remove$2(lanes, oldLane);
          remove$2(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);
        });

        // wire new
        update.add.forEach(function(newLane) {
          add(lanes, newLane);
          add(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);
        });
      });

      // TODO(nikku): return changed elements
      // return [ ... ];

      return [];
    };


    UpdateFlowNodeRefsHandler.prototype.revert = function(context) {

      var updates = context.updates;

      updates.forEach(function(update) {

        var flowNode = update.flowNode,
            lanes = flowNode.get(LANES_ATTR);

        // unwire new
        update.add.forEach(function(newLane) {
          remove$2(lanes, newLane);
          remove$2(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);
        });

        // wire old
        update.remove.forEach(function(oldLane) {
          add(lanes, oldLane);
          add(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);
        });
      });

      // TODO(nikku): return changed elements
      // return [ ... ];

      return [];
    };

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('../../../model/Types').Moddle} Moddle
     */

    /**
     * @implements {CommandHandler}
     *
     * @param {Moddle} moddle
     */
    function IdClaimHandler(moddle) {
      this._moddle = moddle;
    }

    IdClaimHandler.$inject = [ 'moddle' ];


    IdClaimHandler.prototype.execute = function(context) {
      var ids = this._moddle.ids,
          id = context.id,
          element = context.element,
          claiming = context.claiming;

      if (claiming) {
        ids.claim(id, element);
      } else {
        ids.unclaim(id);
      }

      return [];
    };

    /**
     * Command revert implementation.
     */
    IdClaimHandler.prototype.revert = function(context) {
      var ids = this._moddle.ids,
          id = context.id,
          element = context.element,
          claiming = context.claiming;

      if (claiming) {
        ids.unclaim(id);
      } else {
        ids.claim(id, element);
      }

      return [];
    };

    /**
     * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler
     *
     * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack
     *
     * @typedef {import('../../../model/Types').ModdleElement} ModdleElement
     */

    var DEFAULT_COLORS = {
      fill: undefined,
      stroke: undefined
    };

    /**
     * @implements {CommandHandler}
     *
     * @param {CommandStack} commandStack
     */
    function SetColorHandler(commandStack) {
      this._commandStack = commandStack;

      this._normalizeColor = function(color) {

        // Remove color for falsy values.
        if (!color) {
          return undefined;
        }

        if (isString$3(color)) {
          var hexColor = colorToHex(color);

          if (hexColor) {
            return hexColor;
          }
        }

        throw new Error('invalid color value: ' + color);
      };
    }

    SetColorHandler.$inject = [
      'commandStack'
    ];


    SetColorHandler.prototype.postExecute = function(context) {
      var elements = context.elements,
          colors = context.colors || DEFAULT_COLORS;

      var self = this;

      var di = {};

      if ('fill' in colors) {
        assign$1(di, {
          'background-color': this._normalizeColor(colors.fill) });
      }

      if ('stroke' in colors) {
        assign$1(di, {
          'border-color': this._normalizeColor(colors.stroke) });
      }

      forEach$1(elements, function(element) {
        var assignedDi = isConnection(element) ? pick$1(di, [ 'border-color' ]) : di,
            elementDi = getDi(element);

        // TODO @barmac: remove once we drop bpmn.io properties
        ensureLegacySupport(assignedDi);

        if (isLabel$3(element)) {

          // set label colors as bpmndi:BPMNLabel#color
          self._commandStack.execute('element.updateModdleProperties', {
            element: element,
            moddleElement: elementDi.label,
            properties: {
              color: di['border-color']
            }
          });
        } else {

          // ignore non-compliant di
          if (!isAny(elementDi, [ 'bpmndi:BPMNEdge', 'bpmndi:BPMNShape' ])) {
            return;
          }

          // set colors bpmndi:BPMNEdge or bpmndi:BPMNShape
          self._commandStack.execute('element.updateProperties', {
            element: element,
            properties: {
              di: assignedDi
            }
          });
        }
      });

    };

    /**
     * Convert color from rgb(a)/hsl to hex. Returns `null` for unknown color names
     * and for colors with alpha less than 1.0. This depends on `<canvas>`
     * serialization of the `context.fillStyle`.
     * Cf. https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-fillstyle
     *
     * @example
     *
     * ```javascript
     * colorToHex('fuchsia'); // "#ff00ff"
     *
     * colorToHex('rgba(1, 2, 3, 0.4)'); // null
     * ```
     *
     * @param {string} color
     *
     * @return {string|null}
     */
    function colorToHex(color) {
      var context = document.createElement('canvas').getContext('2d');

      // (0) Start with transparent to account for browser default values.
      context.fillStyle = 'transparent';

      // (1) Assign color so that it's serialized.
      context.fillStyle = color;

      // (2) Return null for non-hex serialization result.
      return /^#[0-9a-fA-F]{6}$/.test(context.fillStyle) ? context.fillStyle : null;
    }

    function isConnection(element) {
      return !!element.waypoints;
    }

    /**
     * Add legacy properties if required.
     *
     * @param {ModdleElement} di
     */
    function ensureLegacySupport(di) {
      if ('border-color' in di) {
        di.stroke = di['border-color'];
      }

      if ('background-color' in di) {
        di.fill = di['background-color'];
      }
    }

    var NULL_DIMENSIONS = {
      width: 0,
      height: 0
    };

    /**
     * @typedef {import('../../modeling/Modeling').default} Modeling
     * @typedef {import('../../../draw/TextRenderer').default} TextRenderer
     * @typedef {import('../../modeling/BpmnFactory').default} BpmnFactory
     *
     * @typedef {import('../../../model/Types').Element} Element
     */

    /**
     * A handler that updates the text of a BPMN element.
     *
     * @param {Modeling} modeling
     * @param {TextRenderer} textRenderer
     * @param {BpmnFactory} bpmnFactory
     */
    function UpdateLabelHandler(modeling, textRenderer, bpmnFactory) {

      /**
       * Creates an empty `diLabel` attribute for embedded labels.
       *
       * @param {Element} element
       * @param {string} text
       */
      function ensureInternalLabelDi(element, text) {
        if (isLabelExternal(element)) {
          return;
        }

        var di = getDi(element);

        if (text && !di.label) {
          di.label = bpmnFactory.create('bpmndi:BPMNLabel');
        }

        if (!text && di.label) {
          delete di.label;
        }
      }


      /**
       * Set the label and return the changed elements.
       *
       * Element parameter can be label itself or connection (i.e. sequence flow).
       *
       * @param {Element} element
       * @param {string} text
       */
      function setText(element, text) {

        // external label if present
        var label = element.label || element;

        var labelTarget = element.labelTarget || element;

        setLabel(label, text);

        ensureInternalLabelDi(element, text);

        return [ label, labelTarget ];
      }

      function preExecute(ctx) {
        var element = ctx.element,
            businessObject = element.businessObject,
            newLabel = ctx.newLabel;

        if (!isLabel$3(element)
            && isLabelExternal(element)
            && !hasExternalLabel(element)
            && !isEmptyText(newLabel)) {

          // create label
          var paddingTop = 7;

          var labelCenter = getExternalLabelMid(element);

          labelCenter = {
            x: labelCenter.x,
            y: labelCenter.y + paddingTop
          };

          modeling.createLabel(element, labelCenter, {
            id: businessObject.id + '_label',
            businessObject: businessObject,
            di: element.di
          });
        }
      }

      function execute(ctx) {
        ctx.oldLabel = getLabel(ctx.element);
        return setText(ctx.element, ctx.newLabel);
      }

      function revert(ctx) {
        return setText(ctx.element, ctx.oldLabel);
      }

      function postExecute(ctx) {
        var element = ctx.element,
            label = element.label || element,
            newLabel = ctx.newLabel,
            newBounds = ctx.newBounds,
            hints = ctx.hints || {};

        // ignore internal labels for elements except text annotations
        if (!isLabel$3(label) && !is$2(label, 'bpmn:TextAnnotation')) {
          return;
        }

        if (isLabel$3(label) && isEmptyText(newLabel)) {

          if (hints.removeShape !== false) {
            modeling.removeShape(label, { unsetLabel: false });
          }

          return;
        }

        var text = getLabel(label);

        // resize element based on label _or_ pre-defined bounds
        if (typeof newBounds === 'undefined') {
          newBounds = textRenderer.getExternalLabelBounds(label, text);
        }

        // setting newBounds to false or _null_ will
        // disable the postExecute resize operation
        if (newBounds) {
          modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);
        }
      }

      // API

      this.preExecute = preExecute;
      this.execute = execute;
      this.revert = revert;
      this.postExecute = postExecute;
    }

    UpdateLabelHandler.$inject = [
      'modeling',
      'textRenderer',
      'bpmnFactory'
    ];


    // helpers //////////

    function isEmptyText(label) {
      return !label || !label.trim();
    }

    /**
     * @typedef {import('../rules/BpmnRules').default} BpmnRules
     * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack
     * @typedef {import('./ElementFactory').default} ElementFactory
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     *
     * @typedef {import('diagram-js/lib/features/modeling/Modeling').ModelingHints} ModelingHints
     *
     * @typedef {import('../../model/Types').Connection} Connection
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Label} Label
     * @typedef {import('../../model/Types').Parent} Parent
     * @typedef {import('../../model/Types').Root} Root
     * @typedef {import('../../model/Types').Shape} Shape
     * @typedef {import('../../model/Types').ModdleElement} ModdleElement
     *
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     *
     * @typedef {import('../../util/Types').Colors} Colors
     *
     * @typedef { {
     *   removeShape?: boolean;
     * } } UpdateLabelHints
     */

    /**
     * The BPMN 2.0 modeling entry point.
     *
     * @template {Connection} [T=Connection]
     * @template {Element} [U=Element]
     * @template {Label} [V=Label]
     * @template {Parent} [W=Parent]
     * @template {Shape} [X=Shape]
     *
     * @extends {BaseModeling<T, U, V, W, X>}
     *
     * @param {EventBus} eventBus
     * @param {ElementFactory} elementFactory
     * @param {CommandStack} commandStack
     * @param {BpmnRules} bpmnRules
     */
    function Modeling(
        eventBus,
        elementFactory,
        commandStack,
        bpmnRules
    ) {

      Modeling$1.call(this, eventBus, elementFactory, commandStack);

      this._bpmnRules = bpmnRules;
    }

    e(Modeling, Modeling$1);

    Modeling.$inject = [
      'eventBus',
      'elementFactory',
      'commandStack',
      'bpmnRules'
    ];


    Modeling.prototype.getHandlers = function() {
      var handlers = Modeling$1.prototype.getHandlers.call(this);

      handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;
      handlers['element.updateProperties'] = UpdatePropertiesHandler;
      handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;
      handlers['lane.add'] = AddLaneHandler;
      handlers['lane.resize'] = ResizeLaneHandler;
      handlers['lane.split'] = SplitLaneHandler;
      handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;
      handlers['id.updateClaim'] = IdClaimHandler;
      handlers['element.setColor'] = SetColorHandler;
      handlers['element.updateLabel'] = UpdateLabelHandler;

      return handlers;
    };

    /**
     * Update an element's label.
     *
     * @param {Element} element The element.
     * @param {string} newLabel The new label.
     * @param {Rect} [newBounds] The optional bounds of the label.
     * @param {UpdateLabelHints} [hints] The optional hints.
     */
    Modeling.prototype.updateLabel = function(element, newLabel, newBounds, hints) {
      this._commandStack.execute('element.updateLabel', {
        element: element,
        newLabel: newLabel,
        newBounds: newBounds,
        hints: hints || {}
      });
    };

    /**
     * @param {Element} source
     * @param {Element} target
     * @param {Partial<Connection>} attrs
     * @param {ModelingHints} [hints]
     *
     * @return {T}
     */
    Modeling.prototype.connect = function(source, target, attrs, hints) {

      var bpmnRules = this._bpmnRules;

      if (!attrs) {
        attrs = bpmnRules.canConnect(source, target);
      }

      if (!attrs) {
        return;
      }

      return this.createConnection(source, target, attrs, source.parent, hints);
    };

    /**
     * Update a model element's properties.
     *
     * @param {Element} element The element.
     * @param {ModdleElement} moddleElement The model element.
     * @param {Object} properties The updated properties.
     */
    Modeling.prototype.updateModdleProperties = function(element, moddleElement, properties) {
      this._commandStack.execute('element.updateModdleProperties', {
        element: element,
        moddleElement: moddleElement,
        properties: properties
      });
    };

    /**
     * Update an element's properties.
     *
     * @param {Element} element The element.
     * @param {Object} properties The updated properties.
     */
    Modeling.prototype.updateProperties = function(element, properties) {
      this._commandStack.execute('element.updateProperties', {
        element: element,
        properties: properties
      });
    };

    /**
     * Resize a lane.
     *
     * @param {Shape} laneShape The lane.
     * @param {Rect} newBounds The new bounds of the lane.
     * @param {boolean} [balanced] Wether to resize neighboring lanes.
     */
    Modeling.prototype.resizeLane = function(laneShape, newBounds, balanced) {
      this._commandStack.execute('lane.resize', {
        shape: laneShape,
        newBounds: newBounds,
        balanced: balanced
      });
    };

    /**
     * Add a lane.
     *
     * @param {Shape} targetLaneShape The shape to add the lane to.
     * @param {string} location The location.
     *
     * @return {Shape} The added lane.
     */
    Modeling.prototype.addLane = function(targetLaneShape, location) {
      var context = {
        shape: targetLaneShape,
        location: location
      };

      this._commandStack.execute('lane.add', context);

      return context.newLane;
    };

    /**
     * Split a lane.
     *
     * @param {Shape} targetLane The lane to split.
     * @param {number} count The number of lanes to split the lane into. Must not
     * exceed the number of existing lanes.
     */
    Modeling.prototype.splitLane = function(targetLane, count) {
      this._commandStack.execute('lane.split', {
        shape: targetLane,
        count: count
      });
    };

    /**
     * Turn a process into a collaboration.
     *
     * @return {Root} The root of the collaboration.
     */
    Modeling.prototype.makeCollaboration = function() {

      var collaborationElement = this._create('root', {
        type: 'bpmn:Collaboration'
      });

      var context = {
        newRoot: collaborationElement
      };

      this._commandStack.execute('canvas.updateRoot', context);

      return collaborationElement;
    };

    /**
     * Transform a collaboration into a process.
     *
     * @return {Root} The root of the process.
     */
    Modeling.prototype.makeProcess = function() {

      var processElement = this._create('root', {
        type: 'bpmn:Process'
      });

      var context = {
        newRoot: processElement
      };

      this._commandStack.execute('canvas.updateRoot', context);
    };

    /**
     * Update the referenced lanes of each flow node.
     *
     * @param {Shape[]} flowNodeShapes The flow nodes to update.
     * @param {Shape[]} laneShapes The lanes.
     */
    Modeling.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {

      this._commandStack.execute('lane.updateRefs', {
        flowNodeShapes: flowNodeShapes,
        laneShapes: laneShapes
      });
    };

    /**
     * Claim an ID.
     *
     * @param {string} id The ID to claim.
     * @param {ModdleElement} moddleElement The model element the ID is claimed for.
     */
    Modeling.prototype.claimId = function(id, moddleElement) {
      this._commandStack.execute('id.updateClaim', {
        id: id,
        element: moddleElement,
        claiming: true
      });
    };

    /**
     * Unclaim an ID.
     *
     * @param {string} id The ID to unclaim.
     * @param {ModdleElement} moddleElement The model element the ID is claimed for.
     */
    Modeling.prototype.unclaimId = function(id, moddleElement) {
      this._commandStack.execute('id.updateClaim', {
        id: id,
        element: moddleElement
      });
    };

    /**
     * Set the color(s) of one or many elements.
     *
     * @param {Element[]} elements The elements to set the color(s) for.
     * @param {Colors} colors The color(s) to set.
     */
    Modeling.prototype.setColor = function(elements, colors) {
      if (!elements.length) {
        elements = [ elements ];
      }

      this._commandStack.execute('element.setColor', {
        elements: elements,
        colors: colors
      });
    };

    /**
     * @typedef {import('../core/Types').ElementLike} Element
     * @typedef {import('../core/Types').ConnectionLike} Connection
     *
     * @typedef {import('../util').Point} Point
     *
     * @typedef { {
     *   connectionStart?: Point;
     *   connectionEnd?: Point;
     *   source?: Element;
     *   target?: Element;
     * } } LayoutConnectionHints
     */


    /**
     * A base connection layouter implementation
     * that layouts the connection by directly connecting
     * mid(source) + mid(target).
     */
    function BaseLayouter() {}


    /**
     * Return the new layouted waypoints for the given connection.
     *
     * The connection passed is still unchanged; you may figure out about
     * the new connection start / end via the layout hints provided.
     *
     * @param {Connection} connection
     * @param {LayoutConnectionHints} [hints]
     *
     * @return {Point[]} The waypoints of the laid out connection.
     */
    BaseLayouter.prototype.layoutConnection = function(connection, hints) {

      hints = hints || {};

      return [
        hints.connectionStart || getMid(hints.source || connection.source),
        hints.connectionEnd || getMid(hints.target || connection.target)
      ];
    };

    /**
     * @typedef {import('../util/Types').Point} Point
     * @typedef {import('../util/Types').Rect} Rect
     */

    var MIN_SEGMENT_LENGTH = 20,
        POINT_ORIENTATION_PADDING = 5;

    var round$1 = Math.round;

    var INTERSECTION_THRESHOLD = 20,
        ORIENTATION_THRESHOLD = {
          'h:h': 20,
          'v:v': 20,
          'h:v': -10,
          'v:h': -10
        };

    function needsTurn(orientation, startDirection) {
      return !{
        t: /top/,
        r: /right/,
        b: /bottom/,
        l: /left/,
        h: /./,
        v: /./
      }[startDirection].test(orientation);
    }

    function canLayoutStraight(direction, targetOrientation) {
      return {
        t: /top/,
        r: /right/,
        b: /bottom/,
        l: /left/,
        h: /left|right/,
        v: /top|bottom/
      }[direction].test(targetOrientation);
    }

    function getSegmentBendpoints(a, b, directions) {
      var orientation = getOrientation(b, a, POINT_ORIENTATION_PADDING);

      var startDirection = directions.split(':')[0];

      var xmid = round$1((b.x - a.x) / 2 + a.x),
          ymid = round$1((b.y - a.y) / 2 + a.y);

      var segmentEnd, segmentDirections;

      var layoutStraight = canLayoutStraight(startDirection, orientation),
          layoutHorizontal = /h|r|l/.test(startDirection),
          layoutTurn = false;

      var turnNextDirections = false;

      if (layoutStraight) {
        segmentEnd = layoutHorizontal ? { x: xmid, y: a.y } : { x: a.x, y: ymid };

        segmentDirections = layoutHorizontal ? 'h:h' : 'v:v';
      } else {
        layoutTurn = needsTurn(orientation, startDirection);

        segmentDirections = layoutHorizontal ? 'h:v' : 'v:h';

        if (layoutTurn) {

          if (layoutHorizontal) {
            turnNextDirections = ymid === a.y;

            segmentEnd = {
              x: a.x + MIN_SEGMENT_LENGTH * (/l/.test(startDirection) ? -1 : 1),
              y: turnNextDirections ? ymid + MIN_SEGMENT_LENGTH : ymid
            };
          } else {
            turnNextDirections = xmid === a.x;

            segmentEnd = {
              x: turnNextDirections ? xmid + MIN_SEGMENT_LENGTH : xmid,
              y: a.y + MIN_SEGMENT_LENGTH * (/t/.test(startDirection) ? -1 : 1)
            };
          }

        } else {
          segmentEnd = {
            x: xmid,
            y: ymid
          };
        }
      }

      return {
        waypoints: getBendpoints(a, segmentEnd, segmentDirections).concat(segmentEnd),
        directions:  segmentDirections,
        turnNextDirections: turnNextDirections
      };
    }

    function getStartSegment(a, b, directions) {
      return getSegmentBendpoints(a, b, directions);
    }

    function getEndSegment(a, b, directions) {
      var invertedSegment = getSegmentBendpoints(b, a, invertDirections(directions));

      return {
        waypoints: invertedSegment.waypoints.slice().reverse(),
        directions: invertDirections(invertedSegment.directions),
        turnNextDirections: invertedSegment.turnNextDirections
      };
    }

    function getMidSegment(startSegment, endSegment) {

      var startDirection = startSegment.directions.split(':')[1],
          endDirection = endSegment.directions.split(':')[0];

      if (startSegment.turnNextDirections) {
        startDirection = startDirection == 'h' ? 'v' : 'h';
      }

      if (endSegment.turnNextDirections) {
        endDirection = endDirection == 'h' ? 'v' : 'h';
      }

      var directions = startDirection + ':' + endDirection;

      var bendpoints = getBendpoints(
        startSegment.waypoints[startSegment.waypoints.length - 1],
        endSegment.waypoints[0],
        directions
      );

      return {
        waypoints: bendpoints,
        directions: directions
      };
    }

    function invertDirections(directions) {
      return directions.split(':').reverse().join(':');
    }

    /**
     * Handle simple layouts with maximum two bendpoints.
     */
    function getSimpleBendpoints(a, b, directions) {

      var xmid = round$1((b.x - a.x) / 2 + a.x),
          ymid = round$1((b.y - a.y) / 2 + a.y);

      // one point, right or left from a
      if (directions === 'h:v') {
        return [ { x: b.x, y: a.y } ];
      }

      // one point, above or below a
      if (directions === 'v:h') {
        return [ { x: a.x, y: b.y } ];
      }

      // vertical segment between a and b
      if (directions === 'h:h') {
        return [
          { x: xmid, y: a.y },
          { x: xmid, y: b.y }
        ];
      }

      // horizontal segment between a and b
      if (directions === 'v:v') {
        return [
          { x: a.x, y: ymid },
          { x: b.x, y: ymid }
        ];
      }

      throw new Error('invalid directions: can only handle varians of [hv]:[hv]');
    }


    /**
     * Returns the mid points for a manhattan connection between two points.
     *
     * @example h:h (horizontal:horizontal)
     *
     * [a]----[x]
     *         |
     *        [x]----[b]
     *
     * @example h:v (horizontal:vertical)
     *
     * [a]----[x]
     *         |
     *        [b]
     *
     * @example h:r (horizontal:right)
     *
     * [a]----[x]
     *         |
     *    [b]-[x]
     *
     * @param {Point} a
     * @param {Point} b
     * @param {string} directions
     *
     * @return {Point[]}
     */
    function getBendpoints(a, b, directions) {
      directions = directions || 'h:h';

      if (!isValidDirections(directions)) {
        throw new Error(
          'unknown directions: <' + directions + '>: ' +
          'must be specified as <start>:<end> ' +
          'with start/end in { h,v,t,r,b,l }'
        );
      }

      // compute explicit directions, involving trbl dockings
      // using a three segmented layouting algorithm
      if (isExplicitDirections(directions)) {
        var startSegment = getStartSegment(a, b, directions),
            endSegment = getEndSegment(a, b, directions),
            midSegment = getMidSegment(startSegment, endSegment);

        return [].concat(
          startSegment.waypoints,
          midSegment.waypoints,
          endSegment.waypoints
        );
      }

      // handle simple [hv]:[hv] cases that can be easily computed
      return getSimpleBendpoints(a, b, directions);
    }

    /**
     * Create a connection between the two points according
     * to the manhattan layout (only horizontal and vertical) edges.
     *
     * @param {Point} a
     * @param {Point} b
     * @param {string} [directions='h:h'] Specifies manhattan directions for each
     * point as {direction}:{direction}. A direction for a point is either
     * `h` (horizontal) or `v` (vertical).
     *
     * @return {Point[]}
     */
    function connectPoints(a, b, directions) {

      var points = getBendpoints(a, b, directions);

      points.unshift(a);
      points.push(b);

      return withoutRedundantPoints(points);
    }


    /**
     * Connect two rectangles using a manhattan layouted connection.
     *
     * @param {Rect} source source rectangle
     * @param {Rect} target target rectangle
     * @param {Point} [start] source docking
     * @param {Point} [end] target docking
     *
     * @param {Object} [hints]
     * @param {string} [hints.preserveDocking=source] preserve docking on selected side
     * @param {string[]} [hints.preferredLayouts]
     * @param {Point|boolean} [hints.connectionStart] whether the start changed
     * @param {Point|boolean} [hints.connectionEnd] whether the end changed
     *
     * @return {Point[]} connection points
     */
    function connectRectangles(source, target, start, end, hints) {

      var preferredLayouts = hints && hints.preferredLayouts || [];

      var preferredLayout = without(preferredLayouts, 'straight')[0] || 'h:h';

      var threshold = ORIENTATION_THRESHOLD[preferredLayout] || 0;

      var orientation = getOrientation(source, target, threshold);

      var directions = getDirections(orientation, preferredLayout);

      start = start || getMid(source);
      end = end || getMid(target);

      var directionSplit = directions.split(':');

      // compute actual docking points for start / end
      // this ensures we properly layout only parts of the
      // connection that lies in between the two rectangles
      var startDocking = getDockingPoint(start, source, directionSplit[0], invertOrientation(orientation)),
          endDocking = getDockingPoint(end, target, directionSplit[1], orientation);

      return connectPoints(startDocking, endDocking, directions);
    }


    /**
     * Repair the connection between two rectangles, of which one has been updated.
     *
     * @param {Rect} source
     * @param {Rect} target
     * @param {Point} [start]
     * @param {Point} [end]
     * @param {Point[]} [waypoints]
     * @param {Object} [hints]
     * @param {string[]} [hints.preferredLayouts] The list of preferred layouts.
     * @param {boolean} [hints.connectionStart]
     * @param {boolean} [hints.connectionEnd]
     *
     * @return {Point[]} The waypoints of the repaired connection.
     */
    function repairConnection(source, target, start, end, waypoints, hints) {

      if (isArray$5(start)) {
        waypoints = start;
        hints = end;

        start = getMid(source);
        end = getMid(target);
      }

      hints = assign$1({ preferredLayouts: [] }, hints);
      waypoints = waypoints || [];

      var preferredLayouts = hints.preferredLayouts,
          preferStraight = preferredLayouts.indexOf('straight') !== -1,
          repairedWaypoints;

      // just layout non-existing or simple connections
      // attempt to render straight lines, if required

      // attempt to layout a straight line
      repairedWaypoints = preferStraight && tryLayoutStraight(source, target, start, end, hints);

      if (repairedWaypoints) {
        return repairedWaypoints;
      }

      // try to layout from end
      repairedWaypoints = hints.connectionEnd && tryRepairConnectionEnd(target, source, end, waypoints);

      if (repairedWaypoints) {
        return repairedWaypoints;
      }

      // try to layout from start
      repairedWaypoints = hints.connectionStart && tryRepairConnectionStart(source, target, start, waypoints);

      if (repairedWaypoints) {
        return repairedWaypoints;
      }

      // or whether nothing seems to have changed
      if (!hints.connectionStart && !hints.connectionEnd && waypoints && waypoints.length) {
        return waypoints;
      }

      // simply reconnect if nothing else worked
      return connectRectangles(source, target, start, end, hints);
    }


    function inRange(a, start, end) {
      return a >= start && a <= end;
    }

    function isInRange(axis, a, b) {
      var size = {
        x: 'width',
        y: 'height'
      };

      return inRange(a[axis], b[axis], b[axis] + b[size[axis]]);
    }

    /**
     * Lay out a straight connection.
     *
     * @param {Rect} source
     * @param {Rect} target
     * @param {Point} start
     * @param {Point} end
     * @param {Object} [hints]
     *
     * @return {Point[]|null} The waypoints or null if layout isn't possible.
     */
    function tryLayoutStraight(source, target, start, end, hints) {
      var axis = {},
          primaryAxis,
          orientation;

      orientation = getOrientation(source, target);

      // only layout a straight connection if shapes are
      // horizontally or vertically aligned
      if (!/^(top|bottom|left|right)$/.test(orientation)) {
        return null;
      }

      if (/top|bottom/.test(orientation)) {
        primaryAxis = 'x';
      }

      if (/left|right/.test(orientation)) {
        primaryAxis = 'y';
      }

      if (hints.preserveDocking === 'target') {

        if (!isInRange(primaryAxis, end, source)) {
          return null;
        }

        axis[primaryAxis] = end[primaryAxis];

        return [
          {
            x: axis.x !== undefined ? axis.x : start.x,
            y: axis.y !== undefined ? axis.y : start.y,
            original: {
              x: axis.x !== undefined ? axis.x : start.x,
              y: axis.y !== undefined ? axis.y : start.y
            }
          },
          {
            x: end.x,
            y: end.y
          }
        ];

      } else {

        if (!isInRange(primaryAxis, start, target)) {
          return null;
        }

        axis[primaryAxis] = start[primaryAxis];

        return [
          {
            x: start.x,
            y: start.y
          },
          {
            x: axis.x !== undefined ? axis.x : end.x,
            y: axis.y !== undefined ? axis.y : end.y,
            original: {
              x: axis.x !== undefined ? axis.x : end.x,
              y: axis.y !== undefined ? axis.y : end.y
            }
          }
        ];
      }

    }

    /**
     * Repair a connection from start.
     *
     * @param {Rect} moved
     * @param {Rect} other
     * @param {Point} newDocking
     * @param {Point[]} points originalPoints from moved to other
     *
     * @return {Point[]|null} The waypoints of the repaired connection.
     */
    function tryRepairConnectionStart(moved, other, newDocking, points) {
      return _tryRepairConnectionSide(moved, other, newDocking, points);
    }

    /**
     * Repair a connection from end.
     *
     * @param {Rect} moved
     * @param {Rect} other
     * @param {Point} newDocking
     * @param {Point[]} points originalPoints from moved to other
     *
     * @return {Point[]|null} The waypoints of the repaired connection.
     */
    function tryRepairConnectionEnd(moved, other, newDocking, points) {
      var waypoints = points.slice().reverse();

      waypoints = _tryRepairConnectionSide(moved, other, newDocking, waypoints);

      return waypoints ? waypoints.reverse() : null;
    }

    /**
     * Repair a connection from one side that moved.
     *
     * @param {Rect} moved
     * @param {Rect} other
     * @param {Point} newDocking
     * @param {Point[]} points originalPoints from moved to other
     *
     * @return {Point[]} The waypoints of the repaired connection.
     */
    function _tryRepairConnectionSide(moved, other, newDocking, points) {

      function needsRelayout(points) {
        if (points.length < 3) {
          return true;
        }

        if (points.length > 4) {
          return false;
        }

        // relayout if two points overlap
        // this is most likely due to
        return !!find$1(points, function(p, idx) {
          var q = points[idx - 1];

          return q && pointDistance(p, q) < 3;
        });
      }

      function repairBendpoint(candidate, oldPeer, newPeer) {

        var alignment = pointsAligned(oldPeer, candidate);

        switch (alignment) {
        case 'v':

          // repair horizontal alignment
          return { x: newPeer.x, y: candidate.y };
        case 'h':

          // repair vertical alignment
          return { x: candidate.x, y: newPeer.y };
        }

        return { x: candidate.x, y: candidate. y };
      }

      function removeOverlapping(points, a, b) {
        var i;

        for (i = points.length - 2; i !== 0; i--) {

          // intersects (?) break, remove all bendpoints up to this one and relayout
          if (pointInRect(points[i], a, INTERSECTION_THRESHOLD) ||
              pointInRect(points[i], b, INTERSECTION_THRESHOLD)) {

            // return sliced old connection
            return points.slice(i);
          }
        }

        return points;
      }

      // (0) only repair what has layoutable bendpoints

      // (1) if only one bendpoint and on shape moved onto other shapes axis
      //     (horizontally / vertically), relayout

      if (needsRelayout(points)) {
        return null;
      }

      var oldDocking = points[0],
          newPoints = points.slice(),
          slicedPoints;

      // (2) repair only last line segment and only if it was layouted before

      newPoints[0] = newDocking;
      newPoints[1] = repairBendpoint(newPoints[1], oldDocking, newDocking);


      // (3) if shape intersects with any bendpoint after repair,
      //     remove all segments up to this bendpoint and repair from there
      slicedPoints = removeOverlapping(newPoints, moved, other);

      if (slicedPoints !== newPoints) {
        newPoints = _tryRepairConnectionSide(moved, other, newDocking, slicedPoints);
      }

      // (4) do NOT repair if repaired bendpoints are aligned
      if (newPoints && pointsAligned(newPoints)) {
        return null;
      }

      return newPoints;
    }


    /**
     * Returns the manhattan directions connecting two rectangles
     * with the given orientation.
     *
     * Will always return the default layout, if it is specific
     * regarding sides already (trbl).
     *
     * @example
     *
     * getDirections('top'); // -> 'v:v'
     * getDirections('intersect'); // -> 't:t'
     *
     * getDirections('top-right', 'v:h'); // -> 'v:h'
     * getDirections('top-right', 'h:h'); // -> 'h:h'
     *
     *
     * @param {string} orientation
     * @param {string} defaultLayout
     *
     * @return {string}
     */
    function getDirections(orientation, defaultLayout) {

      // don't override specific trbl directions
      if (isExplicitDirections(defaultLayout)) {
        return defaultLayout;
      }

      switch (orientation) {
      case 'intersect':
        return 't:t';

      case 'top':
      case 'bottom':
        return 'v:v';

      case 'left':
      case 'right':
        return 'h:h';

      // 'top-left'
      // 'top-right'
      // 'bottom-left'
      // 'bottom-right'
      default:
        return defaultLayout;
      }
    }

    function isValidDirections(directions) {
      return directions && /^h|v|t|r|b|l:h|v|t|r|b|l$/.test(directions);
    }

    function isExplicitDirections(directions) {
      return directions && /t|r|b|l/.test(directions);
    }

    function invertOrientation(orientation) {
      return {
        'top': 'bottom',
        'bottom': 'top',
        'left': 'right',
        'right': 'left',
        'top-left': 'bottom-right',
        'bottom-right': 'top-left',
        'top-right': 'bottom-left',
        'bottom-left': 'top-right',
      }[orientation];
    }

    function getDockingPoint(point, rectangle, dockingDirection, targetOrientation) {

      // ensure we end up with a specific docking direction
      // based on the targetOrientation, if <h|v> is being passed

      if (dockingDirection === 'h') {
        dockingDirection = /left/.test(targetOrientation) ? 'l' : 'r';
      }

      if (dockingDirection === 'v') {
        dockingDirection = /top/.test(targetOrientation) ? 't' : 'b';
      }

      if (dockingDirection === 't') {
        return { original: point, x: point.x, y: rectangle.y };
      }

      if (dockingDirection === 'r') {
        return { original: point, x: rectangle.x + rectangle.width, y: point.y };
      }

      if (dockingDirection === 'b') {
        return { original: point, x: point.x, y: rectangle.y + rectangle.height };
      }

      if (dockingDirection === 'l') {
        return { original: point, x: rectangle.x, y: point.y };
      }

      throw new Error('unexpected dockingDirection: <' + dockingDirection + '>');
    }


    /**
     * Return list of waypoints with redundant ones filtered out.
     *
     * @example
     *
     * Original points:
     *
     *   [x] ----- [x] ------ [x]
     *                         |
     *                        [x] ----- [x] - [x]
     *
     * Filtered:
     *
     *   [x] ---------------- [x]
     *                         |
     *                        [x] ----------- [x]
     *
     * @param {Point[]} waypoints
     *
     * @return {Point[]}
     */
    function withoutRedundantPoints(waypoints) {
      return waypoints.reduce(function(points, p, idx) {

        var previous = points[points.length - 1],
            next = waypoints[idx + 1];

        if (!pointsOnLine(previous, next, p, 0)) {
          points.push(p);
        }

        return points;
      }, []);
    }

    /**
     * @typedef {import('diagram-js/lib/util/Types').Point} Point
     *
     * @typedef {import('../../model/Types').Connection} Connection
     * @typedef {import('../../model/Types').Element} Element
     *
     * @typedef {import('diagram-js/lib/layout/BaseLayouter').LayoutConnectionHints} LayoutConnectionHints
     *
     * @typedef { {
     *   source?: Element;
     *   target?: Element;
     *   waypoints?: Point[];
     *   connectionStart?: Point;
     *   connectionEnd?: Point;
     * } & LayoutConnectionHints } BpmnLayoutConnectionHints
     */

    var ATTACH_ORIENTATION_PADDING = -10,
        BOUNDARY_TO_HOST_THRESHOLD = 40;

    var oppositeOrientationMapping = {
      'top': 'bottom',
      'top-right': 'bottom-left',
      'top-left': 'bottom-right',
      'right': 'left',
      'bottom': 'top',
      'bottom-right': 'top-left',
      'bottom-left': 'top-right',
      'left': 'right'
    };

    var orientationDirectionMapping = {
      top: 't',
      right: 'r',
      bottom: 'b',
      left: 'l'
    };

    function BpmnLayouter() {}

    e(BpmnLayouter, BaseLayouter);

    /**
     * Returns waypoints of laid out connection.
     *
     * @param {Connection} connection
     * @param {BpmnLayoutConnectionHints} [hints]
     *
     * @return {Point[]}
     */
    BpmnLayouter.prototype.layoutConnection = function(connection, hints) {
      if (!hints) {
        hints = {};
      }

      var source = hints.source || connection.source,
          target = hints.target || connection.target,
          waypoints = hints.waypoints || connection.waypoints,
          connectionStart = hints.connectionStart,
          connectionEnd = hints.connectionEnd;

      var manhattanOptions,
          updatedWaypoints;

      if (!connectionStart) {
        connectionStart = getConnectionDocking(waypoints && waypoints[ 0 ], source);
      }

      if (!connectionEnd) {
        connectionEnd = getConnectionDocking(waypoints && waypoints[ waypoints.length - 1 ], target);
      }

      // TODO(nikku): support vertical modeling
      // and invert preferredLayouts accordingly

      if (is$2(connection, 'bpmn:Association') ||
          is$2(connection, 'bpmn:DataAssociation')) {

        if (waypoints && !isCompensationAssociation(source, target)) {
          return [].concat([ connectionStart ], waypoints.slice(1, -1), [ connectionEnd ]);
        }
      }

      if (is$2(connection, 'bpmn:MessageFlow')) {
        manhattanOptions = getMessageFlowManhattanOptions(source, target);
      } else if (is$2(connection, 'bpmn:SequenceFlow') || isCompensationAssociation(source, target)) {

        // layout all connection between flow elements h:h, except for
        // (1) outgoing of boundary events -> layout based on attach orientation and target orientation
        // (2) incoming/outgoing of gateways -> v:h for outgoing, h:v for incoming
        // (3) loops
        if (source === target) {
          manhattanOptions = {
            preferredLayouts: getLoopPreferredLayout(source, connection)
          };
        } else if (is$2(source, 'bpmn:BoundaryEvent')) {
          manhattanOptions = {
            preferredLayouts: getBoundaryEventPreferredLayouts(source, target, connectionEnd)
          };
        } else if (isExpandedSubProcess(source) || isExpandedSubProcess(target)) {
          manhattanOptions = getSubProcessManhattanOptions(source);
        } else if (is$2(source, 'bpmn:Gateway')) {
          manhattanOptions = {
            preferredLayouts: [ 'v:h' ]
          };
        } else if (is$2(target, 'bpmn:Gateway')) {
          manhattanOptions = {
            preferredLayouts: [ 'h:v' ]
          };
        } else {
          manhattanOptions = {
            preferredLayouts: [ 'h:h' ]
          };
        }
      }

      if (manhattanOptions) {
        manhattanOptions = assign$1(manhattanOptions, hints);

        updatedWaypoints = withoutRedundantPoints(repairConnection(
          source,
          target,
          connectionStart,
          connectionEnd,
          waypoints,
          manhattanOptions
        ));
      }

      return updatedWaypoints || [ connectionStart, connectionEnd ];
    };


    // helpers //////////

    function getAttachOrientation(attachedElement) {
      var hostElement = attachedElement.host;

      return getOrientation(getMid(attachedElement), hostElement, ATTACH_ORIENTATION_PADDING);
    }

    function getMessageFlowManhattanOptions(source, target) {
      return {
        preferredLayouts: [ 'straight', 'v:v' ],
        preserveDocking: getMessageFlowPreserveDocking(source, target)
      };
    }

    function getMessageFlowPreserveDocking(source, target) {

      // (1) docking element connected to participant has precedence
      if (is$2(target, 'bpmn:Participant')) {
        return 'source';
      }

      if (is$2(source, 'bpmn:Participant')) {
        return 'target';
      }

      // (2) docking element connected to expanded sub-process has precedence
      if (isExpandedSubProcess(target)) {
        return 'source';
      }

      if (isExpandedSubProcess(source)) {
        return 'target';
      }

      // (3) docking event has precedence
      if (is$2(target, 'bpmn:Event')) {
        return 'target';
      }

      if (is$2(source, 'bpmn:Event')) {
        return 'source';
      }

      return null;
    }

    function getSubProcessManhattanOptions(source) {
      return {
        preferredLayouts: [ 'straight', 'h:h' ],
        preserveDocking: getSubProcessPreserveDocking(source)
      };
    }

    function getSubProcessPreserveDocking(source) {
      return isExpandedSubProcess(source) ? 'target' : 'source';
    }

    function getConnectionDocking(point, shape) {
      return point ? (point.original || point) : getMid(shape);
    }

    function isCompensationAssociation(source, target) {
      return is$2(target, 'bpmn:Activity') &&
        is$2(source, 'bpmn:BoundaryEvent') &&
        target.businessObject.isForCompensation;
    }

    function isExpandedSubProcess(element) {
      return is$2(element, 'bpmn:SubProcess') && isExpanded(element);
    }

    function isSame(a, b) {
      return a === b;
    }

    function isAnyOrientation(orientation, orientations) {
      return orientations.indexOf(orientation) !== -1;
    }

    function getHorizontalOrientation(orientation) {
      var matches = /right|left/.exec(orientation);

      return matches && matches[0];
    }

    function getVerticalOrientation(orientation) {
      var matches = /top|bottom/.exec(orientation);

      return matches && matches[0];
    }

    function isOppositeOrientation(a, b) {
      return oppositeOrientationMapping[a] === b;
    }

    function isOppositeHorizontalOrientation(a, b) {
      var horizontalOrientation = getHorizontalOrientation(a);

      var oppositeHorizontalOrientation = oppositeOrientationMapping[horizontalOrientation];

      return b.indexOf(oppositeHorizontalOrientation) !== -1;
    }

    function isOppositeVerticalOrientation(a, b) {
      var verticalOrientation = getVerticalOrientation(a);

      var oppositeVerticalOrientation = oppositeOrientationMapping[verticalOrientation];

      return b.indexOf(oppositeVerticalOrientation) !== -1;
    }

    function isHorizontalOrientation(orientation) {
      return orientation === 'right' || orientation === 'left';
    }

    function getLoopPreferredLayout(source, connection) {
      var waypoints = connection.waypoints;

      var orientation = waypoints && waypoints.length && getOrientation(waypoints[0], source);

      if (orientation === 'top') {
        return [ 't:r' ];
      } else if (orientation === 'right') {
        return [ 'r:b' ];
      } else if (orientation === 'left') {
        return [ 'l:t' ];
      }

      return [ 'b:l' ];
    }

    function getBoundaryEventPreferredLayouts(source, target, end) {
      var sourceMid = getMid(source),
          targetMid = getMid(target),
          attachOrientation = getAttachOrientation(source),
          sourceLayout,
          targetLayout;

      var isLoop = isSame(source.host, target);

      var attachedToSide = isAnyOrientation(attachOrientation, [ 'top', 'right', 'bottom', 'left' ]);

      var targetOrientation = getOrientation(targetMid, sourceMid, {
        x: source.width / 2 + target.width / 2,
        y: source.height / 2 + target.height / 2
      });

      if (isLoop) {
        return getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end);
      }

      // source layout
      sourceLayout = getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide);

      // target layout
      targetLayout = getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide);

      return [ sourceLayout + ':' + targetLayout ];
    }

    function getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end) {
      var orientation = attachedToSide ? attachOrientation : getVerticalOrientation(attachOrientation),
          sourceLayout = orientationDirectionMapping[ orientation ],
          targetLayout;

      if (attachedToSide) {
        if (isHorizontalOrientation(attachOrientation)) {
          targetLayout = shouldConnectToSameSide('y', source, target, end) ? 'h' : 'b';
        } else {
          targetLayout = shouldConnectToSameSide('x', source, target, end) ? 'v' : 'l';
        }
      } else {
        targetLayout = 'v';
      }

      return [ sourceLayout + ':' + targetLayout ];
    }

    function shouldConnectToSameSide(axis, source, target, end) {
      var threshold = BOUNDARY_TO_HOST_THRESHOLD;

      return !(
        areCloseOnAxis(axis, end, target, threshold) ||
        areCloseOnAxis(axis, end, {
          x: target.x + target.width,
          y: target.y + target.height
        }, threshold) ||
        areCloseOnAxis(axis, end, getMid(source), threshold)
      );
    }

    function areCloseOnAxis(axis, a, b, threshold) {
      return Math.abs(a[ axis ] - b[ axis ]) < threshold;
    }

    function getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide) {

      // attached to either top, right, bottom or left side
      if (attachedToSide) {
        return orientationDirectionMapping[ attachOrientation ];
      }

      // attached to either top-right, top-left, bottom-right or bottom-left corner

      // same vertical or opposite horizontal orientation
      if (isSame(
        getVerticalOrientation(attachOrientation), getVerticalOrientation(targetOrientation)
      ) || isOppositeOrientation(
        getHorizontalOrientation(attachOrientation), getHorizontalOrientation(targetOrientation)
      )) {
        return orientationDirectionMapping[ getVerticalOrientation(attachOrientation) ];
      }

      // fallback
      return orientationDirectionMapping[ getHorizontalOrientation(attachOrientation) ];
    }

    function getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide) {

      // attached to either top, right, bottom or left side
      if (attachedToSide) {
        if (isHorizontalOrientation(attachOrientation)) {

          // orientation is right or left

          // opposite horizontal orientation or same orientation
          if (
            isOppositeHorizontalOrientation(attachOrientation, targetOrientation) ||
            isSame(attachOrientation, targetOrientation)
          ) {
            return 'h';
          }

          // fallback
          return 'v';
        } else {

          // orientation is top or bottom

          // opposite vertical orientation or same orientation
          if (
            isOppositeVerticalOrientation(attachOrientation, targetOrientation) ||
            isSame(attachOrientation, targetOrientation)
          ) {
            return 'v';
          }

          // fallback
          return 'h';
        }
      }

      // attached to either top-right, top-left, bottom-right or bottom-left corner

      // orientation is right, left
      // or same vertical orientation but also right or left
      if (isHorizontalOrientation(targetOrientation) ||
        (isSame(getVerticalOrientation(attachOrientation), getVerticalOrientation(targetOrientation)) &&
          getHorizontalOrientation(targetOrientation))) {
        return 'h';
      } else {
        return 'v';
      }
    }

    /**
     * @typedef {import('../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../core/GraphicsFactory').default} GraphicsFactory
     */

    function dockingToPoint(docking) {

      // use the dockings actual point and
      // retain the original docking
      return assign$1({ original: docking.point.original || docking.point }, docking.actual);
    }


    /**
     * A {@link ConnectionDocking} that crops connection waypoints based on
     * the path(s) of the connection source and target.
     *
     * @param {ElementRegistry} elementRegistry
     * @param {GraphicsFactory} graphicsFactory
     */
    function CroppingConnectionDocking(elementRegistry, graphicsFactory) {
      this._elementRegistry = elementRegistry;
      this._graphicsFactory = graphicsFactory;
    }

    CroppingConnectionDocking.$inject = [ 'elementRegistry', 'graphicsFactory' ];


    /**
     * @inheritDoc ConnectionDocking#getCroppedWaypoints
     */
    CroppingConnectionDocking.prototype.getCroppedWaypoints = function(connection, source, target) {

      source = source || connection.source;
      target = target || connection.target;

      var sourceDocking = this.getDockingPoint(connection, source, true),
          targetDocking = this.getDockingPoint(connection, target);

      var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);

      croppedWaypoints.unshift(dockingToPoint(sourceDocking));
      croppedWaypoints.push(dockingToPoint(targetDocking));

      return croppedWaypoints;
    };

    /**
     * Return the connection docking point on the specified shape
     *
     * @inheritDoc ConnectionDocking#getDockingPoint
     */
    CroppingConnectionDocking.prototype.getDockingPoint = function(connection, shape, dockStart) {

      var waypoints = connection.waypoints,
          dockingIdx,
          dockingPoint,
          croppedPoint;

      dockingIdx = dockStart ? 0 : waypoints.length - 1;
      dockingPoint = waypoints[dockingIdx];

      croppedPoint = this._getIntersection(shape, connection, dockStart);

      return {
        point: dockingPoint,
        actual: croppedPoint || dockingPoint,
        idx: dockingIdx
      };
    };


    // helpers //////////////////////

    CroppingConnectionDocking.prototype._getIntersection = function(shape, connection, takeFirst) {

      var shapePath = this._getShapePath(shape),
          connectionPath = this._getConnectionPath(connection);

      return getElementLineIntersection(shapePath, connectionPath, takeFirst);
    };

    CroppingConnectionDocking.prototype._getConnectionPath = function(connection) {
      return this._graphicsFactory.getConnectionPath(connection);
    };

    CroppingConnectionDocking.prototype._getShapePath = function(shape) {
      return this._graphicsFactory.getShapePath(shape);
    };

    CroppingConnectionDocking.prototype._getGfx = function(element) {
      return this._elementRegistry.getGraphics(element);
    };

    var ModelingModule = {
      __init__: [
        'modeling',
        'bpmnUpdater'
      ],
      __depends__: [
        BehaviorModule,
        RulesModule,
        DiOrderingModule,
        OrderingModule,
        ReplaceModule,
        CommandModule,
        TooltipsModule,
        LabelSupportModule,
        AttachSupportModule,
        SelectionModule,
        ChangeSupportModule,
        SpaceToolModule
      ],
      bpmnFactory: [ 'type', BpmnFactory ],
      bpmnUpdater: [ 'type', BpmnUpdater ],
      elementFactory: [ 'type', ElementFactory ],
      modeling: [ 'type', Modeling ],
      layouter: [ 'type', BpmnLayouter ],
      connectionDocking: [ 'type', CroppingConnectionDocking ]
    };

    var DEFAULT_RENDER_PRIORITY$1 = 1000;

    /**
     * @typedef {import('../core/Types').ElementLike} Element
     * @typedef {import('../core/Types').ConnectionLike} Connection
     * @typedef {import('../core/Types').ShapeLike} Shape
     *
     * @typedef {import('../core/EventBus').default} EventBus
     */

    /**
     * The base implementation of shape and connection renderers.
     *
     * @param {EventBus} eventBus
     * @param {number} [renderPriority=1000]
     */
    function BaseRenderer(eventBus, renderPriority) {
      var self = this;

      renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY$1;

      eventBus.on([ 'render.shape', 'render.connection' ], renderPriority, function(evt, context) {
        var type = evt.type,
            element = context.element,
            visuals = context.gfx,
            attrs = context.attrs;

        if (self.canRender(element)) {
          if (type === 'render.shape') {
            return self.drawShape(visuals, element, attrs);
          } else {
            return self.drawConnection(visuals, element, attrs);
          }
        }
      });

      eventBus.on([ 'render.getShapePath', 'render.getConnectionPath' ], renderPriority, function(evt, element) {
        if (self.canRender(element)) {
          if (evt.type === 'render.getShapePath') {
            return self.getShapePath(element);
          } else {
            return self.getConnectionPath(element);
          }
        }
      });
    }

    /**
     * Checks whether an element can be rendered.
     *
     * @param {Element} element The element to be rendered.
     *
     * @return {boolean} Whether the element can be rendered.
     */
    BaseRenderer.prototype.canRender = function(element) {};

    /**
     * Draws a shape.
     *
     * @param {SVGElement} visuals The SVG element to draw the shape into.
     * @param {Shape} shape The shape to be drawn.
     *
     * @return {SVGElement} The SVG element of the shape drawn.
     */
    BaseRenderer.prototype.drawShape = function(visuals, shape) {};

    /**
     * Draws a connection.
     *
     * @param {SVGElement} visuals The SVG element to draw the connection into.
     * @param {Connection} connection The connection to be drawn.
     *
     * @return {SVGElement} The SVG element of the connection drawn.
     */
    BaseRenderer.prototype.drawConnection = function(visuals, connection) {};

    /**
     * Gets the SVG path of the graphical representation of a shape.
     *
     * @param {Shape} shape The shape.
     *
     * @return {string} The SVG path of the shape.
     */
    BaseRenderer.prototype.getShapePath = function(shape) {};

    /**
     * Gets the SVG path of the graphical representation of a connection.
     *
     * @param {Connection} connection The connection.
     *
     * @return {string} The SVG path of the connection.
     */
    BaseRenderer.prototype.getConnectionPath = function(connection) {};

    var black = 'hsl(225, 10%, 15%)';

    // element utils //////////////////////

    /**
     * Checks if eventDefinition of the given element matches with semantic type.
     *
     * @param {ModdleElement} event
     * @param {string} eventDefinitionType
     *
     * @return {boolean}
     */
    function isTypedEvent(event, eventDefinitionType) {
      return some(event.eventDefinitions, function(definition) {
        return definition.$type === eventDefinitionType;
      });
    }

    /**
     * Check if element is a throw event.
     *
     * @param {ModdleElement} event
     *
     * @return {boolean}
     */
    function isThrowEvent(event) {
      return (event.$type === 'bpmn:IntermediateThrowEvent') || (event.$type === 'bpmn:EndEvent');
    }

    /**
     * Check if element is a throw event.
     *
     * @param {ModdleElement} element
     *
     * @return {boolean}
     */
    function isCollection(element) {
      var dataObject = element.dataObjectRef;

      return element.isCollection || (dataObject && dataObject.isCollection);
    }


    // color access //////////////////////

    /**
     * @param {DiagramElement} element
     * @param {string} defaultColor
     *
     * @return {string}
     */
    function getFillColor(element, defaultColor) {
      var di = getDi(element);

      return di.get('color:background-color') || di.get('bioc:fill') || defaultColor || 'white';
    }

    /**
     * @param {DiagramElement} element
     * @param {string} defaultColor
     *
     * @return {string}
     */
    function getStrokeColor(element, defaultColor) {
      var di = getDi(element);

      return di.get('color:border-color') || di.get('bioc:stroke') || defaultColor || black;
    }

    /**
     * @param {DiagramElement} element
     * @param {string} defaultColor
     * @param {string} defaultStrokeColor
     *
     * @return {string}
     */
    function getLabelColor(element, defaultColor, defaultStrokeColor) {
      var di = getDi(element),
          label = di.get('label');

      return label && label.get('color:color') || defaultColor ||
        getStrokeColor(element, defaultStrokeColor);
    }

    // cropping path customizations //////////////////////

    /**
     * @param {ShapeLike} shape
     *
     * @return {string} path
     */
    function getCirclePath(shape) {

      var cx = shape.x + shape.width / 2,
          cy = shape.y + shape.height / 2,
          radius = shape.width / 2;

      var circlePath = [
        [ 'M', cx, cy ],
        [ 'm', 0, -radius ],
        [ 'a', radius, radius, 0, 1, 1, 0, 2 * radius ],
        [ 'a', radius, radius, 0, 1, 1, 0, -2 * radius ],
        [ 'z' ]
      ];

      return componentsToPath(circlePath);
    }

    /**
     * @param {ShapeLike} shape
     *
     * @return {string} path
     */
    function getRoundRectPath(shape, borderRadius) {

      var x = shape.x,
          y = shape.y,
          width = shape.width,
          height = shape.height;

      var roundRectPath = [
        [ 'M', x + borderRadius, y ],
        [ 'l', width - borderRadius * 2, 0 ],
        [ 'a', borderRadius, borderRadius, 0, 0, 1, borderRadius, borderRadius ],
        [ 'l', 0, height - borderRadius * 2 ],
        [ 'a', borderRadius, borderRadius, 0, 0, 1, -borderRadius, borderRadius ],
        [ 'l', borderRadius * 2 - width, 0 ],
        [ 'a', borderRadius, borderRadius, 0, 0, 1, -borderRadius, -borderRadius ],
        [ 'l', 0, borderRadius * 2 - height ],
        [ 'a', borderRadius, borderRadius, 0, 0, 1, borderRadius, -borderRadius ],
        [ 'z' ]
      ];

      return componentsToPath(roundRectPath);
    }

    /**
     * @param {ShapeLike} shape
     *
     * @return {string} path
     */
    function getDiamondPath(shape) {

      var width = shape.width,
          height = shape.height,
          x = shape.x,
          y = shape.y,
          halfWidth = width / 2,
          halfHeight = height / 2;

      var diamondPath = [
        [ 'M', x + halfWidth, y ],
        [ 'l', halfWidth, halfHeight ],
        [ 'l', -halfWidth, halfHeight ],
        [ 'l', -halfWidth, -halfHeight ],
        [ 'z' ]
      ];

      return componentsToPath(diamondPath);
    }

    /**
     * @param {ShapeLike} shape
     *
     * @return {string} path
     */
    function getRectPath(shape) {
      var x = shape.x,
          y = shape.y,
          width = shape.width,
          height = shape.height;

      var rectPath = [
        [ 'M', x, y ],
        [ 'l', width, 0 ],
        [ 'l', 0, height ],
        [ 'l', -width, 0 ],
        [ 'z' ]
      ];

      return componentsToPath(rectPath);
    }

    var RENDERER_IDS = new Ids();

    var TASK_BORDER_RADIUS = 10;
    var INNER_OUTER_DIST = 3;

    var DEFAULT_FILL_OPACITY = .95,
        HIGH_FILL_OPACITY = .35;

    var ELEMENT_LABEL_DISTANCE = 10;

    /**
     * @typedef { Partial<{
     *   defaultFillColor: string,
     *   defaultStrokeColor: string,
     *   defaultLabelColor: string
     * }> } BpmnRendererConfig
     */

    /**
     * @typedef { import('../model').DiagramElement } DiagramElement
     */

    /**
     * A renderer for BPMN elements
     *
     * @param {BpmnRendererConfig} config
     * @param {import('diagram-js/lib/core/EventBus').default} eventBus
     * @param {import('diagram-js/lib/draw/Styles').default} styles
     * @param {import('./PathMap').default} pathMap
     * @param {import('diagram-js/lib/core/Canvas').default} canvas
     * @param {import('./TextRenderer').default} textRenderer
     * @param {number} [priority]
     */
    function BpmnRenderer(
        config, eventBus, styles, pathMap,
        canvas, textRenderer, priority) {

      BaseRenderer.call(this, eventBus, priority);

      var defaultFillColor = config && config.defaultFillColor,
          defaultStrokeColor = config && config.defaultStrokeColor,
          defaultLabelColor = config && config.defaultLabelColor;

      var rendererId = RENDERER_IDS.next();

      var markers = {};

      function shapeStyle(attrs) {
        return styles.computeStyle(attrs, {
          strokeLinecap: 'round',
          strokeLinejoin: 'round',
          stroke: black,
          strokeWidth: 2,
          fill: 'white'
        });
      }

      function lineStyle(attrs) {
        return styles.computeStyle(attrs, [ 'no-fill' ], {
          strokeLinecap: 'round',
          strokeLinejoin: 'round',
          stroke: black,
          strokeWidth: 2
        });
      }

      function addMarker(id, options) {
        var {
          ref = { x: 0, y: 0 },
          scale = 1,
          element
        } = options;

        var marker = create$1('marker', {
          id: id,
          viewBox: '0 0 20 20',
          refX: ref.x,
          refY: ref.y,
          markerWidth: 20 * scale,
          markerHeight: 20 * scale,
          orient: 'auto'
        });

        append(marker, element);

        var defs = query('defs', canvas._svg);

        if (!defs) {
          defs = create$1('defs');

          append(canvas._svg, defs);
        }

        append(defs, marker);

        markers[id] = marker;
      }

      function colorEscape(str) {

        // only allow characters and numbers
        return str.replace(/[^0-9a-zA-z]+/g, '_');
      }

      function marker(type, fill, stroke) {
        var id = type + '-' + colorEscape(fill) + '-' + colorEscape(stroke) + '-' + rendererId;

        if (!markers[id]) {
          createMarker(id, type, fill, stroke);
        }

        return 'url(#' + id + ')';
      }

      function createMarker(id, type, fill, stroke) {

        if (type === 'sequenceflow-end') {
          var sequenceflowEnd = create$1('path', {
            d: 'M 1 5 L 11 10 L 1 15 Z',
            ...shapeStyle({
              fill: stroke,
              stroke: stroke,
              strokeWidth: 1
            })
          });

          addMarker(id, {
            element: sequenceflowEnd,
            ref: { x: 11, y: 10 },
            scale: 0.5
          });
        }

        if (type === 'messageflow-start') {
          var messageflowStart = create$1('circle', {
            cx: 6,
            cy: 6,
            r: 3.5,
            ...shapeStyle({
              fill: fill,
              stroke: stroke,
              strokeWidth: 1,

              // fix for safari / chrome / firefox bug not correctly
              // resetting stroke dash array
              strokeDasharray: [ 10000, 1 ]
            })
          });

          addMarker(id, {
            element: messageflowStart,
            ref: { x: 6, y: 6 }
          });
        }

        if (type === 'messageflow-end') {
          var messageflowEnd = create$1('path', {
            d: 'm 1 5 l 0 -3 l 7 3 l -7 3 z',
            ...shapeStyle({
              fill: fill,
              stroke: stroke,
              strokeWidth: 1,

              // fix for safari / chrome / firefox bug not correctly
              // resetting stroke dash array
              strokeDasharray: [ 10000, 1 ]
            })
          });

          addMarker(id, {
            element: messageflowEnd,
            ref: { x: 8.5, y: 5 }
          });
        }

        if (type === 'association-start') {
          var associationStart = create$1('path', {
            d: 'M 11 5 L 1 10 L 11 15',
            ...lineStyle({
              fill: 'none',
              stroke: stroke,
              strokeWidth: 1.5,

              // fix for safari / chrome / firefox bug not correctly
              // resetting stroke dash array
              strokeDasharray: [ 10000, 1 ]
            })
          });

          addMarker(id, {
            element: associationStart,
            ref: { x: 1, y: 10 },
            scale: 0.5
          });
        }

        if (type === 'association-end') {
          var associationEnd = create$1('path', {
            d: 'M 1 5 L 11 10 L 1 15',
            ...lineStyle({
              fill: 'none',
              stroke: stroke,
              strokeWidth: 1.5,

              // fix for safari / chrome / firefox bug not correctly
              // resetting stroke dash array
              strokeDasharray: [ 10000, 1 ]
            })
          });

          addMarker(id, {
            element: associationEnd,
            ref: { x: 11, y: 10 },
            scale: 0.5
          });
        }

        if (type === 'conditional-flow-marker') {
          var conditionalFlowMarker = create$1('path', {
            d: 'M 0 10 L 8 6 L 16 10 L 8 14 Z',
            ...shapeStyle({
              fill: fill,
              stroke: stroke
            })
          });

          addMarker(id, {
            element: conditionalFlowMarker,
            ref: { x: -1, y: 10 },
            scale: 0.5
          });
        }

        if (type === 'conditional-default-flow-marker') {
          var defaultFlowMarker = create$1('path', {
            d: 'M 6 4 L 10 16',
            ...shapeStyle({
              stroke: stroke
            })
          });

          addMarker(id, {
            element: defaultFlowMarker,
            ref: { x: 0, y: 10 },
            scale: 0.5
          });
        }
      }

      function drawCircle(parentGfx, width, height, offset, attrs) {

        if (isObject(offset)) {
          attrs = offset;
          offset = 0;
        }

        offset = offset || 0;

        attrs = shapeStyle(attrs);

        if (attrs.fill === 'none') {
          delete attrs.fillOpacity;
        }

        var cx = width / 2,
            cy = height / 2;

        var circle = create$1('circle', {
          cx: cx,
          cy: cy,
          r: Math.round((width + height) / 4 - offset),
          ...attrs
        });

        append(parentGfx, circle);

        return circle;
      }

      function drawRect(parentGfx, width, height, r, offset, attrs) {

        if (isObject(offset)) {
          attrs = offset;
          offset = 0;
        }

        offset = offset || 0;

        attrs = shapeStyle(attrs);

        var rect = create$1('rect', {
          x: offset,
          y: offset,
          width: width - offset * 2,
          height: height - offset * 2,
          rx: r,
          ry: r,
          ...attrs
        });

        append(parentGfx, rect);

        return rect;
      }

      function drawDiamond(parentGfx, width, height, attrs) {

        var x_2 = width / 2;
        var y_2 = height / 2;

        var points = [
          { x: x_2, y: 0 },
          { x: width, y: y_2 },
          { x: x_2, y: height },
          { x: 0, y: y_2 }
        ];

        var pointsString = points.map(function(point) {
          return point.x + ',' + point.y;
        }).join(' ');

        attrs = shapeStyle(attrs);

        var polygon = create$1('polygon', {
          ...attrs,
          points: pointsString
        });

        append(parentGfx, polygon);

        return polygon;
      }

      /**
       * @param {SVGElement} parentGfx
       * @param {Point[]} waypoints
       * @param {any} attrs
       * @param {number} [radius]
       *
       * @return {SVGElement}
       */
      function drawLine(parentGfx, waypoints, attrs, radius) {
        attrs = lineStyle(attrs);

        var line = createLine(waypoints, attrs, radius);

        append(parentGfx, line);

        return line;
      }

      /**
       * @param {SVGElement} parentGfx
       * @param {Point[]} waypoints
       * @param {any} attrs
       *
       * @return {SVGElement}
       */
      function drawConnectionSegments(parentGfx, waypoints, attrs) {
        return drawLine(parentGfx, waypoints, attrs, 5);
      }

      function drawPath(parentGfx, d, attrs) {

        attrs = lineStyle(attrs);

        var path = create$1('path', {
          ...attrs,
          d
        });

        append(parentGfx, path);

        return path;
      }

      function drawMarker(type, parentGfx, path, attrs) {
        return drawPath(parentGfx, path, assign$1({ 'data-marker': type }, attrs));
      }

      function renderer(type) {
        return handlers[type];
      }

      function as(type) {
        return function(parentGfx, element) {
          return renderer(type)(parentGfx, element);
        };
      }

      function renderEventContent(element, parentGfx) {

        var event = getBusinessObject(element);
        var isThrowing = isThrowEvent(event);

        if (event.eventDefinitions && event.eventDefinitions.length > 1) {
          if (event.parallelMultiple) {
            return renderer('bpmn:ParallelMultipleEventDefinition')(parentGfx, element, isThrowing);
          }
          else {
            return renderer('bpmn:MultipleEventDefinition')(parentGfx, element, isThrowing);
          }
        }

        if (isTypedEvent(event, 'bpmn:MessageEventDefinition')) {
          return renderer('bpmn:MessageEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:TimerEventDefinition')) {
          return renderer('bpmn:TimerEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:ConditionalEventDefinition')) {
          return renderer('bpmn:ConditionalEventDefinition')(parentGfx, element);
        }

        if (isTypedEvent(event, 'bpmn:SignalEventDefinition')) {
          return renderer('bpmn:SignalEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:EscalationEventDefinition')) {
          return renderer('bpmn:EscalationEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:LinkEventDefinition')) {
          return renderer('bpmn:LinkEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:ErrorEventDefinition')) {
          return renderer('bpmn:ErrorEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:CancelEventDefinition')) {
          return renderer('bpmn:CancelEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:CompensateEventDefinition')) {
          return renderer('bpmn:CompensateEventDefinition')(parentGfx, element, isThrowing);
        }

        if (isTypedEvent(event, 'bpmn:TerminateEventDefinition')) {
          return renderer('bpmn:TerminateEventDefinition')(parentGfx, element, isThrowing);
        }

        return null;
      }

      function renderLabel(parentGfx, label, options) {

        options = assign$1({
          size: {
            width: 100
          }
        }, options);

        var text = textRenderer.createText(label || '', options);

        classes(text).add('djs-label');

        append(parentGfx, text);

        return text;
      }

      function renderEmbeddedLabel(parentGfx, element, align) {
        var semantic = getBusinessObject(element);

        return renderLabel(parentGfx, semantic.name, {
          box: element,
          align: align,
          padding: 7,
          style: {
            fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
          }
        });
      }

      function renderExternalLabel(parentGfx, element) {

        var box = {
          width: 90,
          height: 30,
          x: element.width / 2 + element.x,
          y: element.height / 2 + element.y
        };

        return renderLabel(parentGfx, getLabel(element), {
          box: box,
          fitBox: true,
          style: assign$1(
            {},
            textRenderer.getExternalStyle(),
            {
              fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
            }
          )
        });
      }

      function renderLaneLabel(parentGfx, text, element) {
        var textBox = renderLabel(parentGfx, text, {
          box: {
            height: 30,
            width: element.height
          },
          align: 'center-middle',
          style: {
            fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
          }
        });

        var top = -1 * element.height;

        transform(textBox, 0, -top, 270);
      }

      var handlers = this.handlers = {
        'bpmn:Event': function(parentGfx, element, attrs) {

          if (!('fillOpacity' in attrs)) {
            attrs.fillOpacity = DEFAULT_FILL_OPACITY;
          }

          return drawCircle(parentGfx, element.width, element.height, attrs);
        },
        'bpmn:StartEvent': function(parentGfx, element) {
          var attrs = {
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          };

          var semantic = getBusinessObject(element);

          if (!semantic.isInterrupting) {
            attrs = {
              strokeDasharray: '6',
              fill: getFillColor(element, defaultFillColor),
              stroke: getStrokeColor(element, defaultStrokeColor)
            };
          }

          var circle = renderer('bpmn:Event')(parentGfx, element, attrs);

          renderEventContent(element, parentGfx);

          return circle;
        },
        'bpmn:MessageEventDefinition': function(parentGfx, element, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_MESSAGE', {
            xScaleFactor: 0.9,
            yScaleFactor: 0.9,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.235,
              my: 0.315
            }
          });

          var fill = isThrowing ? getStrokeColor(element, defaultStrokeColor) : getFillColor(element, defaultFillColor);
          var stroke = isThrowing ? getFillColor(element, defaultFillColor) : getStrokeColor(element, defaultStrokeColor);

          var messagePath = drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill,
            stroke: stroke
          });

          return messagePath;
        },
        'bpmn:TimerEventDefinition': function(parentGfx, element) {
          var circle = drawCircle(parentGfx, element.width, element.height, 0.2 * element.height, {
            strokeWidth: 2,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var pathData = pathMap.getScaledPath('EVENT_TIMER_WH', {
            xScaleFactor: 0.75,
            yScaleFactor: 0.75,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.5,
              my: 0.5
            }
          });

          drawPath(parentGfx, pathData, {
            strokeWidth: 2,
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          for (var i = 0;i < 12; i++) {

            var linePathData = pathMap.getScaledPath('EVENT_TIMER_LINE', {
              xScaleFactor: 0.75,
              yScaleFactor: 0.75,
              containerWidth: element.width,
              containerHeight: element.height,
              position: {
                mx: 0.5,
                my: 0.5
              }
            });

            var width = element.width / 2;
            var height = element.height / 2;

            drawPath(parentGfx, linePathData, {
              strokeWidth: 1,
              transform: 'rotate(' + (i * 30) + ',' + height + ',' + width + ')',
              stroke: getStrokeColor(element, defaultStrokeColor)
            });
          }

          return circle;
        },
        'bpmn:EscalationEventDefinition': function(parentGfx, event, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_ESCALATION', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.5,
              my: 0.2
            }
          });

          var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill,
            stroke: getStrokeColor(event, defaultStrokeColor)
          });
        },
        'bpmn:ConditionalEventDefinition': function(parentGfx, event) {
          var pathData = pathMap.getScaledPath('EVENT_CONDITIONAL', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.5,
              my: 0.222
            }
          });

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            stroke: getStrokeColor(event, defaultStrokeColor)
          });
        },
        'bpmn:LinkEventDefinition': function(parentGfx, event, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_LINK', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.57,
              my: 0.263
            }
          });

          var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill,
            stroke: getStrokeColor(event, defaultStrokeColor)
          });
        },
        'bpmn:ErrorEventDefinition': function(parentGfx, event, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_ERROR', {
            xScaleFactor: 1.1,
            yScaleFactor: 1.1,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.2,
              my: 0.722
            }
          });

          var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill,
            stroke: getStrokeColor(event, defaultStrokeColor)
          });
        },
        'bpmn:CancelEventDefinition': function(parentGfx, event, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_CANCEL_45', {
            xScaleFactor: 1.0,
            yScaleFactor: 1.0,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.638,
              my: -0.055
            }
          });

          var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

          var path = drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill,
            stroke: getStrokeColor(event, defaultStrokeColor)
          });

          rotate(path, 45);

          return path;
        },
        'bpmn:CompensateEventDefinition': function(parentGfx, event, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_COMPENSATION', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.22,
              my: 0.5
            }
          });

          var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill,
            stroke: getStrokeColor(event, defaultStrokeColor)
          });
        },
        'bpmn:SignalEventDefinition': function(parentGfx, event, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_SIGNAL', {
            xScaleFactor: 0.9,
            yScaleFactor: 0.9,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.5,
              my: 0.2
            }
          });

          var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill,
            stroke: getStrokeColor(event, defaultStrokeColor)
          });
        },
        'bpmn:MultipleEventDefinition': function(parentGfx, event, isThrowing) {
          var pathData = pathMap.getScaledPath('EVENT_MULTIPLE', {
            xScaleFactor: 1.1,
            yScaleFactor: 1.1,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.222,
              my: 0.36
            }
          });

          var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: fill
          });
        },
        'bpmn:ParallelMultipleEventDefinition': function(parentGfx, event) {
          var pathData = pathMap.getScaledPath('EVENT_PARALLEL_MULTIPLE', {
            xScaleFactor: 1.2,
            yScaleFactor: 1.2,
            containerWidth: event.width,
            containerHeight: event.height,
            position: {
              mx: 0.458,
              my: 0.194
            }
          });

          return drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: getStrokeColor(event, defaultStrokeColor),
            stroke: getStrokeColor(event, defaultStrokeColor)
          });
        },
        'bpmn:EndEvent': function(parentGfx, element) {
          var circle = renderer('bpmn:Event')(parentGfx, element, {
            strokeWidth: 4,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          renderEventContent(element, parentGfx);

          return circle;
        },
        'bpmn:TerminateEventDefinition': function(parentGfx, element) {
          var circle = drawCircle(parentGfx, element.width, element.height, 8, {
            strokeWidth: 4,
            fill: getStrokeColor(element, defaultStrokeColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return circle;
        },
        'bpmn:IntermediateEvent': function(parentGfx, element) {
          var outer = renderer('bpmn:Event')(parentGfx, element, {
            strokeWidth: 1.5,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          /* inner */
          drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, {
            strokeWidth: 1.5,
            fill: getFillColor(element, 'none'),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          renderEventContent(element, parentGfx);

          return outer;
        },
        'bpmn:IntermediateCatchEvent': as('bpmn:IntermediateEvent'),
        'bpmn:IntermediateThrowEvent': as('bpmn:IntermediateEvent'),

        'bpmn:Activity': function(parentGfx, element, attrs) {

          attrs = attrs || {};

          if (!('fillOpacity' in attrs)) {
            attrs.fillOpacity = DEFAULT_FILL_OPACITY;
          }

          return drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS, attrs);
        },

        'bpmn:Task': function(parentGfx, element) {
          var attrs = {
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          };

          var rect = renderer('bpmn:Activity')(parentGfx, element, attrs);

          renderEmbeddedLabel(parentGfx, element, 'center-middle');
          attachTaskMarkers(parentGfx, element);

          return rect;
        },
        'bpmn:ServiceTask': function(parentGfx, element) {
          var task = renderer('bpmn:Task')(parentGfx, element);

          var pathDataBG = pathMap.getScaledPath('TASK_TYPE_SERVICE', {
            abspos: {
              x: 12,
              y: 18
            }
          });

          /* service bg */ drawPath(parentGfx, pathDataBG, {
            strokeWidth: 1,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var fillPathData = pathMap.getScaledPath('TASK_TYPE_SERVICE_FILL', {
            abspos: {
              x: 17.2,
              y: 18
            }
          });

          /* service fill */ drawPath(parentGfx, fillPathData, {
            strokeWidth: 0,
            fill: getFillColor(element, defaultFillColor)
          });

          var pathData = pathMap.getScaledPath('TASK_TYPE_SERVICE', {
            abspos: {
              x: 17,
              y: 22
            }
          });

          /* service */ drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return task;
        },
        'bpmn:UserTask': function(parentGfx, element) {
          var task = renderer('bpmn:Task')(parentGfx, element);

          var x = 15;
          var y = 12;

          var pathData = pathMap.getScaledPath('TASK_TYPE_USER_1', {
            abspos: {
              x: x,
              y: y
            }
          });

          /* user path */ drawPath(parentGfx, pathData, {
            strokeWidth: 0.5,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var pathData2 = pathMap.getScaledPath('TASK_TYPE_USER_2', {
            abspos: {
              x: x,
              y: y
            }
          });

          /* user2 path */ drawPath(parentGfx, pathData2, {
            strokeWidth: 0.5,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var pathData3 = pathMap.getScaledPath('TASK_TYPE_USER_3', {
            abspos: {
              x: x,
              y: y
            }
          });

          /* user3 path */ drawPath(parentGfx, pathData3, {
            strokeWidth: 0.5,
            fill: getStrokeColor(element, defaultStrokeColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return task;
        },
        'bpmn:ManualTask': function(parentGfx, element) {
          var task = renderer('bpmn:Task')(parentGfx, element);

          var pathData = pathMap.getScaledPath('TASK_TYPE_MANUAL', {
            abspos: {
              x: 17,
              y: 15
            }
          });

          /* manual path */ drawPath(parentGfx, pathData, {
            strokeWidth: 0.5, // 0.25,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return task;
        },
        'bpmn:SendTask': function(parentGfx, element) {
          var task = renderer('bpmn:Task')(parentGfx, element);

          var pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: 21,
            containerHeight: 14,
            position: {
              mx: 0.285,
              my: 0.357
            }
          });

          /* send path */ drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: getStrokeColor(element, defaultStrokeColor),
            stroke: getFillColor(element, defaultFillColor)
          });

          return task;
        },
        'bpmn:ReceiveTask' : function(parentGfx, element) {
          var semantic = getBusinessObject(element);

          var task = renderer('bpmn:Task')(parentGfx, element);
          var pathData;

          if (semantic.instantiate) {
            drawCircle(parentGfx, 28, 28, 20 * 0.22, { strokeWidth: 1 });

            pathData = pathMap.getScaledPath('TASK_TYPE_INSTANTIATING_SEND', {
              abspos: {
                x: 7.77,
                y: 9.52
              }
            });
          } else {

            pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {
              xScaleFactor: 0.9,
              yScaleFactor: 0.9,
              containerWidth: 21,
              containerHeight: 14,
              position: {
                mx: 0.3,
                my: 0.4
              }
            });
          }

          /* receive path */ drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return task;
        },
        'bpmn:ScriptTask': function(parentGfx, element) {
          var task = renderer('bpmn:Task')(parentGfx, element);

          var pathData = pathMap.getScaledPath('TASK_TYPE_SCRIPT', {
            abspos: {
              x: 15,
              y: 20
            }
          });

          /* script path */ drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return task;
        },
        'bpmn:BusinessRuleTask': function(parentGfx, element) {
          var task = renderer('bpmn:Task')(parentGfx, element);

          var headerPathData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_HEADER', {
            abspos: {
              x: 8,
              y: 8
            }
          });

          var businessHeaderPath = drawPath(parentGfx, headerPathData);
          attr(businessHeaderPath, {
            strokeWidth: 1,
            fill: getFillColor(element, '#aaaaaa'),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var headerData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_MAIN', {
            abspos: {
              x: 8,
              y: 8
            }
          });

          var businessPath = drawPath(parentGfx, headerData);
          attr(businessPath, {
            strokeWidth: 1,
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return task;
        },
        'bpmn:SubProcess': function(parentGfx, element, attrs) {
          attrs = {
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor),
            ...attrs
          };

          var rect = renderer('bpmn:Activity')(parentGfx, element, attrs);

          var expanded = isExpanded(element);

          if (isEventSubProcess(element)) {
            attr(rect, {
              strokeDasharray: '0, 5.5',
              strokeWidth: 2.5
            });
          }

          renderEmbeddedLabel(parentGfx, element, expanded ? 'center-top' : 'center-middle');

          if (expanded) {
            attachTaskMarkers(parentGfx, element);
          } else {
            attachTaskMarkers(parentGfx, element, [ 'SubProcessMarker' ]);
          }

          return rect;
        },
        'bpmn:AdHocSubProcess': function(parentGfx, element) {
          return renderer('bpmn:SubProcess')(parentGfx, element);
        },
        'bpmn:Transaction': function(parentGfx, element) {
          var outer = renderer('bpmn:SubProcess')(parentGfx, element, { strokeWidth: 1.5 });

          var innerAttrs = styles.style([ 'no-fill', 'no-events' ], {
            stroke: getStrokeColor(element, defaultStrokeColor),
            strokeWidth: 1.5
          });

          /* inner path */ drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS - 3, INNER_OUTER_DIST, innerAttrs);

          return outer;
        },
        'bpmn:CallActivity': function(parentGfx, element) {
          return renderer('bpmn:SubProcess')(parentGfx, element, {
            strokeWidth: 5
          });
        },
        'bpmn:Participant': function(parentGfx, element) {

          var strokeWidth = 1.5;

          var attrs = {
            fillOpacity: DEFAULT_FILL_OPACITY,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor),
            strokeWidth
          };

          var lane = renderer('bpmn:Lane')(parentGfx, element, attrs);

          var expandedPool = isExpanded(element);

          if (expandedPool) {
            drawLine(parentGfx, [
              { x: 30, y: 0 },
              { x: 30, y: element.height }
            ], {
              stroke: getStrokeColor(element, defaultStrokeColor),
              strokeWidth
            });
            var text = getBusinessObject(element).name;
            renderLaneLabel(parentGfx, text, element);
          } else {

            // collapsed pool draw text inline
            var text2 = getBusinessObject(element).name;
            renderLabel(parentGfx, text2, {
              box: element, align: 'center-middle',
              style: {
                fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
              }
            });
          }

          var participantMultiplicity = !!(getBusinessObject(element).participantMultiplicity);

          if (participantMultiplicity) {
            renderer('ParticipantMultiplicityMarker')(parentGfx, element);
          }

          return lane;
        },
        'bpmn:Lane': function(parentGfx, element, attrs) {
          var rect = drawRect(parentGfx, element.width, element.height, 0, {
            fill: getFillColor(element, defaultFillColor),
            fillOpacity: HIGH_FILL_OPACITY,
            stroke: getStrokeColor(element, defaultStrokeColor),
            strokeWidth: 1.5,
            ...attrs
          });

          var semantic = getBusinessObject(element);

          if (semantic.$type === 'bpmn:Lane') {
            var text = semantic.name;
            renderLaneLabel(parentGfx, text, element);
          }

          return rect;
        },
        'bpmn:InclusiveGateway': function(parentGfx, element) {
          var diamond = renderer('bpmn:Gateway')(parentGfx, element);

          /* circle path */
          drawCircle(parentGfx, element.width, element.height, element.height * 0.24, {
            strokeWidth: 2.5,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return diamond;
        },
        'bpmn:ExclusiveGateway': function(parentGfx, element) {
          var diamond = renderer('bpmn:Gateway')(parentGfx, element);

          var pathData = pathMap.getScaledPath('GATEWAY_EXCLUSIVE', {
            xScaleFactor: 0.4,
            yScaleFactor: 0.4,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.32,
              my: 0.3
            }
          });

          if ((getDi(element).isMarkerVisible)) {
            drawPath(parentGfx, pathData, {
              strokeWidth: 1,
              fill: getStrokeColor(element, defaultStrokeColor),
              stroke: getStrokeColor(element, defaultStrokeColor)
            });
          }

          return diamond;
        },
        'bpmn:ComplexGateway': function(parentGfx, element) {
          var diamond = renderer('bpmn:Gateway')(parentGfx, element);

          var pathData = pathMap.getScaledPath('GATEWAY_COMPLEX', {
            xScaleFactor: 0.5,
            yScaleFactor:0.5,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.46,
              my: 0.26
            }
          });

          /* complex path */ drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: getStrokeColor(element, defaultStrokeColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return diamond;
        },
        'bpmn:ParallelGateway': function(parentGfx, element) {
          var diamond = renderer('bpmn:Gateway')(parentGfx, element);

          var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {
            xScaleFactor: 0.6,
            yScaleFactor:0.6,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.46,
              my: 0.2
            }
          });

          /* parallel path */ drawPath(parentGfx, pathData, {
            strokeWidth: 1,
            fill: getStrokeColor(element, defaultStrokeColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return diamond;
        },
        'bpmn:EventBasedGateway': function(parentGfx, element) {

          var semantic = getBusinessObject(element);

          var diamond = renderer('bpmn:Gateway')(parentGfx, element);

          /* outer circle path */ drawCircle(parentGfx, element.width, element.height, element.height * 0.20, {
            strokeWidth: 1,
            fill: 'none',
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var type = semantic.eventGatewayType;
          var instantiate = !!semantic.instantiate;

          function drawEvent() {

            var pathData = pathMap.getScaledPath('GATEWAY_EVENT_BASED', {
              xScaleFactor: 0.18,
              yScaleFactor: 0.18,
              containerWidth: element.width,
              containerHeight: element.height,
              position: {
                mx: 0.36,
                my: 0.44
              }
            });

            /* event path */ drawPath(parentGfx, pathData, {
              strokeWidth: 2,
              fill: getFillColor(element, 'none'),
              stroke: getStrokeColor(element, defaultStrokeColor)
            });
          }

          if (type === 'Parallel') {

            var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {
              xScaleFactor: 0.4,
              yScaleFactor:0.4,
              containerWidth: element.width,
              containerHeight: element.height,
              position: {
                mx: 0.474,
                my: 0.296
              }
            });

            drawPath(parentGfx, pathData, {
              strokeWidth: 1,
              fill: 'none'
            });
          } else if (type === 'Exclusive') {

            if (!instantiate) {
              drawCircle(parentGfx, element.width, element.height, element.height * 0.26, {
                strokeWidth: 1,
                fill: 'none',
                stroke: getStrokeColor(element, defaultStrokeColor)
              });
            }

            drawEvent();
          }


          return diamond;
        },
        'bpmn:Gateway': function(parentGfx, element) {
          return drawDiamond(parentGfx, element.width, element.height, {
            fill: getFillColor(element, defaultFillColor),
            fillOpacity: DEFAULT_FILL_OPACITY,
            stroke: getStrokeColor(element, defaultStrokeColor)
          });
        },
        'bpmn:SequenceFlow': function(parentGfx, element) {
          var fill = getFillColor(element, defaultFillColor),
              stroke = getStrokeColor(element, defaultStrokeColor);

          var path = drawConnectionSegments(parentGfx, element.waypoints, {
            markerEnd: marker('sequenceflow-end', fill, stroke),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var sequenceFlow = getBusinessObject(element);

          var source;

          if (element.source) {
            source = element.source.businessObject;

            // conditional flow marker
            if (sequenceFlow.conditionExpression && source.$instanceOf('bpmn:Activity')) {
              attr(path, {
                markerStart: marker('conditional-flow-marker', fill, stroke)
              });
            }

            // default marker
            if (source.default && (source.$instanceOf('bpmn:Gateway') || source.$instanceOf('bpmn:Activity')) &&
                source.default === sequenceFlow) {
              attr(path, {
                markerStart: marker('conditional-default-flow-marker', fill, stroke)
              });
            }
          }

          return path;
        },
        'bpmn:Association': function(parentGfx, element, attrs) {

          var semantic = getBusinessObject(element);

          var fill = getFillColor(element, defaultFillColor),
              stroke = getStrokeColor(element, defaultStrokeColor);

          attrs = {
            strokeDasharray: '0, 5',
            stroke: getStrokeColor(element, defaultStrokeColor),
            ...attrs
          };

          if (semantic.associationDirection === 'One' ||
              semantic.associationDirection === 'Both') {
            attrs.markerEnd = marker('association-end', fill, stroke);
          }

          if (semantic.associationDirection === 'Both') {
            attrs.markerStart = marker('association-start', fill, stroke);
          }

          return drawConnectionSegments(parentGfx, element.waypoints, attrs);
        },
        'bpmn:DataInputAssociation': function(parentGfx, element) {
          var fill = getFillColor(element, defaultFillColor),
              stroke = getStrokeColor(element, defaultStrokeColor);

          return renderer('bpmn:Association')(parentGfx, element, {
            markerEnd: marker('association-end', fill, stroke)
          });
        },
        'bpmn:DataOutputAssociation': function(parentGfx, element) {
          var fill = getFillColor(element, defaultFillColor),
              stroke = getStrokeColor(element, defaultStrokeColor);

          return renderer('bpmn:Association')(parentGfx, element, {
            markerEnd: marker('association-end', fill, stroke)
          });
        },
        'bpmn:MessageFlow': function(parentGfx, element) {

          var semantic = getBusinessObject(element),
              di = getDi(element);

          var fill = getFillColor(element, defaultFillColor),
              stroke = getStrokeColor(element, defaultStrokeColor);

          var path = drawConnectionSegments(parentGfx, element.waypoints, {
            markerEnd: marker('messageflow-end', fill, stroke),
            markerStart: marker('messageflow-start', fill, stroke),
            strokeDasharray: '10, 11',
            strokeWidth: 1.5,
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          if (semantic.messageRef) {
            var midPoint = path.getPointAtLength(path.getTotalLength() / 2);

            var markerPathData = pathMap.getScaledPath('MESSAGE_FLOW_MARKER', {
              abspos: {
                x: midPoint.x,
                y: midPoint.y
              }
            });

            var messageAttrs = { strokeWidth: 1 };

            if (di.messageVisibleKind === 'initiating') {
              messageAttrs.fill = 'white';
              messageAttrs.stroke = black;
            } else {
              messageAttrs.fill = '#888';
              messageAttrs.stroke = 'white';
            }

            var message = drawPath(parentGfx, markerPathData, messageAttrs);

            var labelText = semantic.messageRef.name;
            var label = renderLabel(parentGfx, labelText, {
              align: 'center-top',
              fitBox: true,
              style: {
                fill: getStrokeColor(element, defaultLabelColor)
              }
            });

            var messageBounds = message.getBBox(),
                labelBounds = label.getBBox();

            var translateX = midPoint.x - labelBounds.width / 2,
                translateY = midPoint.y + messageBounds.height / 2 + ELEMENT_LABEL_DISTANCE;

            transform(label, translateX, translateY, 0);

          }

          return path;
        },
        'bpmn:DataObject': function(parentGfx, element) {
          var pathData = pathMap.getScaledPath('DATA_OBJECT_PATH', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.474,
              my: 0.296
            }
          });

          var elementObject = drawPath(parentGfx, pathData, {
            fill: getFillColor(element, defaultFillColor),
            fillOpacity: DEFAULT_FILL_OPACITY,
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var semantic = getBusinessObject(element);

          if (isCollection(semantic)) {
            renderDataItemCollection(parentGfx, element);
          }

          return elementObject;
        },
        'bpmn:DataObjectReference': as('bpmn:DataObject'),
        'bpmn:DataInput': function(parentGfx, element) {

          var arrowPathData = pathMap.getRawPath('DATA_ARROW');

          // page
          var elementObject = renderer('bpmn:DataObject')(parentGfx, element);

          /* input arrow path */ drawPath(parentGfx, arrowPathData, { strokeWidth: 1 });

          return elementObject;
        },
        'bpmn:DataOutput': function(parentGfx, element) {
          var arrowPathData = pathMap.getRawPath('DATA_ARROW');

          // page
          var elementObject = renderer('bpmn:DataObject')(parentGfx, element);

          /* output arrow path */ drawPath(parentGfx, arrowPathData, {
            strokeWidth: 1,
            fill: black
          });

          return elementObject;
        },
        'bpmn:DataStoreReference': function(parentGfx, element) {
          var DATA_STORE_PATH = pathMap.getScaledPath('DATA_STORE', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0,
              my: 0.133
            }
          });

          var elementStore = drawPath(parentGfx, DATA_STORE_PATH, {
            strokeWidth: 2,
            fill: getFillColor(element, defaultFillColor),
            fillOpacity: DEFAULT_FILL_OPACITY,
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          return elementStore;
        },
        'bpmn:BoundaryEvent': function(parentGfx, element) {

          var semantic = getBusinessObject(element),
              cancel = semantic.cancelActivity;

          var attrs = {
            strokeWidth: 1.5,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          };

          if (!cancel) {
            attrs.strokeDasharray = '6';
          }

          // apply fillOpacity
          var outerAttrs = {
            ...attrs,
            fillOpacity: 1
          };

          // apply no-fill
          var innerAttrs = {
            ...attrs,
            fill: 'none'
          };

          var outer = renderer('bpmn:Event')(parentGfx, element, outerAttrs);

          /* inner path */ drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, innerAttrs);

          renderEventContent(element, parentGfx);

          return outer;
        },
        'bpmn:Group': function(parentGfx, element) {
          return drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS, {
            stroke: getStrokeColor(element, defaultStrokeColor),
            strokeWidth: 1.5,
            strokeDasharray: '10,6,0,6',
            fill: 'none',
            pointerEvents: 'none'
          });
        },
        'label': function(parentGfx, element) {
          return renderExternalLabel(parentGfx, element);
        },
        'bpmn:TextAnnotation': function(parentGfx, element) {
          var textElement = drawRect(parentGfx, element.width, element.height, 0, 0, {
            'fill': 'none',
            'stroke': 'none'
          });

          var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: 0.0,
              my: 0.0
            }
          });

          drawPath(parentGfx, textPathData, {
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          var text = getBusinessObject(element).text || '';
          renderLabel(parentGfx, text, {
            box: element,
            align: 'left-top',
            padding: 7,
            style: {
              fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
            }
          });

          return textElement;
        },
        'ParticipantMultiplicityMarker': function(parentGfx, element) {
          var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: ((element.width / 2) / element.width),
              my: (element.height - 15) / element.height
            }
          });

          drawMarker('participant-multiplicity', parentGfx, markerPath, {
            strokeWidth: 2,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });
        },
        'SubProcessMarker': function(parentGfx, element) {
          var markerRect = drawRect(parentGfx, 14, 14, 0, {
            strokeWidth: 1,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });

          // Process marker is placed in the middle of the box
          // therefore fixed values can be used here
          translate(markerRect, element.width / 2 - 7.5, element.height - 20);

          var markerPath = pathMap.getScaledPath('MARKER_SUB_PROCESS', {
            xScaleFactor: 1.5,
            yScaleFactor: 1.5,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: (element.width / 2 - 7.5) / element.width,
              my: (element.height - 20) / element.height
            }
          });

          drawMarker('sub-process', parentGfx, markerPath, {
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });
        },
        'ParallelMarker': function(parentGfx, element, position) {
          var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: ((element.width / 2 + position.parallel) / element.width),
              my: (element.height - 20) / element.height
            }
          });

          drawMarker('parallel', parentGfx, markerPath, {
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });
        },
        'SequentialMarker': function(parentGfx, element, position) {
          var markerPath = pathMap.getScaledPath('MARKER_SEQUENTIAL', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: ((element.width / 2 + position.seq) / element.width),
              my: (element.height - 19) / element.height
            }
          });

          drawMarker('sequential', parentGfx, markerPath, {
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });
        },
        'CompensationMarker': function(parentGfx, element, position) {
          var markerMath = pathMap.getScaledPath('MARKER_COMPENSATION', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: ((element.width / 2 + position.compensation) / element.width),
              my: (element.height - 13) / element.height
            }
          });

          drawMarker('compensation', parentGfx, markerMath, {
            strokeWidth: 1,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });
        },
        'LoopMarker': function(parentGfx, element, position) {
          var markerPath = pathMap.getScaledPath('MARKER_LOOP', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: ((element.width / 2 + position.loop) / element.width),
              my: (element.height - 7) / element.height
            }
          });

          drawMarker('loop', parentGfx, markerPath, {
            strokeWidth: 1.5,
            fill: getFillColor(element, defaultFillColor),
            stroke: getStrokeColor(element, defaultStrokeColor),
            strokeMiterlimit: 0.5
          });
        },
        'AdhocMarker': function(parentGfx, element, position) {
          var markerPath = pathMap.getScaledPath('MARKER_ADHOC', {
            xScaleFactor: 1,
            yScaleFactor: 1,
            containerWidth: element.width,
            containerHeight: element.height,
            position: {
              mx: ((element.width / 2 + position.adhoc) / element.width),
              my: (element.height - 15) / element.height
            }
          });

          drawMarker('adhoc', parentGfx, markerPath, {
            strokeWidth: 1,
            fill: getStrokeColor(element, defaultStrokeColor),
            stroke: getStrokeColor(element, defaultStrokeColor)
          });
        }
      };

      function attachTaskMarkers(parentGfx, element, taskMarkers) {
        var obj = getBusinessObject(element);

        var subprocess = taskMarkers && taskMarkers.indexOf('SubProcessMarker') !== -1;
        var position;

        if (subprocess) {
          position = {
            seq: -21,
            parallel: -22,
            compensation: -42,
            loop: -18,
            adhoc: 10
          };
        } else {
          position = {
            seq: -3,
            parallel: -6,
            compensation: -27,
            loop: 0,
            adhoc: 10
          };
        }

        forEach$1(taskMarkers, function(marker) {
          renderer(marker)(parentGfx, element, position);
        });

        if (obj.isForCompensation) {
          renderer('CompensationMarker')(parentGfx, element, position);
        }

        if (obj.$type === 'bpmn:AdHocSubProcess') {
          renderer('AdhocMarker')(parentGfx, element, position);
        }

        var loopCharacteristics = obj.loopCharacteristics,
            isSequential = loopCharacteristics && loopCharacteristics.isSequential;

        if (loopCharacteristics) {

          if (isSequential === undefined) {
            renderer('LoopMarker')(parentGfx, element, position);
          }

          if (isSequential === false) {
            renderer('ParallelMarker')(parentGfx, element, position);
          }

          if (isSequential === true) {
            renderer('SequentialMarker')(parentGfx, element, position);
          }
        }
      }

      function renderDataItemCollection(parentGfx, element) {

        var yPosition = (element.height - 18) / element.height;

        var pathData = pathMap.getScaledPath('DATA_OBJECT_COLLECTION_PATH', {
          xScaleFactor: 1,
          yScaleFactor: 1,
          containerWidth: element.width,
          containerHeight: element.height,
          position: {
            mx: 0.33,
            my: yPosition
          }
        });

        /* collection path */ drawPath(parentGfx, pathData, {
          strokeWidth: 2
        });
      }


      // extension API, use at your own risk
      this._drawPath = drawPath;

      this._renderer = renderer;
    }


    e(BpmnRenderer, BaseRenderer);

    BpmnRenderer.$inject = [
      'config.bpmnRenderer',
      'eventBus',
      'styles',
      'pathMap',
      'canvas',
      'textRenderer'
    ];


    /**
     * @param {DiagramElement} element
     *
     * @return {boolean}
     */
    BpmnRenderer.prototype.canRender = function(element) {
      return is$2(element, 'bpmn:BaseElement');
    };

    /**
     * Draw shape into parentGfx.
     *
     * @param {SVGElement} parentGfx
     * @param {DiagramElement} element
     *
     * @return {SVGElement} mainGfx
     */
    BpmnRenderer.prototype.drawShape = function(parentGfx, element) {
      var type = element.type;
      var h = this._renderer(type);

      /* jshint -W040 */
      return h(parentGfx, element);
    };

    /**
     * Draw connection into parentGfx.
     *
     * @param {SVGElement} parentGfx
     * @param {DiagramElement} element
     *
     * @return {SVGElement} mainGfx
     */
    BpmnRenderer.prototype.drawConnection = function(parentGfx, element) {
      var type = element.type;
      var h = this._renderer(type);

      /* jshint -W040 */
      return h(parentGfx, element);
    };

    /**
     * Get shape path.
     *
     * @param {DiagramElement} element
     *
     * @return {string} path
     */
    BpmnRenderer.prototype.getShapePath = function(element) {

      if (is$2(element, 'bpmn:Event')) {
        return getCirclePath(element);
      }

      if (is$2(element, 'bpmn:Activity')) {
        return getRoundRectPath(element, TASK_BORDER_RADIUS);
      }

      if (is$2(element, 'bpmn:Gateway')) {
        return getDiamondPath(element);
      }

      return getRectPath(element);
    };

    /**
     * @typedef {import('../util/Types').Dimensions} Dimensions
     *
     * @typedef { {
     *   top: number;
     *   left: number;
     *   right: number;
     *   bottom: number;
     * } } Padding
     *
     * @typedef { number | Partial<Padding> } PaddingConfig
     *
     * @typedef { {
     *   horizontal: 'center' | 'left';
     *   vertical: 'top' | 'center';
     * } } Alignment
     *
     *  @typedef { 'center-middle' | 'center-top' } AlignmentConfig
     *
     * @typedef { Partial<{
     *   align: AlignmentConfig;
     *   style: Record<string, any>;
     *   padding: PaddingConfig;
     * }> } BaseTextConfig
     *
     * @typedef { BaseTextConfig & Partial<{
     *   size: Dimensions;
     * }> } TextConfig
     *
     * @typedef { BaseTextConfig & Partial<{
     *   box: Dimensions;
     *   fitBox: boolean;
     * }> } TextLayoutConfig
     *
     *  @typedef { Dimensions & {
     *  text: string;
     * } } LineDescriptor
     */

    var DEFAULT_BOX_PADDING = 0;

    var DEFAULT_LABEL_SIZE = {
      width: 150,
      height: 50
    };


    /**
     * @param {AlignmentConfig} align
     * @return {Alignment}
     */
    function parseAlign(align) {

      var parts = align.split('-');

      return {
        horizontal: parts[0] || 'center',
        vertical: parts[1] || 'top'
      };
    }

    /**
     * @param {PaddingConfig} padding
     *
     * @return {Padding}
     */
    function parsePadding(padding) {

      if (isObject(padding)) {
        return assign$1({ top: 0, left: 0, right: 0, bottom: 0 }, padding);
      } else {
        return {
          top: padding,
          left: padding,
          right: padding,
          bottom: padding
        };
      }
    }

    /**
     * @param {string} text
     * @param {SVGTextElement} fakeText
     *
     * @return {import('../util/Types').Dimensions}
     */
    function getTextBBox(text, fakeText) {

      fakeText.textContent = text;

      var textBBox;

      try {
        var bbox,
            emptyLine = text === '';

        // add dummy text, when line is empty to
        // determine correct height
        fakeText.textContent = emptyLine ? 'dummy' : text;

        textBBox = fakeText.getBBox();

        // take text rendering related horizontal
        // padding into account
        bbox = {
          width: textBBox.width + textBBox.x * 2,
          height: textBBox.height
        };

        if (emptyLine) {

          // correct width
          bbox.width = 0;
        }

        return bbox;
      } catch (e) {
        return { width: 0, height: 0 };
      }
    }


    /**
     * Layout the next line and return the layouted element.
     *
     * Alters the lines passed.
     *
     * @param {string[]} lines
     *
     * @return {LineDescriptor} the line descriptor
     */
    function layoutNext(lines, maxWidth, fakeText) {

      var originalLine = lines.shift(),
          fitLine = originalLine;

      var textBBox;

      for (;;) {
        textBBox = getTextBBox(fitLine, fakeText);

        textBBox.width = fitLine ? textBBox.width : 0;

        // try to fit
        if (fitLine === ' ' || fitLine === '' || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {
          return fit(lines, fitLine, originalLine, textBBox);
        }

        fitLine = shortenLine(fitLine, textBBox.width, maxWidth);
      }
    }

    /**
     * @param {string[]} lines
     * @param {string} fitLine
     * @param {string} originalLine
     * @param {Dimensions} textBBox
     *
     * @return {LineDescriptor}
     */
    function fit(lines, fitLine, originalLine, textBBox) {
      if (fitLine.length < originalLine.length) {
        var remainder = originalLine.slice(fitLine.length).trim();

        lines.unshift(remainder);
      }

      return {
        width: textBBox.width,
        height: textBBox.height,
        text: fitLine
      };
    }

    var SOFT_BREAK = '\u00AD';


    /**
     * Shortens a line based on spacing and hyphens.
     * Returns the shortened result on success.
     *
     * @param {string} line
     * @param {number} maxLength the maximum characters of the string
     *
     * @return {string} the shortened string
     */
    function semanticShorten(line, maxLength) {

      var parts = line.split(/(\s|-|\u00AD)/g),
          part,
          shortenedParts = [],
          length = 0;

      // try to shorten via break chars
      if (parts.length > 1) {

        while ((part = parts.shift())) {
          if (part.length + length < maxLength) {
            shortenedParts.push(part);
            length += part.length;
          } else {

            // remove previous part, too if hyphen does not fit anymore
            if (part === '-' || part === SOFT_BREAK) {
              shortenedParts.pop();
            }

            break;
          }
        }
      }

      var last = shortenedParts[shortenedParts.length - 1];

      // translate trailing soft break to actual hyphen
      if (last && last === SOFT_BREAK) {
        shortenedParts[shortenedParts.length - 1] = '-';
      }

      return shortenedParts.join('');
    }


    /**
     * @param {string} line
     * @param {number} width
     * @param {number} maxWidth
     *
     * @return {string}
     */
    function shortenLine(line, width, maxWidth) {
      var length = Math.max(line.length * (maxWidth / width), 1);

      // try to shorten semantically (i.e. based on spaces and hyphens)
      var shortenedLine = semanticShorten(line, length);

      if (!shortenedLine) {

        // force shorten by cutting the long word
        shortenedLine = line.slice(0, Math.max(Math.round(length - 1), 1));
      }

      return shortenedLine;
    }


    /**
     * @return {SVGSVGElement}
     */
    function getHelperSvg() {
      var helperSvg = document.getElementById('helper-svg');

      if (!helperSvg) {
        helperSvg = create$1('svg');

        attr(helperSvg, {
          id: 'helper-svg'
        });

        assign(helperSvg, {
          visibility: 'hidden',
          position: 'fixed',
          width: 0,
          height: 0
        });

        document.body.appendChild(helperSvg);
      }

      return helperSvg;
    }


    /**
     * Creates a new label utility
     *
     * @param {TextConfig} config
     */
    function Text(config) {

      this._config = assign$1({}, {
        size: DEFAULT_LABEL_SIZE,
        padding: DEFAULT_BOX_PADDING,
        style: {},
        align: 'center-top'
      }, config || {});
    }

    /**
     * Returns the layouted text as an SVG element.
     *
     * @param {string} text
     * @param {TextLayoutConfig} options
     *
     * @return {SVGElement}
     */
    Text.prototype.createText = function(text, options) {
      return this.layoutText(text, options).element;
    };

    /**
     * Returns a labels layouted dimensions.
     *
     * @param {string} text to layout
     * @param {TextLayoutConfig} options
     *
     * @return {Dimensions}
     */
    Text.prototype.getDimensions = function(text, options) {
      return this.layoutText(text, options).dimensions;
    };

    /**
     * Creates and returns a label and its bounding box.
     *
     * @param {string} text the text to render on the label
     * @param {TextLayoutConfig} options
     *
     * @return { {
     *   element: SVGElement,
     *   dimensions: Dimensions
     * } }
     */
    Text.prototype.layoutText = function(text, options) {
      var box = assign$1({}, this._config.size, options.box),
          style = assign$1({}, this._config.style, options.style),
          align = parseAlign(options.align || this._config.align),
          padding = parsePadding(options.padding !== undefined ? options.padding : this._config.padding),
          fitBox = options.fitBox || false;

      var lineHeight = getLineHeight(style);

      // we split text by lines and normalize
      // {soft break} + {line break} => { line break }
      var lines = text.split(/\u00AD?\r?\n/),
          layouted = [];

      var maxWidth = box.width - padding.left - padding.right;

      // ensure correct rendering by attaching helper text node to invisible SVG
      var helperText = create$1('text');
      attr(helperText, { x: 0, y: 0 });
      attr(helperText, style);

      var helperSvg = getHelperSvg();

      append(helperSvg, helperText);

      while (lines.length) {
        layouted.push(layoutNext(lines, maxWidth, helperText));
      }

      if (align.vertical === 'middle') {
        padding.top = padding.bottom = 0;
      }

      var totalHeight = reduce(layouted, function(sum, line, idx) {
        return sum + (lineHeight || line.height);
      }, 0) + padding.top + padding.bottom;

      var maxLineWidth = reduce(layouted, function(sum, line, idx) {
        return line.width > sum ? line.width : sum;
      }, 0);

      // the y position of the next line
      var y = padding.top;

      if (align.vertical === 'middle') {
        y += (box.height - totalHeight) / 2;
      }

      // magic number initial offset
      y -= (lineHeight || layouted[0].height) / 4;


      var textElement = create$1('text');

      attr(textElement, style);

      // layout each line taking into account that parent
      // shape might resize to fit text size
      forEach$1(layouted, function(line) {

        var x;

        y += (lineHeight || line.height);

        switch (align.horizontal) {
        case 'left':
          x = padding.left;
          break;

        case 'right':
          x = ((fitBox ? maxLineWidth : maxWidth)
            - padding.right - line.width);
          break;

        default:

          // aka center
          x = Math.max((((fitBox ? maxLineWidth : maxWidth)
            - line.width) / 2 + padding.left), 0);
        }

        var tspan = create$1('tspan');
        attr(tspan, { x: x, y: y });

        tspan.textContent = line.text;

        append(textElement, tspan);
      });

      remove(helperText);

      var dimensions = {
        width: maxLineWidth,
        height: totalHeight
      };

      return {
        dimensions: dimensions,
        element: textElement
      };
    };


    function getLineHeight(style) {
      if ('fontSize' in style && 'lineHeight' in style) {
        return style.lineHeight * parseInt(style.fontSize, 10);
      }
    }

    var DEFAULT_FONT_SIZE = 12;
    var LINE_HEIGHT_RATIO = 1.2;

    var MIN_TEXT_ANNOTATION_HEIGHT = 30;

    /**
     * @typedef { {
     *   fontFamily: string;
     *   fontSize: number;
     *   fontWeight: string;
     *   lineHeight: number;
     * } } TextRendererStyle
     *
     * @typedef { {
     *   defaultStyle?: Partial<TextRendererStyle>;
     *   externalStyle?: Partial<TextRendererStyle>;
     * } } TextRendererConfig
     *
     * @typedef { import('diagram-js/lib/util/Text').TextLayoutConfig } TextLayoutConfig
     *
     * @typedef { import('diagram-js/lib/util/Types').Rect } Rect
     */


    /**
     * Renders text and computes text bounding boxes.
     *
     * @param {TextRendererConfig} [config]
     */
    function TextRenderer(config) {

      var defaultStyle = assign$1({
        fontFamily: 'Arial, sans-serif',
        fontSize: DEFAULT_FONT_SIZE,
        fontWeight: 'normal',
        lineHeight: LINE_HEIGHT_RATIO
      }, config && config.defaultStyle || {});

      var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;

      var externalStyle = assign$1({}, defaultStyle, {
        fontSize: fontSize
      }, config && config.externalStyle || {});

      var textUtil = new Text({
        style: defaultStyle
      });

      /**
       * Get the new bounds of an externally rendered,
       * layouted label.
       *
       * @param {Rect} bounds
       * @param {string} text
       *
       * @return {Rect}
       */
      this.getExternalLabelBounds = function(bounds, text) {

        var layoutedDimensions = textUtil.getDimensions(text, {
          box: {
            width: 90,
            height: 30
          },
          style: externalStyle
        });

        // resize label shape to fit label text
        return {
          x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),
          y: Math.round(bounds.y),
          width: Math.ceil(layoutedDimensions.width),
          height: Math.ceil(layoutedDimensions.height)
        };

      };

      /**
       * Get the new bounds of text annotation.
       *
       * @param {Rect} bounds
       * @param {string} text
       *
       * @return {Rect}
       */
      this.getTextAnnotationBounds = function(bounds, text) {

        var layoutedDimensions = textUtil.getDimensions(text, {
          box: bounds,
          style: defaultStyle,
          align: 'left-top',
          padding: 5
        });

        return {
          x: bounds.x,
          y: bounds.y,
          width: bounds.width,
          height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))
        };
      };

      /**
       * Create a layouted text element.
       *
       * @param {string} text
       * @param {TextLayoutConfig} [options]
       *
       * @return {SVGElement} rendered text
       */
      this.createText = function(text, options) {
        return textUtil.createText(text, options || {});
      };

      /**
       * Get default text style.
       */
      this.getDefaultStyle = function() {
        return defaultStyle;
      };

      /**
       * Get the external text style.
       */
      this.getExternalStyle = function() {
        return externalStyle;
      };

    }

    TextRenderer.$inject = [
      'config.textRenderer'
    ];

    /**
     * Map containing SVG paths needed by BpmnRenderer
     */
    function PathMap() {

      /**
       * Contains a map of path elements
       *
       * <h1>Path definition</h1>
       * A parameterized path is defined like this:
       * <pre>
       * 'GATEWAY_PARALLEL': {
       *   d: 'm {mx},{my} {e.x0},0 0,{e.x1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +
              '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',
       *   height: 17.5,
       *   width:  17.5,
       *   heightElements: [2.5, 7.5],
       *   widthElements: [2.5, 7.5]
       * }
       * </pre>
       * <p>It's important to specify a correct <b>height and width</b> for the path as the scaling
       * is based on the ratio between the specified height and width in this object and the
       * height and width that is set as scale target (Note x,y coordinates will be scaled with
       * individual ratios).</p>
       * <p>The '<b>heightElements</b>' and '<b>widthElements</b>' array must contain the values that will be scaled.
       * The scaling is based on the computed ratios.
       * Coordinates on the y axis should be in the <b>heightElement</b>'s array, they will be scaled using
       * the computed ratio coefficient.
       * In the parameterized path the scaled values can be accessed through the 'e' object in {} brackets.
       *   <ul>
       *    <li>The values for the y axis can be accessed in the path string using {e.y0}, {e.y1}, ....</li>
       *    <li>The values for the x axis can be accessed in the path string using {e.x0}, {e.x1}, ....</li>
       *   </ul>
       *   The numbers x0, x1 respectively y0, y1, ... map to the corresponding array index.
       * </p>
       */
      this.pathMap = {
        'EVENT_MESSAGE': {
          d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',
          height: 36,
          width:  36,
          heightElements: [ 6, 14 ],
          widthElements: [ 10.5, 21 ]
        },
        'EVENT_SIGNAL': {
          d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x1},0 Z',
          height: 36,
          width: 36,
          heightElements: [ 18 ],
          widthElements: [ 10, 20 ]
        },
        'EVENT_ESCALATION': {
          d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x0},-{e.y1} l -{e.x0},{e.y1} Z',
          height: 36,
          width: 36,
          heightElements: [ 20, 7 ],
          widthElements: [ 8 ]
        },
        'EVENT_CONDITIONAL': {
          d: 'M {e.x0},{e.y0} l {e.x1},0 l 0,{e.y2} l -{e.x1},0 Z ' +
             'M {e.x2},{e.y3} l {e.x0},0 ' +
             'M {e.x2},{e.y4} l {e.x0},0 ' +
             'M {e.x2},{e.y5} l {e.x0},0 ' +
             'M {e.x2},{e.y6} l {e.x0},0 ' +
             'M {e.x2},{e.y7} l {e.x0},0 ' +
             'M {e.x2},{e.y8} l {e.x0},0 ',
          height: 36,
          width:  36,
          heightElements: [ 8.5, 14.5, 18, 11.5, 14.5, 17.5, 20.5, 23.5, 26.5 ],
          widthElements:  [ 10.5, 14.5, 12.5 ]
        },
        'EVENT_LINK': {
          d: 'm {mx},{my} 0,{e.y0} -{e.x1},0 0,{e.y1} {e.x1},0 0,{e.y0} {e.x0},-{e.y2} -{e.x0},-{e.y2} z',
          height: 36,
          width: 36,
          heightElements: [ 4.4375, 6.75, 7.8125 ],
          widthElements: [ 9.84375, 13.5 ]
        },
        'EVENT_ERROR': {
          d: 'm {mx},{my} {e.x0},-{e.y0} {e.x1},-{e.y1} {e.x2},{e.y2} {e.x3},-{e.y3} -{e.x4},{e.y4} -{e.x5},-{e.y5} z',
          height: 36,
          width: 36,
          heightElements: [ 0.023, 8.737, 8.151, 16.564, 10.591, 8.714 ],
          widthElements: [ 0.085, 6.672, 6.97, 4.273, 5.337, 6.636 ]
        },
        'EVENT_CANCEL_45': {
          d: 'm {mx},{my} -{e.x1},0 0,{e.x0} {e.x1},0 0,{e.y1} {e.x0},0 ' +
            '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',
          height: 36,
          width: 36,
          heightElements: [ 4.75, 8.5 ],
          widthElements: [ 4.75, 8.5 ]
        },
        'EVENT_COMPENSATION': {
          d: 'm {mx},{my} {e.x0},-{e.y0} 0,{e.y1} z m {e.x1},-{e.y2} {e.x2},-{e.y3} 0,{e.y1} -{e.x2},-{e.y3} z',
          height: 36,
          width: 36,
          heightElements: [ 6.5, 13, 0.4, 6.1 ],
          widthElements: [ 9, 9.3, 8.7 ]
        },
        'EVENT_TIMER_WH': {
          d: 'M {mx},{my} l {e.x0},-{e.y0} m -{e.x0},{e.y0} l {e.x1},{e.y1} ',
          height: 36,
          width:  36,
          heightElements: [ 10, 2 ],
          widthElements: [ 3, 7 ]
        },
        'EVENT_TIMER_LINE': {
          d:  'M {mx},{my} ' +
              'm {e.x0},{e.y0} l -{e.x1},{e.y1} ',
          height: 36,
          width:  36,
          heightElements: [ 10, 3 ],
          widthElements: [ 0, 0 ]
        },
        'EVENT_MULTIPLE': {
          d:'m {mx},{my} {e.x1},-{e.y0} {e.x1},{e.y0} -{e.x0},{e.y1} -{e.x2},0 z',
          height: 36,
          width:  36,
          heightElements: [ 6.28099, 12.56199 ],
          widthElements: [ 3.1405, 9.42149, 12.56198 ]
        },
        'EVENT_PARALLEL_MULTIPLE': {
          d:'m {mx},{my} {e.x0},0 0,{e.y1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +
            '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',
          height: 36,
          width:  36,
          heightElements: [ 2.56228, 7.68683 ],
          widthElements: [ 2.56228, 7.68683 ]
        },
        'GATEWAY_EXCLUSIVE': {
          d:'m {mx},{my} {e.x0},{e.y0} {e.x1},{e.y0} {e.x2},0 {e.x4},{e.y2} ' +
                        '{e.x4},{e.y1} {e.x2},0 {e.x1},{e.y3} {e.x0},{e.y3} ' +
                        '{e.x3},0 {e.x5},{e.y1} {e.x5},{e.y2} {e.x3},0 z',
          height: 17.5,
          width:  17.5,
          heightElements: [ 8.5, 6.5312, -6.5312, -8.5 ],
          widthElements:  [ 6.5, -6.5, 3, -3, 5, -5 ]
        },
        'GATEWAY_PARALLEL': {
          d:'m {mx},{my} 0,{e.y1} -{e.x1},0 0,{e.y0} {e.x1},0 0,{e.y1} {e.x0},0 ' +
            '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',
          height: 30,
          width:  30,
          heightElements: [ 5, 12.5 ],
          widthElements: [ 5, 12.5 ]
        },
        'GATEWAY_EVENT_BASED': {
          d:'m {mx},{my} {e.x0},{e.y0} {e.x0},{e.y1} {e.x1},{e.y2} {e.x2},0 z',
          height: 11,
          width:  11,
          heightElements: [ -6, 6, 12, -12 ],
          widthElements: [ 9, -3, -12 ]
        },
        'GATEWAY_COMPLEX': {
          d:'m {mx},{my} 0,{e.y0} -{e.x0},-{e.y1} -{e.x1},{e.y2} {e.x0},{e.y1} -{e.x2},0 0,{e.y3} ' +
            '{e.x2},0  -{e.x0},{e.y1} l {e.x1},{e.y2} {e.x0},-{e.y1} 0,{e.y0} {e.x3},0 0,-{e.y0} {e.x0},{e.y1} ' +
            '{e.x1},-{e.y2} -{e.x0},-{e.y1} {e.x2},0 0,-{e.y3} -{e.x2},0 {e.x0},-{e.y1} -{e.x1},-{e.y2} ' +
            '-{e.x0},{e.y1} 0,-{e.y0} -{e.x3},0 z',
          height: 17.125,
          width:  17.125,
          heightElements: [ 4.875, 3.4375, 2.125, 3 ],
          widthElements: [ 3.4375, 2.125, 4.875, 3 ]
        },
        'DATA_OBJECT_PATH': {
          d:'m 0,0 {e.x1},0 {e.x0},{e.y0} 0,{e.y1} -{e.x2},0 0,-{e.y2} {e.x1},0 0,{e.y0} {e.x0},0',
          height: 61,
          width:  51,
          heightElements: [ 10, 50, 60 ],
          widthElements: [ 10, 40, 50, 60 ]
        },
        'DATA_OBJECT_COLLECTION_PATH': {
          d: 'm{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10',
          height: 10,
          width: 10,
          heightElements: [],
          widthElements: []
        },
        'DATA_ARROW': {
          d:'m 5,9 9,0 0,-3 5,5 -5,5 0,-3 -9,0 z',
          height: 61,
          width:  51,
          heightElements: [],
          widthElements: []
        },
        'DATA_STORE': {
          d:'m  {mx},{my} ' +
            'l  0,{e.y2} ' +
            'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +
            'l  0,-{e.y2} ' +
            'c -{e.x0},-{e.y1} -{e.x1},-{e.y1} -{e.x2},0' +
            'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +
            'm  -{e.x2},{e.y0}' +
            'c  {e.x0},{e.y1} {e.x1},{e.y1} {e.x2},0' +
            'm  -{e.x2},{e.y0}' +
            'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0',
          height: 61,
          width:  61,
          heightElements: [ 7, 10, 45 ],
          widthElements:  [ 2, 58, 60 ]
        },
        'TEXT_ANNOTATION': {
          d: 'm {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0',
          height: 30,
          width: 10,
          heightElements: [ 30 ],
          widthElements: [ 10 ]
        },
        'MARKER_SUB_PROCESS': {
          d: 'm{mx},{my} m 7,2 l 0,10 m -5,-5 l 10,0',
          height: 10,
          width: 10,
          heightElements: [],
          widthElements: []
        },
        'MARKER_PARALLEL': {
          d: 'm{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10',
          height: 10,
          width: 10,
          heightElements: [],
          widthElements: []
        },
        'MARKER_SEQUENTIAL': {
          d: 'm{mx},{my} m 0,3 l 10,0 m -10,3 l 10,0 m -10,3 l 10,0',
          height: 10,
          width: 10,
          heightElements: [],
          widthElements: []
        },
        'MARKER_COMPENSATION': {
          d: 'm {mx},{my} 7,-5 0,10 z m 7.1,-0.3 6.9,-4.7 0,10 -6.9,-4.7 z',
          height: 10,
          width: 21,
          heightElements: [],
          widthElements: []
        },
        'MARKER_LOOP': {
          d: 'm {mx},{my} c 3.526979,0 6.386161,-2.829858 6.386161,-6.320661 0,-3.490806 -2.859182,-6.320661 ' +
            '-6.386161,-6.320661 -3.526978,0 -6.38616,2.829855 -6.38616,6.320661 0,1.745402 ' +
            '0.714797,3.325567 1.870463,4.469381 0.577834,0.571908 1.265885,1.034728 2.029916,1.35457 ' +
            'l -0.718163,-3.909793 m 0.718163,3.909793 -3.885211,0.802902',
          height: 13.9,
          width: 13.7,
          heightElements: [],
          widthElements: []
        },
        'MARKER_ADHOC': {
          d: 'm {mx},{my} m 0.84461,2.64411 c 1.05533,-1.23780996 2.64337,-2.07882 4.29653,-1.97997996 2.05163,0.0805 ' +
            '3.85579,1.15803 5.76082,1.79107 1.06385,0.34139996 2.24454,0.1438 3.18759,-0.43767 0.61743,-0.33642 ' +
            '1.2775,-0.64078 1.7542,-1.17511 0,0.56023 0,1.12046 0,1.6807 -0.98706,0.96237996 -2.29792,1.62393996 ' +
            '-3.6918,1.66181996 -1.24459,0.0927 -2.46671,-0.2491 -3.59505,-0.74812 -1.35789,-0.55965 ' +
            '-2.75133,-1.33436996 -4.27027,-1.18121996 -1.37741,0.14601 -2.41842,1.13685996 -3.44288,1.96782996 z',
          height: 4,
          width: 15,
          heightElements: [],
          widthElements: []
        },
        'TASK_TYPE_SEND': {
          d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',
          height: 14,
          width:  21,
          heightElements: [ 6, 14 ],
          widthElements: [ 10.5, 21 ]
        },
        'TASK_TYPE_SCRIPT': {
          d: 'm {mx},{my} c 9.966553,-6.27276 -8.000926,-7.91932 2.968968,-14.938 l -8.802728,0 ' +
            'c -10.969894,7.01868 6.997585,8.66524 -2.968967,14.938 z ' +
            'm -7,-12 l 5,0 ' +
            'm -4.5,3 l 4.5,0 ' +
            'm -3,3 l 5,0' +
            'm -4,3 l 5,0',
          height: 15,
          width:  12.6,
          heightElements: [ 6, 14 ],
          widthElements: [ 10.5, 21 ]
        },
        'TASK_TYPE_USER_1': {
          d: 'm {mx},{my} c 0.909,-0.845 1.594,-2.049 1.594,-3.385 0,-2.554 -1.805,-4.62199999 ' +
            '-4.357,-4.62199999 -2.55199998,0 -4.28799998,2.06799999 -4.28799998,4.62199999 0,1.348 ' +
            '0.974,2.562 1.89599998,3.405 -0.52899998,0.187 -5.669,2.097 -5.794,4.7560005 v 6.718 ' +
            'h 17 v -6.718 c 0,-2.2980005 -5.5279996,-4.5950005 -6.0509996,-4.7760005 z' +
            'm -8,6 l 0,5.5 m 11,0 l 0,-5'
        },
        'TASK_TYPE_USER_2': {
          d: 'm {mx},{my} m 2.162,1.009 c 0,2.4470005 -2.158,4.4310005 -4.821,4.4310005 ' +
            '-2.66499998,0 -4.822,-1.981 -4.822,-4.4310005 '
        },
        'TASK_TYPE_USER_3': {
          d: 'm {mx},{my} m -6.9,-3.80 c 0,0 2.25099998,-2.358 4.27399998,-1.177 2.024,1.181 4.221,1.537 ' +
            '4.124,0.965 -0.098,-0.57 -0.117,-3.79099999 -4.191,-4.13599999 -3.57499998,0.001 ' +
            '-4.20799998,3.36699999 -4.20699998,4.34799999 z'
        },
        'TASK_TYPE_MANUAL': {
          d: 'm {mx},{my} c 0.234,-0.01 5.604,0.008 8.029,0.004 0.808,0 1.271,-0.172 1.417,-0.752 0.227,-0.898 ' +
            '-0.334,-1.314 -1.338,-1.316 -2.467,-0.01 -7.886,-0.004 -8.108,-0.004 -0.014,-0.079 0.016,-0.533 0,-0.61 ' +
            '0.195,-0.042 8.507,0.006 9.616,0.002 0.877,-0.007 1.35,-0.438 1.353,-1.208 0.003,-0.768 -0.479,-1.09 ' +
            '-1.35,-1.091 -2.968,-0.002 -9.619,-0.013 -9.619,-0.013 v -0.591 c 0,0 5.052,-0.016 7.225,-0.016 ' +
            '0.888,-0.002 1.354,-0.416 1.351,-1.193 -0.006,-0.761 -0.492,-1.196 -1.361,-1.196 -3.473,-0.005 ' +
            '-10.86,-0.003 -11.0829995,-0.003 -0.022,-0.047 -0.045,-0.094 -0.069,-0.139 0.3939995,-0.319 ' +
            '2.0409995,-1.626 2.4149995,-2.017 0.469,-0.4870005 0.519,-1.1650005 0.162,-1.6040005 -0.414,-0.511 ' +
            '-0.973,-0.5 -1.48,-0.236 -1.4609995,0.764 -6.5999995,3.6430005 -7.7329995,4.2710005 -0.9,0.499 ' +
            '-1.516,1.253 -1.882,2.19 -0.37000002,0.95 -0.17,2.01 -0.166,2.979 0.004,0.718 -0.27300002,1.345 ' +
            '-0.055,2.063 0.629,2.087 2.425,3.312 4.859,3.318 4.6179995,0.014 9.2379995,-0.139 13.8569995,-0.158 ' +
            '0.755,-0.004 1.171,-0.301 1.182,-1.033 0.012,-0.754 -0.423,-0.969 -1.183,-0.973 -1.778,-0.01 ' +
            '-5.824,-0.004 -6.04,-0.004 10e-4,-0.084 0.003,-0.586 10e-4,-0.67 z'
        },
        'TASK_TYPE_INSTANTIATING_SEND': {
          d: 'm {mx},{my} l 0,8.4 l 12.6,0 l 0,-8.4 z l 6.3,3.6 l 6.3,-3.6'
        },
        'TASK_TYPE_SERVICE': {
          d: 'm {mx},{my} v -1.71335 c 0.352326,-0.0705 0.703932,-0.17838 1.047628,-0.32133 ' +
            '0.344416,-0.14465 0.665822,-0.32133 0.966377,-0.52145 l 1.19431,1.18005 1.567487,-1.57688 ' +
            '-1.195028,-1.18014 c 0.403376,-0.61394 0.683079,-1.29908 0.825447,-2.01824 l 1.622133,-0.01 ' +
            'v -2.2196 l -1.636514,0.01 c -0.07333,-0.35153 -0.178319,-0.70024 -0.323564,-1.04372 ' +
            '-0.145244,-0.34406 -0.321407,-0.6644 -0.522735,-0.96217 l 1.131035,-1.13631 -1.583305,-1.56293 ' +
            '-1.129598,1.13589 c -0.614052,-0.40108 -1.302883,-0.68093 -2.022633,-0.82247 l 0.0093,-1.61852 ' +
            'h -2.241173 l 0.0042,1.63124 c -0.353763,0.0736 -0.705369,0.17977 -1.049785,0.32371 -0.344415,0.14437 ' +
            '-0.665102,0.32092 -0.9635006,0.52046 l -1.1698628,-1.15823 -1.5667691,1.5792 1.1684265,1.15669 ' +
            'c -0.4026573,0.61283 -0.68308,1.29797 -0.8247287,2.01713 l -1.6588041,0.003 v 2.22174 ' +
            'l 1.6724648,-0.006 c 0.073327,0.35077 0.1797598,0.70243 0.3242851,1.04472 0.1452428,0.34448 ' +
            '0.3214064,0.6644 0.5227339,0.96066 l -1.1993431,1.19723 1.5840256,1.56011 1.1964668,-1.19348 ' +
            'c 0.6140517,0.40346 1.3028827,0.68232 2.0233517,0.82331 l 7.19e-4,1.69892 h 2.226848 z ' +
            'm 0.221462,-3.9957 c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +
            '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +
            '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'
        },
        'TASK_TYPE_SERVICE_FILL': {
          d: 'm {mx},{my} c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +
            '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +
            '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'
        },
        'TASK_TYPE_BUSINESS_RULE_HEADER': {
          d: 'm {mx},{my} 0,4 20,0 0,-4 z'
        },
        'TASK_TYPE_BUSINESS_RULE_MAIN': {
          d: 'm {mx},{my} 0,12 20,0 0,-12 z' +
            'm 0,8 l 20,0 ' +
            'm -13,-4 l 0,8'
        },
        'MESSAGE_FLOW_MARKER': {
          d: 'm {mx},{my} m -10.5 ,-7 l 0,14 l 21,0 l 0,-14 z l 10.5,6 l 10.5,-6'
        }
      };

      /**
       * Return raw path for the given ID.
       *
       * @param {string} pathId
       *
       * @return {string} raw path
       */
      this.getRawPath = function getRawPath(pathId) {
        return this.pathMap[pathId].d;
      };

      /**
       * Scales the path to the given height and width.
       * <h1>Use case</h1>
       * <p>Use case is to scale the content of elements (event, gateways) based
       * on the element bounding box's size.
       * </p>
       * <h1>Why not transform</h1>
       * <p>Scaling a path with transform() will also scale the stroke and IE does not support
       * the option 'non-scaling-stroke' to prevent this.
       * Also there are use cases where only some parts of a path should be
       * scaled.</p>
       *
       * @param {string} pathId The ID of the path.
       * @param {Object} param <p>
       *   Example param object scales the path to 60% size of the container (data.width, data.height).
       *   <pre>
       *   {
       *     xScaleFactor: 0.6,
       *     yScaleFactor:0.6,
       *     containerWidth: data.width,
       *     containerHeight: data.height,
       *     position: {
       *       mx: 0.46,
       *       my: 0.2,
       *     }
       *   }
       *   </pre>
       *   <ul>
       *    <li>targetpathwidth = xScaleFactor * containerWidth</li>
       *    <li>targetpathheight = yScaleFactor * containerHeight</li>
       *    <li>Position is used to set the starting coordinate of the path. M is computed:
        *    <ul>
        *      <li>position.x * containerWidth</li>
        *      <li>position.y * containerHeight</li>
        *    </ul>
        *    Center of the container <pre> position: {
       *       mx: 0.5,
       *       my: 0.5,
       *     }</pre>
       *     Upper left corner of the container
       *     <pre> position: {
       *       mx: 0.0,
       *       my: 0.0,
       *     }</pre>
       *    </li>
       *   </ul>
       * </p>
       *
       * @return {string} scaled path
       */
      this.getScaledPath = function getScaledPath(pathId, param) {
        var rawPath = this.pathMap[pathId];

        // positioning
        // compute the start point of the path
        var mx, my;

        if (param.abspos) {
          mx = param.abspos.x;
          my = param.abspos.y;
        } else {
          mx = param.containerWidth * param.position.mx;
          my = param.containerHeight * param.position.my;
        }

        var coordinates = {}; // map for the scaled coordinates
        if (param.position) {

          // path
          var heightRatio = (param.containerHeight / rawPath.height) * param.yScaleFactor;
          var widthRatio = (param.containerWidth / rawPath.width) * param.xScaleFactor;


          // Apply height ratio
          for (var heightIndex = 0; heightIndex < rawPath.heightElements.length; heightIndex++) {
            coordinates['y' + heightIndex] = rawPath.heightElements[heightIndex] * heightRatio;
          }

          // Apply width ratio
          for (var widthIndex = 0; widthIndex < rawPath.widthElements.length; widthIndex++) {
            coordinates['x' + widthIndex] = rawPath.widthElements[widthIndex] * widthRatio;
          }
        }

        // Apply value to raw path
        var path = format(
          rawPath.d, {
            mx: mx,
            my: my,
            e: coordinates
          }
        );
        return path;
      };
    }

    // helpers //////////////////////

    // copied and adjusted from https://github.com/adobe-webplatform/Snap.svg/blob/master/src/svg.js
    var tokenRegex = /\{([^{}]+)\}/g,
        objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g; // matches .xxxxx or ["xxxxx"] to run over object properties

    function replacer(all, key, obj) {
      var res = obj;
      key.replace(objNotationRegex, function(all, name, quote, quotedName, isFunc) {
        name = name || quotedName;
        if (res) {
          if (name in res) {
            res = res[name];
          }
          typeof res == 'function' && isFunc && (res = res());
        }
      });
      res = (res == null || res == obj ? all : res) + '';

      return res;
    }

    function format(str, obj) {
      return String(str).replace(tokenRegex, function(all, key) {
        return replacer(all, key, obj);
      });
    }

    var DrawModule$1 = {
      __init__: [ 'bpmnRenderer' ],
      bpmnRenderer: [ 'type', BpmnRenderer ],
      textRenderer: [ 'type', TextRenderer ],
      pathMap: [ 'type', PathMap ]
    };

    function elementToString(e) {
      if (!e) {
        return '<null>';
      }

      return '<' + e.$type + (e.id ? ' id="' + e.id : '') + '" />';
    }

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     *
     * @typedef {import('../features/modeling/ElementFactory').default} ElementFactory
     * @typedef {import('../draw/TextRenderer').default} TextRenderer
     *
     * @typedef {import('../model/Types').Element} Element
     * @typedef {import('../model/Types').Label} Label
     * @typedef {import('../model/Types').Shape} Shape
     * @typedef {import('../model/Types').ModdleElement} ModdleElement
     */

    /**
     * @param {ModdleElement} semantic
     * @param {ModdleElement} di
     * @param {Object} [attrs=null]
     *
     * @return {Object}
     */
    function elementData(semantic, di, attrs) {
      return assign$1({
        id: semantic.id,
        type: semantic.$type,
        businessObject: semantic,
        di: di
      }, attrs);
    }

    function getWaypoints(di, source, target) {

      var waypoints = di.waypoint;

      if (!waypoints || waypoints.length < 2) {
        return [ getMid(source), getMid(target) ];
      }

      return waypoints.map(function(p) {
        return { x: p.x, y: p.y };
      });
    }

    function notYetDrawn(translate, semantic, refSemantic, property) {
      return new Error(translate('element {element} referenced by {referenced}#{property} not yet drawn', {
        element: elementToString(refSemantic),
        referenced: elementToString(semantic),
        property: property
      }));
    }


    /**
     * An importer that adds bpmn elements to the canvas
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     * @param {ElementFactory} elementFactory
     * @param {ElementRegistry} elementRegistry
     * @param {Function} translate
     * @param {TextRenderer} textRenderer
     */
    function BpmnImporter(
        eventBus, canvas, elementFactory,
        elementRegistry, translate, textRenderer) {

      this._eventBus = eventBus;
      this._canvas = canvas;
      this._elementFactory = elementFactory;
      this._elementRegistry = elementRegistry;
      this._translate = translate;
      this._textRenderer = textRenderer;
    }

    BpmnImporter.$inject = [
      'eventBus',
      'canvas',
      'elementFactory',
      'elementRegistry',
      'translate',
      'textRenderer'
    ];


    /**
     * Add a BPMN element (semantic) to the canvas making it a child of the
     * given parent.
     *
     * @param {ModdleElement} semantic
     * @param {ModdleElement} di
     * @param {Shape} parentElement
     */
    BpmnImporter.prototype.add = function(semantic, di, parentElement) {
      var element,
          translate = this._translate,
          hidden;

      var parentIndex;

      // ROOT ELEMENT
      // handle the special case that we deal with a
      // invisible root element (process, subprocess or collaboration)
      if (is$2(di, 'bpmndi:BPMNPlane')) {

        var attrs = is$2(semantic, 'bpmn:SubProcess')
          ? { id: semantic.id + '_plane' }
          : {};

        // add a virtual element (not being drawn)
        element = this._elementFactory.createRoot(elementData(semantic, di, attrs));

        this._canvas.addRootElement(element);
      }

      // SHAPE
      else if (is$2(di, 'bpmndi:BPMNShape')) {

        var collapsed = !isExpanded(semantic, di),
            isFrame = isFrameElement(semantic);

        hidden = parentElement && (parentElement.hidden || parentElement.collapsed);

        var bounds = di.bounds;

        element = this._elementFactory.createShape(elementData(semantic, di, {
          collapsed: collapsed,
          hidden: hidden,
          x: Math.round(bounds.x),
          y: Math.round(bounds.y),
          width: Math.round(bounds.width),
          height: Math.round(bounds.height),
          isFrame: isFrame
        }));

        if (is$2(semantic, 'bpmn:BoundaryEvent')) {
          this._attachBoundary(semantic, element);
        }

        // insert lanes behind other flow nodes (cf. #727)
        if (is$2(semantic, 'bpmn:Lane')) {
          parentIndex = 0;
        }

        if (is$2(semantic, 'bpmn:DataStoreReference')) {

          // check whether data store is inside our outside of its semantic parent
          if (!isPointInsideBBox(parentElement, getMid(bounds))) {
            parentElement = this._canvas.findRoot(parentElement);
          }
        }

        this._canvas.addShape(element, parentElement, parentIndex);
      }

      // CONNECTION
      else if (is$2(di, 'bpmndi:BPMNEdge')) {

        var source = this._getSource(semantic),
            target = this._getTarget(semantic);

        hidden = parentElement && (parentElement.hidden || parentElement.collapsed);

        element = this._elementFactory.createConnection(elementData(semantic, di, {
          hidden: hidden,
          source: source,
          target: target,
          waypoints: getWaypoints(di, source, target)
        }));

        if (is$2(semantic, 'bpmn:DataAssociation')) {

          // render always on top; this ensures DataAssociations
          // are rendered correctly across different "hacks" people
          // love to model such as cross participant / sub process
          // associations
          parentElement = this._canvas.findRoot(parentElement);
        }

        this._canvas.addConnection(element, parentElement, parentIndex);
      } else {
        throw new Error(translate('unknown di {di} for element {semantic}', {
          di: elementToString(di),
          semantic: elementToString(semantic)
        }));
      }

      // (optional) LABEL
      if (isLabelExternal(semantic) && getLabel(element)) {
        this.addLabel(semantic, di, element);
      }


      this._eventBus.fire('bpmnElement.added', { element: element });

      return element;
    };


    /**
     * Attach a boundary element to the given host.
     *
     * @param {ModdleElement} boundarySemantic
     * @param {Shape} boundaryElement
     */
    BpmnImporter.prototype._attachBoundary = function(boundarySemantic, boundaryElement) {
      var translate = this._translate;
      var hostSemantic = boundarySemantic.attachedToRef;

      if (!hostSemantic) {
        throw new Error(translate('missing {semantic}#attachedToRef', {
          semantic: elementToString(boundarySemantic)
        }));
      }

      var host = this._elementRegistry.get(hostSemantic.id),
          attachers = host && host.attachers;

      if (!host) {
        throw notYetDrawn(translate, boundarySemantic, hostSemantic, 'attachedToRef');
      }

      // wire element.host <> host.attachers
      boundaryElement.host = host;

      if (!attachers) {
        host.attachers = attachers = [];
      }

      if (attachers.indexOf(boundaryElement) === -1) {
        attachers.push(boundaryElement);
      }
    };


    /**
     * Add a label to a given element.
     *
     * @param {ModdleElement} semantic
     * @param {ModdleElement} di
     * @param {Element} element
     *
     * @return {Label}
     */
    BpmnImporter.prototype.addLabel = function(semantic, di, element) {
      var bounds,
          text,
          label;

      bounds = getExternalLabelBounds(di, element);

      text = getLabel(element);

      if (text) {

        // get corrected bounds from actual layouted text
        bounds = this._textRenderer.getExternalLabelBounds(bounds, text);
      }

      label = this._elementFactory.createLabel(elementData(semantic, di, {
        id: semantic.id + '_label',
        labelTarget: element,
        type: 'label',
        hidden: element.hidden || !getLabel(element),
        x: Math.round(bounds.x),
        y: Math.round(bounds.y),
        width: Math.round(bounds.width),
        height: Math.round(bounds.height)
      }));

      return this._canvas.addShape(label, element.parent);
    };

    /**
     * Get the source or target of the given connection.
     *
     * @param {ModdleElement} semantic
     * @param {'source' | 'target'} side
     *
     * @return {Element}
     */
    BpmnImporter.prototype._getConnectedElement = function(semantic, side) {

      var element,
          refSemantic,
          type = semantic.$type,
          translate = this._translate;

      refSemantic = semantic[side + 'Ref'];

      // handle mysterious isMany DataAssociation#sourceRef
      if (side === 'source' && type === 'bpmn:DataInputAssociation') {
        refSemantic = refSemantic && refSemantic[0];
      }

      // fix source / target for DataInputAssociation / DataOutputAssociation
      if (side === 'source' && type === 'bpmn:DataOutputAssociation' ||
          side === 'target' && type === 'bpmn:DataInputAssociation') {

        refSemantic = semantic.$parent;
      }

      element = refSemantic && this._getElement(refSemantic);

      if (element) {
        return element;
      }

      if (refSemantic) {
        throw notYetDrawn(translate, semantic, refSemantic, side + 'Ref');
      } else {
        throw new Error(translate('{semantic}#{side} Ref not specified', {
          semantic: elementToString(semantic),
          side: side
        }));
      }
    };

    BpmnImporter.prototype._getSource = function(semantic) {
      return this._getConnectedElement(semantic, 'source');
    };

    BpmnImporter.prototype._getTarget = function(semantic) {
      return this._getConnectedElement(semantic, 'target');
    };


    BpmnImporter.prototype._getElement = function(semantic) {
      return this._elementRegistry.get(semantic.id);
    };


    // helpers ////////////////////

    function isPointInsideBBox(bbox, point) {
      var x = point.x,
          y = point.y;

      return x >= bbox.x &&
        x <= bbox.x + bbox.width &&
        y >= bbox.y &&
        y <= bbox.y + bbox.height;
    }

    function isFrameElement(semantic) {
      return is$2(semantic, 'bpmn:Group');
    }

    var ImportModule = {
      __depends__: [
        TranslateModule
      ],
      bpmnImporter: [ 'type', BpmnImporter ]
    };

    var CoreModule$1 = {
      __depends__: [
        DrawModule$1,
        ImportModule
      ]
    };

    // document wide unique overlay ids
    var ids = new IdGenerator('ov');

    var LOW_PRIORITY$2 = 500;

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/ElementRegistry').default} ElementRegistry
     * @typedef {import('../../core/EventBus').default} EventBus
     *
     * @typedef {import('../../model/Types').Element} Element
     *
     * @typedef { {
     *   minZoom?: number,
     *   maxZoom?: number
     * } } OverlaysConfigShow
     *
     * @typedef { {
     *   min?: number,
     *   max?: number
     * } } OverlaysConfigScale
     *
     * @typedef { {
    *   id: string,
    *   type: string | null,
    *   element: Element | string
    * } & OverlayAttrs } Overlay
    *
     * @typedef { {
     *   html: HTMLElement | string,
     *   position: {
     *     top?: number,
     *     right?: number,
     *     bottom?: number,
     *     left?: number
     *   }
     * } & OverlaysConfigDefault } OverlayAttrs
     *
     * @typedef { {
     *   html: HTMLElement,
     *   element: Element,
     *   overlays: Overlay[]
     * } } OverlayContainer
     *
     * @typedef {{
     *   defaults?: OverlaysConfigDefault
     * }} OverlaysConfig
     *
     * @typedef { {
     *  show?: OverlaysConfigShow,
     *  scale?: OverlaysConfigScale | boolean
     * } } OverlaysConfigDefault
     *
     * @typedef { {
     *   id?: string;
     *   element?: Element | string;
     *   type?: string;
     * } | string } OverlaysFilter
     */

    /**
     * A service that allows users to attach overlays to diagram elements.
     *
     * The overlay service will take care of overlay positioning during updates.
     *
     * @example
     *
     * ```javascript
     * // add a pink badge on the top left of the shape
     *
     * overlays.add(someShape, {
     *   position: {
     *     top: -5,
     *     left: -5
     *   },
     *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
     * });
     *
     * // or add via shape id
     *
     * overlays.add('some-element-id', {
     *   position: {
     *     top: -5,
     *     left: -5
     *   }
     *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
     * });
     *
     * // or add with optional type
     *
     * overlays.add(someShape, 'badge', {
     *   position: {
     *     top: -5,
     *     left: -5
     *   }
     *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
     * });
     * ```
     *
     * ```javascript
     * // remove an overlay
     *
     * var id = overlays.add(...);
     * overlays.remove(id);
     *
     *
     * You may configure overlay defaults during tool by providing a `config` module
     * with `overlays.defaults` as an entry:
     *
     * {
     *   overlays: {
     *     defaults: {
     *       show: {
     *         minZoom: 0.7,
     *         maxZoom: 5.0
     *       },
     *       scale: {
     *         min: 1
     *       }
     *     }
     * }
     * ```
     *
     * @param {OverlaysConfig} config
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     * @param {ElementRegistry} elementRegistry
     */
    function Overlays(config, eventBus, canvas, elementRegistry) {
      this._eventBus = eventBus;
      this._canvas = canvas;
      this._elementRegistry = elementRegistry;

      this._ids = ids;

      /**
       * @type {OverlaysConfigDefault}
       */
      this._overlayDefaults = assign$1({

        // no show constraints
        show: null,

        // always scale
        scale: true
      }, config && config.defaults);

      /**
       * @type {Map<string, Overlay>}
       */
      this._overlays = {};

      /**
       * @type {OverlayContainer[]}
       */
      this._overlayContainers = [];

      /**
       * @type {HTMLElement}
       */
      this._overlayRoot = createRoot(canvas.getContainer());

      this._init();
    }


    Overlays.$inject = [
      'config.overlays',
      'eventBus',
      'canvas',
      'elementRegistry'
    ];


    /**
     * Returns the overlay with the specified ID or a list of overlays
     * for an element with a given type.
     *
     * @example
     *
     * ```javascript
     * // return the single overlay with the given ID
     * overlays.get('some-id');
     *
     * // return all overlays for the shape
     * overlays.get({ element: someShape });
     *
     * // return all overlays on shape with type 'badge'
     * overlays.get({ element: someShape, type: 'badge' });
     *
     * // shape can also be specified as ID
     * overlays.get({ element: 'element-id', type: 'badge' });
     * ```
     *
     * @param {OverlaysFilter} search The filter to be used to find the overlay(s).
     *
     * @return {Overlay|Overlay[]} The overlay(s).
     */
    Overlays.prototype.get = function(search) {

      if (isString$3(search)) {
        search = { id: search };
      }

      if (isString$3(search.element)) {
        search.element = this._elementRegistry.get(search.element);
      }

      if (search.element) {
        var container = this._getOverlayContainer(search.element, true);

        // return a list of overlays when searching by element (+type)
        if (container) {
          return search.type ? filter(container.overlays, matchPattern({ type: search.type })) : container.overlays.slice();
        } else {
          return [];
        }
      } else
      if (search.type) {
        return filter(this._overlays, matchPattern({ type: search.type }));
      } else {

        // return single element when searching by id
        return search.id ? this._overlays[search.id] : null;
      }
    };

    /**
     * Adds an HTML overlay to an element.
     *
     * @param {Element|string} element The element to add the overlay to.
     * @param {string} [type] An optional type that can be used to filter.
     * @param {OverlayAttrs} overlay The overlay.
     *
     * @return {string} The overlay's ID that can be used to get or remove it.
     */
    Overlays.prototype.add = function(element, type, overlay) {

      if (isObject(type)) {
        overlay = type;
        type = null;
      }

      if (!element.id) {
        element = this._elementRegistry.get(element);
      }

      if (!overlay.position) {
        throw new Error('must specifiy overlay position');
      }

      if (!overlay.html) {
        throw new Error('must specifiy overlay html');
      }

      if (!element) {
        throw new Error('invalid element specified');
      }

      var id = this._ids.next();

      overlay = assign$1({}, this._overlayDefaults, overlay, {
        id: id,
        type: type,
        element: element,
        html: overlay.html
      });

      this._addOverlay(overlay);

      return id;
    };


    /**
     * Remove an overlay with the given ID or all overlays matching the given filter.
     *
     * @see Overlays#get for filter options.
     *
     * @param {OverlaysFilter} filter The filter to be used to find the overlay.
     */
    Overlays.prototype.remove = function(filter) {

      var overlays = this.get(filter) || [];

      if (!isArray$5(overlays)) {
        overlays = [ overlays ];
      }

      var self = this;

      forEach$1(overlays, function(overlay) {

        var container = self._getOverlayContainer(overlay.element, true);

        if (overlay) {
          remove$1(overlay.html);
          remove$1(overlay.htmlContainer);

          delete overlay.htmlContainer;
          delete overlay.element;

          delete self._overlays[overlay.id];
        }

        if (container) {
          var idx = container.overlays.indexOf(overlay);
          if (idx !== -1) {
            container.overlays.splice(idx, 1);
          }
        }
      });

    };

    /**
     * Checks whether overlays are shown.
     *
     * @return {boolean} Whether overlays are shown.
     */
    Overlays.prototype.isShown = function() {
      return this._overlayRoot.style.display !== 'none';
    };

    /**
     * Show all overlays.
     */
    Overlays.prototype.show = function() {
      setVisible(this._overlayRoot);
    };

    /**
     * Hide all overlays.
     */
    Overlays.prototype.hide = function() {
      setVisible(this._overlayRoot, false);
    };

    /**
     * Remove all overlays and their container.
     */
    Overlays.prototype.clear = function() {
      this._overlays = {};

      this._overlayContainers = [];

      clear$1(this._overlayRoot);
    };

    Overlays.prototype._updateOverlayContainer = function(container) {
      var element = container.element,
          html = container.html;

      // update container left,top according to the elements x,y coordinates
      // this ensures we can attach child elements relative to this container

      var x = element.x,
          y = element.y;

      if (element.waypoints) {
        var bbox = getBBox(element);
        x = bbox.x;
        y = bbox.y;
      }

      setPosition(html, x, y);

      attr$1(container.html, 'data-container-id', element.id);
    };


    Overlays.prototype._updateOverlay = function(overlay) {

      var position = overlay.position,
          htmlContainer = overlay.htmlContainer,
          element = overlay.element;

      // update overlay html relative to shape because
      // it is already positioned on the element

      // update relative
      var left = position.left,
          top = position.top;

      if (position.right !== undefined) {

        var width;

        if (element.waypoints) {
          width = getBBox(element).width;
        } else {
          width = element.width;
        }

        left = position.right * -1 + width;
      }

      if (position.bottom !== undefined) {

        var height;

        if (element.waypoints) {
          height = getBBox(element).height;
        } else {
          height = element.height;
        }

        top = position.bottom * -1 + height;
      }

      setPosition(htmlContainer, left || 0, top || 0);
      this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
    };


    Overlays.prototype._createOverlayContainer = function(element) {
      var html = domify$1('<div class="djs-overlays" />');
      assign(html, { position: 'absolute' });

      this._overlayRoot.appendChild(html);

      var container = {
        html: html,
        element: element,
        overlays: []
      };

      this._updateOverlayContainer(container);

      this._overlayContainers.push(container);

      return container;
    };


    Overlays.prototype._updateRoot = function(viewbox) {
      var scale = viewbox.scale || 1;

      var matrix = 'matrix(' +
      [
        scale,
        0,
        0,
        scale,
        -1 * viewbox.x * scale,
        -1 * viewbox.y * scale
      ].join(',') +
      ')';

      setTransform(this._overlayRoot, matrix);
    };


    Overlays.prototype._getOverlayContainer = function(element, raw) {
      var container = find$1(this._overlayContainers, function(c) {
        return c.element === element;
      });


      if (!container && !raw) {
        return this._createOverlayContainer(element);
      }

      return container;
    };


    Overlays.prototype._addOverlay = function(overlay) {

      var id = overlay.id,
          element = overlay.element,
          html = overlay.html,
          htmlContainer,
          overlayContainer;

      // unwrap jquery (for those who need it)
      if (html.get && html.constructor.prototype.jquery) {
        html = html.get(0);
      }

      // create proper html elements from
      // overlay HTML strings
      if (isString$3(html)) {
        html = domify$1(html);
      }

      overlayContainer = this._getOverlayContainer(element);

      htmlContainer = domify$1('<div class="djs-overlay" data-overlay-id="' + id + '">');
      assign(htmlContainer, { position: 'absolute' });

      htmlContainer.appendChild(html);

      if (overlay.type) {
        classes$1(htmlContainer).add('djs-overlay-' + overlay.type);
      }

      var elementRoot = this._canvas.findRoot(element);
      var activeRoot = this._canvas.getRootElement();

      setVisible(htmlContainer, elementRoot === activeRoot);

      overlay.htmlContainer = htmlContainer;

      overlayContainer.overlays.push(overlay);
      overlayContainer.html.appendChild(htmlContainer);

      this._overlays[id] = overlay;

      this._updateOverlay(overlay);
      this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
    };


    Overlays.prototype._updateOverlayVisibilty = function(overlay, viewbox) {
      var show = overlay.show,
          rootElement = this._canvas.findRoot(overlay.element),
          minZoom = show && show.minZoom,
          maxZoom = show && show.maxZoom,
          htmlContainer = overlay.htmlContainer,
          activeRootElement = this._canvas.getRootElement(),
          visible = true;

      if (rootElement !== activeRootElement) {
        visible = false;
      } else if (show) {
        if (
          (isDefined(minZoom) && minZoom > viewbox.scale) ||
          (isDefined(maxZoom) && maxZoom < viewbox.scale)
        ) {
          visible = false;
        }
      }

      setVisible(htmlContainer, visible);

      this._updateOverlayScale(overlay, viewbox);
    };


    Overlays.prototype._updateOverlayScale = function(overlay, viewbox) {
      var shouldScale = overlay.scale,
          minScale,
          maxScale,
          htmlContainer = overlay.htmlContainer;

      var scale, transform = '';

      if (shouldScale !== true) {

        if (shouldScale === false) {
          minScale = 1;
          maxScale = 1;
        } else {
          minScale = shouldScale.min;
          maxScale = shouldScale.max;
        }

        if (isDefined(minScale) && viewbox.scale < minScale) {
          scale = (1 / viewbox.scale || 1) * minScale;
        }

        if (isDefined(maxScale) && viewbox.scale > maxScale) {
          scale = (1 / viewbox.scale || 1) * maxScale;
        }
      }

      if (isDefined(scale)) {
        transform = 'scale(' + scale + ',' + scale + ')';
      }

      setTransform(htmlContainer, transform);
    };


    Overlays.prototype._updateOverlaysVisibilty = function(viewbox) {

      var self = this;

      forEach$1(this._overlays, function(overlay) {
        self._updateOverlayVisibilty(overlay, viewbox);
      });
    };


    Overlays.prototype._init = function() {

      var eventBus = this._eventBus;

      var self = this;


      // scroll/zoom integration

      function updateViewbox(viewbox) {
        self._updateRoot(viewbox);
        self._updateOverlaysVisibilty(viewbox);

        self.show();
      }

      eventBus.on('canvas.viewbox.changing', function(event) {
        self.hide();
      });

      eventBus.on('canvas.viewbox.changed', function(event) {
        updateViewbox(event.viewbox);
      });


      // remove integration

      eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {
        var element = e.element;
        var overlays = self.get({ element: element });

        forEach$1(overlays, function(o) {
          self.remove(o.id);
        });

        var container = self._getOverlayContainer(element);

        if (container) {
          remove$1(container.html);
          var i = self._overlayContainers.indexOf(container);
          if (i !== -1) {
            self._overlayContainers.splice(i, 1);
          }
        }
      });


      // move integration

      eventBus.on('element.changed', LOW_PRIORITY$2, function(e) {
        var element = e.element;

        var container = self._getOverlayContainer(element, true);

        if (container) {
          forEach$1(container.overlays, function(overlay) {
            self._updateOverlay(overlay);
          });

          self._updateOverlayContainer(container);
        }
      });


      // marker integration, simply add them on the overlays as classes, too.

      eventBus.on('element.marker.update', function(e) {
        var container = self._getOverlayContainer(e.element, true);
        if (container) {
          classes$1(container.html)[e.add ? 'add' : 'remove'](e.marker);
        }
      });


      eventBus.on('root.set', function() {
        self._updateOverlaysVisibilty(self._canvas.viewbox());
      });

      // clear overlays with diagram

      eventBus.on('diagram.clear', this.clear, this);
    };



    // helpers /////////////////////////////

    function createRoot(parentNode) {
      var root = domify$1(
        '<div class="djs-overlay-container" />'
      );

      assign(root, {
        position: 'absolute',
        width: 0,
        height: 0
      });

      parentNode.insertBefore(root, parentNode.firstChild);

      return root;
    }

    function setPosition(el, x, y) {
      assign(el, { left: x + 'px', top: y + 'px' });
    }

    /**
     * Set element visible
     *
     * @param {DOMElement} el
     * @param {boolean} [visible=true]
     */
    function setVisible(el, visible) {
      el.style.display = visible === false ? 'none' : '';
    }

    function setTransform(el, transform) {

      el.style['transform-origin'] = 'top left';

      [ '', '-ms-', '-webkit-' ].forEach(function(prefix) {
        el.style[prefix + 'transform'] = transform;
      });
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var OverlaysModule = {
      __init__: [ 'overlays' ],
      overlays: [ 'type', Overlays ]
    };

    /**
     * @typedef {import('didi').Injector} Injector
     *
     * @typedef {import('../../core/Canvas').default} Canvas
     */

    /**
     * A modeling behavior that ensures we set the correct root element
     * as we undo and redo commands.
     *
     * @param {Canvas} canvas
     * @param {Injector} injector
     */
    function RootElementsBehavior(canvas, injector) {

      injector.invoke(CommandInterceptor, this);

      this.executed(function(event) {
        var context = event.context;

        if (context.rootElement) {
          canvas.setRootElement(context.rootElement);
        } else {
          context.rootElement = canvas.getRootElement();
        }
      });

      this.revert(function(event) {
        var context = event.context;

        if (context.rootElement) {
          canvas.setRootElement(context.rootElement);
        }
      });
    }

    e(RootElementsBehavior, CommandInterceptor);

    RootElementsBehavior.$inject = [ 'canvas', 'injector' ];

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var RootElementsModule = {
      __init__: [ 'rootElementsBehavior' ],
      rootElementsBehavior: [ 'type', RootElementsBehavior ]
    };

    /**
     * @param {string} str
     * @return {string}
     */

    var HTML_ESCAPE_MAP = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;'
    };

    function escapeHTML(str) {
      str = '' + str;

      return str && str.replace(/[&<>"']/g, function(match) {
        return HTML_ESCAPE_MAP[match];
      });
    }

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     *
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Shape} Shape
     */

    var OPEN_CLASS = 'bjs-breadcrumbs-shown';


    /**
     * Adds overlays that allow switching planes on collapsed subprocesses.
     *
     * @param {EventBus} eventBus
     * @param {ElementRegistry} elementRegistry
     * @param {Canvas} canvas
     */
    function DrilldownBreadcrumbs(eventBus, elementRegistry, canvas) {
      var breadcrumbs = domify$1('<ul class="bjs-breadcrumbs"></ul>');
      var container = canvas.getContainer();
      var containerClasses = classes$1(container);
      container.appendChild(breadcrumbs);

      var businessObjectParents = [];

      // update breadcrumbs if name or ID of the primary shape changes
      eventBus.on('element.changed', function(event) {
        var shape = event.element,
            businessObject = getBusinessObject(shape);

        var isPresent = find$1(businessObjectParents, function(element) {
          return element === businessObject;
        });

        if (!isPresent) {
          return;
        }

        updateBreadcrumbs();
      });

      /**
       * Updates the displayed breadcrumbs. If no element is provided, only the
       * labels are updated.
       *
       * @param {Element} [element]
       */
      function updateBreadcrumbs(element) {
        if (element) {
          businessObjectParents = getBusinessObjectParentChain(element);
        }

        var path = businessObjectParents.map(function(parent) {
          var title = escapeHTML(parent.name || parent.id);
          var link = domify$1('<li><span class="bjs-crumb"><a title="' + title + '">' + title + '</a></span></li>');

          var parentPlane = canvas.findRoot(getPlaneIdFromShape(parent)) || canvas.findRoot(parent.id);

          // when the root is a collaboration, the process does not have a corresponding
          // element in the elementRegisty. Instead, we search for the corresponding participant
          if (!parentPlane && is$2(parent, 'bpmn:Process')) {
            var participant = elementRegistry.find(function(element) {
              var businessObject = getBusinessObject(element);

              return businessObject && businessObject.get('processRef') && businessObject.get('processRef') === parent;
            });

            parentPlane = canvas.findRoot(participant.id);
          }

          link.addEventListener('click', function() {
            canvas.setRootElement(parentPlane);
          });

          return link;
        });

        breadcrumbs.innerHTML = '';

        // show breadcrumbs and expose state to .djs-container
        var visible = path.length > 1;

        containerClasses.toggle(OPEN_CLASS, visible);

        path.forEach(function(element) {
          breadcrumbs.appendChild(element);
        });
      }

      eventBus.on('root.set', function(event) {
        updateBreadcrumbs(event.element);
      });

    }

    DrilldownBreadcrumbs.$inject = [ 'eventBus', 'elementRegistry', 'canvas' ];


    // helpers //////////

    /**
     * Returns the parents for the element using the business object chain,
     * starting with the root element.
     *
     * @param {Shape} child
     *
     * @return {Shape}
     */
    function getBusinessObjectParentChain(child) {
      var businessObject = getBusinessObject(child);

      var parents = [];

      for (var element = businessObject; element; element = element.$parent) {
        if (is$2(element, 'bpmn:SubProcess') || is$2(element, 'bpmn:Process')) {
          parents.push(element);
        }
      }

      return parents.reverse();
    }

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     */

    /**
     * Move collapsed subprocesses into view when drilling down.
     *
     * Zoom and scroll are saved in a session.
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     */
    function DrilldownCentering(eventBus, canvas) {

      var currentRoot = null;
      var positionMap = new Map$1();

      eventBus.on('root.set', function(event) {
        var newRoot = event.element;
        var currentViewbox = canvas.viewbox();
        var storedViewbox = positionMap.get(newRoot);

        positionMap.set(currentRoot, {
          x: currentViewbox.x,
          y: currentViewbox.y,
          zoom: currentViewbox.scale
        });

        currentRoot = newRoot;

        // current root was replaced with a collaboration, we don't update the viewbox
        if (is$2(newRoot, 'bpmn:Collaboration') && !storedViewbox) {
          return;
        }

        storedViewbox = storedViewbox || { x: 0, y: 0, zoom: 1 };

        var dx = (currentViewbox.x - storedViewbox.x) * currentViewbox.scale,
            dy = (currentViewbox.y - storedViewbox.y) * currentViewbox.scale;

        if (dx !== 0 || dy !== 0) {
          canvas.scroll({
            dx: dx,
            dy: dy
          });
        }

        if (storedViewbox.zoom !== currentViewbox.scale) {
          canvas.zoom(storedViewbox.zoom, { x: 0, y: 0 });
        }
      });

      eventBus.on('diagram.clear', function() {
        positionMap.clear();
        currentRoot = null;
      });

    }

    DrilldownCentering.$inject = [ 'eventBus', 'canvas' ];


    /**
     * ES5 Map implementation. Works.
     */
    function Map$1() {

      this._entries = [];

      this.set = function(key, value) {

        var found = false;

        for (var k in this._entries) {
          if (this._entries[k][0] === key) {
            this._entries[k][1] = value;

            found = true;

            break;
          }
        }

        if (!found) {
          this._entries.push([ key, value ]);
        }
      };

      this.get = function(key) {

        for (var k in this._entries) {
          if (this._entries[k][0] === key) {
            return this._entries[k][1];
          }
        }

        return null;
      };

      this.clear = function() {
        this._entries.length = 0;
      };

      this.remove = function(key) {

        var idx = -1;

        for (var k in this._entries) {
          if (this._entries[k][0] === key) {
            idx = k;

            break;
          }
        }

        if (idx !== -1) {
          this._entries.splice(idx, 1);
        }
      };
    }

    /**
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('../../model/Types').Moddle} Moddle
     *
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Shape} Shape
     *
     * @typedef {import('diagram-js/lib/core/Canvas').CanvasPlane} CanvasPlane
     *
     * @typedef {import('diagram-js/lib/util/Types').Rect} Rect
     */

    var DEFAULT_POSITION = {
      x: 180,
      y: 160
    };

    /**
     * Hook into `import.render.start` and create new planes for diagrams with
     * collapsed subprocesses and all DI elements on the same plane.
     *
     * @param {EventBus} eventBus
     * @param {Moddle} moddle
     */
    function SubprocessCompatibility(eventBus, moddle) {
      this._eventBus = eventBus;
      this._moddle = moddle;

      var self = this;

      eventBus.on('import.render.start', 1500, function(e, context) {
        self._handleImport(context.definitions);
      });
    }

    /**
     * @param {ModdleElement} definitions
     */
    SubprocessCompatibility.prototype._handleImport = function(definitions) {
      if (!definitions.diagrams) {
        return;
      }

      var self = this;
      this._definitions = definitions;
      this._processToDiagramMap = {};

      definitions.diagrams.forEach(function(diagram) {
        if (!diagram.plane || !diagram.plane.bpmnElement) {
          return;
        }

        self._processToDiagramMap[diagram.plane.bpmnElement.id] = diagram;
      });

      var newDiagrams = [];
      definitions.diagrams.forEach(function(diagram) {
        var createdDiagrams = self._createNewDiagrams(diagram.plane);
        Array.prototype.push.apply(newDiagrams, createdDiagrams);
      });

      newDiagrams.forEach(function(diagram) {
        self._movePlaneElementsToOrigin(diagram.plane);
      });
    };


    /**
     * Moves all DI elements from collapsed subprocesses to a new plane.
     *
     * @param {CanvasPlane} plane
     *
     * @return {ModdleElement[]} new diagrams created for the collapsed subprocesses
     */
    SubprocessCompatibility.prototype._createNewDiagrams = function(plane) {
      var self = this;

      var collapsedElements = [];
      var elementsToMove = [];

      plane.get('planeElement').forEach(function(diElement) {
        var businessObject = diElement.bpmnElement;

        if (!businessObject) {
          return;
        }

        var parent = businessObject.$parent;

        if (is$2(businessObject, 'bpmn:SubProcess') && !diElement.isExpanded) {
          collapsedElements.push(businessObject);
        }

        if (shouldMoveToPlane(businessObject, plane)) {

          // don't change the array while we iterate over it
          elementsToMove.push({ diElement: diElement, parent: parent });
        }
      });

      var newDiagrams = [];

      // create new planes for all collapsed subprocesses, even when they are empty
      collapsedElements.forEach(function(element) {
        if (!self._processToDiagramMap[ element.id ]) {
          var diagram = self._createDiagram(element);

          self._processToDiagramMap[element.id] = diagram;

          newDiagrams.push(diagram);
        }
      });

      elementsToMove.forEach(function(element) {
        var diElement = element.diElement;
        var parent = element.parent;

        // parent is expanded, get nearest collapsed parent
        while (parent && collapsedElements.indexOf(parent) === -1) {
          parent = parent.$parent;
        }

        // false positive, all parents are expanded
        if (!parent) {
          return;
        }

        var diagram = self._processToDiagramMap[ parent.id ];

        self._moveToDiPlane(diElement, diagram.plane);
      });

      return newDiagrams;
    };

    /**
     * @param {CanvasPlane} plane
     */
    SubprocessCompatibility.prototype._movePlaneElementsToOrigin = function(plane) {
      var elements = plane.get('planeElement');

      // get bounding box of all elements
      var planeBounds = getPlaneBounds(plane);

      var offset = {
        x: planeBounds.x - DEFAULT_POSITION.x,
        y: planeBounds.y - DEFAULT_POSITION.y
      };

      elements.forEach(function(diElement) {
        if (diElement.waypoint) {
          diElement.waypoint.forEach(function(waypoint) {
            waypoint.x = waypoint.x - offset.x;
            waypoint.y = waypoint.y - offset.y;
          });
        } else if (diElement.bounds) {
          diElement.bounds.x = diElement.bounds.x - offset.x;
          diElement.bounds.y = diElement.bounds.y - offset.y;
        }
      });
    };

    /**
     * @param {ModdleElement} diElement
     * @param {CanvasPlane} newPlane
     */
    SubprocessCompatibility.prototype._moveToDiPlane = function(diElement, newPlane) {
      var containingDiagram = findRootDiagram(diElement);

      // remove DI from old Plane and add it to the new one
      var parentPlaneElement = containingDiagram.plane.get('planeElement');

      parentPlaneElement.splice(parentPlaneElement.indexOf(diElement), 1);

      newPlane.get('planeElement').push(diElement);
    };

    /**
     * @param {ModdleElement} businessObject
     *
     * @return {ModdleElement}
     */
    SubprocessCompatibility.prototype._createDiagram = function(businessObject) {
      var plane = this._moddle.create('bpmndi:BPMNPlane', {
        bpmnElement: businessObject
      });

      var diagram = this._moddle.create('bpmndi:BPMNDiagram', {
        plane: plane
      });

      plane.$parent = diagram;

      plane.bpmnElement = businessObject;

      diagram.$parent = this._definitions;

      this._definitions.diagrams.push(diagram);

      return diagram;
    };

    SubprocessCompatibility.$inject = [ 'eventBus', 'moddle' ];


    // helpers //////////

    function findRootDiagram(element) {
      if (is$2(element, 'bpmndi:BPMNDiagram')) {
        return element;
      } else {
        return findRootDiagram(element.$parent);
      }
    }

    /**
     * @param {CanvasPlane} plane
     *
     * @return {Rect}
     */
    function getPlaneBounds(plane) {
      var planeTrbl = {
        top: Infinity,
        right: -Infinity,
        bottom: -Infinity,
        left: Infinity
      };

      plane.planeElement.forEach(function(element) {
        if (!element.bounds) {
          return;
        }

        var trbl = asTRBL(element.bounds);

        planeTrbl.top = Math.min(trbl.top, planeTrbl.top);
        planeTrbl.left = Math.min(trbl.left, planeTrbl.left);
      });

      return asBounds(planeTrbl);
    }

    /**
     * @param {ModdleElement} businessObject
     * @param {CanvasPlane} plane
     *
     * @return {boolean}
     */
    function shouldMoveToPlane(businessObject, plane) {
      var parent = businessObject.$parent;

      // don't move elements that are already on the plane
      if (!is$2(parent, 'bpmn:SubProcess') || parent === plane.bpmnElement) {
        return false;
      }

      // dataAssociations are children of the subprocess but rendered on process level
      // cf. https://github.com/bpmn-io/bpmn-js/issues/1619
      if (isAny(businessObject, [ 'bpmn:DataInputAssociation', 'bpmn:DataOutputAssociation' ])) {
        return false;
      }

      return true;
    }

    /**
     * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas
     * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry
     * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus
     * @typedef {import('diagram-js/lib/features/overlays/Overlays').default} Overlays
     *
     * @typedef {import('../../model/Types').Element} Element
     * @typedef {import('../../model/Types').Parent} Parent
     * @typedef {import('../../model/Types').Shape} Shape
     */

    var LOW_PRIORITY$1 = 250;
    var ARROW_DOWN_SVG = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.81801948,3.50735931 L10.4996894,9.1896894 L10.5,4 L12,4 L12,12 L4,12 L4,10.5 L9.6896894,10.4996894 L3.75735931,4.56801948 C3.46446609,4.27512627 3.46446609,3.80025253 3.75735931,3.50735931 C4.05025253,3.21446609 4.52512627,3.21446609 4.81801948,3.50735931 Z"/></svg>';

    var EMPTY_MARKER = 'bjs-drilldown-empty';

    /**
     * @param {Canvas} canvas
     * @param {EventBus} eventBus
     * @param {ElementRegistry} elementRegistry
     * @param {Overlays} overlays
     */
    function DrilldownOverlayBehavior(
        canvas, eventBus, elementRegistry, overlays
    ) {
      CommandInterceptor.call(this, eventBus);

      this._canvas = canvas;
      this._eventBus = eventBus;
      this._elementRegistry = elementRegistry;
      this._overlays = overlays;

      var self = this;

      this.executed('shape.toggleCollapse', LOW_PRIORITY$1, function(context) {
        var shape = context.shape;

        // Add overlay to the collapsed shape
        if (self._canDrillDown(shape)) {
          self._addOverlay(shape);
        } else {
          self._removeOverlay(shape);
        }
      }, true);


      this.reverted('shape.toggleCollapse', LOW_PRIORITY$1, function(context) {
        var shape = context.shape;

        // Add overlay to the collapsed shape
        if (self._canDrillDown(shape)) {
          self._addOverlay(shape);
        } else {
          self._removeOverlay(shape);
        }
      }, true);


      this.executed([ 'shape.create', 'shape.move', 'shape.delete' ], LOW_PRIORITY$1,
        function(context) {
          var oldParent = context.oldParent,
              newParent = context.newParent || context.parent,
              shape = context.shape;

          // Add overlay to the collapsed shape
          if (self._canDrillDown(shape)) {
            self._addOverlay(shape);
          }

          self._updateDrilldownOverlay(oldParent);
          self._updateDrilldownOverlay(newParent);
          self._updateDrilldownOverlay(shape);
        }, true);


      this.reverted([ 'shape.create', 'shape.move', 'shape.delete' ], LOW_PRIORITY$1,
        function(context) {
          var oldParent = context.oldParent,
              newParent = context.newParent || context.parent,
              shape = context.shape;

          // Add overlay to the collapsed shape
          if (self._canDrillDown(shape)) {
            self._addOverlay(shape);
          }

          self._updateDrilldownOverlay(oldParent);
          self._updateDrilldownOverlay(newParent);
          self._updateDrilldownOverlay(shape);
        }, true);


      eventBus.on('import.render.complete', function() {
        elementRegistry.filter(function(e) {
          return self._canDrillDown(e);
        }).map(function(el) {
          self._addOverlay(el);
        });
      });

    }

    e(DrilldownOverlayBehavior, CommandInterceptor);

    /**
     * @param {Shape} shape
     */
    DrilldownOverlayBehavior.prototype._updateDrilldownOverlay = function(shape) {
      var canvas = this._canvas;

      if (!shape) {
        return;
      }

      var root = canvas.findRoot(shape);

      if (root) {
        this._updateOverlayVisibility(root);
      }
    };

    /**
     * @param {Element} element
     *
     * @return {boolean}
     */
    DrilldownOverlayBehavior.prototype._canDrillDown = function(element) {
      var canvas = this._canvas;

      return is$2(element, 'bpmn:SubProcess') && canvas.findRoot(getPlaneIdFromShape(element));
    };

    /**
     * Update the visibility of the drilldown overlay. If the plane has no elements,
     * the drilldown will only be shown when the element is selected.
     *
     * @param {Parent} element The collapsed root or shape.
     */
    DrilldownOverlayBehavior.prototype._updateOverlayVisibility = function(element) {
      var overlays = this._overlays;

      var businessObject = getBusinessObject(element);

      var overlay = overlays.get({ element: businessObject.id, type: 'drilldown' })[0];

      if (!overlay) {
        return;
      }

      var hasFlowElements = businessObject
        && businessObject.get('flowElements')
        && businessObject.get('flowElements').length;

      classes$1(overlay.html).toggle(EMPTY_MARKER, !hasFlowElements);
    };

    /**
     * Add a drilldown button to the given element assuming the plane has the same
     * ID as the element.
     *
     * @param {Shape} element The collapsed shape.
     */
    DrilldownOverlayBehavior.prototype._addOverlay = function(element) {
      var canvas = this._canvas,
          overlays = this._overlays;

      var existingOverlays = overlays.get({ element: element, type: 'drilldown' });

      if (existingOverlays.length) {
        this._removeOverlay(element);
      }

      var button = domify$1('<button class="bjs-drilldown">' + ARROW_DOWN_SVG + '</button>');

      button.addEventListener('click', function() {
        canvas.setRootElement(canvas.findRoot(getPlaneIdFromShape(element)));
      });

      overlays.add(element, 'drilldown', {
        position: {
          bottom: -7,
          right: -8
        },
        html: button
      });

      this._updateOverlayVisibility(element);
    };

    DrilldownOverlayBehavior.prototype._removeOverlay = function(element) {
      var overlays = this._overlays;

      overlays.remove({
        element: element,
        type: 'drilldown'
      });
    };

    DrilldownOverlayBehavior.$inject = [
      'canvas',
      'eventBus',
      'elementRegistry',
      'overlays'
    ];

    var DrilldownModdule = {
      __depends__: [ OverlaysModule, ChangeSupportModule, RootElementsModule ],
      __init__: [ 'drilldownBreadcrumbs', 'drilldownOverlayBehavior', 'drilldownCentering', 'subprocessCompatibility' ],
      drilldownBreadcrumbs: [ 'type', DrilldownBreadcrumbs ],
      drilldownCentering: [ 'type', DrilldownCentering ],
      drilldownOverlayBehavior: [ 'type', DrilldownOverlayBehavior ],
      subprocessCompatibility: [ 'type', SubprocessCompatibility ]
    };

    /**
     * @typedef {import('../core/EventBus').default} EventBus
     * @typedef {import('./Styles').default} Styles
     */

    // apply default renderer with lowest possible priority
    // so that it only kicks in if noone else could render
    var DEFAULT_RENDER_PRIORITY = 1;

    /**
     * The default renderer used for shapes and connections.
     *
     * @param {EventBus} eventBus
     * @param {Styles} styles
     */
    function DefaultRenderer(eventBus, styles) {

      BaseRenderer.call(this, eventBus, DEFAULT_RENDER_PRIORITY);

      this.CONNECTION_STYLE = styles.style([ 'no-fill' ], { strokeWidth: 5, stroke: 'fuchsia' });
      this.SHAPE_STYLE = styles.style({ fill: 'white', stroke: 'fuchsia', strokeWidth: 2 });
      this.FRAME_STYLE = styles.style([ 'no-fill' ], { stroke: 'fuchsia', strokeDasharray: 4, strokeWidth: 2 });
    }

    e(DefaultRenderer, BaseRenderer);


    /**
     * @private
     */
    DefaultRenderer.prototype.canRender = function() {
      return true;
    };

    /**
     * @private
     */
    DefaultRenderer.prototype.drawShape = function drawShape(visuals, element, attrs) {
      var rect = create$1('rect');

      attr(rect, {
        x: 0,
        y: 0,
        width: element.width || 0,
        height: element.height || 0
      });

      if (isFrameElement$1(element)) {
        attr(rect, assign$1({}, this.FRAME_STYLE, attrs || {}));
      } else {
        attr(rect, assign$1({}, this.SHAPE_STYLE, attrs || {}));
      }

      append(visuals, rect);

      return rect;
    };

    /**
     * @private
     */
    DefaultRenderer.prototype.drawConnection = function drawConnection(visuals, connection, attrs) {

      var line = createLine(connection.waypoints, assign$1({}, this.CONNECTION_STYLE, attrs || {}));
      append(visuals, line);

      return line;
    };

    /**
     * @private
     */
    DefaultRenderer.prototype.getShapePath = function getShapePath(shape) {

      var x = shape.x,
          y = shape.y,
          width = shape.width,
          height = shape.height;

      var shapePath = [
        [ 'M', x, y ],
        [ 'l', width, 0 ],
        [ 'l', 0, height ],
        [ 'l', -width, 0 ],
        [ 'z' ]
      ];

      return componentsToPath(shapePath);
    };

    /**
     * @private
     */
    DefaultRenderer.prototype.getConnectionPath = function getConnectionPath(connection) {
      var waypoints = connection.waypoints;

      var idx, point, connectionPath = [];

      for (idx = 0; (point = waypoints[idx]); idx++) {

        // take invisible docking into account
        // when creating the path
        point = point.original || point;

        connectionPath.push([ idx === 0 ? 'M' : 'L', point.x, point.y ]);
      }

      return componentsToPath(connectionPath);
    };

    DefaultRenderer.$inject = [ 'eventBus', 'styles' ];

    /**
     * A component that manages shape styles
     */
    function Styles() {

      var defaultTraits = {

        'no-fill': {
          fill: 'none'
        },
        'no-border': {
          strokeOpacity: 0.0
        },
        'no-events': {
          pointerEvents: 'none'
        }
      };

      var self = this;

      /**
       * Builds a style definition from a className, a list of traits and an object of additional attributes.
       *
       * @param {string} className
       * @param {string[]} traits
       * @param {Object} additionalAttrs
       *
       * @return {Object} the style defintion
       */
      this.cls = function(className, traits, additionalAttrs) {
        var attrs = this.style(traits, additionalAttrs);

        return assign$1(attrs, { 'class': className });
      };

      /**
       * Builds a style definition from a list of traits and an object of additional attributes.
       *
       * @param {string[]} traits
       * @param {Object} additionalAttrs
       *
       * @return {Object} the style defintion
       */
      this.style = function(traits, additionalAttrs) {

        if (!isArray$5(traits) && !additionalAttrs) {
          additionalAttrs = traits;
          traits = [];
        }

        var attrs = reduce(traits, function(attrs, t) {
          return assign$1(attrs, defaultTraits[t] || {});
        }, {});

        return additionalAttrs ? assign$1(attrs, additionalAttrs) : attrs;
      };

      this.computeStyle = function(custom, traits, defaultStyles) {
        if (!isArray$5(traits)) {
          defaultStyles = traits;
          traits = [];
        }

        return self.style(traits || [], assign$1({}, defaultStyles, custom || {}));
      };
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var DrawModule = {
      __init__: [ 'defaultRenderer' ],
      defaultRenderer: [ 'type', DefaultRenderer ],
      styles: [ 'type', Styles ]
    };

    /**
     * @typedef {import('./Types').ConnectionLike} ConnectionLike
     * @typedef {import('./Types').RootLike} RootLike
     * @typedef {import('./Types').ParentLike } ParentLike
     * @typedef {import('./Types').ShapeLike} ShapeLike
     *
     * @typedef { {
     *   container?: HTMLElement;
     *   deferUpdate?: boolean;
     *   width?: number;
     *   height?: number;
     * } } CanvasConfig
     * @typedef { {
     *   group: SVGElement;
     *   index: number;
     *   visible: boolean;
     * } } CanvasLayer
     * @typedef { {
     *   [key: string]: CanvasLayer;
     * } } CanvasLayers
     * @typedef { {
     *   rootElement: ShapeLike;
     *   layer: CanvasLayer;
     * } } CanvasPlane
     * @typedef { {
     *   scale: number;
     *   inner: Rect;
     *   outer: Dimensions;
     * } & Rect } CanvasViewbox
     *
     * @typedef {import('./ElementRegistry').default} ElementRegistry
     * @typedef {import('./EventBus').default} EventBus
     * @typedef {import('./GraphicsFactory').default} GraphicsFactory
     *
     * @typedef {import('../util/Types').Dimensions} Dimensions
     * @typedef {import('../util/Types').Point} Point
     * @typedef {import('../util/Types').Rect} Rect
     * @typedef {import('../util/Types').RectTRBL} RectTRBL
     */

    function round(number, resolution) {
      return Math.round(number * resolution) / resolution;
    }

    function ensurePx(number) {
      return isNumber$3(number) ? number + 'px' : number;
    }

    function findRoot(element) {
      while (element.parent) {
        element = element.parent;
      }

      return element;
    }

    /**
     * Creates a HTML container element for a SVG element with
     * the given configuration
     *
     * @param {CanvasConfig} options
     *
     * @return {HTMLElement} the container element
     */
    function createContainer(options) {

      options = assign$1({}, { width: '100%', height: '100%' }, options);

      const container = options.container || document.body;

      // create a <div> around the svg element with the respective size
      // this way we can always get the correct container size
      // (this is impossible for <svg> elements at the moment)
      const parent = document.createElement('div');
      parent.setAttribute('class', 'djs-container djs-parent');

      assign(parent, {
        position: 'relative',
        overflow: 'hidden',
        width: ensurePx(options.width),
        height: ensurePx(options.height)
      });

      container.appendChild(parent);

      return parent;
    }

    function createGroup(parent, cls, childIndex) {
      const group = create$1('g');
      classes(group).add(cls);

      const index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;

      // must ensure second argument is node or _null_
      // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
      parent.insertBefore(group, parent.childNodes[index] || null);

      return group;
    }

    const BASE_LAYER = 'base';

    // render plane contents behind utility layers
    const PLANE_LAYER_INDEX = 0;
    const UTILITY_LAYER_INDEX = 1;


    const REQUIRED_MODEL_ATTRS = {
      shape: [ 'x', 'y', 'width', 'height' ],
      connection: [ 'waypoints' ]
    };

    /**
     * The main drawing canvas.
     *
     * @class
     * @constructor
     *
     * @emits Canvas#canvas.init
     *
     * @param {CanvasConfig|null} config
     * @param {EventBus} eventBus
     * @param {GraphicsFactory} graphicsFactory
     * @param {ElementRegistry} elementRegistry
     */
    function Canvas(config, eventBus, graphicsFactory, elementRegistry) {
      this._eventBus = eventBus;
      this._elementRegistry = elementRegistry;
      this._graphicsFactory = graphicsFactory;

      /**
       * @type {number}
       */
      this._rootsIdx = 0;

      /**
       * @type {CanvasLayers}
       */
      this._layers = {};

      /**
       * @type {CanvasPlane[]}
       */
      this._planes = [];

      /**
       * @type {RootLike|null}
       */
      this._rootElement = null;

      this._init(config || {});
    }

    Canvas.$inject = [
      'config.canvas',
      'eventBus',
      'graphicsFactory',
      'elementRegistry'
    ];

    /**
     * Creates a <svg> element that is wrapped into a <div>.
     * This way we are always able to correctly figure out the size of the svg element
     * by querying the parent node.

     * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)

     * <div class="djs-container" style="width: {desired-width}, height: {desired-height}">
     *   <svg width="100%" height="100%">
     *    ...
     *   </svg>
     * </div>
     *
     * @param {CanvasConfig} config
     */
    Canvas.prototype._init = function(config) {

      const eventBus = this._eventBus;

      // html container
      const container = this._container = createContainer(config);

      const svg = this._svg = create$1('svg');
      attr(svg, { width: '100%', height: '100%' });

      append(container, svg);

      const viewport = this._viewport = createGroup(svg, 'viewport');

      // debounce canvas.viewbox.changed events
      // for smoother diagram interaction
      if (config.deferUpdate !== false) {
        this._viewboxChanged = debounce$1(bind$2(this._viewboxChanged, this), 300);
      }

      eventBus.on('diagram.init', () => {

        /**
         * An event indicating that the canvas is ready to be drawn on.
         *
         * @memberOf Canvas
         *
         * @event canvas.init
         *
         * @type {Object}
         * @property {SVGElement} svg the created svg element
         * @property {SVGElement} viewport the direct parent of diagram elements and shapes
         */
        eventBus.fire('canvas.init', {
          svg: svg,
          viewport: viewport
        });

      });

      // reset viewbox on shape changes to
      // recompute the viewbox
      eventBus.on([
        'shape.added',
        'connection.added',
        'shape.removed',
        'connection.removed',
        'elements.changed',
        'root.set'
      ], () => {
        delete this._cachedViewbox;
      });

      eventBus.on('diagram.destroy', 500, this._destroy, this);
      eventBus.on('diagram.clear', 500, this._clear, this);
    };

    Canvas.prototype._destroy = function() {
      this._eventBus.fire('canvas.destroy', {
        svg: this._svg,
        viewport: this._viewport
      });

      const parent = this._container.parentNode;

      if (parent) {
        parent.removeChild(this._container);
      }

      delete this._svg;
      delete this._container;
      delete this._layers;
      delete this._planes;
      delete this._rootElement;
      delete this._viewport;
    };

    Canvas.prototype._clear = function() {

      const allElements = this._elementRegistry.getAll();

      // remove all elements
      allElements.forEach(element => {
        const type = getType(element);

        if (type === 'root') {
          this.removeRootElement(element);
        } else {
          this._removeElement(element, type);
        }
      });

      // remove all planes
      this._planes = [];
      this._rootElement = null;

      // force recomputation of view box
      delete this._cachedViewbox;
    };

    /**
     * Returns the default layer on which
     * all elements are drawn.
     *
     * @return {SVGElement}  The SVG element of the layer.
     */
    Canvas.prototype.getDefaultLayer = function() {
      return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);
    };

    /**
     * Returns a layer that is used to draw elements
     * or annotations on it.
     *
     * Non-existing layers retrieved through this method
     * will be created. During creation, the optional index
     * may be used to create layers below or above existing layers.
     * A layer with a certain index is always created above all
     * existing layers with the same index.
     *
     * @param {string} name The name of the layer.
     * @param {number} [index] The index of the layer.
     *
     * @return {SVGElement} The SVG element of the layer.
     */
    Canvas.prototype.getLayer = function(name, index) {

      if (!name) {
        throw new Error('must specify a name');
      }

      let layer = this._layers[name];

      if (!layer) {
        layer = this._layers[name] = this._createLayer(name, index);
      }

      // throw an error if layer creation / retrival is
      // requested on different index
      if (typeof index !== 'undefined' && layer.index !== index) {
        throw new Error('layer <' + name + '> already created at index <' + index + '>');
      }

      return layer.group;
    };

    /**
     * For a given index, return the number of layers that have a higher index and
     * are visible.
     *
     * This is used to determine the node a layer should be inserted at.
     *
     * @param {number} index
     *
     * @return {number}
     */
    Canvas.prototype._getChildIndex = function(index) {
      return reduce(this._layers, function(childIndex, layer) {
        if (layer.visible && index >= layer.index) {
          childIndex++;
        }

        return childIndex;
      }, 0);
    };

    /**
     * Creates a given layer and returns it.
     *
     * @param {string} name
     * @param {number} [index=0]
     *
     * @return {CanvasLayer}
     */
    Canvas.prototype._createLayer = function(name, index) {

      if (typeof index === 'undefined') {
        index = UTILITY_LAYER_INDEX;
      }

      const childIndex = this._getChildIndex(index);

      return {
        group: createGroup(this._viewport, 'layer-' + name, childIndex),
        index: index,
        visible: true
      };
    };


    /**
     * Shows a given layer.
     *
     * @param {string} name The name of the layer.
     *
     * @return {SVGElement} The SVG element of the layer.
     */
    Canvas.prototype.showLayer = function(name) {

      if (!name) {
        throw new Error('must specify a name');
      }

      const layer = this._layers[name];

      if (!layer) {
        throw new Error('layer <' + name + '> does not exist');
      }

      const viewport = this._viewport;
      const group = layer.group;
      const index = layer.index;

      if (layer.visible) {
        return group;
      }

      const childIndex = this._getChildIndex(index);

      viewport.insertBefore(group, viewport.childNodes[childIndex] || null);

      layer.visible = true;

      return group;
    };

    /**
     * Hides a given layer.
     *
     * @param {string} name The name of the layer.
     *
     * @return {SVGElement} The SVG element of the layer.
     */
    Canvas.prototype.hideLayer = function(name) {

      if (!name) {
        throw new Error('must specify a name');
      }

      const layer = this._layers[name];

      if (!layer) {
        throw new Error('layer <' + name + '> does not exist');
      }

      const group = layer.group;

      if (!layer.visible) {
        return group;
      }

      remove(group);

      layer.visible = false;

      return group;
    };


    Canvas.prototype._removeLayer = function(name) {

      const layer = this._layers[name];

      if (layer) {
        delete this._layers[name];

        remove(layer.group);
      }
    };

    /**
     * Returns the currently active layer. Can be null.
     *
     * @return {CanvasLayer|null} The active layer of `null`.
     */
    Canvas.prototype.getActiveLayer = function() {
      const plane = this._findPlaneForRoot(this.getRootElement());

      if (!plane) {
        return null;
      }

      return plane.layer;
    };


    /**
     * Returns the plane which contains the given element.
     *
     * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
     *
     * @return {RootLike|undefined} The root of the element.
     */
    Canvas.prototype.findRoot = function(element) {
      if (typeof element === 'string') {
        element = this._elementRegistry.get(element);
      }

      if (!element) {
        return;
      }

      const plane = this._findPlaneForRoot(
        findRoot(element)
      ) || {};

      return plane.rootElement;
    };

    /**
     * Return a list of all root elements on the diagram.
     *
     * @return {(RootLike)[]} The list of root elements.
     */
    Canvas.prototype.getRootElements = function() {
      return this._planes.map(function(plane) {
        return plane.rootElement;
      });
    };

    Canvas.prototype._findPlaneForRoot = function(rootElement) {
      return find$1(this._planes, function(plane) {
        return plane.rootElement === rootElement;
      });
    };


    /**
     * Returns the html element that encloses the
     * drawing canvas.
     *
     * @return {HTMLElement} The HTML element of the container.
     */
    Canvas.prototype.getContainer = function() {
      return this._container;
    };


    // markers //////////////////////

    Canvas.prototype._updateMarker = function(element, marker, add) {
      let container;

      if (!element.id) {
        element = this._elementRegistry.get(element);
      }

      // we need to access all
      container = this._elementRegistry._elements[element.id];

      if (!container) {
        return;
      }

      forEach$1([ container.gfx, container.secondaryGfx ], function(gfx) {
        if (gfx) {

          // invoke either addClass or removeClass based on mode
          if (add) {
            classes(gfx).add(marker);
          } else {
            classes(gfx).remove(marker);
          }
        }
      });

      /**
       * An event indicating that a marker has been updated for an element
       *
       * @event element.marker.update
       * @type {Object}
       * @property {Element} element the shape
       * @property {SVGElement} gfx the graphical representation of the shape
       * @property {string} marker
       * @property {boolean} add true if the marker was added, false if it got removed
       */
      this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });
    };


    /**
     * Adds a marker to an element (basically a css class).
     *
     * Fires the element.marker.update event, making it possible to
     * integrate extension into the marker life-cycle, too.
     *
     * @example
     *
     * canvas.addMarker('foo', 'some-marker');
     *
     * const fooGfx = canvas.getGraphics('foo');
     *
     * fooGfx; // <g class="... some-marker"> ... </g>
     *
     * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
     * @param {string} marker The marker.
     */
    Canvas.prototype.addMarker = function(element, marker) {
      this._updateMarker(element, marker, true);
    };


    /**
     * Remove a marker from an element.
     *
     * Fires the element.marker.update event, making it possible to
     * integrate extension into the marker life-cycle, too.
     *
     * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
     * @param {string} marker The marker.
     */
    Canvas.prototype.removeMarker = function(element, marker) {
      this._updateMarker(element, marker, false);
    };

    /**
     * Check whether an element has a given marker.
     *
     * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
     * @param {string} marker The marker.
     */
    Canvas.prototype.hasMarker = function(element, marker) {
      if (!element.id) {
        element = this._elementRegistry.get(element);
      }

      const gfx = this.getGraphics(element);

      return classes(gfx).has(marker);
    };

    /**
     * Toggles a marker on an element.
     *
     * Fires the element.marker.update event, making it possible to
     * integrate extension into the marker life-cycle, too.
     *
     * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
     * @param {string} marker The marker.
     */
    Canvas.prototype.toggleMarker = function(element, marker) {
      if (this.hasMarker(element, marker)) {
        this.removeMarker(element, marker);
      } else {
        this.addMarker(element, marker);
      }
    };

    /**
     * Returns the current root element.
     *
     * Supports two different modes for handling root elements:
     *
     * 1. if no root element has been added before, an implicit root will be added
     * and returned. This is used in applications that don't require explicit
     * root elements.
     *
     * 2. when root elements have been added before calling `getRootElement`,
     * root elements can be null. This is used for applications that want to manage
     * root elements themselves.
     *
     * @return {RootLike} The current root element.
     */
    Canvas.prototype.getRootElement = function() {
      const rootElement = this._rootElement;

      // can return null if root elements are present but none was set yet
      if (rootElement || this._planes.length) {
        return rootElement;
      }

      return this.setRootElement(this.addRootElement(null));
    };

    /**
     * Adds a given root element and returns it.
     *
     * @param {RootLike} [rootElement] The root element to be added.
     *
     * @return {RootLike} The added root element or an implicit root element.
     */
    Canvas.prototype.addRootElement = function(rootElement) {
      const idx = this._rootsIdx++;

      if (!rootElement) {
        rootElement = {
          id: '__implicitroot_' + idx,
          children: [],
          isImplicit: true
        };
      }

      const layerName = rootElement.layer = 'root-' + idx;

      this._ensureValid('root', rootElement);

      const layer = this.getLayer(layerName, PLANE_LAYER_INDEX);

      this.hideLayer(layerName);

      this._addRoot(rootElement, layer);

      this._planes.push({
        rootElement: rootElement,
        layer: layer
      });

      return rootElement;
    };

    /**
     * Removes a given root element and returns it.
     *
     * @param {RootLike|string} rootElement element or element ID
     *
     * @return {RootLike|undefined} removed element
     */
    Canvas.prototype.removeRootElement = function(rootElement) {

      if (typeof rootElement === 'string') {
        rootElement = this._elementRegistry.get(rootElement);
      }

      const plane = this._findPlaneForRoot(rootElement);

      if (!plane) {
        return;
      }

      // hook up life-cycle events
      this._removeRoot(rootElement);

      // clean up layer
      this._removeLayer(rootElement.layer);

      // clean up plane
      this._planes = this._planes.filter(function(plane) {
        return plane.rootElement !== rootElement;
      });

      // clean up active root
      if (this._rootElement === rootElement) {
        this._rootElement = null;
      }

      return rootElement;
    };


    /**
     * Sets a given element as the new root element for the canvas
     * and returns the new root element.
     *
     * @param {RootLike} rootElement The root element to be set.
     *
     * @return {RootLike} The set root element.
     */
    Canvas.prototype.setRootElement = function(rootElement) {

      if (rootElement === this._rootElement) {
        return;
      }

      let plane;

      if (!rootElement) {
        throw new Error('rootElement required');
      }

      plane = this._findPlaneForRoot(rootElement);

      // give set add semantics for backwards compatibility
      if (!plane) {
        rootElement = this.addRootElement(rootElement);
      }

      this._setRoot(rootElement);

      return rootElement;
    };


    Canvas.prototype._removeRoot = function(element) {
      const elementRegistry = this._elementRegistry,
            eventBus = this._eventBus;

      // simulate element remove event sequence
      eventBus.fire('root.remove', { element: element });
      eventBus.fire('root.removed', { element: element });

      elementRegistry.remove(element);
    };


    Canvas.prototype._addRoot = function(element, gfx) {
      const elementRegistry = this._elementRegistry,
            eventBus = this._eventBus;

      // resemble element add event sequence
      eventBus.fire('root.add', { element: element });

      elementRegistry.add(element, gfx);

      eventBus.fire('root.added', { element: element, gfx: gfx });
    };


    Canvas.prototype._setRoot = function(rootElement, layer) {

      const currentRoot = this._rootElement;

      if (currentRoot) {

        // un-associate previous root element <svg>
        this._elementRegistry.updateGraphics(currentRoot, null, true);

        // hide previous layer
        this.hideLayer(currentRoot.layer);
      }

      if (rootElement) {

        if (!layer) {
          layer = this._findPlaneForRoot(rootElement).layer;
        }

        // associate element with <svg>
        this._elementRegistry.updateGraphics(rootElement, this._svg, true);

        // show root layer
        this.showLayer(rootElement.layer);
      }

      this._rootElement = rootElement;

      this._eventBus.fire('root.set', { element: rootElement });
    };

    Canvas.prototype._ensureValid = function(type, element) {
      if (!element.id) {
        throw new Error('element must have an id');
      }

      if (this._elementRegistry.get(element.id)) {
        throw new Error('element <' + element.id + '> already exists');
      }

      const requiredAttrs = REQUIRED_MODEL_ATTRS[type];

      const valid = every(requiredAttrs, function(attr) {
        return typeof element[attr] !== 'undefined';
      });

      if (!valid) {
        throw new Error(
          'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);
      }
    };

    Canvas.prototype._setParent = function(element, parent, parentIndex) {
      add(parent.children, element, parentIndex);
      element.parent = parent;
    };

    /**
     * Adds an element to the canvas.
     *
     * This wires the parent <-> child relationship between the element and
     * a explicitly specified parent or an implicit root element.
     *
     * During add it emits the events
     *
     *  * <{type}.add> (element, parent)
     *  * <{type}.added> (element, gfx)
     *
     * Extensions may hook into these events to perform their magic.
     *
     * @param {string} type
     * @param {ConnectionLike|ShapeLike} element
     * @param {ShapeLike} [parent]
     * @param {number} [parentIndex]
     *
     * @return {ConnectionLike|ShapeLike} The added element.
     */
    Canvas.prototype._addElement = function(type, element, parent, parentIndex) {

      parent = parent || this.getRootElement();

      const eventBus = this._eventBus,
            graphicsFactory = this._graphicsFactory;

      this._ensureValid(type, element);

      eventBus.fire(type + '.add', { element: element, parent: parent });

      this._setParent(element, parent, parentIndex);

      // create graphics
      const gfx = graphicsFactory.create(type, element, parentIndex);

      this._elementRegistry.add(element, gfx);

      // update its visual
      graphicsFactory.update(type, element, gfx);

      eventBus.fire(type + '.added', { element: element, gfx: gfx });

      return element;
    };

    /**
     * Adds a shape to the canvas.
     *
     * @param {ShapeLike} shape The shape to be added
     * @param {ParentLike} [parent] The shape's parent.
     * @param {number} [parentIndex] The index at which to add the shape to the parent's children.
     *
     * @return {ShapeLike} The added shape.
     */
    Canvas.prototype.addShape = function(shape, parent, parentIndex) {
      return this._addElement('shape', shape, parent, parentIndex);
    };

    /**
     * Adds a connection to the canvas.
     *
     * @param {ConnectionLike} connection The connection to be added.
     * @param {ParentLike} [parent] The connection's parent.
     * @param {number} [parentIndex] The index at which to add the connection to the parent's children.
     *
     * @return {ConnectionLike} The added connection.
     */
    Canvas.prototype.addConnection = function(connection, parent, parentIndex) {
      return this._addElement('connection', connection, parent, parentIndex);
    };


    /**
     * Internal remove element
     */
    Canvas.prototype._removeElement = function(element, type) {

      const elementRegistry = this._elementRegistry,
            graphicsFactory = this._graphicsFactory,
            eventBus = this._eventBus;

      element = elementRegistry.get(element.id || element);

      if (!element) {

        // element was removed already
        return;
      }

      eventBus.fire(type + '.remove', { element: element });

      graphicsFactory.remove(element);

      // unset parent <-> child relationship
      remove$2(element.parent && element.parent.children, element);
      element.parent = null;

      eventBus.fire(type + '.removed', { element: element });

      elementRegistry.remove(element);

      return element;
    };


    /**
     * Removes a shape from the canvas.
     *
     * @fires ShapeRemoveEvent
     * @fires ShapeRemovedEvent
     *
     * @param {ShapeLike|string} shape The shape or its ID.
     *
     * @return {ShapeLike} The removed shape.
     */
    Canvas.prototype.removeShape = function(shape) {

      /**
       * An event indicating that a shape is about to be removed from the canvas.
       *
       * @memberOf Canvas
       *
       * @event ShapeRemoveEvent
       * @type {Object}
       * @property {ShapeLike} element The shape.
       * @property {SVGElement} gfx The graphical element.
       */

      /**
       * An event indicating that a shape has been removed from the canvas.
       *
       * @memberOf Canvas
       *
       * @event ShapeRemoved
       * @type {Object}
       * @property {ShapeLike} element The shape.
       * @property {SVGElement} gfx The graphical element.
       */
      return this._removeElement(shape, 'shape');
    };


    /**
     * Removes a connection from the canvas.
     *
     * @fires ConnectionRemoveEvent
     * @fires ConnectionRemovedEvent
     *
     * @param {ConnectionLike|string} connection The connection or its ID.
     *
     * @return {ConnectionLike} The removed connection.
     */
    Canvas.prototype.removeConnection = function(connection) {

      /**
       * An event indicating that a connection is about to be removed from the canvas.
       *
       * @memberOf Canvas
       *
       * @event ConnectionRemoveEvent
       * @type {Object}
       * @property {ConnectionLike} element The connection.
       * @property {SVGElement} gfx The graphical element.
       */

      /**
       * An event indicating that a connection has been removed from the canvas.
       *
       * @memberOf Canvas
       *
       * @event connection.removed
       * @type {Object}
       * @property {ConnectionLike} element The connection.
       * @property {SVGElement} gfx The graphical element.
       */
      return this._removeElement(connection, 'connection');
    };


    /**
     * Returns the graphical element of an element.
     *
     * @param {ShapeLike|ConnectionLike|string} element The element or its ID.
     * @param {boolean} [secondary=false] Whether to return the secondary graphical element.
     *
     * @return {SVGElement} The graphical element.
     */
    Canvas.prototype.getGraphics = function(element, secondary) {
      return this._elementRegistry.getGraphics(element, secondary);
    };


    /**
     * Perform a viewbox update via a given change function.
     *
     * @param {Function} changeFn
     */
    Canvas.prototype._changeViewbox = function(changeFn) {

      // notify others of the upcoming viewbox change
      this._eventBus.fire('canvas.viewbox.changing');

      // perform actual change
      changeFn.apply(this);

      // reset the cached viewbox so that
      // a new get operation on viewbox or zoom
      // triggers a viewbox re-computation
      this._cachedViewbox = null;

      // notify others of the change; this step
      // may or may not be debounced
      this._viewboxChanged();
    };

    Canvas.prototype._viewboxChanged = function() {
      this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });
    };


    /**
     * Gets or sets the view box of the canvas, i.e. the
     * area that is currently displayed.
     *
     * The getter may return a cached viewbox (if it is currently
     * changing). To force a recomputation, pass `false` as the first argument.
     *
     * @example
     *
     * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })
     *
     * // sets the visible area of the diagram to (100|100) -> (600|100)
     * // and and scales it according to the diagram width
     *
     * const viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.
     *
     * console.log(viewbox);
     * // {
     * //   inner: Dimensions,
     * //   outer: Dimensions,
     * //   scale,
     * //   x, y,
     * //   width, height
     * // }
     *
     * // if the current diagram is zoomed and scrolled, you may reset it to the
     * // default zoom via this method, too:
     *
     * const zoomedAndScrolledViewbox = canvas.viewbox();
     *
     * canvas.viewbox({
     *   x: 0,
     *   y: 0,
     *   width: zoomedAndScrolledViewbox.outer.width,
     *   height: zoomedAndScrolledViewbox.outer.height
     * });
     *
     * @param {Rect} [box] The viewbox to be set.
     *
     * @return {CanvasViewbox} The set viewbox.
     */
    Canvas.prototype.viewbox = function(box) {

      if (box === undefined && this._cachedViewbox) {
        return this._cachedViewbox;
      }

      const viewport = this._viewport,
            outerBox = this.getSize();
      let innerBox,
          matrix,
          activeLayer,
          transform,
          scale,
          x, y;

      if (!box) {

        // compute the inner box based on the
        // diagrams active layer. This allows us to exclude
        // external components, such as overlays

        activeLayer = this._rootElement ? this.getActiveLayer() : null;
        innerBox = activeLayer && activeLayer.getBBox() || {};

        transform = transform$1(viewport);
        matrix = transform ? transform.matrix : createMatrix();
        scale = round(matrix.a, 1000);

        x = round(-matrix.e || 0, 1000);
        y = round(-matrix.f || 0, 1000);

        box = this._cachedViewbox = {
          x: x ? x / scale : 0,
          y: y ? y / scale : 0,
          width: outerBox.width / scale,
          height: outerBox.height / scale,
          scale: scale,
          inner: {
            width: innerBox.width || 0,
            height: innerBox.height || 0,
            x: innerBox.x || 0,
            y: innerBox.y || 0
          },
          outer: outerBox
        };

        return box;
      } else {

        this._changeViewbox(function() {
          scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);

          const matrix = this._svg.createSVGMatrix()
            .scale(scale)
            .translate(-box.x, -box.y);

          transform$1(viewport, matrix);
        });
      }

      return box;
    };


    /**
     * Gets or sets the scroll of the canvas.
     *
     * @param {Point} [delta] The scroll to be set.
     *
     * @return {Point}
     */
    Canvas.prototype.scroll = function(delta) {

      const node = this._viewport;
      let matrix = node.getCTM();

      if (delta) {
        this._changeViewbox(function() {
          delta = assign$1({ dx: 0, dy: 0 }, delta || {});

          matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);

          setCTM(node, matrix);
        });
      }

      return { x: matrix.e, y: matrix.f };
    };

    /**
     * Scrolls the viewbox to contain the given element.
     * Optionally specify a padding to be applied to the edges.
     *
     * @param {ShapeLike|ConnectionLike|string} element The element to scroll to or its ID.
     * @param {RectTRBL|number} [padding=100] The padding to be applied. Can also specify top, bottom, left and right.
     */
    Canvas.prototype.scrollToElement = function(element, padding) {
      let defaultPadding = 100;

      if (typeof element === 'string') {
        element = this._elementRegistry.get(element);
      }

      // set to correct rootElement
      const rootElement = this.findRoot(element);

      if (rootElement !== this.getRootElement()) {
        this.setRootElement(rootElement);
      }

      if (!padding) {
        padding = {};
      }
      if (typeof padding === 'number') {
        defaultPadding = padding;
      }

      padding = {
        top: padding.top || defaultPadding,
        right: padding.right || defaultPadding,
        bottom: padding.bottom || defaultPadding,
        left: padding.left || defaultPadding
      };

      const elementBounds = getBBox(element),
            elementTrbl = asTRBL(elementBounds),
            viewboxBounds = this.viewbox(),
            zoom = this.zoom();
      let dx, dy;

      // shrink viewboxBounds with padding
      viewboxBounds.y += padding.top / zoom;
      viewboxBounds.x += padding.left / zoom;
      viewboxBounds.width -= (padding.right + padding.left) / zoom;
      viewboxBounds.height -= (padding.bottom + padding.top) / zoom;

      const viewboxTrbl = asTRBL(viewboxBounds);

      const canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;

      if (!canFit) {

        // top-left when element can't fit
        dx = elementBounds.x - viewboxBounds.x;
        dy = elementBounds.y - viewboxBounds.y;

      } else {

        const dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),
              dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),
              dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),
              dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);

        dx = dRight || dLeft;
        dy = dBottom || dTop;

      }

      this.scroll({ dx: -dx * zoom, dy: -dy * zoom });
    };

    /**
     * Gets or sets the current zoom of the canvas, optionally zooming to the
     * specified position.
     *
     * The getter may return a cached zoom level. Call it with `false` as the first
     * argument to force recomputation of the current level.
     *
     * @param {number|'fit-viewport'} [newScale] The new zoom level, either a number,
     * i.e. 0.9, or `fit-viewport` to adjust the size to fit the current viewport.
     * @param {Point} [center] The reference point { x: ..., y: ...} to zoom to.
     *
     * @return {number} The set zoom level.
     */
    Canvas.prototype.zoom = function(newScale, center) {

      if (!newScale) {
        return this.viewbox(newScale).scale;
      }

      if (newScale === 'fit-viewport') {
        return this._fitViewport(center);
      }

      let outer,
          matrix;

      this._changeViewbox(function() {

        if (typeof center !== 'object') {
          outer = this.viewbox().outer;

          center = {
            x: outer.width / 2,
            y: outer.height / 2
          };
        }

        matrix = this._setZoom(newScale, center);
      });

      return round(matrix.a, 1000);
    };

    function setCTM(node, m) {
      const mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';
      node.setAttribute('transform', mstr);
    }

    Canvas.prototype._fitViewport = function(center) {

      const vbox = this.viewbox(),
            outer = vbox.outer,
            inner = vbox.inner;
      let newScale,
          newViewbox;

      // display the complete diagram without zooming in.
      // instead of relying on internal zoom, we perform a
      // hard reset on the canvas viewbox to realize this
      //
      // if diagram does not need to be zoomed in, we focus it around
      // the diagram origin instead

      if (inner.x >= 0 &&
          inner.y >= 0 &&
          inner.x + inner.width <= outer.width &&
          inner.y + inner.height <= outer.height &&
          !center) {

        newViewbox = {
          x: 0,
          y: 0,
          width: Math.max(inner.width + inner.x, outer.width),
          height: Math.max(inner.height + inner.y, outer.height)
        };
      } else {

        newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);
        newViewbox = {
          x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),
          y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),
          width: outer.width / newScale,
          height: outer.height / newScale
        };
      }

      this.viewbox(newViewbox);

      return this.viewbox(false).scale;
    };


    Canvas.prototype._setZoom = function(scale, center) {

      const svg = this._svg,
            viewport = this._viewport;

      const matrix = svg.createSVGMatrix();
      const point = svg.createSVGPoint();

      let centerPoint,
          originalPoint,
          currentMatrix,
          scaleMatrix,
          newMatrix;

      currentMatrix = viewport.getCTM();

      const currentScale = currentMatrix.a;

      if (center) {
        centerPoint = assign$1(point, center);

        // revert applied viewport transformations
        originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());

        // create scale matrix
        scaleMatrix = matrix
          .translate(originalPoint.x, originalPoint.y)
          .scale(1 / currentScale * scale)
          .translate(-originalPoint.x, -originalPoint.y);

        newMatrix = currentMatrix.multiply(scaleMatrix);
      } else {
        newMatrix = matrix.scale(scale);
      }

      setCTM(this._viewport, newMatrix);

      return newMatrix;
    };


    /**
     * Returns the size of the canvas.
     *
     * @return {Dimensions} The size of the canvas.
     */
    Canvas.prototype.getSize = function() {
      return {
        width: this._container.clientWidth,
        height: this._container.clientHeight
      };
    };


    /**
     * Returns the absolute bounding box of an element.
     *
     * The absolute bounding box may be used to display overlays in the callers
     * (browser) coordinate system rather than the zoomed in/out canvas coordinates.
     *
     * @param {ShapeLike|ConnectionLike} element The element.
     *
     * @return {Rect} The element's absolute bounding box.
     */
    Canvas.prototype.getAbsoluteBBox = function(element) {
      const vbox = this.viewbox();
      let bbox;

      // connection
      // use svg bbox
      if (element.waypoints) {
        const gfx = this.getGraphics(element);

        bbox = gfx.getBBox();
      }

      // shapes
      // use data
      else {
        bbox = element;
      }

      const x = bbox.x * vbox.scale - vbox.x * vbox.scale;
      const y = bbox.y * vbox.scale - vbox.y * vbox.scale;

      const width = bbox.width * vbox.scale;
      const height = bbox.height * vbox.scale;

      return {
        x: x,
        y: y,
        width: width,
        height: height
      };
    };

    /**
     * Fires an event so other modules can react to the canvas resizing.
     */
    Canvas.prototype.resized = function() {

      // force recomputation of view box
      delete this._cachedViewbox;

      this._eventBus.fire('canvas.resized');
    };

    var ELEMENT_ID = 'data-element-id';

    /**
     * @typedef {import('./Types').ElementLike} ElementLike
     *
     * @typedef {import('./EventBus').default} EventBus
     *
     * @typedef { (element: ElementLike, gfx: SVGElement) => boolean|any } ElementRegistryFilterCallback
     * @typedef { (element: ElementLike, gfx: SVGElement) => any } ElementRegistryForEachCallback
     */

    /**
     * A registry that keeps track of all shapes in the diagram.
     *
     * @class
     * @constructor
     *
     * @param {EventBus} eventBus
     */
    function ElementRegistry(eventBus) {

      /**
       * @type { {
       *   [id: string]: {
       *     element: ElementLike;
       *     gfx?: SVGElement;
       *     secondaryGfx?: SVGElement;
       *   }
       * } }
       */
      this._elements = {};

      this._eventBus = eventBus;
    }

    ElementRegistry.$inject = [ 'eventBus' ];

    /**
     * Add an element and its graphical representation(s) to the registry.
     *
     * @param {ElementLike} element The element to be added.
     * @param {SVGElement} gfx The primary graphical representation.
     * @param {SVGElement} [secondaryGfx] The secondary graphical representation.
     */
    ElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {

      var id = element.id;

      this._validateId(id);

      // associate dom node with element
      attr(gfx, ELEMENT_ID, id);

      if (secondaryGfx) {
        attr(secondaryGfx, ELEMENT_ID, id);
      }

      this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };
    };

    /**
     * Remove an element from the registry.
     *
     * @param {ElementLike|string} element
     */
    ElementRegistry.prototype.remove = function(element) {
      var elements = this._elements,
          id = element.id || element,
          container = id && elements[id];

      if (container) {

        // unset element id on gfx
        attr(container.gfx, ELEMENT_ID, '');

        if (container.secondaryGfx) {
          attr(container.secondaryGfx, ELEMENT_ID, '');
        }

        delete elements[id];
      }
    };

    /**
     * Update an elements ID.
     *
     * @param {ElementLike|string} element The element or its ID.
     * @param {string} newId The new ID.
     */
    ElementRegistry.prototype.updateId = function(element, newId) {

      this._validateId(newId);

      if (typeof element === 'string') {
        element = this.get(element);
      }

      this._eventBus.fire('element.updateId', {
        element: element,
        newId: newId
      });

      var gfx = this.getGraphics(element),
          secondaryGfx = this.getGraphics(element, true);

      this.remove(element);

      element.id = newId;

      this.add(element, gfx, secondaryGfx);
    };

    /**
     * Update the graphical representation of an element.
     *
     * @param {ElementLike|string} filter The element or its ID.
     * @param {SVGElement} gfx The new graphical representation.
     * @param {boolean} [secondary=false] Whether to update the secondary graphical representation.
     */
    ElementRegistry.prototype.updateGraphics = function(filter, gfx, secondary) {
      var id = filter.id || filter;

      var container = this._elements[id];

      if (secondary) {
        container.secondaryGfx = gfx;
      } else {
        container.gfx = gfx;
      }

      if (gfx) {
        attr(gfx, ELEMENT_ID, id);
      }

      return gfx;
    };

    /**
     * Get the element with the given ID or graphical representation.
     *
     * @example
     *
     * elementRegistry.get('SomeElementId_1');
     *
     * elementRegistry.get(gfx);
     *
     * @param {string|SVGElement} filter The elements ID or graphical representation.
     *
     * @return {ElementLike|undefined} The element.
     */
    ElementRegistry.prototype.get = function(filter) {
      var id;

      if (typeof filter === 'string') {
        id = filter;
      } else {
        id = filter && attr(filter, ELEMENT_ID);
      }

      var container = this._elements[id];
      return container && container.element;
    };

    /**
     * Return all elements that match a given filter function.
     *
     * @param {ElementRegistryFilterCallback} fn The filter function.
     *
     * @return {ElementLike[]} The matching elements.
     */
    ElementRegistry.prototype.filter = function(fn) {

      var filtered = [];

      this.forEach(function(element, gfx) {
        if (fn(element, gfx)) {
          filtered.push(element);
        }
      });

      return filtered;
    };

    /**
     * Return the first element that matches the given filter function.
     *
     * @param {ElementRegistryFilterCallback} fn The filter function.
     *
     * @return {ElementLike|undefined} The matching element.
     */
    ElementRegistry.prototype.find = function(fn) {
      var map = this._elements,
          keys = Object.keys(map);

      for (var i = 0; i < keys.length; i++) {
        var id = keys[i],
            container = map[id],
            element = container.element,
            gfx = container.gfx;

        if (fn(element, gfx)) {
          return element;
        }
      }
    };

    /**
     * Get all elements.
     *
     * @return {ElementLike[]} All elements.
     */
    ElementRegistry.prototype.getAll = function() {
      return this.filter(function(e) { return e; });
    };

    /**
     * Execute a given function for each element.
     *
     * @param {ElementRegistryForEachCallback} fn The function to execute.
     */
    ElementRegistry.prototype.forEach = function(fn) {

      var map = this._elements;

      Object.keys(map).forEach(function(id) {
        var container = map[id],
            element = container.element,
            gfx = container.gfx;

        return fn(element, gfx);
      });
    };

    /**
     * Return the graphical representation of an element.
     *
     * @example
     *
     * elementRegistry.getGraphics('SomeElementId_1');
     *
     * elementRegistry.getGraphics(rootElement); // <g ...>
     *
     * elementRegistry.getGraphics(rootElement, true); // <svg ...>
     *
     * @param {ElementLike|string} filter The element or its ID.
     * @param {boolean} [secondary=false] Whether to return the secondary graphical representation.
     *
     * @return {SVGElement} The graphical representation.
     */
    ElementRegistry.prototype.getGraphics = function(filter, secondary) {
      var id = filter.id || filter;

      var container = this._elements[id];
      return container && (secondary ? container.secondaryGfx : container.gfx);
    };

    /**
     * Validate an ID and throw an error if invalid.
     *
     * @param {string} id
     *
     * @throws {Error} Error indicating that the ID is invalid or already assigned.
     */
    ElementRegistry.prototype._validateId = function(id) {
      if (!id) {
        throw new Error('element must have an id');
      }

      if (this._elements[id]) {
        throw new Error('element with id ' + id + ' already added');
      }
    };

    var FN_REF = '__fn';

    var DEFAULT_PRIORITY$1 = 1000;

    var slice = Array.prototype.slice;

    /**
     * @typedef { {
     *   stopPropagation(): void;
     *   preventDefault(): void;
     *   cancelBubble: boolean;
     *   defaultPrevented: boolean;
     *   returnValue: any;
     * } } Event
     */

    /**
     * @template E
     *
     * @typedef { (event: E & Event, ...any) => any } EventBusEventCallback
     */

    /**
     * @typedef { {
     *  priority: number;
     *  next: EventBusListener | null;
     *  callback: EventBusEventCallback<any>;
     * } } EventBusListener
     */

    /**
     * A general purpose event bus.
     *
     * This component is used to communicate across a diagram instance.
     * Other parts of a diagram can use it to listen to and broadcast events.
     *
     *
     * ## Registering for Events
     *
     * The event bus provides the {@link EventBus#on} and {@link EventBus#once}
     * methods to register for events. {@link EventBus#off} can be used to
     * remove event registrations. Listeners receive an instance of {@link Event}
     * as the first argument. It allows them to hook into the event execution.
     *
     * ```javascript
     *
     * // listen for event
     * eventBus.on('foo', function(event) {
     *
     *   // access event type
     *   event.type; // 'foo'
     *
     *   // stop propagation to other listeners
     *   event.stopPropagation();
     *
     *   // prevent event default
     *   event.preventDefault();
     * });
     *
     * // listen for event with custom payload
     * eventBus.on('bar', function(event, payload) {
     *   console.log(payload);
     * });
     *
     * // listen for event returning value
     * eventBus.on('foobar', function(event) {
     *
     *   // stop event propagation + prevent default
     *   return false;
     *
     *   // stop event propagation + return custom result
     *   return {
     *     complex: 'listening result'
     *   };
     * });
     *
     *
     * // listen with custom priority (default=1000, higher is better)
     * eventBus.on('priorityfoo', 1500, function(event) {
     *   console.log('invoked first!');
     * });
     *
     *
     * // listen for event and pass the context (`this`)
     * eventBus.on('foobar', function(event) {
     *   this.foo();
     * }, this);
     * ```
     *
     *
     * ## Emitting Events
     *
     * Events can be emitted via the event bus using {@link EventBus#fire}.
     *
     * ```javascript
     *
     * // false indicates that the default action
     * // was prevented by listeners
     * if (eventBus.fire('foo') === false) {
     *   console.log('default has been prevented!');
     * };
     *
     *
     * // custom args + return value listener
     * eventBus.on('sum', function(event, a, b) {
     *   return a + b;
     * });
     *
     * // you can pass custom arguments + retrieve result values.
     * var sum = eventBus.fire('sum', 1, 2);
     * console.log(sum); // 3
     * ```
     */
    function EventBus() {

      /**
       * @type { Record<string, EventBusListener> }
       */
      this._listeners = {};

      // cleanup on destroy on lowest priority to allow
      // message passing until the bitter end
      this.on('diagram.destroy', 1, this._destroy, this);
    }


    /**
     * Register an event listener for events with the given name.
     *
     * The callback will be invoked with `event, ...additionalArguments`
     * that have been passed to {@link EventBus#fire}.
     *
     * Returning false from a listener will prevent the events default action
     * (if any is specified). To stop an event from being processed further in
     * other listeners execute {@link Event#stopPropagation}.
     *
     * Returning anything but `undefined` from a listener will stop the listener propagation.
     *
     * @template T
     *
     * @param {string|string[]} events to subscribe to
     * @param {number} [priority=1000] listen priority
     * @param {EventBusEventCallback<T>} callback
     * @param {any} [that] callback context
     */
    EventBus.prototype.on = function(events, priority, callback, that) {

      events = isArray$5(events) ? events : [ events ];

      if (isFunction(priority)) {
        that = callback;
        callback = priority;
        priority = DEFAULT_PRIORITY$1;
      }

      if (!isNumber$3(priority)) {
        throw new Error('priority must be a number');
      }

      var actualCallback = callback;

      if (that) {
        actualCallback = bind$2(callback, that);

        // make sure we remember and are able to remove
        // bound callbacks via {@link #off} using the original
        // callback
        actualCallback[FN_REF] = callback[FN_REF] || callback;
      }

      var self = this;

      events.forEach(function(e) {
        self._addListener(e, {
          priority: priority,
          callback: actualCallback,
          next: null
        });
      });
    };


    /**
     * Register an event listener that is called only once.
     *
     * @template T
     *
     * @param {string|string[]} events to subscribe to
     * @param {number} [priority=1000] the listen priority
     * @param {EventBusEventCallback<T>} callback
     * @param {any} [that] callback context
     */
    EventBus.prototype.once = function(events, priority, callback, that) {
      var self = this;

      if (isFunction(priority)) {
        that = callback;
        callback = priority;
        priority = DEFAULT_PRIORITY$1;
      }

      if (!isNumber$3(priority)) {
        throw new Error('priority must be a number');
      }

      function wrappedCallback() {
        wrappedCallback.__isTomb = true;

        var result = callback.apply(that, arguments);

        self.off(events, wrappedCallback);

        return result;
      }

      // make sure we remember and are able to remove
      // bound callbacks via {@link #off} using the original
      // callback
      wrappedCallback[FN_REF] = callback;

      this.on(events, priority, wrappedCallback);
    };


    /**
     * Removes event listeners by event and callback.
     *
     * If no callback is given, all listeners for a given event name are being removed.
     *
     * @param {string|string[]} events
     * @param {EventBusEventCallback} [callback]
     */
    EventBus.prototype.off = function(events, callback) {

      events = isArray$5(events) ? events : [ events ];

      var self = this;

      events.forEach(function(event) {
        self._removeListener(event, callback);
      });

    };


    /**
     * Create an event recognized be the event bus.
     *
     * @param {Object} data Event data.
     *
     * @return {Event} An event that will be recognized by the event bus.
     */
    EventBus.prototype.createEvent = function(data) {
      var event = new InternalEvent();

      event.init(data);

      return event;
    };


    /**
     * Fires an event.
     *
     * @example
     *
     * ```javascript
     * // fire event by name
     * events.fire('foo');
     *
     * // fire event object with nested type
     * var event = { type: 'foo' };
     * events.fire(event);
     *
     * // fire event with explicit type
     * var event = { x: 10, y: 20 };
     * events.fire('element.moved', event);
     *
     * // pass additional arguments to the event
     * events.on('foo', function(event, bar) {
     *   alert(bar);
     * });
     *
     * events.fire({ type: 'foo' }, 'I am bar!');
     * ```
     *
     * @param {string} [type] event type
     * @param {Object} [data] event or event data
     * @param {...any} [args] additional arguments the callback will be called with.
     *
     * @return {any} The return value. Will be set to `false` if the default was prevented.
     */
    EventBus.prototype.fire = function(type, data) {
      var event,
          firstListener,
          returnValue,
          args;

      args = slice.call(arguments);

      if (typeof type === 'object') {
        data = type;
        type = data.type;
      }

      if (!type) {
        throw new Error('no event type specified');
      }

      firstListener = this._listeners[type];

      if (!firstListener) {
        return;
      }

      // we make sure we fire instances of our home made
      // events here. We wrap them only once, though
      if (data instanceof InternalEvent) {

        // we are fine, we alread have an event
        event = data;
      } else {
        event = this.createEvent(data);
      }

      // ensure we pass the event as the first parameter
      args[0] = event;

      // original event type (in case we delegate)
      var originalType = event.type;

      // update event type before delegation
      if (type !== originalType) {
        event.type = type;
      }

      try {
        returnValue = this._invokeListeners(event, args, firstListener);
      } finally {

        // reset event type after delegation
        if (type !== originalType) {
          event.type = originalType;
        }
      }

      // set the return value to false if the event default
      // got prevented and no other return value exists
      if (returnValue === undefined && event.defaultPrevented) {
        returnValue = false;
      }

      return returnValue;
    };

    /**
     * Handle an error by firing an event.
     *
     * @param {Error} error The error to be handled.
     *
     * @return {boolean} Whether the error was handled.
     */
    EventBus.prototype.handleError = function(error) {
      return this.fire('error', { error: error }) === false;
    };


    EventBus.prototype._destroy = function() {
      this._listeners = {};
    };

    /**
     * @param {Event} event
     * @param {any[]} args
     * @param {EventBusListener} listener
     *
     * @return {any}
     */
    EventBus.prototype._invokeListeners = function(event, args, listener) {

      var returnValue;

      while (listener) {

        // handle stopped propagation
        if (event.cancelBubble) {
          break;
        }

        returnValue = this._invokeListener(event, args, listener);

        listener = listener.next;
      }

      return returnValue;
    };

    /**
     * @param {Event} event
     * @param {any[]} args
     * @param {EventBusListener} listener
     *
     * @return {any}
     */
    EventBus.prototype._invokeListener = function(event, args, listener) {

      var returnValue;

      if (listener.callback.__isTomb) {
        return returnValue;
      }

      try {

        // returning false prevents the default action
        returnValue = invokeFunction(listener.callback, args);

        // stop propagation on return value
        if (returnValue !== undefined) {
          event.returnValue = returnValue;
          event.stopPropagation();
        }

        // prevent default on return false
        if (returnValue === false) {
          event.preventDefault();
        }
      } catch (error) {
        if (!this.handleError(error)) {
          console.error('unhandled error in event listener', error);

          throw error;
        }
      }

      return returnValue;
    };

    /**
     * Add new listener with a certain priority to the list
     * of listeners (for the given event).
     *
     * The semantics of listener registration / listener execution are
     * first register, first serve: New listeners will always be inserted
     * after existing listeners with the same priority.
     *
     * Example: Inserting two listeners with priority 1000 and 1300
     *
     *    * before: [ 1500, 1500, 1000, 1000 ]
     *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]
     *
     * @param {string} event
     * @param {EventBusListener} listener
     */
    EventBus.prototype._addListener = function(event, newListener) {

      var listener = this._getListeners(event),
          previousListener;

      // no prior listeners
      if (!listener) {
        this._setListeners(event, newListener);

        return;
      }

      // ensure we order listeners by priority from
      // 0 (high) to n > 0 (low)
      while (listener) {

        if (listener.priority < newListener.priority) {

          newListener.next = listener;

          if (previousListener) {
            previousListener.next = newListener;
          } else {
            this._setListeners(event, newListener);
          }

          return;
        }

        previousListener = listener;
        listener = listener.next;
      }

      // add new listener to back
      previousListener.next = newListener;
    };


    /**
     * @param {string} name
     *
     * @return {EventBusListener}
     */
    EventBus.prototype._getListeners = function(name) {
      return this._listeners[name];
    };

    /**
     * @param {string} name
     * @param {EventBusListener} listener
     */
    EventBus.prototype._setListeners = function(name, listener) {
      this._listeners[name] = listener;
    };

    EventBus.prototype._removeListener = function(event, callback) {

      var listener = this._getListeners(event),
          nextListener,
          previousListener,
          listenerCallback;

      if (!callback) {

        // clear listeners
        this._setListeners(event, null);

        return;
      }

      while (listener) {

        nextListener = listener.next;

        listenerCallback = listener.callback;

        if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {
          if (previousListener) {
            previousListener.next = nextListener;
          } else {

            // new first listener
            this._setListeners(event, nextListener);
          }
        }

        previousListener = listener;
        listener = nextListener;
      }
    };

    /**
     * A event that is emitted via the event bus.
     */
    function InternalEvent() { }

    InternalEvent.prototype.stopPropagation = function() {
      this.cancelBubble = true;
    };

    InternalEvent.prototype.preventDefault = function() {
      this.defaultPrevented = true;
    };

    InternalEvent.prototype.init = function(data) {
      assign$1(this, data || {});
    };


    /**
     * Invoke function. Be fast...
     *
     * @param {Function} fn
     * @param {any[]} args
     *
     * @return {any}
     */
    function invokeFunction(fn, args) {
      return fn.apply(null, args);
    }

    /**
     * @typedef {import('./Types').ConnectionLike} ConnectionLike
     * @typedef {import('./Types').ElementLike} ElementLike
     * @typedef {import('./Types').ShapeLike} ShapeLike
     *
     * @typedef {import('./ElementRegistry').default} ElementRegistry
     * @typedef {import('./EventBus').default} EventBus
     */

    /**
     * A factory that creates graphical elements.
     *
     * @param {EventBus} eventBus
     * @param {ElementRegistry} elementRegistry
     */
    function GraphicsFactory(eventBus, elementRegistry) {
      this._eventBus = eventBus;
      this._elementRegistry = elementRegistry;
    }

    GraphicsFactory.$inject = [ 'eventBus' , 'elementRegistry' ];

    /**
     * @param { { parent?: any } } element
     * @return {SVGElement}
     */
    GraphicsFactory.prototype._getChildrenContainer = function(element) {

      var gfx = this._elementRegistry.getGraphics(element);

      var childrenGfx;

      // root element
      if (!element.parent) {
        childrenGfx = gfx;
      } else {
        childrenGfx = getChildren(gfx);
        if (!childrenGfx) {
          childrenGfx = create$1('g');
          classes(childrenGfx).add('djs-children');

          append(gfx.parentNode, childrenGfx);
        }
      }

      return childrenGfx;
    };

    /**
     * Clears the graphical representation of the element and returns the
     * cleared visual (the <g class="djs-visual" /> element).
     */
    GraphicsFactory.prototype._clear = function(gfx) {
      var visual = getVisual(gfx);

      clear$1(visual);

      return visual;
    };

    /**
     * Creates a gfx container for shapes and connections
     *
     * The layout is as follows:
     *
     * <g class="djs-group">
     *
     *   <!-- the gfx -->
     *   <g class="djs-element djs-(shape|connection|frame)">
     *     <g class="djs-visual">
     *       <!-- the renderer draws in here -->
     *     </g>
     *
     *     <!-- extensions (overlays, click box, ...) goes here
     *   </g>
     *
     *   <!-- the gfx child nodes -->
     *   <g class="djs-children"></g>
     * </g>
     *
     * @param {string} type the type of the element, i.e. shape | connection
     * @param {SVGElement} childrenGfx
     * @param {number} [parentIndex] position to create container in parent
     * @param {boolean} [isFrame] is frame element
     *
     * @return {SVGElement}
     */
    GraphicsFactory.prototype._createContainer = function(
        type, childrenGfx, parentIndex, isFrame
    ) {
      var outerGfx = create$1('g');
      classes(outerGfx).add('djs-group');

      // insert node at position
      if (typeof parentIndex !== 'undefined') {
        prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);
      } else {
        append(childrenGfx, outerGfx);
      }

      var gfx = create$1('g');
      classes(gfx).add('djs-element');
      classes(gfx).add('djs-' + type);

      if (isFrame) {
        classes(gfx).add('djs-frame');
      }

      append(outerGfx, gfx);

      // create visual
      var visual = create$1('g');
      classes(visual).add('djs-visual');

      append(gfx, visual);

      return gfx;
    };

    /**
     * Create a graphical element.
     *
     * @param { 'shape' | 'connection' | 'label' | 'root' } type The type of the element.
     * @param {ElementLike} element The element.
     * @param {number} [parentIndex] The index at which to add the graphical element to its parent's children.
     *
     * @return {SVGElement} The graphical element.
     */
    GraphicsFactory.prototype.create = function(type, element, parentIndex) {
      var childrenGfx = this._getChildrenContainer(element.parent);
      return this._createContainer(type, childrenGfx, parentIndex, isFrameElement$1(element));
    };

    /**
     * Update the containments of the given elements.
     *
     * @param {ElementLike[]} elements The elements.
     */
    GraphicsFactory.prototype.updateContainments = function(elements) {

      var self = this,
          elementRegistry = this._elementRegistry,
          parents;

      parents = reduce(elements, function(map, e) {

        if (e.parent) {
          map[e.parent.id] = e.parent;
        }

        return map;
      }, {});

      // update all parents of changed and reorganized their children
      // in the correct order (as indicated in our model)
      forEach$1(parents, function(parent) {

        var children = parent.children;

        if (!children) {
          return;
        }

        var childrenGfx = self._getChildrenContainer(parent);

        forEach$1(children.slice().reverse(), function(child) {
          var childGfx = elementRegistry.getGraphics(child);

          prependTo(childGfx.parentNode, childrenGfx);
        });
      });
    };

    /**
     * Draw a shape.
     *
     * @param {SVGElement} visual The graphical element.
     * @param {ShapeLike} element The shape.
     *
     * @return {SVGElement}
     */
    GraphicsFactory.prototype.drawShape = function(visual, element) {
      var eventBus = this._eventBus;

      return eventBus.fire('render.shape', { gfx: visual, element: element });
    };

    /**
     * Get the path of a shape.
     *
     * @param {ShapeLike} element The shape.
     *
     * @return {string} The path of the shape.
     */
    GraphicsFactory.prototype.getShapePath = function(element) {
      var eventBus = this._eventBus;

      return eventBus.fire('render.getShapePath', element);
    };

    /**
     * Draw a connection.
     *
     * @param {SVGElement} visual The graphical element.
     * @param {ConnectionLike} element The connection.
     *
     * @return {SVGElement}
     */
    GraphicsFactory.prototype.drawConnection = function(visual, element) {
      var eventBus = this._eventBus;

      return eventBus.fire('render.connection', { gfx: visual, element: element });
    };

    /**
     * Get the path of a connection.
     *
     * @param {ConnectionLike} connection The connection.
     *
     * @return {string} The path of the connection.
     */
    GraphicsFactory.prototype.getConnectionPath = function(connection) {
      var eventBus = this._eventBus;

      return eventBus.fire('render.getConnectionPath', connection);
    };

    /**
     * Update an elements graphical representation.
     *
     * @param {'shape'|'connection'} type
     * @param {ElementLike} element
     * @param {SVGElement} gfx
     */
    GraphicsFactory.prototype.update = function(type, element, gfx) {

      // do NOT update root element
      if (!element.parent) {
        return;
      }

      var visual = this._clear(gfx);

      // redraw
      if (type === 'shape') {
        this.drawShape(visual, element);

        // update positioning
        translate(gfx, element.x, element.y);
      } else
      if (type === 'connection') {
        this.drawConnection(visual, element);
      } else {
        throw new Error('unknown type: ' + type);
      }

      if (element.hidden) {
        attr(gfx, 'display', 'none');
      } else {
        attr(gfx, 'display', 'block');
      }
    };

    /**
     * Remove a graphical element.
     *
     * @param {ElementLike} element The element.
     */
    GraphicsFactory.prototype.remove = function(element) {
      var gfx = this._elementRegistry.getGraphics(element);

      // remove
      remove(gfx.parentNode);
    };


    // helpers //////////

    function prependTo(newNode, parentNode, siblingNode) {
      var node = siblingNode || parentNode.firstChild;

      // do not prepend node to itself to prevent IE from crashing
      // https://github.com/bpmn-io/bpmn-js/issues/746
      if (newNode === node) {
        return;
      }

      parentNode.insertBefore(newNode, node);
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var CoreModule = {
      __depends__: [ DrawModule ],
      __init__: [ 'canvas' ],
      canvas: [ 'type', Canvas ],
      elementRegistry: [ 'type', ElementRegistry ],
      elementFactory: [ 'type', ElementFactory$1 ],
      eventBus: [ 'type', EventBus ],
      graphicsFactory: [ 'type', GraphicsFactory ]
    };

    /**
     * @typedef {import('didi').InjectionContext} InjectionContext
     * @typedef {import('didi').LocalsMap} LocalsMap
     * @typedef {import('didi').ModuleDeclaration} ModuleDeclaration
     *
     * @typedef { {
     *   modules?: ModuleDeclaration[];
     * } & Record<string, any> } DiagramOptions
     */

    /**
     * Bootstrap an injector from a list of modules, instantiating a number of default components
     *
     * @param {ModuleDeclaration[]} modules
     *
     * @return {Injector} a injector to use to access the components
     */
    function bootstrap(modules) {
      var injector = new Injector(modules);

      injector.init();

      return injector;
    }

    /**
     * Creates an injector from passed options.
     *
     * @param {DiagramOptions} [options]
     *
     * @return {Injector}
     */
    function createInjector(options) {

      options = options || {};

      /**
       * @type { ModuleDeclaration }
       */
      var configModule = {
        'config': [ 'value', options ]
      };

      var modules = [ configModule, CoreModule ].concat(options.modules || []);

      return bootstrap(modules);
    }


    /**
     * The main diagram-js entry point that bootstraps the diagram with the given
     * configuration.
     *
     * To register extensions with the diagram, pass them as Array<Module> to the constructor.
     *
     * @class
     * @constructor
     *
     * @example Creating a plug-in that logs whenever a shape is added to the canvas.
     *
     * ```javascript
     * // plug-in implementation
     * function MyLoggingPlugin(eventBus) {
     *   eventBus.on('shape.added', function(event) {
     *     console.log('shape ', event.shape, ' was added to the diagram');
     *   });
     * }
     *
     * // export as module
     * export default {
     *   __init__: [ 'myLoggingPlugin' ],
     *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]
     * };
     * ```
     *
     * Use the plug-in in a Diagram instance:
     *
     * ```javascript
     * import MyLoggingModule from 'path-to-my-logging-plugin';
     *
     * var diagram = new Diagram({
     *   modules: [
     *     MyLoggingModule
     *   ]
     * });
     *
     * diagram.invoke([ 'canvas', function(canvas) {
     *   // add shape to drawing canvas
     *   canvas.addShape({ x: 10, y: 10 });
     * });
     *
     * // 'shape ... was added to the diagram' logged to console
     * ```
     *
     * @param {DiagramOptions} [options]
     * @param {Injector} [injector] An (optional) injector to bootstrap the diagram with.
     */
    function Diagram(options, injector) {

      this._injector = injector = injector || createInjector(options);

      // API

      /**
       * Resolves a diagram service.
       *
       * @template T
       *
       * @param {string} name The name of the service to get.
       * @param {boolean} [strict=true] If false, resolve missing services to null.
       *
       * @return {T|null}
       */
      this.get = injector.get;

      /**
       * Executes a function with its dependencies injected.
       *
       * @template T
       *
       * @param {Function} func function to be invoked
       * @param {InjectionContext} [context] context of the invocation
       * @param {LocalsMap} [locals] locals provided
       *
       * @return {T|null}
       */
      this.invoke = injector.invoke;

      // init

      // indicate via event


      /**
       * An event indicating that all plug-ins are loaded.
       *
       * Use this event to fire other events to interested plug-ins
       *
       * @memberOf Diagram
       *
       * @event diagram.init
       *
       * @example
       *
       * eventBus.on('diagram.init', function() {
       *   eventBus.fire('my-custom-event', { foo: 'BAR' });
       * });
       *
       * @type {Object}
       */
      this.get('eventBus').fire('diagram.init');
    }


    /**
     * Destroys the diagram
     */
    Diagram.prototype.destroy = function() {
      this.get('eventBus').fire('diagram.destroy');
    };

    /**
     * Clear the diagram, removing all contents.
     */
    Diagram.prototype.clear = function() {
      this.get('eventBus').fire('diagram.clear');
    };

    /**
     * Moddle base element.
     */
    function Base() { }

    Base.prototype.get = function(name) {
      return this.$model.properties.get(this, name);
    };

    Base.prototype.set = function(name, value) {
      this.$model.properties.set(this, name, value);
    };

    /**
     * A model element factory.
     *
     * @param {Moddle} model
     * @param {Properties} properties
     */
    function Factory(model, properties) {
      this.model = model;
      this.properties = properties;
    }


    Factory.prototype.createType = function(descriptor) {

      var model = this.model;

      var props = this.properties,
          prototype = Object.create(Base.prototype);

      // initialize default values
      forEach$1(descriptor.properties, function(p) {
        if (!p.isMany && p.default !== undefined) {
          prototype[p.name] = p.default;
        }
      });

      props.defineModel(prototype, model);
      props.defineDescriptor(prototype, descriptor);

      var name = descriptor.ns.name;

      /**
       * The new type constructor
       */
      function ModdleElement(attrs) {
        props.define(this, '$type', { value: name, enumerable: true });
        props.define(this, '$attrs', { value: {} });
        props.define(this, '$parent', { writable: true });

        forEach$1(attrs, bind$2(function(val, key) {
          this.set(key, val);
        }, this));
      }

      ModdleElement.prototype = prototype;

      ModdleElement.hasType = prototype.$instanceOf = this.model.hasType;

      // static links
      props.defineModel(ModdleElement, model);
      props.defineDescriptor(ModdleElement, descriptor);

      return ModdleElement;
    };

    /**
     * Built-in moddle types
     */
    var BUILTINS = {
      String: true,
      Boolean: true,
      Integer: true,
      Real: true,
      Element: true
    };

    /**
     * Converters for built in types from string representations
     */
    var TYPE_CONVERTERS = {
      String: function(s) { return s; },
      Boolean: function(s) { return s === 'true'; },
      Integer: function(s) { return parseInt(s, 10); },
      Real: function(s) { return parseFloat(s); }
    };

    /**
     * Convert a type to its real representation
     */
    function coerceType(type, value) {

      var converter = TYPE_CONVERTERS[type];

      if (converter) {
        return converter(value);
      } else {
        return value;
      }
    }

    /**
     * Return whether the given type is built-in
     */
    function isBuiltIn(type) {
      return !!BUILTINS[type];
    }

    /**
     * Return whether the given type is simple
     */
    function isSimple(type) {
      return !!TYPE_CONVERTERS[type];
    }

    /**
     * Parses a namespaced attribute name of the form (ns:)localName to an object,
     * given a default prefix to assume in case no explicit namespace is given.
     *
     * @param {String} name
     * @param {String} [defaultPrefix] the default prefix to take, if none is present.
     *
     * @return {Object} the parsed name
     */
    function parseName(name, defaultPrefix) {
      var parts = name.split(/:/),
          localName, prefix;

      // no prefix (i.e. only local name)
      if (parts.length === 1) {
        localName = name;
        prefix = defaultPrefix;
      } else

      // prefix + local name
      if (parts.length === 2) {
        localName = parts[1];
        prefix = parts[0];
      } else {
        throw new Error('expected <prefix:localName> or <localName>, got ' + name);
      }

      name = (prefix ? prefix + ':' : '') + localName;

      return {
        name: name,
        prefix: prefix,
        localName: localName
      };
    }

    /**
     * A utility to build element descriptors.
     */
    function DescriptorBuilder(nameNs) {
      this.ns = nameNs;
      this.name = nameNs.name;
      this.allTypes = [];
      this.allTypesByName = {};
      this.properties = [];
      this.propertiesByName = {};
    }


    DescriptorBuilder.prototype.build = function() {
      return pick$1(this, [
        'ns',
        'name',
        'allTypes',
        'allTypesByName',
        'properties',
        'propertiesByName',
        'bodyProperty',
        'idProperty'
      ]);
    };

    /**
     * Add property at given index.
     *
     * @param {Object} p
     * @param {Number} [idx]
     * @param {Boolean} [validate=true]
     */
    DescriptorBuilder.prototype.addProperty = function(p, idx, validate) {

      if (typeof idx === 'boolean') {
        validate = idx;
        idx = undefined;
      }

      this.addNamedProperty(p, validate !== false);

      var properties = this.properties;

      if (idx !== undefined) {
        properties.splice(idx, 0, p);
      } else {
        properties.push(p);
      }
    };


    DescriptorBuilder.prototype.replaceProperty = function(oldProperty, newProperty, replace) {
      var oldNameNs = oldProperty.ns;

      var props = this.properties,
          propertiesByName = this.propertiesByName,
          rename = oldProperty.name !== newProperty.name;

      if (oldProperty.isId) {
        if (!newProperty.isId) {
          throw new Error(
            'property <' + newProperty.ns.name + '> must be id property ' +
            'to refine <' + oldProperty.ns.name + '>');
        }

        this.setIdProperty(newProperty, false);
      }

      if (oldProperty.isBody) {

        if (!newProperty.isBody) {
          throw new Error(
            'property <' + newProperty.ns.name + '> must be body property ' +
            'to refine <' + oldProperty.ns.name + '>');
        }

        // TODO: Check compatibility
        this.setBodyProperty(newProperty, false);
      }

      // validate existence and get location of old property
      var idx = props.indexOf(oldProperty);
      if (idx === -1) {
        throw new Error('property <' + oldNameNs.name + '> not found in property list');
      }

      // remove old property
      props.splice(idx, 1);

      // replacing the named property is intentional
      //
      //  * validate only if this is a "rename" operation
      //  * add at specific index unless we "replace"
      //
      this.addProperty(newProperty, replace ? undefined : idx, rename);

      // make new property available under old name
      propertiesByName[oldNameNs.name] = propertiesByName[oldNameNs.localName] = newProperty;
    };


    DescriptorBuilder.prototype.redefineProperty = function(p, targetPropertyName, replace) {

      var nsPrefix = p.ns.prefix;
      var parts = targetPropertyName.split('#');

      var name = parseName(parts[0], nsPrefix);
      var attrName = parseName(parts[1], name.prefix).name;

      var redefinedProperty = this.propertiesByName[attrName];
      if (!redefinedProperty) {
        throw new Error('refined property <' + attrName + '> not found');
      } else {
        this.replaceProperty(redefinedProperty, p, replace);
      }

      delete p.redefines;
    };

    DescriptorBuilder.prototype.addNamedProperty = function(p, validate) {
      var ns = p.ns,
          propsByName = this.propertiesByName;

      if (validate) {
        this.assertNotDefined(p, ns.name);
        this.assertNotDefined(p, ns.localName);
      }

      propsByName[ns.name] = propsByName[ns.localName] = p;
    };

    DescriptorBuilder.prototype.removeNamedProperty = function(p) {
      var ns = p.ns,
          propsByName = this.propertiesByName;

      delete propsByName[ns.name];
      delete propsByName[ns.localName];
    };

    DescriptorBuilder.prototype.setBodyProperty = function(p, validate) {

      if (validate && this.bodyProperty) {
        throw new Error(
          'body property defined multiple times ' +
          '(<' + this.bodyProperty.ns.name + '>, <' + p.ns.name + '>)');
      }

      this.bodyProperty = p;
    };

    DescriptorBuilder.prototype.setIdProperty = function(p, validate) {

      if (validate && this.idProperty) {
        throw new Error(
          'id property defined multiple times ' +
          '(<' + this.idProperty.ns.name + '>, <' + p.ns.name + '>)');
      }

      this.idProperty = p;
    };

    DescriptorBuilder.prototype.assertNotDefined = function(p, name) {
      var propertyName = p.name,
          definedProperty = this.propertiesByName[propertyName];

      if (definedProperty) {
        throw new Error(
          'property <' + propertyName + '> already defined; ' +
          'override of <' + definedProperty.definedBy.ns.name + '#' + definedProperty.ns.name + '> by ' +
          '<' + p.definedBy.ns.name + '#' + p.ns.name + '> not allowed without redefines');
      }
    };

    DescriptorBuilder.prototype.hasProperty = function(name) {
      return this.propertiesByName[name];
    };

    DescriptorBuilder.prototype.addTrait = function(t, inherited) {

      var typesByName = this.allTypesByName,
          types = this.allTypes;

      var typeName = t.name;

      if (typeName in typesByName) {
        return;
      }

      forEach$1(t.properties, bind$2(function(p) {

        // clone property to allow extensions
        p = assign$1({}, p, {
          name: p.ns.localName,
          inherited: inherited
        });

        Object.defineProperty(p, 'definedBy', {
          value: t
        });

        var replaces = p.replaces,
            redefines = p.redefines;

        // add replace/redefine support
        if (replaces || redefines) {
          this.redefineProperty(p, replaces || redefines, replaces);
        } else {
          if (p.isBody) {
            this.setBodyProperty(p);
          }
          if (p.isId) {
            this.setIdProperty(p);
          }
          this.addProperty(p);
        }
      }, this));

      types.push(t);
      typesByName[typeName] = t;
    };

    /**
     * A registry of Moddle packages.
     *
     * @param {Array<Package>} packages
     * @param {Properties} properties
     */
    function Registry(packages, properties) {
      this.packageMap = {};
      this.typeMap = {};

      this.packages = [];

      this.properties = properties;

      forEach$1(packages, bind$2(this.registerPackage, this));
    }


    Registry.prototype.getPackage = function(uriOrPrefix) {
      return this.packageMap[uriOrPrefix];
    };

    Registry.prototype.getPackages = function() {
      return this.packages;
    };


    Registry.prototype.registerPackage = function(pkg) {

      // copy package
      pkg = assign$1({}, pkg);

      var pkgMap = this.packageMap;

      ensureAvailable(pkgMap, pkg, 'prefix');
      ensureAvailable(pkgMap, pkg, 'uri');

      // register types
      forEach$1(pkg.types, bind$2(function(descriptor) {
        this.registerType(descriptor, pkg);
      }, this));

      pkgMap[pkg.uri] = pkgMap[pkg.prefix] = pkg;
      this.packages.push(pkg);
    };


    /**
     * Register a type from a specific package with us
     */
    Registry.prototype.registerType = function(type, pkg) {

      type = assign$1({}, type, {
        superClass: (type.superClass || []).slice(),
        extends: (type.extends || []).slice(),
        properties: (type.properties || []).slice(),
        meta: assign$1((type.meta || {}))
      });

      var ns = parseName(type.name, pkg.prefix),
          name = ns.name,
          propertiesByName = {};

      // parse properties
      forEach$1(type.properties, bind$2(function(p) {

        // namespace property names
        var propertyNs = parseName(p.name, ns.prefix),
            propertyName = propertyNs.name;

        // namespace property types
        if (!isBuiltIn(p.type)) {
          p.type = parseName(p.type, propertyNs.prefix).name;
        }

        assign$1(p, {
          ns: propertyNs,
          name: propertyName
        });

        propertiesByName[propertyName] = p;
      }, this));

      // update ns + name
      assign$1(type, {
        ns: ns,
        name: name,
        propertiesByName: propertiesByName
      });

      forEach$1(type.extends, bind$2(function(extendsName) {
        var extended = this.typeMap[extendsName];

        extended.traits = extended.traits || [];
        extended.traits.push(name);
      }, this));

      // link to package
      this.definePackage(type, pkg);

      // register
      this.typeMap[name] = type;
    };


    /**
     * Traverse the type hierarchy from bottom to top,
     * calling iterator with (type, inherited) for all elements in
     * the inheritance chain.
     *
     * @param {Object} nsName
     * @param {Function} iterator
     * @param {Boolean} [trait=false]
     */
    Registry.prototype.mapTypes = function(nsName, iterator, trait) {

      var type = isBuiltIn(nsName.name) ? { name: nsName.name } : this.typeMap[nsName.name];

      var self = this;

      /**
       * Traverse the selected trait.
       *
       * @param {String} cls
       */
      function traverseTrait(cls) {
        return traverseSuper(cls, true);
      }

      /**
       * Traverse the selected super type or trait
       *
       * @param {String} cls
       * @param {Boolean} [trait=false]
       */
      function traverseSuper(cls, trait) {
        var parentNs = parseName(cls, isBuiltIn(cls) ? '' : nsName.prefix);
        self.mapTypes(parentNs, iterator, trait);
      }

      if (!type) {
        throw new Error('unknown type <' + nsName.name + '>');
      }

      forEach$1(type.superClass, trait ? traverseTrait : traverseSuper);

      // call iterator with (type, inherited=!trait)
      iterator(type, !trait);

      forEach$1(type.traits, traverseTrait);
    };


    /**
     * Returns the effective descriptor for a type.
     *
     * @param  {String} type the namespaced name (ns:localName) of the type
     *
     * @return {Descriptor} the resulting effective descriptor
     */
    Registry.prototype.getEffectiveDescriptor = function(name) {

      var nsName = parseName(name);

      var builder = new DescriptorBuilder(nsName);

      this.mapTypes(nsName, function(type, inherited) {
        builder.addTrait(type, inherited);
      });

      var descriptor = builder.build();

      // define package link
      this.definePackage(descriptor, descriptor.allTypes[descriptor.allTypes.length - 1].$pkg);

      return descriptor;
    };


    Registry.prototype.definePackage = function(target, pkg) {
      this.properties.define(target, '$pkg', { value: pkg });
    };



    // helpers ////////////////////////////

    function ensureAvailable(packageMap, pkg, identifierKey) {

      var value = pkg[identifierKey];

      if (value in packageMap) {
        throw new Error('package with ' + identifierKey + ' <' + value + '> already defined');
      }
    }

    /**
     * A utility that gets and sets properties of model elements.
     *
     * @param {Model} model
     */
    function Properties(model) {
      this.model = model;
    }


    /**
     * Sets a named property on the target element.
     * If the value is undefined, the property gets deleted.
     *
     * @param {Object} target
     * @param {String} name
     * @param {Object} value
     */
    Properties.prototype.set = function(target, name, value) {

      if (!isString$3(name) || !name.length) {
        throw new TypeError('property name must be a non-empty string');
      }

      var property = this.model.getPropertyDescriptor(target, name);

      var propertyName = property && property.name;

      if (isUndefined(value)) {

        // unset the property, if the specified value is undefined;
        // delete from $attrs (for extensions) or the target itself
        if (property) {
          delete target[propertyName];
        } else {
          delete target.$attrs[name];
        }
      } else {

        // set the property, defining well defined properties on the fly
        // or simply updating them in target.$attrs (for extensions)
        if (property) {
          if (propertyName in target) {
            target[propertyName] = value;
          } else {
            defineProperty(target, property, value);
          }
        } else {
          target.$attrs[name] = value;
        }
      }
    };

    /**
     * Returns the named property of the given element
     *
     * @param  {Object} target
     * @param  {String} name
     *
     * @return {Object}
     */
    Properties.prototype.get = function(target, name) {

      var property = this.model.getPropertyDescriptor(target, name);

      if (!property) {
        return target.$attrs[name];
      }

      var propertyName = property.name;

      // check if access to collection property and lazily initialize it
      if (!target[propertyName] && property.isMany) {
        defineProperty(target, property, []);
      }

      return target[propertyName];
    };


    /**
     * Define a property on the target element
     *
     * @param  {Object} target
     * @param  {String} name
     * @param  {Object} options
     */
    Properties.prototype.define = function(target, name, options) {

      if (!options.writable) {

        var value = options.value;

        // use getters for read-only variables to support ES6 proxies
        // cf. https://github.com/bpmn-io/internal-docs/issues/386
        options = assign$1({}, options, {
          get: function() { return value; }
        });

        delete options.value;
      }

      Object.defineProperty(target, name, options);
    };


    /**
     * Define the descriptor for an element
     */
    Properties.prototype.defineDescriptor = function(target, descriptor) {
      this.define(target, '$descriptor', { value: descriptor });
    };

    /**
     * Define the model for an element
     */
    Properties.prototype.defineModel = function(target, model) {
      this.define(target, '$model', { value: model });
    };


    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    function defineProperty(target, property, value) {
      Object.defineProperty(target, property.name, {
        enumerable: !property.isReference,
        writable: true,
        value: value,
        configurable: true
      });
    }

    // Moddle implementation /////////////////////////////////////////////////

    /**
     * @class Moddle
     *
     * A model that can be used to create elements of a specific type.
     *
     * @example
     *
     * var Moddle = require('moddle');
     *
     * var pkg = {
     *   name: 'mypackage',
     *   prefix: 'my',
     *   types: [
     *     { name: 'Root' }
     *   ]
     * };
     *
     * var moddle = new Moddle([pkg]);
     *
     * @param {Array<Package>} packages the packages to contain
     */
    function Moddle(packages) {

      this.properties = new Properties(this);

      this.factory = new Factory(this, this.properties);
      this.registry = new Registry(packages, this.properties);

      this.typeCache = {};
    }


    /**
     * Create an instance of the specified type.
     *
     * @method Moddle#create
     *
     * @example
     *
     * var foo = moddle.create('my:Foo');
     * var bar = moddle.create('my:Bar', { id: 'BAR_1' });
     *
     * @param  {String|Object} descriptor the type descriptor or name know to the model
     * @param  {Object} attrs   a number of attributes to initialize the model instance with
     * @return {Object}         model instance
     */
    Moddle.prototype.create = function(descriptor, attrs) {
      var Type = this.getType(descriptor);

      if (!Type) {
        throw new Error('unknown type <' + descriptor + '>');
      }

      return new Type(attrs);
    };


    /**
     * Returns the type representing a given descriptor
     *
     * @method Moddle#getType
     *
     * @example
     *
     * var Foo = moddle.getType('my:Foo');
     * var foo = new Foo({ 'id' : 'FOO_1' });
     *
     * @param  {String|Object} descriptor the type descriptor or name know to the model
     * @return {Object}         the type representing the descriptor
     */
    Moddle.prototype.getType = function(descriptor) {

      var cache = this.typeCache;

      var name = isString$3(descriptor) ? descriptor : descriptor.ns.name;

      var type = cache[name];

      if (!type) {
        descriptor = this.registry.getEffectiveDescriptor(name);
        type = cache[name] = this.factory.createType(descriptor);
      }

      return type;
    };


    /**
     * Creates an any-element type to be used within model instances.
     *
     * This can be used to create custom elements that lie outside the meta-model.
     * The created element contains all the meta-data required to serialize it
     * as part of meta-model elements.
     *
     * @method Moddle#createAny
     *
     * @example
     *
     * var foo = moddle.createAny('vendor:Foo', 'http://vendor', {
     *   value: 'bar'
     * });
     *
     * var container = moddle.create('my:Container', 'http://my', {
     *   any: [ foo ]
     * });
     *
     * // go ahead and serialize the stuff
     *
     *
     * @param  {String} name  the name of the element
     * @param  {String} nsUri the namespace uri of the element
     * @param  {Object} [properties] a map of properties to initialize the instance with
     * @return {Object} the any type instance
     */
    Moddle.prototype.createAny = function(name, nsUri, properties) {

      var nameNs = parseName(name);

      var element = {
        $type: name,
        $instanceOf: function(type) {
          return type === this.$type;
        }
      };

      var descriptor = {
        name: name,
        isGeneric: true,
        ns: {
          prefix: nameNs.prefix,
          localName: nameNs.localName,
          uri: nsUri
        }
      };

      this.properties.defineDescriptor(element, descriptor);
      this.properties.defineModel(element, this);
      this.properties.define(element, '$parent', { enumerable: false, writable: true });
      this.properties.define(element, '$instanceOf', { enumerable: false, writable: true });

      forEach$1(properties, function(a, key) {
        if (isObject(a) && a.value !== undefined) {
          element[a.name] = a.value;
        } else {
          element[key] = a;
        }
      });

      return element;
    };

    /**
     * Returns a registered package by uri or prefix
     *
     * @return {Object} the package
     */
    Moddle.prototype.getPackage = function(uriOrPrefix) {
      return this.registry.getPackage(uriOrPrefix);
    };

    /**
     * Returns a snapshot of all known packages
     *
     * @return {Object} the package
     */
    Moddle.prototype.getPackages = function() {
      return this.registry.getPackages();
    };

    /**
     * Returns the descriptor for an element
     */
    Moddle.prototype.getElementDescriptor = function(element) {
      return element.$descriptor;
    };

    /**
     * Returns true if the given descriptor or instance
     * represents the given type.
     *
     * May be applied to this, if element is omitted.
     */
    Moddle.prototype.hasType = function(element, type) {
      if (type === undefined) {
        type = element;
        element = this;
      }

      var descriptor = element.$model.getElementDescriptor(element);

      return (type in descriptor.allTypesByName);
    };

    /**
     * Returns the descriptor of an elements named property
     */
    Moddle.prototype.getPropertyDescriptor = function(element, property) {
      return this.getElementDescriptor(element).propertiesByName[property];
    };

    /**
     * Returns a mapped type's descriptor
     */
    Moddle.prototype.getTypeDescriptor = function(type) {
      return this.registry.typeMap[type];
    };

    var fromCharCode = String.fromCharCode;

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var ENTITY_PATTERN = /&#(\d+);|&#x([0-9a-f]+);|&(\w+);/ig;

    var ENTITY_MAPPING = {
      'amp': '&',
      'apos': '\'',
      'gt': '>',
      'lt': '<',
      'quot': '"'
    };

    // map UPPERCASE variants of supported special chars
    Object.keys(ENTITY_MAPPING).forEach(function(k) {
      ENTITY_MAPPING[k.toUpperCase()] = ENTITY_MAPPING[k];
    });


    function replaceEntities(_, d, x, z) {

      // reserved names, i.e. &nbsp;
      if (z) {
        if (hasOwnProperty.call(ENTITY_MAPPING, z)) {
          return ENTITY_MAPPING[z];
        } else {

          // fall back to original value
          return '&' + z + ';';
        }
      }

      // decimal encoded char
      if (d) {
        return fromCharCode(d);
      }

      // hex encoded char
      return fromCharCode(parseInt(x, 16));
    }


    /**
     * A basic entity decoder that can decode a minimal
     * sub-set of reserved names (&amp;) as well as
     * hex (&#xaaf;) and decimal (&#1231;) encoded characters.
     *
     * @param {string} str
     *
     * @return {string} decoded string
     */
    function decodeEntities(s) {
      if (s.length > 3 && s.indexOf('&') !== -1) {
        return s.replace(ENTITY_PATTERN, replaceEntities);
      }

      return s;
    }

    var XSI_URI = 'http://www.w3.org/2001/XMLSchema-instance';
    var XSI_PREFIX = 'xsi';
    var XSI_TYPE$1 = 'xsi:type';

    var NON_WHITESPACE_OUTSIDE_ROOT_NODE = 'non-whitespace outside of root node';

    function error$1(msg) {
      return new Error(msg);
    }

    function missingNamespaceForPrefix(prefix) {
      return 'missing namespace for prefix <' + prefix + '>';
    }

    function getter(getFn) {
      return {
        'get': getFn,
        'enumerable': true
      };
    }

    function cloneNsMatrix(nsMatrix) {
      var clone = {}, key;
      for (key in nsMatrix) {
        clone[key] = nsMatrix[key];
      }
      return clone;
    }

    function uriPrefix(prefix) {
      return prefix + '$uri';
    }

    function buildNsMatrix(nsUriToPrefix) {
      var nsMatrix = {},
          uri,
          prefix;

      for (uri in nsUriToPrefix) {
        prefix = nsUriToPrefix[uri];
        nsMatrix[prefix] = prefix;
        nsMatrix[uriPrefix(prefix)] = uri;
      }

      return nsMatrix;
    }

    function noopGetContext() {
      return { 'line': 0, 'column': 0 };
    }

    function throwFunc(err) {
      throw err;
    }

    /**
     * Creates a new parser with the given options.
     *
     * @constructor
     *
     * @param  {!Object<string, ?>=} options
     */
    function Parser(options) {

      if (!this) {
        return new Parser(options);
      }

      var proxy = options && options['proxy'];

      var onText,
          onOpenTag,
          onCloseTag,
          onCDATA,
          onError = throwFunc,
          onWarning,
          onComment,
          onQuestion,
          onAttention;

      var getContext = noopGetContext;

      /**
       * Do we need to parse the current elements attributes for namespaces?
       *
       * @type {boolean}
       */
      var maybeNS = false;

      /**
       * Do we process namespaces at all?
       *
       * @type {boolean}
       */
      var isNamespace = false;

      /**
       * The caught error returned on parse end
       *
       * @type {Error}
       */
      var returnError = null;

      /**
       * Should we stop parsing?
       *
       * @type {boolean}
       */
      var parseStop = false;

      /**
       * A map of { uri: prefix } used by the parser.
       *
       * This map will ensure we can normalize prefixes during processing;
       * for each uri, only one prefix will be exposed to the handlers.
       *
       * @type {!Object<string, string>}}
       */
      var nsUriToPrefix;

      /**
       * Handle parse error.
       *
       * @param  {string|Error} err
       */
      function handleError(err) {
        if (!(err instanceof Error)) {
          err = error$1(err);
        }

        returnError = err;

        onError(err, getContext);
      }

      /**
       * Handle parse error.
       *
       * @param  {string|Error} err
       */
      function handleWarning(err) {

        if (!onWarning) {
          return;
        }

        if (!(err instanceof Error)) {
          err = error$1(err);
        }

        onWarning(err, getContext);
      }

      /**
       * Register parse listener.
       *
       * @param  {string}   name
       * @param  {Function} cb
       *
       * @return {Parser}
       */
      this['on'] = function(name, cb) {

        if (typeof cb !== 'function') {
          throw error$1('required args <name, cb>');
        }

        switch (name) {
        case 'openTag': onOpenTag = cb; break;
        case 'text': onText = cb; break;
        case 'closeTag': onCloseTag = cb; break;
        case 'error': onError = cb; break;
        case 'warn': onWarning = cb; break;
        case 'cdata': onCDATA = cb; break;
        case 'attention': onAttention = cb; break; // <!XXXXX zzzz="eeee">
        case 'question': onQuestion = cb; break; // <? ....  ?>
        case 'comment': onComment = cb; break;
        default:
          throw error$1('unsupported event: ' + name);
        }

        return this;
      };

      /**
       * Set the namespace to prefix mapping.
       *
       * @example
       *
       * parser.ns({
       *   'http://foo': 'foo',
       *   'http://bar': 'bar'
       * });
       *
       * @param  {!Object<string, string>} nsMap
       *
       * @return {Parser}
       */
      this['ns'] = function(nsMap) {

        if (typeof nsMap === 'undefined') {
          nsMap = {};
        }

        if (typeof nsMap !== 'object') {
          throw error$1('required args <nsMap={}>');
        }

        var _nsUriToPrefix = {}, k;

        for (k in nsMap) {
          _nsUriToPrefix[k] = nsMap[k];
        }

        // FORCE default mapping for schema instance
        _nsUriToPrefix[XSI_URI] = XSI_PREFIX;

        isNamespace = true;
        nsUriToPrefix = _nsUriToPrefix;

        return this;
      };

      /**
       * Parse xml string.
       *
       * @param  {string} xml
       *
       * @return {Error} returnError, if not thrown
       */
      this['parse'] = function(xml) {
        if (typeof xml !== 'string') {
          throw error$1('required args <xml=string>');
        }

        returnError = null;

        parse(xml);

        getContext = noopGetContext;
        parseStop = false;

        return returnError;
      };

      /**
       * Stop parsing.
       */
      this['stop'] = function() {
        parseStop = true;
      };

      /**
       * Parse string, invoking configured listeners on element.
       *
       * @param  {string} xml
       */
      function parse(xml) {
        var nsMatrixStack = isNamespace ? [] : null,
            nsMatrix = isNamespace ? buildNsMatrix(nsUriToPrefix) : null,
            _nsMatrix,
            nodeStack = [],
            anonymousNsCount = 0,
            tagStart = false,
            tagEnd = false,
            i = 0, j = 0,
            x, y, q, w, v,
            xmlns,
            elementName,
            _elementName,
            elementProxy
            ;

        var attrsString = '',
            attrsStart = 0,
            cachedAttrs // false = parsed with errors, null = needs parsing
            ;

        /**
         * Parse attributes on demand and returns the parsed attributes.
         *
         * Return semantics: (1) `false` on attribute parse error,
         * (2) object hash on extracted attrs.
         *
         * @return {boolean|Object}
         */
        function getAttrs() {
          if (cachedAttrs !== null) {
            return cachedAttrs;
          }

          var nsUri,
              nsUriPrefix,
              nsName,
              defaultAlias = isNamespace && nsMatrix['xmlns'],
              attrList = isNamespace && maybeNS ? [] : null,
              i = attrsStart,
              s = attrsString,
              l = s.length,
              hasNewMatrix,
              newalias,
              value,
              alias,
              name,
              attrs = {},
              seenAttrs = {},
              skipAttr,
              w,
              j;

          parseAttr:
          for (; i < l; i++) {
            skipAttr = false;
            w = s.charCodeAt(i);

            if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE={ \f\n\r\t\v}
              continue;
            }

            // wait for non whitespace character
            if (w < 65 || w > 122 || (w > 90 && w < 97)) {
              if (w !== 95 && w !== 58) { // char 95"_" 58":"
                handleWarning('illegal first char attribute name');
                skipAttr = true;
              }
            }

            // parse attribute name
            for (j = i + 1; j < l; j++) {
              w = s.charCodeAt(j);

              if (
                w > 96 && w < 123 ||
                w > 64 && w < 91 ||
                w > 47 && w < 59 ||
                w === 46 || // '.'
                w === 45 || // '-'
                w === 95 // '_'
              ) {
                continue;
              }

              // unexpected whitespace
              if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
                handleWarning('missing attribute value');
                i = j;

                continue parseAttr;
              }

              // expected "="
              if (w === 61) { // "=" == 61
                break;
              }

              handleWarning('illegal attribute name char');
              skipAttr = true;
            }

            name = s.substring(i, j);

            if (name === 'xmlns:xmlns') {
              handleWarning('illegal declaration of xmlns');
              skipAttr = true;
            }

            w = s.charCodeAt(j + 1);

            if (w === 34) { // '"'
              j = s.indexOf('"', i = j + 2);

              if (j === -1) {
                j = s.indexOf('\'', i);

                if (j !== -1) {
                  handleWarning('attribute value quote missmatch');
                  skipAttr = true;
                }
              }

            } else if (w === 39) { // "'"
              j = s.indexOf('\'', i = j + 2);

              if (j === -1) {
                j = s.indexOf('"', i);

                if (j !== -1) {
                  handleWarning('attribute value quote missmatch');
                  skipAttr = true;
                }
              }

            } else {
              handleWarning('missing attribute value quotes');
              skipAttr = true;

              // skip to next space
              for (j = j + 1; j < l; j++) {
                w = s.charCodeAt(j + 1);

                if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
                  break;
                }
              }

            }

            if (j === -1) {
              handleWarning('missing closing quotes');

              j = l;
              skipAttr = true;
            }

            if (!skipAttr) {
              value = s.substring(i, j);
            }

            i = j;

            // ensure SPACE follows attribute
            // skip illegal content otherwise
            // example a="b"c
            for (; j + 1 < l; j++) {
              w = s.charCodeAt(j + 1);

              if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
                break;
              }

              // FIRST ILLEGAL CHAR
              if (i === j) {
                handleWarning('illegal character after attribute end');
                skipAttr = true;
              }
            }

            // advance cursor to next attribute
            i = j + 1;

            if (skipAttr) {
              continue parseAttr;
            }

            // check attribute re-declaration
            if (name in seenAttrs) {
              handleWarning('attribute <' + name + '> already defined');
              continue;
            }

            seenAttrs[name] = true;

            if (!isNamespace) {
              attrs[name] = value;
              continue;
            }

            // try to extract namespace information
            if (maybeNS) {
              newalias = (
                name === 'xmlns'
                  ? 'xmlns'
                  : (name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:')
                    ? name.substr(6)
                    : null
              );

              // handle xmlns(:alias) assignment
              if (newalias !== null) {
                nsUri = decodeEntities(value);
                nsUriPrefix = uriPrefix(newalias);

                alias = nsUriToPrefix[nsUri];

                if (!alias) {

                  // no prefix defined or prefix collision
                  if (
                    (newalias === 'xmlns') ||
                    (nsUriPrefix in nsMatrix && nsMatrix[nsUriPrefix] !== nsUri)
                  ) {

                    // alocate free ns prefix
                    do {
                      alias = 'ns' + (anonymousNsCount++);
                    } while (typeof nsMatrix[alias] !== 'undefined');
                  } else {
                    alias = newalias;
                  }

                  nsUriToPrefix[nsUri] = alias;
                }

                if (nsMatrix[newalias] !== alias) {
                  if (!hasNewMatrix) {
                    nsMatrix = cloneNsMatrix(nsMatrix);
                    hasNewMatrix = true;
                  }

                  nsMatrix[newalias] = alias;
                  if (newalias === 'xmlns') {
                    nsMatrix[uriPrefix(alias)] = nsUri;
                    defaultAlias = alias;
                  }

                  nsMatrix[nsUriPrefix] = nsUri;
                }

                // expose xmlns(:asd)="..." in attributes
                attrs[name] = value;
                continue;
              }

              // collect attributes until all namespace
              // declarations are processed
              attrList.push(name, value);
              continue;

            } /** end if (maybeNs) */

            // handle attributes on element without
            // namespace declarations
            w = name.indexOf(':');
            if (w === -1) {
              attrs[name] = value;
              continue;
            }

            // normalize ns attribute name
            if (!(nsName = nsMatrix[name.substring(0, w)])) {
              handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
              continue;
            }

            name = defaultAlias === nsName
              ? name.substr(w + 1)
              : nsName + name.substr(w);

            // end: normalize ns attribute name

            // normalize xsi:type ns attribute value
            if (name === XSI_TYPE$1) {
              w = value.indexOf(':');

              if (w !== -1) {
                nsName = value.substring(0, w);

                // handle default prefixes, i.e. xs:String gracefully
                nsName = nsMatrix[nsName] || nsName;
                value = nsName + value.substring(w);
              } else {
                value = defaultAlias + ':' + value;
              }
            }

            // end: normalize xsi:type ns attribute value

            attrs[name] = value;
          }


          // handle deferred, possibly namespaced attributes
          if (maybeNS) {

            // normalize captured attributes
            for (i = 0, l = attrList.length; i < l; i++) {

              name = attrList[i++];
              value = attrList[i];

              w = name.indexOf(':');

              if (w !== -1) {

                // normalize ns attribute name
                if (!(nsName = nsMatrix[name.substring(0, w)])) {
                  handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
                  continue;
                }

                name = defaultAlias === nsName
                  ? name.substr(w + 1)
                  : nsName + name.substr(w);

                // end: normalize ns attribute name

                // normalize xsi:type ns attribute value
                if (name === XSI_TYPE$1) {
                  w = value.indexOf(':');

                  if (w !== -1) {
                    nsName = value.substring(0, w);

                    // handle default prefixes, i.e. xs:String gracefully
                    nsName = nsMatrix[nsName] || nsName;
                    value = nsName + value.substring(w);
                  } else {
                    value = defaultAlias + ':' + value;
                  }
                }

                // end: normalize xsi:type ns attribute value
              }

              attrs[name] = value;
            }

            // end: normalize captured attributes
          }

          return cachedAttrs = attrs;
        }

        /**
         * Extract the parse context { line, column, part }
         * from the current parser position.
         *
         * @return {Object} parse context
         */
        function getParseContext() {
          var splitsRe = /(\r\n|\r|\n)/g;

          var line = 0;
          var column = 0;
          var startOfLine = 0;
          var endOfLine = j;
          var match;
          var data;

          while (i >= startOfLine) {

            match = splitsRe.exec(xml);

            if (!match) {
              break;
            }

            // end of line = (break idx + break chars)
            endOfLine = match[0].length + match.index;

            if (endOfLine > i) {
              break;
            }

            // advance to next line
            line += 1;

            startOfLine = endOfLine;
          }

          // EOF errors
          if (i == -1) {
            column = endOfLine;
            data = xml.substring(j);
          } else

          // start errors
          if (j === 0) {
            data = xml.substring(j, i);
          }

          // other errors
          else {
            column = i - startOfLine;
            data = (j == -1 ? xml.substring(i) : xml.substring(i, j + 1));
          }

          return {
            'data': data,
            'line': line,
            'column': column
          };
        }

        getContext = getParseContext;


        if (proxy) {
          elementProxy = Object.create({}, {
            'name': getter(function() {
              return elementName;
            }),
            'originalName': getter(function() {
              return _elementName;
            }),
            'attrs': getter(getAttrs),
            'ns': getter(function() {
              return nsMatrix;
            })
          });
        }

        // actual parse logic
        while (j !== -1) {

          if (xml.charCodeAt(j) === 60) { // "<"
            i = j;
          } else {
            i = xml.indexOf('<', j);
          }

          // parse end
          if (i === -1) {
            if (nodeStack.length) {
              return handleError('unexpected end of file');
            }

            if (j === 0) {
              return handleError('missing start tag');
            }

            if (j < xml.length) {
              if (xml.substring(j).trim()) {
                handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);
              }
            }

            return;
          }

          // parse text
          if (j !== i) {

            if (nodeStack.length) {
              if (onText) {
                onText(xml.substring(j, i), decodeEntities, getContext);

                if (parseStop) {
                  return;
                }
              }
            } else {
              if (xml.substring(j, i).trim()) {
                handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);

                if (parseStop) {
                  return;
                }
              }
            }
          }

          w = xml.charCodeAt(i+1);

          // parse comments + CDATA
          if (w === 33) { // "!"
            q = xml.charCodeAt(i+2);

            // CDATA section
            if (q === 91 && xml.substr(i + 3, 6) === 'CDATA[') { // 91 == "["
              j = xml.indexOf(']]>', i);
              if (j === -1) {
                return handleError('unclosed cdata');
              }

              if (onCDATA) {
                onCDATA(xml.substring(i + 9, j), getContext);
                if (parseStop) {
                  return;
                }
              }

              j += 3;
              continue;
            }

            // comment
            if (q === 45 && xml.charCodeAt(i + 3) === 45) { // 45 == "-"
              j = xml.indexOf('-->', i);
              if (j === -1) {
                return handleError('unclosed comment');
              }


              if (onComment) {
                onComment(xml.substring(i + 4, j), decodeEntities, getContext);
                if (parseStop) {
                  return;
                }
              }

              j += 3;
              continue;
            }
          }

          // parse question <? ... ?>
          if (w === 63) { // "?"
            j = xml.indexOf('?>', i);
            if (j === -1) {
              return handleError('unclosed question');
            }

            if (onQuestion) {
              onQuestion(xml.substring(i, j + 2), getContext);
              if (parseStop) {
                return;
              }
            }

            j += 2;
            continue;
          }

          // find matching closing tag for attention or standard tags
          // for that we must skip through attribute values
          // (enclosed in single or double quotes)
          for (x = i + 1; ; x++) {
            v = xml.charCodeAt(x);
            if (isNaN(v)) {
              j = -1;
              return handleError('unclosed tag');
            }

            // [10] AttValue ::= '"' ([^<&"] | Reference)* '"' | "'" ([^<&'] | Reference)* "'"
            // skips the quoted string
            // (double quotes) does not appear in a literal enclosed by (double quotes)
            // (single quote) does not appear in a literal enclosed by (single quote)
            if (v === 34) { //  '"'
              q = xml.indexOf('"', x + 1);
              x = q !== -1 ? q : x;
            } else if (v === 39) { // "'"
              q = xml.indexOf("'", x + 1);
              x = q !== -1 ? q : x;
            } else if (v === 62) { // '>'
              j = x;
              break;
            }
          }


          // parse attention <! ...>
          // previously comment and CDATA have already been parsed
          if (w === 33) { // "!"

            if (onAttention) {
              onAttention(xml.substring(i, j + 1), decodeEntities, getContext);
              if (parseStop) {
                return;
              }
            }

            j += 1;
            continue;
          }

          // don't process attributes;
          // there are none
          cachedAttrs = {};

          // if (xml.charCodeAt(i+1) === 47) { // </...
          if (w === 47) { // </...
            tagStart = false;
            tagEnd = true;

            if (!nodeStack.length) {
              return handleError('missing open tag');
            }

            // verify open <-> close tag match
            x = elementName = nodeStack.pop();
            q = i + 2 + x.length;

            if (xml.substring(i + 2, q) !== x) {
              return handleError('closing tag mismatch');
            }

            // verify chars in close tag
            for (; q < j; q++) {
              w = xml.charCodeAt(q);

              if (w === 32 || (w > 8 && w < 14)) { // \f\n\r\t\v space
                continue;
              }

              return handleError('close tag');
            }

          } else {
            if (xml.charCodeAt(j - 1) === 47) { // .../>
              x = elementName = xml.substring(i + 1, j - 1);

              tagStart = true;
              tagEnd = true;

            } else {
              x = elementName = xml.substring(i + 1, j);

              tagStart = true;
              tagEnd = false;
            }

            if (!(w > 96 && w < 123 || w > 64 && w < 91 || w === 95 || w === 58)) { // char 95"_" 58":"
              return handleError('illegal first char nodeName');
            }

            for (q = 1, y = x.length; q < y; q++) {
              w = x.charCodeAt(q);

              if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w == 46) {
                continue;
              }

              if (w === 32 || (w < 14 && w > 8)) { // \f\n\r\t\v space
                elementName = x.substring(0, q);

                // maybe there are attributes
                cachedAttrs = null;
                break;
              }

              return handleError('invalid nodeName');
            }

            if (!tagEnd) {
              nodeStack.push(elementName);
            }
          }

          if (isNamespace) {

            _nsMatrix = nsMatrix;

            if (tagStart) {

              // remember old namespace
              // unless we're self-closing
              if (!tagEnd) {
                nsMatrixStack.push(_nsMatrix);
              }

              if (cachedAttrs === null) {

                // quick check, whether there may be namespace
                // declarations on the node; if that is the case
                // we need to eagerly parse the node attributes
                if ((maybeNS = x.indexOf('xmlns', q) !== -1)) {
                  attrsStart = q;
                  attrsString = x;

                  getAttrs();

                  maybeNS = false;
                }
              }
            }

            _elementName = elementName;

            w = elementName.indexOf(':');
            if (w !== -1) {
              xmlns = nsMatrix[elementName.substring(0, w)];

              // prefix given; namespace must exist
              if (!xmlns) {
                return handleError('missing namespace on <' + _elementName + '>');
              }

              elementName = elementName.substr(w + 1);
            } else {
              xmlns = nsMatrix['xmlns'];

              // if no default namespace is defined,
              // we'll import the element as anonymous.
              //
              // it is up to users to correct that to the document defined
              // targetNamespace, or whatever their undersanding of the
              // XML spec mandates.
            }

            // adjust namespace prefixs as configured
            if (xmlns) {
              elementName = xmlns + ':' + elementName;
            }

          }

          if (tagStart) {
            attrsStart = q;
            attrsString = x;

            if (onOpenTag) {
              if (proxy) {
                onOpenTag(elementProxy, decodeEntities, tagEnd, getContext);
              } else {
                onOpenTag(elementName, getAttrs, decodeEntities, tagEnd, getContext);
              }

              if (parseStop) {
                return;
              }
            }

          }

          if (tagEnd) {

            if (onCloseTag) {
              onCloseTag(proxy ? elementProxy : elementName, decodeEntities, tagStart, getContext);

              if (parseStop) {
                return;
              }
            }

            // restore old namespace
            if (isNamespace) {
              if (!tagStart) {
                nsMatrix = nsMatrixStack.pop();
              } else {
                nsMatrix = _nsMatrix;
              }
            }
          }

          j += 1;
        }
      } /** end parse */

    }

    function hasLowerCaseAlias(pkg) {
      return pkg.xml && pkg.xml.tagAlias === 'lowerCase';
    }

    var DEFAULT_NS_MAP = {
      'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
      'xml': 'http://www.w3.org/XML/1998/namespace'
    };

    var XSI_TYPE = 'xsi:type';

    function serializeFormat(element) {
      return element.xml && element.xml.serialize;
    }

    function serializeAsType(element) {
      return serializeFormat(element) === XSI_TYPE;
    }

    function serializeAsProperty(element) {
      return serializeFormat(element) === 'property';
    }

    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }

    function aliasToName(aliasNs, pkg) {

      if (!hasLowerCaseAlias(pkg)) {
        return aliasNs.name;
      }

      return aliasNs.prefix + ':' + capitalize(aliasNs.localName);
    }

    function prefixedToName(nameNs, pkg) {

      var name = nameNs.name,
          localName = nameNs.localName;

      var typePrefix = pkg.xml && pkg.xml.typePrefix;

      if (typePrefix && localName.indexOf(typePrefix) === 0) {
        return nameNs.prefix + ':' + localName.slice(typePrefix.length);
      } else {
        return name;
      }
    }

    function normalizeXsiTypeName(name, model) {

      var nameNs = parseName(name);
      var pkg = model.getPackage(nameNs.prefix);

      return prefixedToName(nameNs, pkg);
    }

    function error(message) {
      return new Error(message);
    }

    /**
     * Get the moddle descriptor for a given instance or type.
     *
     * @param  {ModdleElement|Function} element
     *
     * @return {Object} the moddle descriptor
     */
    function getModdleDescriptor(element) {
      return element.$descriptor;
    }


    /**
     * A parse context.
     *
     * @class
     *
     * @param {Object} options
     * @param {ElementHandler} options.rootHandler the root handler for parsing a document
     * @param {boolean} [options.lax=false] whether or not to ignore invalid elements
     */
    function Context(options) {

      /**
       * @property {ElementHandler} rootHandler
       */

      /**
       * @property {Boolean} lax
       */

      assign$1(this, options);

      this.elementsById = {};
      this.references = [];
      this.warnings = [];

      /**
       * Add an unresolved reference.
       *
       * @param {Object} reference
       */
      this.addReference = function(reference) {
        this.references.push(reference);
      };

      /**
       * Add a processed element.
       *
       * @param {ModdleElement} element
       */
      this.addElement = function(element) {

        if (!element) {
          throw error('expected element');
        }

        var elementsById = this.elementsById;

        var descriptor = getModdleDescriptor(element);

        var idProperty = descriptor.idProperty,
            id;

        if (idProperty) {
          id = element.get(idProperty.name);

          if (id) {

            // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
            if (!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(id)) {
              throw new Error('illegal ID <' + id + '>');
            }

            if (elementsById[id]) {
              throw error('duplicate ID <' + id + '>');
            }

            elementsById[id] = element;
          }
        }
      };

      /**
       * Add an import warning.
       *
       * @param {Object} warning
       * @param {String} warning.message
       * @param {Error} [warning.error]
       */
      this.addWarning = function(warning) {
        this.warnings.push(warning);
      };
    }

    function BaseHandler() {}

    BaseHandler.prototype.handleEnd = function() {};
    BaseHandler.prototype.handleText = function() {};
    BaseHandler.prototype.handleNode = function() {};


    /**
     * A simple pass through handler that does nothing except for
     * ignoring all input it receives.
     *
     * This is used to ignore unknown elements and
     * attributes.
     */
    function NoopHandler() { }

    NoopHandler.prototype = Object.create(BaseHandler.prototype);

    NoopHandler.prototype.handleNode = function() {
      return this;
    };

    function BodyHandler() {}

    BodyHandler.prototype = Object.create(BaseHandler.prototype);

    BodyHandler.prototype.handleText = function(text) {
      this.body = (this.body || '') + text;
    };

    function ReferenceHandler(property, context) {
      this.property = property;
      this.context = context;
    }

    ReferenceHandler.prototype = Object.create(BodyHandler.prototype);

    ReferenceHandler.prototype.handleNode = function(node) {

      if (this.element) {
        throw error('expected no sub nodes');
      } else {
        this.element = this.createReference(node);
      }

      return this;
    };

    ReferenceHandler.prototype.handleEnd = function() {
      this.element.id = this.body;
    };

    ReferenceHandler.prototype.createReference = function(node) {
      return {
        property: this.property.ns.name,
        id: ''
      };
    };

    function ValueHandler(propertyDesc, element) {
      this.element = element;
      this.propertyDesc = propertyDesc;
    }

    ValueHandler.prototype = Object.create(BodyHandler.prototype);

    ValueHandler.prototype.handleEnd = function() {

      var value = this.body || '',
          element = this.element,
          propertyDesc = this.propertyDesc;

      value = coerceType(propertyDesc.type, value);

      if (propertyDesc.isMany) {
        element.get(propertyDesc.name).push(value);
      } else {
        element.set(propertyDesc.name, value);
      }
    };


    function BaseElementHandler() {}

    BaseElementHandler.prototype = Object.create(BodyHandler.prototype);

    BaseElementHandler.prototype.handleNode = function(node) {
      var parser = this,
          element = this.element;

      if (!element) {
        element = this.element = this.createElement(node);

        this.context.addElement(element);
      } else {
        parser = this.handleChild(node);
      }

      return parser;
    };

    /**
     * @class Reader.ElementHandler
     *
     */
    function ElementHandler(model, typeName, context) {
      this.model = model;
      this.type = model.getType(typeName);
      this.context = context;
    }

    ElementHandler.prototype = Object.create(BaseElementHandler.prototype);

    ElementHandler.prototype.addReference = function(reference) {
      this.context.addReference(reference);
    };

    ElementHandler.prototype.handleText = function(text) {

      var element = this.element,
          descriptor = getModdleDescriptor(element),
          bodyProperty = descriptor.bodyProperty;

      if (!bodyProperty) {
        throw error('unexpected body text <' + text + '>');
      }

      BodyHandler.prototype.handleText.call(this, text);
    };

    ElementHandler.prototype.handleEnd = function() {

      var value = this.body,
          element = this.element,
          descriptor = getModdleDescriptor(element),
          bodyProperty = descriptor.bodyProperty;

      if (bodyProperty && value !== undefined) {
        value = coerceType(bodyProperty.type, value);
        element.set(bodyProperty.name, value);
      }
    };

    /**
     * Create an instance of the model from the given node.
     *
     * @param  {Element} node the xml node
     */
    ElementHandler.prototype.createElement = function(node) {
      var attributes = node.attributes,
          Type = this.type,
          descriptor = getModdleDescriptor(Type),
          context = this.context,
          instance = new Type({}),
          model = this.model,
          propNameNs;

      forEach$1(attributes, function(value, name) {

        var prop = descriptor.propertiesByName[name],
            values;

        if (prop && prop.isReference) {

          if (!prop.isMany) {
            context.addReference({
              element: instance,
              property: prop.ns.name,
              id: value
            });
          } else {

            // IDREFS: parse references as whitespace-separated list
            values = value.split(' ');

            forEach$1(values, function(v) {
              context.addReference({
                element: instance,
                property: prop.ns.name,
                id: v
              });
            });
          }

        } else {
          if (prop) {
            value = coerceType(prop.type, value);
          } else
          if (name !== 'xmlns') {
            propNameNs = parseName(name, descriptor.ns.prefix);

            // check whether attribute is defined in a well-known namespace
            // if that is the case we emit a warning to indicate potential misuse
            if (model.getPackage(propNameNs.prefix)) {

              context.addWarning({
                message: 'unknown attribute <' + name + '>',
                element: instance,
                property: name,
                value: value
              });
            }
          }

          instance.set(name, value);
        }
      });

      return instance;
    };

    ElementHandler.prototype.getPropertyForNode = function(node) {

      var name = node.name;
      var nameNs = parseName(name);

      var type = this.type,
          model = this.model,
          descriptor = getModdleDescriptor(type);

      var propertyName = nameNs.name,
          property = descriptor.propertiesByName[propertyName],
          elementTypeName,
          elementType;

      // search for properties by name first

      if (property && !property.isAttr) {

        if (serializeAsType(property)) {
          elementTypeName = node.attributes[XSI_TYPE];

          // xsi type is optional, if it does not exists the
          // default type is assumed
          if (elementTypeName) {

            // take possible type prefixes from XML
            // into account, i.e.: xsi:type="t{ActualType}"
            elementTypeName = normalizeXsiTypeName(elementTypeName, model);

            elementType = model.getType(elementTypeName);

            return assign$1({}, property, {
              effectiveType: getModdleDescriptor(elementType).name
            });
          }
        }

        // search for properties by name first
        return property;
      }

      var pkg = model.getPackage(nameNs.prefix);

      if (pkg) {
        elementTypeName = aliasToName(nameNs, pkg);
        elementType = model.getType(elementTypeName);

        // search for collection members later
        property = find$1(descriptor.properties, function(p) {
          return !p.isVirtual && !p.isReference && !p.isAttribute && elementType.hasType(p.type);
        });

        if (property) {
          return assign$1({}, property, {
            effectiveType: getModdleDescriptor(elementType).name
          });
        }
      } else {

        // parse unknown element (maybe extension)
        property = find$1(descriptor.properties, function(p) {
          return !p.isReference && !p.isAttribute && p.type === 'Element';
        });

        if (property) {
          return property;
        }
      }

      throw error('unrecognized element <' + nameNs.name + '>');
    };

    ElementHandler.prototype.toString = function() {
      return 'ElementDescriptor[' + getModdleDescriptor(this.type).name + ']';
    };

    ElementHandler.prototype.valueHandler = function(propertyDesc, element) {
      return new ValueHandler(propertyDesc, element);
    };

    ElementHandler.prototype.referenceHandler = function(propertyDesc) {
      return new ReferenceHandler(propertyDesc, this.context);
    };

    ElementHandler.prototype.handler = function(type) {
      if (type === 'Element') {
        return new GenericElementHandler(this.model, type, this.context);
      } else {
        return new ElementHandler(this.model, type, this.context);
      }
    };

    /**
     * Handle the child element parsing
     *
     * @param  {Element} node the xml node
     */
    ElementHandler.prototype.handleChild = function(node) {
      var propertyDesc, type, element, childHandler;

      propertyDesc = this.getPropertyForNode(node);
      element = this.element;

      type = propertyDesc.effectiveType || propertyDesc.type;

      if (isSimple(type)) {
        return this.valueHandler(propertyDesc, element);
      }

      if (propertyDesc.isReference) {
        childHandler = this.referenceHandler(propertyDesc).handleNode(node);
      } else {
        childHandler = this.handler(type).handleNode(node);
      }

      var newElement = childHandler.element;

      // child handles may decide to skip elements
      // by not returning anything
      if (newElement !== undefined) {

        if (propertyDesc.isMany) {
          element.get(propertyDesc.name).push(newElement);
        } else {
          element.set(propertyDesc.name, newElement);
        }

        if (propertyDesc.isReference) {
          assign$1(newElement, {
            element: element
          });

          this.context.addReference(newElement);
        } else {

          // establish child -> parent relationship
          newElement.$parent = element;
        }
      }

      return childHandler;
    };

    /**
     * An element handler that performs special validation
     * to ensure the node it gets initialized with matches
     * the handlers type (namespace wise).
     *
     * @param {Moddle} model
     * @param {String} typeName
     * @param {Context} context
     */
    function RootElementHandler(model, typeName, context) {
      ElementHandler.call(this, model, typeName, context);
    }

    RootElementHandler.prototype = Object.create(ElementHandler.prototype);

    RootElementHandler.prototype.createElement = function(node) {

      var name = node.name,
          nameNs = parseName(name),
          model = this.model,
          type = this.type,
          pkg = model.getPackage(nameNs.prefix),
          typeName = pkg && aliasToName(nameNs, pkg) || name;

      // verify the correct namespace if we parse
      // the first element in the handler tree
      //
      // this ensures we don't mistakenly import wrong namespace elements
      if (!type.hasType(typeName)) {
        throw error('unexpected element <' + node.originalName + '>');
      }

      return ElementHandler.prototype.createElement.call(this, node);
    };


    function GenericElementHandler(model, typeName, context) {
      this.model = model;
      this.context = context;
    }

    GenericElementHandler.prototype = Object.create(BaseElementHandler.prototype);

    GenericElementHandler.prototype.createElement = function(node) {

      var name = node.name,
          ns = parseName(name),
          prefix = ns.prefix,
          uri = node.ns[prefix + '$uri'],
          attributes = node.attributes;

      return this.model.createAny(name, uri, attributes);
    };

    GenericElementHandler.prototype.handleChild = function(node) {

      var handler = new GenericElementHandler(this.model, 'Element', this.context).handleNode(node),
          element = this.element;

      var newElement = handler.element,
          children;

      if (newElement !== undefined) {
        children = element.$children = element.$children || [];
        children.push(newElement);

        // establish child -> parent relationship
        newElement.$parent = element;
      }

      return handler;
    };

    GenericElementHandler.prototype.handleEnd = function() {
      if (this.body) {
        this.element.$body = this.body;
      }
    };

    /**
     * A reader for a meta-model
     *
     * @param {Object} options
     * @param {Model} options.model used to read xml files
     * @param {Boolean} options.lax whether to make parse errors warnings
     */
    function Reader(options) {

      if (options instanceof Moddle) {
        options = {
          model: options
        };
      }

      assign$1(this, { lax: false }, options);
    }

    /**
     * The fromXML result.
     *
     * @typedef {Object} ParseResult
     *
     * @property {ModdleElement} rootElement
     * @property {Array<Object>} references
     * @property {Array<Error>} warnings
     * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
     */

    /**
     * The fromXML result.
     *
     * @typedef {Error} ParseError
     *
     * @property {Array<Error>} warnings
     */

    /**
     * Parse the given XML into a moddle document tree.
     *
     * @param {String} xml
     * @param {ElementHandler|Object} options or rootHandler
     *
     * @returns {Promise<ParseResult, ParseError>}
     */
    Reader.prototype.fromXML = function(xml, options, done) {

      var rootHandler = options.rootHandler;

      if (options instanceof ElementHandler) {

        // root handler passed via (xml, { rootHandler: ElementHandler }, ...)
        rootHandler = options;
        options = {};
      } else {
        if (typeof options === 'string') {

          // rootHandler passed via (xml, 'someString', ...)
          rootHandler = this.handler(options);
          options = {};
        } else if (typeof rootHandler === 'string') {

          // rootHandler passed via (xml, { rootHandler: 'someString' }, ...)
          rootHandler = this.handler(rootHandler);
        }
      }

      var model = this.model,
          lax = this.lax;

      var context = new Context(assign$1({}, options, { rootHandler: rootHandler })),
          parser = new Parser({ proxy: true }),
          stack = createStack();

      rootHandler.context = context;

      // push root handler
      stack.push(rootHandler);


      /**
       * Handle error.
       *
       * @param  {Error} err
       * @param  {Function} getContext
       * @param  {boolean} lax
       *
       * @return {boolean} true if handled
       */
      function handleError(err, getContext, lax) {

        var ctx = getContext();

        var line = ctx.line,
            column = ctx.column,
            data = ctx.data;

        // we receive the full context data here,
        // for elements trim down the information
        // to the tag name, only
        if (data.charAt(0) === '<' && data.indexOf(' ') !== -1) {
          data = data.slice(0, data.indexOf(' ')) + '>';
        }

        var message =
          'unparsable content ' + (data ? data + ' ' : '') + 'detected\n\t' +
            'line: ' + line + '\n\t' +
            'column: ' + column + '\n\t' +
            'nested error: ' + err.message;

        if (lax) {
          context.addWarning({
            message: message,
            error: err
          });

          return true;
        } else {
          throw error(message);
        }
      }

      function handleWarning(err, getContext) {

        // just like handling errors in <lax=true> mode
        return handleError(err, getContext, true);
      }

      /**
       * Resolve collected references on parse end.
       */
      function resolveReferences() {

        var elementsById = context.elementsById;
        var references = context.references;

        var i, r;

        for (i = 0; (r = references[i]); i++) {
          var element = r.element;
          var reference = elementsById[r.id];
          var property = getModdleDescriptor(element).propertiesByName[r.property];

          if (!reference) {
            context.addWarning({
              message: 'unresolved reference <' + r.id + '>',
              element: r.element,
              property: r.property,
              value: r.id
            });
          }

          if (property.isMany) {
            var collection = element.get(property.name),
                idx = collection.indexOf(r);

            // we replace an existing place holder (idx != -1) or
            // append to the collection instead
            if (idx === -1) {
              idx = collection.length;
            }

            if (!reference) {

              // remove unresolvable reference
              collection.splice(idx, 1);
            } else {

              // add or update reference in collection
              collection[idx] = reference;
            }
          } else {
            element.set(property.name, reference);
          }
        }
      }

      function handleClose() {
        stack.pop().handleEnd();
      }

      var PREAMBLE_START_PATTERN = /^<\?xml /i;

      var ENCODING_PATTERN = / encoding="([^"]+)"/i;

      var UTF_8_PATTERN = /^utf-8$/i;

      function handleQuestion(question) {

        if (!PREAMBLE_START_PATTERN.test(question)) {
          return;
        }

        var match = ENCODING_PATTERN.exec(question);
        var encoding = match && match[1];

        if (!encoding || UTF_8_PATTERN.test(encoding)) {
          return;
        }

        context.addWarning({
          message:
            'unsupported document encoding <' + encoding + '>, ' +
            'falling back to UTF-8'
        });
      }

      function handleOpen(node, getContext) {
        var handler = stack.peek();

        try {
          stack.push(handler.handleNode(node));
        } catch (err) {

          if (handleError(err, getContext, lax)) {
            stack.push(new NoopHandler());
          }
        }
      }

      function handleCData(text, getContext) {

        try {
          stack.peek().handleText(text);
        } catch (err) {
          handleWarning(err, getContext);
        }
      }

      function handleText(text, getContext) {

        // strip whitespace only nodes, i.e. before
        // <!CDATA[ ... ]> sections and in between tags

        if (!text.trim()) {
          return;
        }

        handleCData(text, getContext);
      }

      var uriMap = model.getPackages().reduce(function(uriMap, p) {
        uriMap[p.uri] = p.prefix;

        return uriMap;
      }, {
        'http://www.w3.org/XML/1998/namespace': 'xml' // add default xml ns
      });
      parser
        .ns(uriMap)
        .on('openTag', function(obj, decodeStr, selfClosing, getContext) {

          // gracefully handle unparsable attributes (attrs=false)
          var attrs = obj.attrs || {};

          var decodedAttrs = Object.keys(attrs).reduce(function(d, key) {
            var value = decodeStr(attrs[key]);

            d[key] = value;

            return d;
          }, {});

          var node = {
            name: obj.name,
            originalName: obj.originalName,
            attributes: decodedAttrs,
            ns: obj.ns
          };

          handleOpen(node, getContext);
        })
        .on('question', handleQuestion)
        .on('closeTag', handleClose)
        .on('cdata', handleCData)
        .on('text', function(text, decodeEntities, getContext) {
          handleText(decodeEntities(text), getContext);
        })
        .on('error', handleError)
        .on('warn', handleWarning);

      // async XML parsing to make sure the execution environment
      // (node or brower) is kept responsive and that certain optimization
      // strategies can kick in.
      return new Promise(function(resolve, reject) {

        var err;

        try {
          parser.parse(xml);

          resolveReferences();
        } catch (e) {
          err = e;
        }

        var rootElement = rootHandler.element;

        if (!err && !rootElement) {
          err = error('failed to parse document as <' + rootHandler.type.$descriptor.name + '>');
        }

        var warnings = context.warnings;
        var references = context.references;
        var elementsById = context.elementsById;

        if (err) {
          err.warnings = warnings;

          return reject(err);
        } else {
          return resolve({
            rootElement: rootElement,
            elementsById: elementsById,
            references: references,
            warnings: warnings
          });
        }
      });
    };

    Reader.prototype.handler = function(name) {
      return new RootElementHandler(this.model, name);
    };


    // helpers //////////////////////////

    function createStack() {
      var stack = [];

      Object.defineProperty(stack, 'peek', {
        value: function() {
          return this[this.length - 1];
        }
      });

      return stack;
    }

    var XML_PREAMBLE = '<?xml version="1.0" encoding="UTF-8"?>\n';

    var ESCAPE_ATTR_CHARS = /<|>|'|"|&|\n\r|\n/g;
    var ESCAPE_CHARS = /<|>|&/g;


    function Namespaces(parent) {

      var prefixMap = {};
      var uriMap = {};
      var used = {};

      var wellknown = [];
      var custom = [];

      // API

      this.byUri = function(uri) {
        return uriMap[uri] || (
          parent && parent.byUri(uri)
        );
      };

      this.add = function(ns, isWellknown) {

        uriMap[ns.uri] = ns;

        if (isWellknown) {
          wellknown.push(ns);
        } else {
          custom.push(ns);
        }

        this.mapPrefix(ns.prefix, ns.uri);
      };

      this.uriByPrefix = function(prefix) {
        return prefixMap[prefix || 'xmlns'];
      };

      this.mapPrefix = function(prefix, uri) {
        prefixMap[prefix || 'xmlns'] = uri;
      };

      this.getNSKey = function(ns) {
        return (ns.prefix !== undefined) ? (ns.uri + '|' + ns.prefix) : ns.uri;
      };

      this.logUsed = function(ns) {

        var uri = ns.uri;
        var nsKey = this.getNSKey(ns);

        used[nsKey] = this.byUri(uri);

        // Inform parent recursively about the usage of this NS
        if (parent) {
          parent.logUsed(ns);
        }
      };

      this.getUsed = function(ns) {

        function isUsed(ns) {
          var nsKey = self.getNSKey(ns);

          return used[nsKey];
        }

        var self = this;

        var allNs = [].concat(wellknown, custom);

        return allNs.filter(isUsed);
      };

    }

    function lower(string) {
      return string.charAt(0).toLowerCase() + string.slice(1);
    }

    function nameToAlias(name, pkg) {
      if (hasLowerCaseAlias(pkg)) {
        return lower(name);
      } else {
        return name;
      }
    }

    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }

    function nsName(ns) {
      if (isString$3(ns)) {
        return ns;
      } else {
        return (ns.prefix ? ns.prefix + ':' : '') + ns.localName;
      }
    }

    function getNsAttrs(namespaces) {

      return namespaces.getUsed().filter(function(ns) {

        // do not serialize built in <xml> namespace
        return ns.prefix !== 'xml';
      }).map(function(ns) {
        var name = 'xmlns' + (ns.prefix ? ':' + ns.prefix : '');
        return { name: name, value: ns.uri };
      });

    }

    function getElementNs(ns, descriptor) {
      if (descriptor.isGeneric) {
        return assign$1({ localName: descriptor.ns.localName }, ns);
      } else {
        return assign$1({ localName: nameToAlias(descriptor.ns.localName, descriptor.$pkg) }, ns);
      }
    }

    function getPropertyNs(ns, descriptor) {
      return assign$1({ localName: descriptor.ns.localName }, ns);
    }

    function getSerializableProperties(element) {
      var descriptor = element.$descriptor;

      return filter(descriptor.properties, function(p) {
        var name = p.name;

        if (p.isVirtual) {
          return false;
        }

        // do not serialize defaults
        if (!has$1(element, name)) {
          return false;
        }

        var value = element[name];

        // do not serialize default equals
        if (value === p.default) {
          return false;
        }

        // do not serialize null properties
        if (value === null) {
          return false;
        }

        return p.isMany ? value.length : true;
      });
    }

    var ESCAPE_ATTR_MAP = {
      '\n': '#10',
      '\n\r': '#10',
      '"': '#34',
      '\'': '#39',
      '<': '#60',
      '>': '#62',
      '&': '#38'
    };

    var ESCAPE_MAP = {
      '<': 'lt',
      '>': 'gt',
      '&': 'amp'
    };

    function escape(str, charPattern, replaceMap) {

      // ensure we are handling strings here
      str = isString$3(str) ? str : '' + str;

      return str.replace(charPattern, function(s) {
        return '&' + replaceMap[s] + ';';
      });
    }

    /**
     * Escape a string attribute to not contain any bad values (line breaks, '"', ...)
     *
     * @param {String} str the string to escape
     * @return {String} the escaped string
     */
    function escapeAttr(str) {
      return escape(str, ESCAPE_ATTR_CHARS, ESCAPE_ATTR_MAP);
    }

    function escapeBody(str) {
      return escape(str, ESCAPE_CHARS, ESCAPE_MAP);
    }

    function filterAttributes(props) {
      return filter(props, function(p) { return p.isAttr; });
    }

    function filterContained(props) {
      return filter(props, function(p) { return !p.isAttr; });
    }


    function ReferenceSerializer(tagName) {
      this.tagName = tagName;
    }

    ReferenceSerializer.prototype.build = function(element) {
      this.element = element;
      return this;
    };

    ReferenceSerializer.prototype.serializeTo = function(writer) {
      writer
        .appendIndent()
        .append('<' + this.tagName + '>' + this.element.id + '</' + this.tagName + '>')
        .appendNewLine();
    };

    function BodySerializer() {}

    BodySerializer.prototype.serializeValue =
    BodySerializer.prototype.serializeTo = function(writer) {
      writer.append(
        this.escape
          ? escapeBody(this.value)
          : this.value
      );
    };

    BodySerializer.prototype.build = function(prop, value) {
      this.value = value;

      if (prop.type === 'String' && value.search(ESCAPE_CHARS) !== -1) {
        this.escape = true;
      }

      return this;
    };

    function ValueSerializer(tagName) {
      this.tagName = tagName;
    }

    inherits(ValueSerializer, BodySerializer);

    ValueSerializer.prototype.serializeTo = function(writer) {

      writer
        .appendIndent()
        .append('<' + this.tagName + '>');

      this.serializeValue(writer);

      writer
        .append('</' + this.tagName + '>')
        .appendNewLine();
    };

    function ElementSerializer(parent, propertyDescriptor) {
      this.body = [];
      this.attrs = [];

      this.parent = parent;
      this.propertyDescriptor = propertyDescriptor;
    }

    ElementSerializer.prototype.build = function(element) {
      this.element = element;

      var elementDescriptor = element.$descriptor,
          propertyDescriptor = this.propertyDescriptor;

      var otherAttrs,
          properties;

      var isGeneric = elementDescriptor.isGeneric;

      if (isGeneric) {
        otherAttrs = this.parseGeneric(element);
      } else {
        otherAttrs = this.parseNsAttributes(element);
      }

      if (propertyDescriptor) {
        this.ns = this.nsPropertyTagName(propertyDescriptor);
      } else {
        this.ns = this.nsTagName(elementDescriptor);
      }

      // compute tag name
      this.tagName = this.addTagName(this.ns);

      if (!isGeneric) {
        properties = getSerializableProperties(element);

        this.parseAttributes(filterAttributes(properties));
        this.parseContainments(filterContained(properties));
      }

      this.parseGenericAttributes(element, otherAttrs);

      return this;
    };

    ElementSerializer.prototype.nsTagName = function(descriptor) {
      var effectiveNs = this.logNamespaceUsed(descriptor.ns);
      return getElementNs(effectiveNs, descriptor);
    };

    ElementSerializer.prototype.nsPropertyTagName = function(descriptor) {
      var effectiveNs = this.logNamespaceUsed(descriptor.ns);
      return getPropertyNs(effectiveNs, descriptor);
    };

    ElementSerializer.prototype.isLocalNs = function(ns) {
      return ns.uri === this.ns.uri;
    };

    /**
     * Get the actual ns attribute name for the given element.
     *
     * @param {Object} element
     * @param {Boolean} [element.inherited=false]
     *
     * @return {Object} nsName
     */
    ElementSerializer.prototype.nsAttributeName = function(element) {

      var ns;

      if (isString$3(element)) {
        ns = parseName(element);
      } else {
        ns = element.ns;
      }

      // return just local name for inherited attributes
      if (element.inherited) {
        return { localName: ns.localName };
      }

      // parse + log effective ns
      var effectiveNs = this.logNamespaceUsed(ns);

      // LOG ACTUAL namespace use
      this.getNamespaces().logUsed(effectiveNs);

      // strip prefix if same namespace like parent
      if (this.isLocalNs(effectiveNs)) {
        return { localName: ns.localName };
      } else {
        return assign$1({ localName: ns.localName }, effectiveNs);
      }
    };

    ElementSerializer.prototype.parseGeneric = function(element) {

      var self = this,
          body = this.body;

      var attributes = [];

      forEach$1(element, function(val, key) {

        var nonNsAttr;

        if (key === '$body') {
          body.push(new BodySerializer().build({ type: 'String' }, val));
        } else
        if (key === '$children') {
          forEach$1(val, function(child) {
            body.push(new ElementSerializer(self).build(child));
          });
        } else
        if (key.indexOf('$') !== 0) {
          nonNsAttr = self.parseNsAttribute(element, key, val);

          if (nonNsAttr) {
            attributes.push({ name: key, value: val });
          }
        }
      });

      return attributes;
    };

    ElementSerializer.prototype.parseNsAttribute = function(element, name, value) {
      var model = element.$model;

      var nameNs = parseName(name);

      var ns;

      // parse xmlns:foo="http://foo.bar"
      if (nameNs.prefix === 'xmlns') {
        ns = { prefix: nameNs.localName, uri: value };
      }

      // parse xmlns="http://foo.bar"
      if (!nameNs.prefix && nameNs.localName === 'xmlns') {
        ns = { uri: value };
      }

      if (!ns) {
        return {
          name: name,
          value: value
        };
      }

      if (model && model.getPackage(value)) {

        // register well known namespace
        this.logNamespace(ns, true, true);
      } else {

        // log custom namespace directly as used
        var actualNs = this.logNamespaceUsed(ns, true);

        this.getNamespaces().logUsed(actualNs);
      }
    };


    /**
     * Parse namespaces and return a list of left over generic attributes
     *
     * @param  {Object} element
     * @return {Array<Object>}
     */
    ElementSerializer.prototype.parseNsAttributes = function(element, attrs) {
      var self = this;

      var genericAttrs = element.$attrs;

      var attributes = [];

      // parse namespace attributes first
      // and log them. push non namespace attributes to a list
      // and process them later
      forEach$1(genericAttrs, function(value, name) {

        var nonNsAttr = self.parseNsAttribute(element, name, value);

        if (nonNsAttr) {
          attributes.push(nonNsAttr);
        }
      });

      return attributes;
    };

    ElementSerializer.prototype.parseGenericAttributes = function(element, attributes) {

      var self = this;

      forEach$1(attributes, function(attr) {

        // do not serialize xsi:type attribute
        // it is set manually based on the actual implementation type
        if (attr.name === XSI_TYPE) {
          return;
        }

        try {
          self.addAttribute(self.nsAttributeName(attr.name), attr.value);
        } catch (e) {
          /* global console */

          console.warn(
            'missing namespace information for ',
            attr.name, '=', attr.value, 'on', element,
            e);
        }
      });
    };

    ElementSerializer.prototype.parseContainments = function(properties) {

      var self = this,
          body = this.body,
          element = this.element;

      forEach$1(properties, function(p) {
        var value = element.get(p.name),
            isReference = p.isReference,
            isMany = p.isMany;

        if (!isMany) {
          value = [ value ];
        }

        if (p.isBody) {
          body.push(new BodySerializer().build(p, value[0]));
        } else
        if (isSimple(p.type)) {
          forEach$1(value, function(v) {
            body.push(new ValueSerializer(self.addTagName(self.nsPropertyTagName(p))).build(p, v));
          });
        } else
        if (isReference) {
          forEach$1(value, function(v) {
            body.push(new ReferenceSerializer(self.addTagName(self.nsPropertyTagName(p))).build(v));
          });
        } else {

          // allow serialization via type
          // rather than element name
          var asType = serializeAsType(p),
              asProperty = serializeAsProperty(p);

          forEach$1(value, function(v) {
            var serializer;

            if (asType) {
              serializer = new TypeSerializer(self, p);
            } else
            if (asProperty) {
              serializer = new ElementSerializer(self, p);
            } else {
              serializer = new ElementSerializer(self);
            }

            body.push(serializer.build(v));
          });
        }
      });
    };

    ElementSerializer.prototype.getNamespaces = function(local) {

      var namespaces = this.namespaces,
          parent = this.parent,
          parentNamespaces;

      if (!namespaces) {
        parentNamespaces = parent && parent.getNamespaces();

        if (local || !parentNamespaces) {
          this.namespaces = namespaces = new Namespaces(parentNamespaces);
        } else {
          namespaces = parentNamespaces;
        }
      }

      return namespaces;
    };

    ElementSerializer.prototype.logNamespace = function(ns, wellknown, local) {
      var namespaces = this.getNamespaces(local);

      var nsUri = ns.uri,
          nsPrefix = ns.prefix;

      var existing = namespaces.byUri(nsUri);

      if (!existing || local) {
        namespaces.add(ns, wellknown);
      }

      namespaces.mapPrefix(nsPrefix, nsUri);

      return ns;
    };

    ElementSerializer.prototype.logNamespaceUsed = function(ns, local) {
      var element = this.element,
          model = element.$model,
          namespaces = this.getNamespaces(local);

      // ns may be
      //
      //   * prefix only
      //   * prefix:uri
      //   * localName only

      var prefix = ns.prefix,
          uri = ns.uri,
          newPrefix, idx,
          wellknownUri;

      // handle anonymous namespaces (elementForm=unqualified), cf. #23
      if (!prefix && !uri) {
        return { localName: ns.localName };
      }

      wellknownUri = DEFAULT_NS_MAP[prefix] || model && (model.getPackage(prefix) || {}).uri;

      uri = uri || wellknownUri || namespaces.uriByPrefix(prefix);

      if (!uri) {
        throw new Error('no namespace uri given for prefix <' + prefix + '>');
      }

      ns = namespaces.byUri(uri);

      if (!ns) {
        newPrefix = prefix;
        idx = 1;

        // find a prefix that is not mapped yet
        while (namespaces.uriByPrefix(newPrefix)) {
          newPrefix = prefix + '_' + idx++;
        }

        ns = this.logNamespace({ prefix: newPrefix, uri: uri }, wellknownUri === uri);
      }

      if (prefix) {
        namespaces.mapPrefix(prefix, uri);
      }

      return ns;
    };

    ElementSerializer.prototype.parseAttributes = function(properties) {
      var self = this,
          element = this.element;

      forEach$1(properties, function(p) {

        var value = element.get(p.name);

        if (p.isReference) {

          if (!p.isMany) {
            value = value.id;
          }
          else {
            var values = [];
            forEach$1(value, function(v) {
              values.push(v.id);
            });

            // IDREFS is a whitespace-separated list of references.
            value = values.join(' ');
          }

        }

        self.addAttribute(self.nsAttributeName(p), value);
      });
    };

    ElementSerializer.prototype.addTagName = function(nsTagName) {
      var actualNs = this.logNamespaceUsed(nsTagName);

      this.getNamespaces().logUsed(actualNs);

      return nsName(nsTagName);
    };

    ElementSerializer.prototype.addAttribute = function(name, value) {
      var attrs = this.attrs;

      if (isString$3(value)) {
        value = escapeAttr(value);
      }

      // de-duplicate attributes
      // https://github.com/bpmn-io/moddle-xml/issues/66
      var idx = findIndex(attrs, function(element) {
        return (
          element.name.localName === name.localName &&
          element.name.uri === name.uri &&
          element.name.prefix === name.prefix
        );
      });

      var attr = { name: name, value: value };

      if (idx !== -1) {
        attrs.splice(idx, 1, attr);
      } else {
        attrs.push(attr);
      }
    };

    ElementSerializer.prototype.serializeAttributes = function(writer) {
      var attrs = this.attrs,
          namespaces = this.namespaces;

      if (namespaces) {
        attrs = getNsAttrs(namespaces).concat(attrs);
      }

      forEach$1(attrs, function(a) {
        writer
          .append(' ')
          .append(nsName(a.name)).append('="').append(a.value).append('"');
      });
    };

    ElementSerializer.prototype.serializeTo = function(writer) {
      var firstBody = this.body[0],
          indent = firstBody && firstBody.constructor !== BodySerializer;

      writer
        .appendIndent()
        .append('<' + this.tagName);

      this.serializeAttributes(writer);

      writer.append(firstBody ? '>' : ' />');

      if (firstBody) {

        if (indent) {
          writer
            .appendNewLine()
            .indent();
        }

        forEach$1(this.body, function(b) {
          b.serializeTo(writer);
        });

        if (indent) {
          writer
            .unindent()
            .appendIndent();
        }

        writer.append('</' + this.tagName + '>');
      }

      writer.appendNewLine();
    };

    /**
     * A serializer for types that handles serialization of data types
     */
    function TypeSerializer(parent, propertyDescriptor) {
      ElementSerializer.call(this, parent, propertyDescriptor);
    }

    inherits(TypeSerializer, ElementSerializer);

    TypeSerializer.prototype.parseNsAttributes = function(element) {

      // extracted attributes
      var attributes = ElementSerializer.prototype.parseNsAttributes.call(this, element);

      var descriptor = element.$descriptor;

      // only serialize xsi:type if necessary
      if (descriptor.name === this.propertyDescriptor.type) {
        return attributes;
      }

      var typeNs = this.typeNs = this.nsTagName(descriptor);
      this.getNamespaces().logUsed(this.typeNs);

      // add xsi:type attribute to represent the elements
      // actual type

      var pkg = element.$model.getPackage(typeNs.uri),
          typePrefix = (pkg.xml && pkg.xml.typePrefix) || '';

      this.addAttribute(
        this.nsAttributeName(XSI_TYPE),
        (typeNs.prefix ? typeNs.prefix + ':' : '') + typePrefix + descriptor.ns.localName
      );

      return attributes;
    };

    TypeSerializer.prototype.isLocalNs = function(ns) {
      return ns.uri === (this.typeNs || this.ns).uri;
    };

    function SavingWriter() {
      this.value = '';

      this.write = function(str) {
        this.value += str;
      };
    }

    function FormatingWriter(out, format) {

      var indent = [ '' ];

      this.append = function(str) {
        out.write(str);

        return this;
      };

      this.appendNewLine = function() {
        if (format) {
          out.write('\n');
        }

        return this;
      };

      this.appendIndent = function() {
        if (format) {
          out.write(indent.join('  '));
        }

        return this;
      };

      this.indent = function() {
        indent.push('');
        return this;
      };

      this.unindent = function() {
        indent.pop();
        return this;
      };
    }

    /**
     * A writer for meta-model backed document trees
     *
     * @param {Object} options output options to pass into the writer
     */
    function Writer(options) {

      options = assign$1({ format: false, preamble: true }, options || {});

      function toXML(tree, writer) {
        var internalWriter = writer || new SavingWriter();
        var formatingWriter = new FormatingWriter(internalWriter, options.format);

        if (options.preamble) {
          formatingWriter.append(XML_PREAMBLE);
        }

        new ElementSerializer().build(tree).serializeTo(formatingWriter);

        if (!writer) {
          return internalWriter.value;
        }
      }

      return {
        toXML: toXML
      };
    }

    /**
     * A sub class of {@link Moddle} with support for import and export of BPMN 2.0 xml files.
     *
     * @class BpmnModdle
     * @extends Moddle
     *
     * @param {Object|Array} packages to use for instantiating the model
     * @param {Object} [options] additional options to pass over
     */
    function BpmnModdle(packages, options) {
      Moddle.call(this, packages, options);
    }

    BpmnModdle.prototype = Object.create(Moddle.prototype);

    /**
     * The fromXML result.
     *
     * @typedef {Object} ParseResult
     *
     * @property {ModdleElement} rootElement
     * @property {Array<Object>} references
     * @property {Array<Error>} warnings
     * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
     */

    /**
     * The fromXML error.
     *
     * @typedef {Error} ParseError
     *
     * @property {Array<Error>} warnings
     */

    /**
     * Instantiates a BPMN model tree from a given xml string.
     *
     * @param {String}   xmlStr
     * @param {String}   [typeName='bpmn:Definitions'] name of the root element
     * @param {Object}   [options]  options to pass to the underlying reader
     *
     * @returns {Promise<ParseResult, ParseError>}
     */
    BpmnModdle.prototype.fromXML = function(xmlStr, typeName, options) {

      if (!isString$3(typeName)) {
        options = typeName;
        typeName = 'bpmn:Definitions';
      }

      var reader = new Reader(assign$1({ model: this, lax: true }, options));
      var rootHandler = reader.handler(typeName);

      return reader.fromXML(xmlStr, rootHandler);
    };


    /**
     * The toXML result.
     *
     * @typedef {Object} SerializationResult
     *
     * @property {String} xml
     */

    /**
     * Serializes a BPMN 2.0 object tree to XML.
     *
     * @param {String}   element    the root element, typically an instance of `bpmn:Definitions`
     * @param {Object}   [options]  to pass to the underlying writer
     *
     * @returns {Promise<SerializationResult, Error>}
     */
    BpmnModdle.prototype.toXML = function(element, options) {

      var writer = new Writer(options);

      return new Promise(function(resolve, reject) {
        try {
          var result = writer.toXML(element);

          return resolve({
            xml: result
          });
        } catch (err) {
          return reject(err);
        }
      });
    };

    var name$5 = "BPMN20";
    var uri$5 = "http://www.omg.org/spec/BPMN/20100524/MODEL";
    var prefix$5 = "bpmn";
    var associations$5 = [
    ];
    var types$5 = [
    	{
    		name: "Interface",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "operations",
    				type: "Operation",
    				isMany: true
    			},
    			{
    				name: "implementationRef",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Operation",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "inMessageRef",
    				type: "Message",
    				isReference: true
    			},
    			{
    				name: "outMessageRef",
    				type: "Message",
    				isReference: true
    			},
    			{
    				name: "errorRef",
    				type: "Error",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "implementationRef",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "EndPoint",
    		superClass: [
    			"RootElement"
    		]
    	},
    	{
    		name: "Auditing",
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "GlobalTask",
    		superClass: [
    			"CallableElement"
    		],
    		properties: [
    			{
    				name: "resources",
    				type: "ResourceRole",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "Monitoring",
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "Performer",
    		superClass: [
    			"ResourceRole"
    		]
    	},
    	{
    		name: "Process",
    		superClass: [
    			"FlowElementsContainer",
    			"CallableElement"
    		],
    		properties: [
    			{
    				name: "processType",
    				type: "ProcessType",
    				isAttr: true
    			},
    			{
    				name: "isClosed",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "auditing",
    				type: "Auditing"
    			},
    			{
    				name: "monitoring",
    				type: "Monitoring"
    			},
    			{
    				name: "properties",
    				type: "Property",
    				isMany: true
    			},
    			{
    				name: "laneSets",
    				isMany: true,
    				replaces: "FlowElementsContainer#laneSets",
    				type: "LaneSet"
    			},
    			{
    				name: "flowElements",
    				isMany: true,
    				replaces: "FlowElementsContainer#flowElements",
    				type: "FlowElement"
    			},
    			{
    				name: "artifacts",
    				type: "Artifact",
    				isMany: true
    			},
    			{
    				name: "resources",
    				type: "ResourceRole",
    				isMany: true
    			},
    			{
    				name: "correlationSubscriptions",
    				type: "CorrelationSubscription",
    				isMany: true
    			},
    			{
    				name: "supports",
    				type: "Process",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "definitionalCollaborationRef",
    				type: "Collaboration",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "isExecutable",
    				isAttr: true,
    				type: "Boolean"
    			}
    		]
    	},
    	{
    		name: "LaneSet",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "lanes",
    				type: "Lane",
    				isMany: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Lane",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "partitionElementRef",
    				type: "BaseElement",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "partitionElement",
    				type: "BaseElement"
    			},
    			{
    				name: "flowNodeRef",
    				type: "FlowNode",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "childLaneSet",
    				type: "LaneSet",
    				xml: {
    					serialize: "xsi:type"
    				}
    			}
    		]
    	},
    	{
    		name: "GlobalManualTask",
    		superClass: [
    			"GlobalTask"
    		]
    	},
    	{
    		name: "ManualTask",
    		superClass: [
    			"Task"
    		]
    	},
    	{
    		name: "UserTask",
    		superClass: [
    			"Task"
    		],
    		properties: [
    			{
    				name: "renderings",
    				type: "Rendering",
    				isMany: true
    			},
    			{
    				name: "implementation",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Rendering",
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "HumanPerformer",
    		superClass: [
    			"Performer"
    		]
    	},
    	{
    		name: "PotentialOwner",
    		superClass: [
    			"HumanPerformer"
    		]
    	},
    	{
    		name: "GlobalUserTask",
    		superClass: [
    			"GlobalTask"
    		],
    		properties: [
    			{
    				name: "implementation",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "renderings",
    				type: "Rendering",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "Gateway",
    		isAbstract: true,
    		superClass: [
    			"FlowNode"
    		],
    		properties: [
    			{
    				name: "gatewayDirection",
    				type: "GatewayDirection",
    				"default": "Unspecified",
    				isAttr: true
    			}
    		]
    	},
    	{
    		name: "EventBasedGateway",
    		superClass: [
    			"Gateway"
    		],
    		properties: [
    			{
    				name: "instantiate",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "eventGatewayType",
    				type: "EventBasedGatewayType",
    				isAttr: true,
    				"default": "Exclusive"
    			}
    		]
    	},
    	{
    		name: "ComplexGateway",
    		superClass: [
    			"Gateway"
    		],
    		properties: [
    			{
    				name: "activationCondition",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "default",
    				type: "SequenceFlow",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ExclusiveGateway",
    		superClass: [
    			"Gateway"
    		],
    		properties: [
    			{
    				name: "default",
    				type: "SequenceFlow",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "InclusiveGateway",
    		superClass: [
    			"Gateway"
    		],
    		properties: [
    			{
    				name: "default",
    				type: "SequenceFlow",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ParallelGateway",
    		superClass: [
    			"Gateway"
    		]
    	},
    	{
    		name: "RootElement",
    		isAbstract: true,
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "Relationship",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "type",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "direction",
    				type: "RelationshipDirection",
    				isAttr: true
    			},
    			{
    				name: "source",
    				isMany: true,
    				isReference: true,
    				type: "Element"
    			},
    			{
    				name: "target",
    				isMany: true,
    				isReference: true,
    				type: "Element"
    			}
    		]
    	},
    	{
    		name: "BaseElement",
    		isAbstract: true,
    		properties: [
    			{
    				name: "id",
    				isAttr: true,
    				type: "String",
    				isId: true
    			},
    			{
    				name: "documentation",
    				type: "Documentation",
    				isMany: true
    			},
    			{
    				name: "extensionDefinitions",
    				type: "ExtensionDefinition",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "extensionElements",
    				type: "ExtensionElements"
    			}
    		]
    	},
    	{
    		name: "Extension",
    		properties: [
    			{
    				name: "mustUnderstand",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "definition",
    				type: "ExtensionDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ExtensionDefinition",
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "extensionAttributeDefinitions",
    				type: "ExtensionAttributeDefinition",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "ExtensionAttributeDefinition",
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "type",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "isReference",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "extensionDefinition",
    				type: "ExtensionDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ExtensionElements",
    		properties: [
    			{
    				name: "valueRef",
    				isAttr: true,
    				isReference: true,
    				type: "Element"
    			},
    			{
    				name: "values",
    				type: "Element",
    				isMany: true
    			},
    			{
    				name: "extensionAttributeDefinition",
    				type: "ExtensionAttributeDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Documentation",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "text",
    				type: "String",
    				isBody: true
    			},
    			{
    				name: "textFormat",
    				"default": "text/plain",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Event",
    		isAbstract: true,
    		superClass: [
    			"FlowNode",
    			"InteractionNode"
    		],
    		properties: [
    			{
    				name: "properties",
    				type: "Property",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "IntermediateCatchEvent",
    		superClass: [
    			"CatchEvent"
    		]
    	},
    	{
    		name: "IntermediateThrowEvent",
    		superClass: [
    			"ThrowEvent"
    		]
    	},
    	{
    		name: "EndEvent",
    		superClass: [
    			"ThrowEvent"
    		]
    	},
    	{
    		name: "StartEvent",
    		superClass: [
    			"CatchEvent"
    		],
    		properties: [
    			{
    				name: "isInterrupting",
    				"default": true,
    				isAttr: true,
    				type: "Boolean"
    			}
    		]
    	},
    	{
    		name: "ThrowEvent",
    		isAbstract: true,
    		superClass: [
    			"Event"
    		],
    		properties: [
    			{
    				name: "dataInputs",
    				type: "DataInput",
    				isMany: true
    			},
    			{
    				name: "dataInputAssociations",
    				type: "DataInputAssociation",
    				isMany: true
    			},
    			{
    				name: "inputSet",
    				type: "InputSet"
    			},
    			{
    				name: "eventDefinitions",
    				type: "EventDefinition",
    				isMany: true
    			},
    			{
    				name: "eventDefinitionRef",
    				type: "EventDefinition",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "CatchEvent",
    		isAbstract: true,
    		superClass: [
    			"Event"
    		],
    		properties: [
    			{
    				name: "parallelMultiple",
    				isAttr: true,
    				type: "Boolean",
    				"default": false
    			},
    			{
    				name: "dataOutputs",
    				type: "DataOutput",
    				isMany: true
    			},
    			{
    				name: "dataOutputAssociations",
    				type: "DataOutputAssociation",
    				isMany: true
    			},
    			{
    				name: "outputSet",
    				type: "OutputSet"
    			},
    			{
    				name: "eventDefinitions",
    				type: "EventDefinition",
    				isMany: true
    			},
    			{
    				name: "eventDefinitionRef",
    				type: "EventDefinition",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "BoundaryEvent",
    		superClass: [
    			"CatchEvent"
    		],
    		properties: [
    			{
    				name: "cancelActivity",
    				"default": true,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "attachedToRef",
    				type: "Activity",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "EventDefinition",
    		isAbstract: true,
    		superClass: [
    			"RootElement"
    		]
    	},
    	{
    		name: "CancelEventDefinition",
    		superClass: [
    			"EventDefinition"
    		]
    	},
    	{
    		name: "ErrorEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "errorRef",
    				type: "Error",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "TerminateEventDefinition",
    		superClass: [
    			"EventDefinition"
    		]
    	},
    	{
    		name: "EscalationEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "escalationRef",
    				type: "Escalation",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Escalation",
    		properties: [
    			{
    				name: "structureRef",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "escalationCode",
    				isAttr: true,
    				type: "String"
    			}
    		],
    		superClass: [
    			"RootElement"
    		]
    	},
    	{
    		name: "CompensateEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "waitForCompletion",
    				isAttr: true,
    				type: "Boolean",
    				"default": true
    			},
    			{
    				name: "activityRef",
    				type: "Activity",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "TimerEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "timeDate",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "timeCycle",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "timeDuration",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			}
    		]
    	},
    	{
    		name: "LinkEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "target",
    				type: "LinkEventDefinition",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "source",
    				type: "LinkEventDefinition",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "MessageEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "messageRef",
    				type: "Message",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "operationRef",
    				type: "Operation",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ConditionalEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "condition",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			}
    		]
    	},
    	{
    		name: "SignalEventDefinition",
    		superClass: [
    			"EventDefinition"
    		],
    		properties: [
    			{
    				name: "signalRef",
    				type: "Signal",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Signal",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "structureRef",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ImplicitThrowEvent",
    		superClass: [
    			"ThrowEvent"
    		]
    	},
    	{
    		name: "DataState",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ItemAwareElement",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "itemSubjectRef",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "dataState",
    				type: "DataState"
    			}
    		]
    	},
    	{
    		name: "DataAssociation",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "sourceRef",
    				type: "ItemAwareElement",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "targetRef",
    				type: "ItemAwareElement",
    				isReference: true
    			},
    			{
    				name: "transformation",
    				type: "FormalExpression",
    				xml: {
    					serialize: "property"
    				}
    			},
    			{
    				name: "assignment",
    				type: "Assignment",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "DataInput",
    		superClass: [
    			"ItemAwareElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "isCollection",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "inputSetRef",
    				type: "InputSet",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "inputSetWithOptional",
    				type: "InputSet",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "inputSetWithWhileExecuting",
    				type: "InputSet",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "DataOutput",
    		superClass: [
    			"ItemAwareElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "isCollection",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "outputSetRef",
    				type: "OutputSet",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "outputSetWithOptional",
    				type: "OutputSet",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "outputSetWithWhileExecuting",
    				type: "OutputSet",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "InputSet",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "dataInputRefs",
    				type: "DataInput",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "optionalInputRefs",
    				type: "DataInput",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "whileExecutingInputRefs",
    				type: "DataInput",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "outputSetRefs",
    				type: "OutputSet",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "OutputSet",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "dataOutputRefs",
    				type: "DataOutput",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "inputSetRefs",
    				type: "InputSet",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "optionalOutputRefs",
    				type: "DataOutput",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "whileExecutingOutputRefs",
    				type: "DataOutput",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Property",
    		superClass: [
    			"ItemAwareElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "DataInputAssociation",
    		superClass: [
    			"DataAssociation"
    		]
    	},
    	{
    		name: "DataOutputAssociation",
    		superClass: [
    			"DataAssociation"
    		]
    	},
    	{
    		name: "InputOutputSpecification",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "dataInputs",
    				type: "DataInput",
    				isMany: true
    			},
    			{
    				name: "dataOutputs",
    				type: "DataOutput",
    				isMany: true
    			},
    			{
    				name: "inputSets",
    				type: "InputSet",
    				isMany: true
    			},
    			{
    				name: "outputSets",
    				type: "OutputSet",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "DataObject",
    		superClass: [
    			"FlowElement",
    			"ItemAwareElement"
    		],
    		properties: [
    			{
    				name: "isCollection",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			}
    		]
    	},
    	{
    		name: "InputOutputBinding",
    		properties: [
    			{
    				name: "inputDataRef",
    				type: "InputSet",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "outputDataRef",
    				type: "OutputSet",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "operationRef",
    				type: "Operation",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Assignment",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "from",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "to",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			}
    		]
    	},
    	{
    		name: "DataStore",
    		superClass: [
    			"RootElement",
    			"ItemAwareElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "capacity",
    				isAttr: true,
    				type: "Integer"
    			},
    			{
    				name: "isUnlimited",
    				"default": true,
    				isAttr: true,
    				type: "Boolean"
    			}
    		]
    	},
    	{
    		name: "DataStoreReference",
    		superClass: [
    			"ItemAwareElement",
    			"FlowElement"
    		],
    		properties: [
    			{
    				name: "dataStoreRef",
    				type: "DataStore",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "DataObjectReference",
    		superClass: [
    			"ItemAwareElement",
    			"FlowElement"
    		],
    		properties: [
    			{
    				name: "dataObjectRef",
    				type: "DataObject",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ConversationLink",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "sourceRef",
    				type: "InteractionNode",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "targetRef",
    				type: "InteractionNode",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ConversationAssociation",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "innerConversationNodeRef",
    				type: "ConversationNode",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "outerConversationNodeRef",
    				type: "ConversationNode",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "CallConversation",
    		superClass: [
    			"ConversationNode"
    		],
    		properties: [
    			{
    				name: "calledCollaborationRef",
    				type: "Collaboration",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "participantAssociations",
    				type: "ParticipantAssociation",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "Conversation",
    		superClass: [
    			"ConversationNode"
    		]
    	},
    	{
    		name: "SubConversation",
    		superClass: [
    			"ConversationNode"
    		],
    		properties: [
    			{
    				name: "conversationNodes",
    				type: "ConversationNode",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "ConversationNode",
    		isAbstract: true,
    		superClass: [
    			"InteractionNode",
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "participantRef",
    				type: "Participant",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "messageFlowRefs",
    				type: "MessageFlow",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "correlationKeys",
    				type: "CorrelationKey",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "GlobalConversation",
    		superClass: [
    			"Collaboration"
    		]
    	},
    	{
    		name: "PartnerEntity",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "participantRef",
    				type: "Participant",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "PartnerRole",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "participantRef",
    				type: "Participant",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "CorrelationProperty",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "correlationPropertyRetrievalExpression",
    				type: "CorrelationPropertyRetrievalExpression",
    				isMany: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "type",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Error",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "structureRef",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "errorCode",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "CorrelationKey",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "correlationPropertyRef",
    				type: "CorrelationProperty",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Expression",
    		superClass: [
    			"BaseElement"
    		],
    		isAbstract: false,
    		properties: [
    			{
    				name: "body",
    				isBody: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "FormalExpression",
    		superClass: [
    			"Expression"
    		],
    		properties: [
    			{
    				name: "language",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "evaluatesToTypeRef",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Message",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "itemRef",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ItemDefinition",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "itemKind",
    				type: "ItemKind",
    				isAttr: true
    			},
    			{
    				name: "structureRef",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "isCollection",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "import",
    				type: "Import",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "FlowElement",
    		isAbstract: true,
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "auditing",
    				type: "Auditing"
    			},
    			{
    				name: "monitoring",
    				type: "Monitoring"
    			},
    			{
    				name: "categoryValueRef",
    				type: "CategoryValue",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "SequenceFlow",
    		superClass: [
    			"FlowElement"
    		],
    		properties: [
    			{
    				name: "isImmediate",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "conditionExpression",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "sourceRef",
    				type: "FlowNode",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "targetRef",
    				type: "FlowNode",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "FlowElementsContainer",
    		isAbstract: true,
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "laneSets",
    				type: "LaneSet",
    				isMany: true
    			},
    			{
    				name: "flowElements",
    				type: "FlowElement",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "CallableElement",
    		isAbstract: true,
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "ioSpecification",
    				type: "InputOutputSpecification",
    				xml: {
    					serialize: "property"
    				}
    			},
    			{
    				name: "supportedInterfaceRef",
    				type: "Interface",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "ioBinding",
    				type: "InputOutputBinding",
    				isMany: true,
    				xml: {
    					serialize: "property"
    				}
    			}
    		]
    	},
    	{
    		name: "FlowNode",
    		isAbstract: true,
    		superClass: [
    			"FlowElement"
    		],
    		properties: [
    			{
    				name: "incoming",
    				type: "SequenceFlow",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "outgoing",
    				type: "SequenceFlow",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "lanes",
    				type: "Lane",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "CorrelationPropertyRetrievalExpression",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "messagePath",
    				type: "FormalExpression"
    			},
    			{
    				name: "messageRef",
    				type: "Message",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "CorrelationPropertyBinding",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "dataPath",
    				type: "FormalExpression"
    			},
    			{
    				name: "correlationPropertyRef",
    				type: "CorrelationProperty",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Resource",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "resourceParameters",
    				type: "ResourceParameter",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "ResourceParameter",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "isRequired",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "type",
    				type: "ItemDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "CorrelationSubscription",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "correlationKeyRef",
    				type: "CorrelationKey",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "correlationPropertyBinding",
    				type: "CorrelationPropertyBinding",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "MessageFlow",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "sourceRef",
    				type: "InteractionNode",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "targetRef",
    				type: "InteractionNode",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "messageRef",
    				type: "Message",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "MessageFlowAssociation",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "innerMessageFlowRef",
    				type: "MessageFlow",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "outerMessageFlowRef",
    				type: "MessageFlow",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "InteractionNode",
    		isAbstract: true,
    		properties: [
    			{
    				name: "incomingConversationLinks",
    				type: "ConversationLink",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "outgoingConversationLinks",
    				type: "ConversationLink",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Participant",
    		superClass: [
    			"InteractionNode",
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "interfaceRef",
    				type: "Interface",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "participantMultiplicity",
    				type: "ParticipantMultiplicity"
    			},
    			{
    				name: "endPointRefs",
    				type: "EndPoint",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "processRef",
    				type: "Process",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ParticipantAssociation",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "innerParticipantRef",
    				type: "Participant",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "outerParticipantRef",
    				type: "Participant",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ParticipantMultiplicity",
    		properties: [
    			{
    				name: "minimum",
    				"default": 0,
    				isAttr: true,
    				type: "Integer"
    			},
    			{
    				name: "maximum",
    				"default": 1,
    				isAttr: true,
    				type: "Integer"
    			}
    		],
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "Collaboration",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "isClosed",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "participants",
    				type: "Participant",
    				isMany: true
    			},
    			{
    				name: "messageFlows",
    				type: "MessageFlow",
    				isMany: true
    			},
    			{
    				name: "artifacts",
    				type: "Artifact",
    				isMany: true
    			},
    			{
    				name: "conversations",
    				type: "ConversationNode",
    				isMany: true
    			},
    			{
    				name: "conversationAssociations",
    				type: "ConversationAssociation"
    			},
    			{
    				name: "participantAssociations",
    				type: "ParticipantAssociation",
    				isMany: true
    			},
    			{
    				name: "messageFlowAssociations",
    				type: "MessageFlowAssociation",
    				isMany: true
    			},
    			{
    				name: "correlationKeys",
    				type: "CorrelationKey",
    				isMany: true
    			},
    			{
    				name: "choreographyRef",
    				type: "Choreography",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "conversationLinks",
    				type: "ConversationLink",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "ChoreographyActivity",
    		isAbstract: true,
    		superClass: [
    			"FlowNode"
    		],
    		properties: [
    			{
    				name: "participantRef",
    				type: "Participant",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "initiatingParticipantRef",
    				type: "Participant",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "correlationKeys",
    				type: "CorrelationKey",
    				isMany: true
    			},
    			{
    				name: "loopType",
    				type: "ChoreographyLoopType",
    				"default": "None",
    				isAttr: true
    			}
    		]
    	},
    	{
    		name: "CallChoreography",
    		superClass: [
    			"ChoreographyActivity"
    		],
    		properties: [
    			{
    				name: "calledChoreographyRef",
    				type: "Choreography",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "participantAssociations",
    				type: "ParticipantAssociation",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "SubChoreography",
    		superClass: [
    			"ChoreographyActivity",
    			"FlowElementsContainer"
    		],
    		properties: [
    			{
    				name: "artifacts",
    				type: "Artifact",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "ChoreographyTask",
    		superClass: [
    			"ChoreographyActivity"
    		],
    		properties: [
    			{
    				name: "messageFlowRef",
    				type: "MessageFlow",
    				isMany: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Choreography",
    		superClass: [
    			"Collaboration",
    			"FlowElementsContainer"
    		]
    	},
    	{
    		name: "GlobalChoreographyTask",
    		superClass: [
    			"Choreography"
    		],
    		properties: [
    			{
    				name: "initiatingParticipantRef",
    				type: "Participant",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "TextAnnotation",
    		superClass: [
    			"Artifact"
    		],
    		properties: [
    			{
    				name: "text",
    				type: "String"
    			},
    			{
    				name: "textFormat",
    				"default": "text/plain",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Group",
    		superClass: [
    			"Artifact"
    		],
    		properties: [
    			{
    				name: "categoryValueRef",
    				type: "CategoryValue",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Association",
    		superClass: [
    			"Artifact"
    		],
    		properties: [
    			{
    				name: "associationDirection",
    				type: "AssociationDirection",
    				isAttr: true
    			},
    			{
    				name: "sourceRef",
    				type: "BaseElement",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "targetRef",
    				type: "BaseElement",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "Category",
    		superClass: [
    			"RootElement"
    		],
    		properties: [
    			{
    				name: "categoryValue",
    				type: "CategoryValue",
    				isMany: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Artifact",
    		isAbstract: true,
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "CategoryValue",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "categorizedFlowElements",
    				type: "FlowElement",
    				isMany: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "value",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Activity",
    		isAbstract: true,
    		superClass: [
    			"FlowNode"
    		],
    		properties: [
    			{
    				name: "isForCompensation",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "default",
    				type: "SequenceFlow",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "ioSpecification",
    				type: "InputOutputSpecification",
    				xml: {
    					serialize: "property"
    				}
    			},
    			{
    				name: "boundaryEventRefs",
    				type: "BoundaryEvent",
    				isMany: true,
    				isReference: true
    			},
    			{
    				name: "properties",
    				type: "Property",
    				isMany: true
    			},
    			{
    				name: "dataInputAssociations",
    				type: "DataInputAssociation",
    				isMany: true
    			},
    			{
    				name: "dataOutputAssociations",
    				type: "DataOutputAssociation",
    				isMany: true
    			},
    			{
    				name: "startQuantity",
    				"default": 1,
    				isAttr: true,
    				type: "Integer"
    			},
    			{
    				name: "resources",
    				type: "ResourceRole",
    				isMany: true
    			},
    			{
    				name: "completionQuantity",
    				"default": 1,
    				isAttr: true,
    				type: "Integer"
    			},
    			{
    				name: "loopCharacteristics",
    				type: "LoopCharacteristics"
    			}
    		]
    	},
    	{
    		name: "ServiceTask",
    		superClass: [
    			"Task"
    		],
    		properties: [
    			{
    				name: "implementation",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "operationRef",
    				type: "Operation",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "SubProcess",
    		superClass: [
    			"Activity",
    			"FlowElementsContainer",
    			"InteractionNode"
    		],
    		properties: [
    			{
    				name: "triggeredByEvent",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "artifacts",
    				type: "Artifact",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "LoopCharacteristics",
    		isAbstract: true,
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "MultiInstanceLoopCharacteristics",
    		superClass: [
    			"LoopCharacteristics"
    		],
    		properties: [
    			{
    				name: "isSequential",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "behavior",
    				type: "MultiInstanceBehavior",
    				"default": "All",
    				isAttr: true
    			},
    			{
    				name: "loopCardinality",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "loopDataInputRef",
    				type: "ItemAwareElement",
    				isReference: true
    			},
    			{
    				name: "loopDataOutputRef",
    				type: "ItemAwareElement",
    				isReference: true
    			},
    			{
    				name: "inputDataItem",
    				type: "DataInput",
    				xml: {
    					serialize: "property"
    				}
    			},
    			{
    				name: "outputDataItem",
    				type: "DataOutput",
    				xml: {
    					serialize: "property"
    				}
    			},
    			{
    				name: "complexBehaviorDefinition",
    				type: "ComplexBehaviorDefinition",
    				isMany: true
    			},
    			{
    				name: "completionCondition",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "oneBehaviorEventRef",
    				type: "EventDefinition",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "noneBehaviorEventRef",
    				type: "EventDefinition",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "StandardLoopCharacteristics",
    		superClass: [
    			"LoopCharacteristics"
    		],
    		properties: [
    			{
    				name: "testBefore",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "loopCondition",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "loopMaximum",
    				type: "Integer",
    				isAttr: true
    			}
    		]
    	},
    	{
    		name: "CallActivity",
    		superClass: [
    			"Activity",
    			"InteractionNode"
    		],
    		properties: [
    			{
    				name: "calledElement",
    				type: "String",
    				isAttr: true
    			}
    		]
    	},
    	{
    		name: "Task",
    		superClass: [
    			"Activity",
    			"InteractionNode"
    		]
    	},
    	{
    		name: "SendTask",
    		superClass: [
    			"Task"
    		],
    		properties: [
    			{
    				name: "implementation",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "operationRef",
    				type: "Operation",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "messageRef",
    				type: "Message",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ReceiveTask",
    		superClass: [
    			"Task"
    		],
    		properties: [
    			{
    				name: "implementation",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "instantiate",
    				"default": false,
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "operationRef",
    				type: "Operation",
    				isAttr: true,
    				isReference: true
    			},
    			{
    				name: "messageRef",
    				type: "Message",
    				isAttr: true,
    				isReference: true
    			}
    		]
    	},
    	{
    		name: "ScriptTask",
    		superClass: [
    			"Task"
    		],
    		properties: [
    			{
    				name: "scriptFormat",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "script",
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "BusinessRuleTask",
    		superClass: [
    			"Task"
    		],
    		properties: [
    			{
    				name: "implementation",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "AdHocSubProcess",
    		superClass: [
    			"SubProcess"
    		],
    		properties: [
    			{
    				name: "completionCondition",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "ordering",
    				type: "AdHocOrdering",
    				isAttr: true
    			},
    			{
    				name: "cancelRemainingInstances",
    				"default": true,
    				isAttr: true,
    				type: "Boolean"
    			}
    		]
    	},
    	{
    		name: "Transaction",
    		superClass: [
    			"SubProcess"
    		],
    		properties: [
    			{
    				name: "protocol",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "method",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "GlobalScriptTask",
    		superClass: [
    			"GlobalTask"
    		],
    		properties: [
    			{
    				name: "scriptLanguage",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "script",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "GlobalBusinessRuleTask",
    		superClass: [
    			"GlobalTask"
    		],
    		properties: [
    			{
    				name: "implementation",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ComplexBehaviorDefinition",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "condition",
    				type: "FormalExpression"
    			},
    			{
    				name: "event",
    				type: "ImplicitThrowEvent"
    			}
    		]
    	},
    	{
    		name: "ResourceRole",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "resourceRef",
    				type: "Resource",
    				isReference: true
    			},
    			{
    				name: "resourceParameterBindings",
    				type: "ResourceParameterBinding",
    				isMany: true
    			},
    			{
    				name: "resourceAssignmentExpression",
    				type: "ResourceAssignmentExpression"
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ResourceParameterBinding",
    		properties: [
    			{
    				name: "expression",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			},
    			{
    				name: "parameterRef",
    				type: "ResourceParameter",
    				isAttr: true,
    				isReference: true
    			}
    		],
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "ResourceAssignmentExpression",
    		properties: [
    			{
    				name: "expression",
    				type: "Expression",
    				xml: {
    					serialize: "xsi:type"
    				}
    			}
    		],
    		superClass: [
    			"BaseElement"
    		]
    	},
    	{
    		name: "Import",
    		properties: [
    			{
    				name: "importType",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "location",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "namespace",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Definitions",
    		superClass: [
    			"BaseElement"
    		],
    		properties: [
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "targetNamespace",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "expressionLanguage",
    				"default": "http://www.w3.org/1999/XPath",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "typeLanguage",
    				"default": "http://www.w3.org/2001/XMLSchema",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "imports",
    				type: "Import",
    				isMany: true
    			},
    			{
    				name: "extensions",
    				type: "Extension",
    				isMany: true
    			},
    			{
    				name: "rootElements",
    				type: "RootElement",
    				isMany: true
    			},
    			{
    				name: "diagrams",
    				isMany: true,
    				type: "bpmndi:BPMNDiagram"
    			},
    			{
    				name: "exporter",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "relationships",
    				type: "Relationship",
    				isMany: true
    			},
    			{
    				name: "exporterVersion",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	}
    ];
    var enumerations$3 = [
    	{
    		name: "ProcessType",
    		literalValues: [
    			{
    				name: "None"
    			},
    			{
    				name: "Public"
    			},
    			{
    				name: "Private"
    			}
    		]
    	},
    	{
    		name: "GatewayDirection",
    		literalValues: [
    			{
    				name: "Unspecified"
    			},
    			{
    				name: "Converging"
    			},
    			{
    				name: "Diverging"
    			},
    			{
    				name: "Mixed"
    			}
    		]
    	},
    	{
    		name: "EventBasedGatewayType",
    		literalValues: [
    			{
    				name: "Parallel"
    			},
    			{
    				name: "Exclusive"
    			}
    		]
    	},
    	{
    		name: "RelationshipDirection",
    		literalValues: [
    			{
    				name: "None"
    			},
    			{
    				name: "Forward"
    			},
    			{
    				name: "Backward"
    			},
    			{
    				name: "Both"
    			}
    		]
    	},
    	{
    		name: "ItemKind",
    		literalValues: [
    			{
    				name: "Physical"
    			},
    			{
    				name: "Information"
    			}
    		]
    	},
    	{
    		name: "ChoreographyLoopType",
    		literalValues: [
    			{
    				name: "None"
    			},
    			{
    				name: "Standard"
    			},
    			{
    				name: "MultiInstanceSequential"
    			},
    			{
    				name: "MultiInstanceParallel"
    			}
    		]
    	},
    	{
    		name: "AssociationDirection",
    		literalValues: [
    			{
    				name: "None"
    			},
    			{
    				name: "One"
    			},
    			{
    				name: "Both"
    			}
    		]
    	},
    	{
    		name: "MultiInstanceBehavior",
    		literalValues: [
    			{
    				name: "None"
    			},
    			{
    				name: "One"
    			},
    			{
    				name: "All"
    			},
    			{
    				name: "Complex"
    			}
    		]
    	},
    	{
    		name: "AdHocOrdering",
    		literalValues: [
    			{
    				name: "Parallel"
    			},
    			{
    				name: "Sequential"
    			}
    		]
    	}
    ];
    var xml$1 = {
    	tagAlias: "lowerCase",
    	typePrefix: "t"
    };
    var BpmnPackage = {
    	name: name$5,
    	uri: uri$5,
    	prefix: prefix$5,
    	associations: associations$5,
    	types: types$5,
    	enumerations: enumerations$3,
    	xml: xml$1
    };

    var name$4 = "BPMNDI";
    var uri$4 = "http://www.omg.org/spec/BPMN/20100524/DI";
    var prefix$4 = "bpmndi";
    var types$4 = [
    	{
    		name: "BPMNDiagram",
    		properties: [
    			{
    				name: "plane",
    				type: "BPMNPlane",
    				redefines: "di:Diagram#rootElement"
    			},
    			{
    				name: "labelStyle",
    				type: "BPMNLabelStyle",
    				isMany: true
    			}
    		],
    		superClass: [
    			"di:Diagram"
    		]
    	},
    	{
    		name: "BPMNPlane",
    		properties: [
    			{
    				name: "bpmnElement",
    				isAttr: true,
    				isReference: true,
    				type: "bpmn:BaseElement",
    				redefines: "di:DiagramElement#modelElement"
    			}
    		],
    		superClass: [
    			"di:Plane"
    		]
    	},
    	{
    		name: "BPMNShape",
    		properties: [
    			{
    				name: "bpmnElement",
    				isAttr: true,
    				isReference: true,
    				type: "bpmn:BaseElement",
    				redefines: "di:DiagramElement#modelElement"
    			},
    			{
    				name: "isHorizontal",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "isExpanded",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "isMarkerVisible",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "label",
    				type: "BPMNLabel"
    			},
    			{
    				name: "isMessageVisible",
    				isAttr: true,
    				type: "Boolean"
    			},
    			{
    				name: "participantBandKind",
    				type: "ParticipantBandKind",
    				isAttr: true
    			},
    			{
    				name: "choreographyActivityShape",
    				type: "BPMNShape",
    				isAttr: true,
    				isReference: true
    			}
    		],
    		superClass: [
    			"di:LabeledShape"
    		]
    	},
    	{
    		name: "BPMNEdge",
    		properties: [
    			{
    				name: "label",
    				type: "BPMNLabel"
    			},
    			{
    				name: "bpmnElement",
    				isAttr: true,
    				isReference: true,
    				type: "bpmn:BaseElement",
    				redefines: "di:DiagramElement#modelElement"
    			},
    			{
    				name: "sourceElement",
    				isAttr: true,
    				isReference: true,
    				type: "di:DiagramElement",
    				redefines: "di:Edge#source"
    			},
    			{
    				name: "targetElement",
    				isAttr: true,
    				isReference: true,
    				type: "di:DiagramElement",
    				redefines: "di:Edge#target"
    			},
    			{
    				name: "messageVisibleKind",
    				type: "MessageVisibleKind",
    				isAttr: true,
    				"default": "initiating"
    			}
    		],
    		superClass: [
    			"di:LabeledEdge"
    		]
    	},
    	{
    		name: "BPMNLabel",
    		properties: [
    			{
    				name: "labelStyle",
    				type: "BPMNLabelStyle",
    				isAttr: true,
    				isReference: true,
    				redefines: "di:DiagramElement#style"
    			}
    		],
    		superClass: [
    			"di:Label"
    		]
    	},
    	{
    		name: "BPMNLabelStyle",
    		properties: [
    			{
    				name: "font",
    				type: "dc:Font"
    			}
    		],
    		superClass: [
    			"di:Style"
    		]
    	}
    ];
    var enumerations$2 = [
    	{
    		name: "ParticipantBandKind",
    		literalValues: [
    			{
    				name: "top_initiating"
    			},
    			{
    				name: "middle_initiating"
    			},
    			{
    				name: "bottom_initiating"
    			},
    			{
    				name: "top_non_initiating"
    			},
    			{
    				name: "middle_non_initiating"
    			},
    			{
    				name: "bottom_non_initiating"
    			}
    		]
    	},
    	{
    		name: "MessageVisibleKind",
    		literalValues: [
    			{
    				name: "initiating"
    			},
    			{
    				name: "non_initiating"
    			}
    		]
    	}
    ];
    var associations$4 = [
    ];
    var BpmnDiPackage = {
    	name: name$4,
    	uri: uri$4,
    	prefix: prefix$4,
    	types: types$4,
    	enumerations: enumerations$2,
    	associations: associations$4
    };

    var name$3 = "DC";
    var uri$3 = "http://www.omg.org/spec/DD/20100524/DC";
    var prefix$3 = "dc";
    var types$3 = [
    	{
    		name: "Boolean"
    	},
    	{
    		name: "Integer"
    	},
    	{
    		name: "Real"
    	},
    	{
    		name: "String"
    	},
    	{
    		name: "Font",
    		properties: [
    			{
    				name: "name",
    				type: "String",
    				isAttr: true
    			},
    			{
    				name: "size",
    				type: "Real",
    				isAttr: true
    			},
    			{
    				name: "isBold",
    				type: "Boolean",
    				isAttr: true
    			},
    			{
    				name: "isItalic",
    				type: "Boolean",
    				isAttr: true
    			},
    			{
    				name: "isUnderline",
    				type: "Boolean",
    				isAttr: true
    			},
    			{
    				name: "isStrikeThrough",
    				type: "Boolean",
    				isAttr: true
    			}
    		]
    	},
    	{
    		name: "Point",
    		properties: [
    			{
    				name: "x",
    				type: "Real",
    				"default": "0",
    				isAttr: true
    			},
    			{
    				name: "y",
    				type: "Real",
    				"default": "0",
    				isAttr: true
    			}
    		]
    	},
    	{
    		name: "Bounds",
    		properties: [
    			{
    				name: "x",
    				type: "Real",
    				"default": "0",
    				isAttr: true
    			},
    			{
    				name: "y",
    				type: "Real",
    				"default": "0",
    				isAttr: true
    			},
    			{
    				name: "width",
    				type: "Real",
    				isAttr: true
    			},
    			{
    				name: "height",
    				type: "Real",
    				isAttr: true
    			}
    		]
    	}
    ];
    var associations$3 = [
    ];
    var DcPackage = {
    	name: name$3,
    	uri: uri$3,
    	prefix: prefix$3,
    	types: types$3,
    	associations: associations$3
    };

    var name$2 = "DI";
    var uri$2 = "http://www.omg.org/spec/DD/20100524/DI";
    var prefix$2 = "di";
    var types$2 = [
    	{
    		name: "DiagramElement",
    		isAbstract: true,
    		properties: [
    			{
    				name: "id",
    				isAttr: true,
    				isId: true,
    				type: "String"
    			},
    			{
    				name: "extension",
    				type: "Extension"
    			},
    			{
    				name: "owningDiagram",
    				type: "Diagram",
    				isReadOnly: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "owningElement",
    				type: "DiagramElement",
    				isReadOnly: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "modelElement",
    				isReadOnly: true,
    				isVirtual: true,
    				isReference: true,
    				type: "Element"
    			},
    			{
    				name: "style",
    				type: "Style",
    				isReadOnly: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "ownedElement",
    				type: "DiagramElement",
    				isReadOnly: true,
    				isMany: true,
    				isVirtual: true
    			}
    		]
    	},
    	{
    		name: "Node",
    		isAbstract: true,
    		superClass: [
    			"DiagramElement"
    		]
    	},
    	{
    		name: "Edge",
    		isAbstract: true,
    		superClass: [
    			"DiagramElement"
    		],
    		properties: [
    			{
    				name: "source",
    				type: "DiagramElement",
    				isReadOnly: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "target",
    				type: "DiagramElement",
    				isReadOnly: true,
    				isVirtual: true,
    				isReference: true
    			},
    			{
    				name: "waypoint",
    				isUnique: false,
    				isMany: true,
    				type: "dc:Point",
    				xml: {
    					serialize: "xsi:type"
    				}
    			}
    		]
    	},
    	{
    		name: "Diagram",
    		isAbstract: true,
    		properties: [
    			{
    				name: "id",
    				isAttr: true,
    				isId: true,
    				type: "String"
    			},
    			{
    				name: "rootElement",
    				type: "DiagramElement",
    				isReadOnly: true,
    				isVirtual: true
    			},
    			{
    				name: "name",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "documentation",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "resolution",
    				isAttr: true,
    				type: "Real"
    			},
    			{
    				name: "ownedStyle",
    				type: "Style",
    				isReadOnly: true,
    				isMany: true,
    				isVirtual: true
    			}
    		]
    	},
    	{
    		name: "Shape",
    		isAbstract: true,
    		superClass: [
    			"Node"
    		],
    		properties: [
    			{
    				name: "bounds",
    				type: "dc:Bounds"
    			}
    		]
    	},
    	{
    		name: "Plane",
    		isAbstract: true,
    		superClass: [
    			"Node"
    		],
    		properties: [
    			{
    				name: "planeElement",
    				type: "DiagramElement",
    				subsettedProperty: "DiagramElement-ownedElement",
    				isMany: true
    			}
    		]
    	},
    	{
    		name: "LabeledEdge",
    		isAbstract: true,
    		superClass: [
    			"Edge"
    		],
    		properties: [
    			{
    				name: "ownedLabel",
    				type: "Label",
    				isReadOnly: true,
    				subsettedProperty: "DiagramElement-ownedElement",
    				isMany: true,
    				isVirtual: true
    			}
    		]
    	},
    	{
    		name: "LabeledShape",
    		isAbstract: true,
    		superClass: [
    			"Shape"
    		],
    		properties: [
    			{
    				name: "ownedLabel",
    				type: "Label",
    				isReadOnly: true,
    				subsettedProperty: "DiagramElement-ownedElement",
    				isMany: true,
    				isVirtual: true
    			}
    		]
    	},
    	{
    		name: "Label",
    		isAbstract: true,
    		superClass: [
    			"Node"
    		],
    		properties: [
    			{
    				name: "bounds",
    				type: "dc:Bounds"
    			}
    		]
    	},
    	{
    		name: "Style",
    		isAbstract: true,
    		properties: [
    			{
    				name: "id",
    				isAttr: true,
    				isId: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "Extension",
    		properties: [
    			{
    				name: "values",
    				isMany: true,
    				type: "Element"
    			}
    		]
    	}
    ];
    var associations$2 = [
    ];
    var xml = {
    	tagAlias: "lowerCase"
    };
    var DiPackage = {
    	name: name$2,
    	uri: uri$2,
    	prefix: prefix$2,
    	types: types$2,
    	associations: associations$2,
    	xml: xml
    };

    var name$1 = "bpmn.io colors for BPMN";
    var uri$1 = "http://bpmn.io/schema/bpmn/biocolor/1.0";
    var prefix$1 = "bioc";
    var types$1 = [
    	{
    		name: "ColoredShape",
    		"extends": [
    			"bpmndi:BPMNShape"
    		],
    		properties: [
    			{
    				name: "stroke",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "fill",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ColoredEdge",
    		"extends": [
    			"bpmndi:BPMNEdge"
    		],
    		properties: [
    			{
    				name: "stroke",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "fill",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	}
    ];
    var enumerations$1 = [
    ];
    var associations$1 = [
    ];
    var BiocPackage = {
    	name: name$1,
    	uri: uri$1,
    	prefix: prefix$1,
    	types: types$1,
    	enumerations: enumerations$1,
    	associations: associations$1
    };

    var name = "BPMN in Color";
    var uri = "http://www.omg.org/spec/BPMN/non-normative/color/1.0";
    var prefix = "color";
    var types = [
    	{
    		name: "ColoredLabel",
    		"extends": [
    			"bpmndi:BPMNLabel"
    		],
    		properties: [
    			{
    				name: "color",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ColoredShape",
    		"extends": [
    			"bpmndi:BPMNShape"
    		],
    		properties: [
    			{
    				name: "background-color",
    				isAttr: true,
    				type: "String"
    			},
    			{
    				name: "border-color",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	},
    	{
    		name: "ColoredEdge",
    		"extends": [
    			"bpmndi:BPMNEdge"
    		],
    		properties: [
    			{
    				name: "border-color",
    				isAttr: true,
    				type: "String"
    			}
    		]
    	}
    ];
    var enumerations = [
    ];
    var associations = [
    ];
    var BpmnInColorPackage = {
    	name: name,
    	uri: uri,
    	prefix: prefix,
    	types: types,
    	enumerations: enumerations,
    	associations: associations
    };

    var packages = {
      bpmn: BpmnPackage,
      bpmndi: BpmnDiPackage,
      dc: DcPackage,
      di: DiPackage,
      bioc: BiocPackage,
      color: BpmnInColorPackage
    };

    function simple(additionalPackages, options) {
      var pks = assign$1({}, packages, additionalPackages);

      return new BpmnModdle(pks, options);
    }

    /**
     * @typedef {import('diagram-js/lib/i18n/translate/translate').default} Translate
     *
     * @typedef {import('../model/Types').ModdleElement} ModdleElement
     */

    /**
     * Returns true if an element is of the given meta-model type.
     *
     * @param {ModdleElement} element
     * @param {string} type
     *
     * @return {boolean}
     */
    function is(element, type) {
      return element.$instanceOf(type);
    }


    /**
     * Find a suitable display candidate for definitions where the DI does not
     * correctly specify one.
     *
     * @param {ModdleElement}
     *
     * @return {ModdleElement}
     */
    function findDisplayCandidate(definitions) {
      return find$1(definitions.rootElements, function(e) {
        return is(e, 'bpmn:Process') || is(e, 'bpmn:Collaboration');
      });
    }

    /**
     * @param {Function} handler
     * @param {Translate} translate
     */
    function BpmnTreeWalker(handler, translate) {

      // list of containers already walked
      var handledElements = {};

      // list of elements to handle deferred to ensure
      // prerequisites are drawn
      var deferred = [];

      var diMap = {};

      // Helpers //////////////////////

      function contextual(fn, ctx) {
        return function(e) {
          fn(e, ctx);
        };
      }

      function handled(element) {
        handledElements[element.id] = element;
      }

      function isHandled(element) {
        return handledElements[element.id];
      }

      function visit(element, ctx) {

        var gfx = element.gfx;

        // avoid multiple rendering of elements
        if (gfx) {
          throw new Error(
            translate('already rendered {element}', { element: elementToString(element) })
          );
        }

        // call handler
        return handler.element(element, diMap[element.id], ctx);
      }

      function visitRoot(element, diagram) {
        return handler.root(element, diMap[element.id], diagram);
      }

      function visitIfDi(element, ctx) {

        try {
          var gfx = diMap[element.id] && visit(element, ctx);

          handled(element);

          return gfx;
        } catch (e) {
          logError(e.message, { element: element, error: e });

          console.error(translate('failed to import {element}', { element: elementToString(element) }));
          console.error(e);
        }
      }

      function logError(message, context) {
        handler.error(message, context);
      }

      // DI handling //////////////////////

      var registerDi = this.registerDi = function registerDi(di) {
        var bpmnElement = di.bpmnElement;

        if (bpmnElement) {
          if (diMap[bpmnElement.id]) {
            logError(
              translate('multiple DI elements defined for {element}', {
                element: elementToString(bpmnElement)
              }),
              { element: bpmnElement }
            );
          } else {
            diMap[bpmnElement.id] = di;

            ensureCompatDiRef(bpmnElement);
          }
        } else {
          logError(
            translate('no bpmnElement referenced in {element}', {
              element: elementToString(di)
            }),
            { element: di }
          );
        }
      };

      function handleDiagram(diagram) {
        handlePlane(diagram.plane);
      }

      function handlePlane(plane) {
        registerDi(plane);

        forEach$1(plane.planeElement, handlePlaneElement);
      }

      function handlePlaneElement(planeElement) {
        registerDi(planeElement);
      }


      // Semantic handling //////////////////////

      /**
       * Handle definitions and return the rendered diagram (if any).
       *
       * @param {ModdleElement} definitions to walk and import
       * @param {ModdleElement} [diagram] specific diagram to import and display
       *
       * @throws {Error} if no diagram to display could be found
       */
      this.handleDefinitions = function handleDefinitions(definitions, diagram) {

        // make sure we walk the correct bpmnElement

        var diagrams = definitions.diagrams;

        if (diagram && diagrams.indexOf(diagram) === -1) {
          throw new Error(translate('diagram not part of bpmn:Definitions'));
        }

        if (!diagram && diagrams && diagrams.length) {
          diagram = diagrams[0];
        }

        // no diagram -> nothing to import
        if (!diagram) {
          throw new Error(translate('no diagram to display'));
        }

        // load DI from selected diagram only
        diMap = {};
        handleDiagram(diagram);


        var plane = diagram.plane;

        if (!plane) {
          throw new Error(translate(
            'no plane for {element}',
            { element: elementToString(diagram) }
          ));
        }

        var rootElement = plane.bpmnElement;

        // ensure we default to a suitable display candidate (process or collaboration),
        // even if non is specified in DI
        if (!rootElement) {
          rootElement = findDisplayCandidate(definitions);

          if (!rootElement) {
            throw new Error(translate('no process or collaboration to display'));
          } else {

            logError(
              translate('correcting missing bpmnElement on {plane} to {rootElement}', {
                plane: elementToString(plane),
                rootElement: elementToString(rootElement)
              })
            );

            // correct DI on the fly
            plane.bpmnElement = rootElement;
            registerDi(plane);
          }
        }


        var ctx = visitRoot(rootElement, plane);

        if (is(rootElement, 'bpmn:Process') || is(rootElement, 'bpmn:SubProcess')) {
          handleProcess(rootElement, ctx);
        } else if (is(rootElement, 'bpmn:Collaboration')) {
          handleCollaboration(rootElement, ctx);

          // force drawing of everything not yet drawn that is part of the target DI
          handleUnhandledProcesses(definitions.rootElements, ctx);
        } else {
          throw new Error(
            translate('unsupported bpmnElement for {plane}: {rootElement}', {
              plane: elementToString(plane),
              rootElement: elementToString(rootElement)
            })
          );
        }

        // handle all deferred elements
        handleDeferred(deferred);
      };

      var handleDeferred = this.handleDeferred = function handleDeferred() {

        var fn;

        // drain deferred until empty
        while (deferred.length) {
          fn = deferred.shift();

          fn();
        }
      };

      function handleProcess(process, context) {
        handleFlowElementsContainer(process, context);
        handleIoSpecification(process.ioSpecification, context);

        handleArtifacts(process.artifacts, context);

        // log process handled
        handled(process);
      }

      function handleUnhandledProcesses(rootElements, ctx) {

        // walk through all processes that have not yet been drawn and draw them
        // if they contain lanes with DI information.
        // we do this to pass the free-floating lane test cases in the MIWG test suite
        var processes = filter(rootElements, function(e) {
          return !isHandled(e) && is(e, 'bpmn:Process') && e.laneSets;
        });

        processes.forEach(contextual(handleProcess, ctx));
      }

      function handleMessageFlow(messageFlow, context) {
        visitIfDi(messageFlow, context);
      }

      function handleMessageFlows(messageFlows, context) {
        forEach$1(messageFlows, contextual(handleMessageFlow, context));
      }

      function handleDataAssociation(association, context) {
        visitIfDi(association, context);
      }

      function handleDataInput(dataInput, context) {
        visitIfDi(dataInput, context);
      }

      function handleDataOutput(dataOutput, context) {
        visitIfDi(dataOutput, context);
      }

      function handleArtifact(artifact, context) {

        // bpmn:TextAnnotation
        // bpmn:Group
        // bpmn:Association

        visitIfDi(artifact, context);
      }

      function handleArtifacts(artifacts, context) {

        forEach$1(artifacts, function(e) {
          if (is(e, 'bpmn:Association')) {
            deferred.push(function() {
              handleArtifact(e, context);
            });
          } else {
            handleArtifact(e, context);
          }
        });
      }

      function handleIoSpecification(ioSpecification, context) {

        if (!ioSpecification) {
          return;
        }

        forEach$1(ioSpecification.dataInputs, contextual(handleDataInput, context));
        forEach$1(ioSpecification.dataOutputs, contextual(handleDataOutput, context));
      }

      var handleSubProcess = this.handleSubProcess = function handleSubProcess(subProcess, context) {
        handleFlowElementsContainer(subProcess, context);
        handleArtifacts(subProcess.artifacts, context);
      };

      function handleFlowNode(flowNode, context) {
        var childCtx = visitIfDi(flowNode, context);

        if (is(flowNode, 'bpmn:SubProcess')) {
          handleSubProcess(flowNode, childCtx || context);
        }

        if (is(flowNode, 'bpmn:Activity')) {
          handleIoSpecification(flowNode.ioSpecification, context);
        }

        // defer handling of associations
        // affected types:
        //
        //   * bpmn:Activity
        //   * bpmn:ThrowEvent
        //   * bpmn:CatchEvent
        //
        deferred.push(function() {
          forEach$1(flowNode.dataInputAssociations, contextual(handleDataAssociation, context));
          forEach$1(flowNode.dataOutputAssociations, contextual(handleDataAssociation, context));
        });
      }

      function handleSequenceFlow(sequenceFlow, context) {
        visitIfDi(sequenceFlow, context);
      }

      function handleDataElement(dataObject, context) {
        visitIfDi(dataObject, context);
      }

      function handleLane(lane, context) {

        deferred.push(function() {

          var newContext = visitIfDi(lane, context);

          if (lane.childLaneSet) {
            handleLaneSet(lane.childLaneSet, newContext || context);
          }

          wireFlowNodeRefs(lane);
        });
      }

      function handleLaneSet(laneSet, context) {
        forEach$1(laneSet.lanes, contextual(handleLane, context));
      }

      function handleLaneSets(laneSets, context) {
        forEach$1(laneSets, contextual(handleLaneSet, context));
      }

      function handleFlowElementsContainer(container, context) {
        handleFlowElements(container.flowElements, context);

        if (container.laneSets) {
          handleLaneSets(container.laneSets, context);
        }
      }

      function handleFlowElements(flowElements, context) {
        forEach$1(flowElements, function(e) {
          if (is(e, 'bpmn:SequenceFlow')) {
            deferred.push(function() {
              handleSequenceFlow(e, context);
            });
          } else if (is(e, 'bpmn:BoundaryEvent')) {
            deferred.unshift(function() {
              handleFlowNode(e, context);
            });
          } else if (is(e, 'bpmn:FlowNode')) {
            handleFlowNode(e, context);
          } else if (is(e, 'bpmn:DataObject')) ; else if (is(e, 'bpmn:DataStoreReference')) {
            handleDataElement(e, context);
          } else if (is(e, 'bpmn:DataObjectReference')) {
            handleDataElement(e, context);
          } else {
            logError(
              translate('unrecognized flowElement {element} in context {context}', {
                element: elementToString(e),
                context: (context ? elementToString(context.businessObject) : 'null')
              }),
              { element: e, context: context }
            );
          }
        });
      }

      function handleParticipant(participant, context) {
        var newCtx = visitIfDi(participant, context);

        var process = participant.processRef;
        if (process) {
          handleProcess(process, newCtx || context);
        }
      }

      function handleCollaboration(collaboration, context) {

        forEach$1(collaboration.participants, contextual(handleParticipant, context));

        handleArtifacts(collaboration.artifacts, context);

        // handle message flows latest in the process
        deferred.push(function() {
          handleMessageFlows(collaboration.messageFlows, context);
        });
      }


      function wireFlowNodeRefs(lane) {

        // wire the virtual flowNodeRefs <-> relationship
        forEach$1(lane.flowNodeRef, function(flowNode) {
          var lanes = flowNode.get('lanes');

          if (lanes) {
            lanes.push(lane);
          }
        });
      }
    }

    /**
     * @typedef {import('../model/Types').ModdleElement} ModdleElement
     *
     * @typedef { {
     *   warnings: string[];
     * } } ImportBPMNDiagramResult
     *
     * @typedef {ImportBPMNDiagramResult & Error} ImportBPMNDiagramError
     */

    /**
     * Import the definitions into a diagram.
     *
     * Errors and warnings are reported through the specified callback.
     *
     * @param {ModdleElement} diagram
     * @param {ModdleElement} definitions
     * @param {ModdleElement} [bpmnDiagram] The diagram to be rendered (if not
     * provided, the first one will be rendered).
     *
     * @return {Promise<ImportBPMNDiagramResult>}
     */
    function importBpmnDiagram(diagram, definitions, bpmnDiagram) {

      var importer,
          eventBus,
          translate,
          canvas;

      var error,
          warnings = [];

      /**
       * Walk the diagram semantically, importing (=drawing)
       * all elements you encounter.
       *
       * @param {ModdleElement} definitions
       * @param {ModdleElement} bpmnDiagram
       */
      function render(definitions, bpmnDiagram) {

        var visitor = {

          root: function(element, di) {
            return importer.add(element, di);
          },

          element: function(element, di, parentShape) {
            return importer.add(element, di, parentShape);
          },

          error: function(message, context) {
            warnings.push({ message: message, context: context });
          }
        };

        var walker = new BpmnTreeWalker(visitor, translate);


        bpmnDiagram = bpmnDiagram || (definitions.diagrams && definitions.diagrams[0]);

        var diagramsToImport = getDiagramsToImport(definitions, bpmnDiagram);

        if (!diagramsToImport) {
          throw new Error(translate('no diagram to display'));
        }

        // traverse BPMN 2.0 document model,
        // starting at definitions
        forEach$1(diagramsToImport, function(diagram) {
          walker.handleDefinitions(definitions, diagram);
        });

        var rootId = bpmnDiagram.plane.bpmnElement.id;

        // we do need to account for different ways we create root elements
        // each nested imported <root> do have the `_plane` suffix, while
        // the root <root> is found under the business object ID
        canvas.setRootElement(
          canvas.findRoot(rootId + '_plane') || canvas.findRoot(rootId)
        );
      }

      return new Promise(function(resolve, reject) {
        try {
          importer = diagram.get('bpmnImporter');
          eventBus = diagram.get('eventBus');
          translate = diagram.get('translate');
          canvas = diagram.get('canvas');

          eventBus.fire('import.render.start', { definitions: definitions });

          render(definitions, bpmnDiagram);

          eventBus.fire('import.render.complete', {
            error: error,
            warnings: warnings
          });

          return resolve({ warnings: warnings });
        } catch (e) {

          e.warnings = warnings;
          return reject(e);
        }
      });
    }

    /**
     * Returns all diagrams in the same hierarchy as the requested diagram.
     * Includes all parent and sub process diagrams.
     *
     * @param {ModdleElement} definitions
     * @param {ModdleElement} bpmnDiagram
     *
     * @return {ModdleElement[]}
     */
    function getDiagramsToImport(definitions, bpmnDiagram) {
      if (!bpmnDiagram) {
        return;
      }

      var bpmnElement = bpmnDiagram.plane.bpmnElement,
          rootElement = bpmnElement;

      if (!is$2(bpmnElement, 'bpmn:Process') && !is$2(bpmnElement, 'bpmn:Collaboration')) {
        rootElement = findRootProcess(bpmnElement);
      }

      // in case the process is part of a collaboration, the plane references the
      // collaboration, not the process
      var collaboration;

      if (is$2(rootElement, 'bpmn:Collaboration')) {
        collaboration = rootElement;
      } else {
        collaboration = find$1(definitions.rootElements, function(element) {
          if (!is$2(element, 'bpmn:Collaboration')) {
            return;
          }

          return find$1(element.participants, function(participant) {
            return participant.processRef === rootElement;
          });
        });
      }

      var rootElements = [ rootElement ];

      // all collaboration processes can contain sub-diagrams
      if (collaboration) {
        rootElements = map$1(collaboration.participants, function(participant) {
          return participant.processRef;
        });

        rootElements.push(collaboration);
      }

      var allChildren = selfAndAllFlowElements(rootElements);

      // if we have multiple diagrams referencing the same element, we
      // use the first in the file
      var diagramsToImport = [ bpmnDiagram ];
      var handledElements = [ bpmnElement ];

      forEach$1(definitions.diagrams, function(diagram) {
        var businessObject = diagram.plane.bpmnElement;

        if (
          allChildren.indexOf(businessObject) !== -1 &&
          handledElements.indexOf(businessObject) === -1
        ) {
          diagramsToImport.push(diagram);
          handledElements.push(businessObject);
        }
      });


      return diagramsToImport;
    }

    function selfAndAllFlowElements(elements) {
      var result = [];

      forEach$1(elements, function(element) {
        if (!element) {
          return;
        }

        result.push(element);

        result = result.concat(selfAndAllFlowElements(element.flowElements));
      });

      return result;
    }

    function findRootProcess(element) {
      var parent = element;

      while (parent) {
        if (is$2(parent, 'bpmn:Process')) {
          return parent;
        }

        parent = parent.$parent;
      }
    }

    /**
     * This file must not be changed or exchanged.
     *
     * @see http://bpmn.io/license for more information.
     */


    // inlined ../../resources/logo.svg
    var BPMNIO_LOGO_SVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.02 5.57" width="53" height="21"><path fill="currentColor" d="M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"/><path fill="currentColor" d="M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"/></svg>';

    var BPMNIO_IMG = BPMNIO_LOGO_SVG;

    var LOGO_STYLES = {
      verticalAlign: 'middle'
    };

    var LINK_STYLES = {
      'color': '#404040'
    };

    var LIGHTBOX_STYLES = {
      'zIndex': '1001',
      'position': 'fixed',
      'top': '0',
      'left': '0',
      'right': '0',
      'bottom': '0'
    };

    var BACKDROP_STYLES = {
      'width': '100%',
      'height': '100%',
      'background': 'rgba(40,40,40,0.2)'
    };

    var NOTICE_STYLES = {
      'position': 'absolute',
      'left': '50%',
      'top': '40%',
      'transform': 'translate(-50%)',
      'width': '260px',
      'padding': '10px',
      'background': 'white',
      'boxShadow': '0 1px 4px rgba(0,0,0,0.3)',
      'fontFamily': 'Helvetica, Arial, sans-serif',
      'fontSize': '14px',
      'display': 'flex',
      'lineHeight': '1.3'
    };

    var LIGHTBOX_MARKUP =
      '<div class="bjs-powered-by-lightbox">' +
        '<div class="backdrop"></div>' +
        '<div class="notice">' +
          '<a href="https://bpmn.io" target="_blank" rel="noopener" class="link">' +
            BPMNIO_IMG +
          '</a>' +
          '<span>' +
            'Web-based tooling for BPMN, DMN and forms ' +
            'powered by <a href="https://bpmn.io" target="_blank" rel="noopener">bpmn.io</a>.' +
          '</span>' +
        '</div>' +
      '</div>';


    var lightbox;

    function createLightbox() {
      lightbox = domify$1(LIGHTBOX_MARKUP);

      assign(lightbox, LIGHTBOX_STYLES);
      assign(query('svg', lightbox), LOGO_STYLES);
      assign(query('.backdrop', lightbox), BACKDROP_STYLES);
      assign(query('.notice', lightbox), NOTICE_STYLES);
      assign(query('.link', lightbox), LINK_STYLES, {
        'margin': '15px 20px 15px 10px',
        'alignSelf': 'center'
      });
    }

    function open() {

      if (!lightbox) {
        createLightbox();

        delegate.bind(lightbox, '.backdrop', 'click', function(event) {
          document.body.removeChild(lightbox);
        });
      }

      document.body.appendChild(lightbox);
    }

    /**
     * The code in the <project-logo></project-logo> area
     * must not be changed.
     *
     * @see http://bpmn.io/license for more information.
     */

    /**
     * @template T
     *
     * @typedef {import('diagram-js/lib/core/EventBus').EventBusEventCallback<T>} EventBusEventCallback
     */

    /**
     * @typedef {import('didi').ModuleDeclaration} ModuleDeclaration
     *
     * @typedef {import('./model/Types').Moddle} Moddle
     * @typedef {import('./model/Types').ModdleElement} ModdleElement
     * @typedef {import('./model/Types').ModdleExtension} ModdleExtension
     *
     * @typedef { {
     *   width?: number|string;
     *   height?: number|string;
     *   position?: string;
     *   container?: string|HTMLElement;
     *   moddleExtensions?: ModdleExtensions;
     *   additionalModules?: ModuleDeclaration[];
     * } & Record<string, any> } BaseViewerOptions
     *
     * @typedef {Record<string, ModdleElement>} ModdleElementsById
     *
     * @typedef { {
     *   [key: string]: ModdleExtension;
     * } } ModdleExtensions
     *
     * @typedef { {
     *   warnings: string[];
     * } } ImportXMLResult
     *
     * @typedef {ImportXMLResult & Error} ImportXMLError
     *
     * @typedef {ImportXMLResult} ImportDefinitionsResult
     *
     * @typedef {ImportXMLError} ImportDefinitionsError
     *
     * @typedef {ImportXMLResult} OpenResult
     *
     * @typedef {ImportXMLError} OpenError
     *
     * @typedef { {
     *   format?: boolean;
     *   preamble?: boolean;
     * } } SaveXMLOptions
     *
     * @typedef { {
     *   xml?: string;
     *   error?: Error;
     * } } SaveXMLResult
     *
     * @typedef { {
     *   svg: string;
     * } } SaveSVGResult
     *
     * @typedef { {
     *   xml: string;
     * } } ImportParseStartEvent
     *
     * @typedef { {
     *   error?: ImportXMLError;
     *   definitions?: ModdleElement;
     *   elementsById?: ModdleElementsById;
     *   references?: ModdleElement[];
     *   warnings: string[];
     * } } ImportParseCompleteEvent
     *
     * @typedef { {
     *   error?: ImportXMLError;
     *   warnings: string[];
     * } } ImportDoneEvent
     *
     * @typedef { {
     *   definitions: ModdleElement;
     * } } SaveXMLStartEvent
     *
     * @typedef {SaveXMLResult} SaveXMLDoneEvent
     *
     * @typedef { {
     *   error?: Error;
     *   svg: string;
     * } } SaveSVGDoneEvent
     */

    /**
     * A base viewer for BPMN 2.0 diagrams.
     *
     * Have a look at {@link Viewer}, {@link NavigatedViewer} or {@link Modeler} for
     * bundles that include actual features.
     *
     * @param {BaseViewerOptions} [options] The options to configure the viewer.
     */
    function BaseViewer(options) {

      /**
       * @type {BaseViewerOptions}
       */
      options = assign$1({}, DEFAULT_OPTIONS, options);

      /**
       * @type {Moddle}
       */
      this._moddle = this._createModdle(options);

      /**
       * @type {HTMLElement}
       */
      this._container = this._createContainer(options);

      /* <project-logo> */

      addProjectLogo(this._container);

      /* </project-logo> */

      this._init(this._container, this._moddle, options);
    }

    e(BaseViewer, Diagram);

    /**
     * Parse and render a BPMN 2.0 diagram.
     *
     * Once finished the viewer reports back the result to the
     * provided callback function with (err, warnings).
     *
     * ## Life-Cycle Events
     *
     * During import the viewer will fire life-cycle events:
     *
     *   * import.parse.start (about to read model from XML)
     *   * import.parse.complete (model read; may have worked or not)
     *   * import.render.start (graphical import start)
     *   * import.render.complete (graphical import finished)
     *   * import.done (everything done)
     *
     * You can use these events to hook into the life-cycle.
     *
     * @throws {ImportXMLError} An error thrown during the import of the XML.
     *
     * @fires BaseViewer#ImportParseStartEvent
     * @fires BaseViewer#ImportParseCompleteEvent
     * @fires Importer#ImportRenderStartEvent
     * @fires Importer#ImportRenderCompleteEvent
     * @fires BaseViewer#ImportDoneEvent
     *
     * @param {string} xml The BPMN 2.0 XML to be imported.
     * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or Id of the BPMN diagram to open.
     *
     * @return {Promise<ImportXMLResult>} A promise resolving with warnings that were produced during the import.
     */
    BaseViewer.prototype.importXML = async function importXML(xml, bpmnDiagram) {

      const self = this;

      function ParseCompleteEvent(data) {

        const event = self.get('eventBus').createEvent(data);

        // TODO(nikku): remove with future bpmn-js version
        Object.defineProperty(event, 'context', {
          enumerable: true,
          get: function() {

            console.warn(new Error(
              'import.parse.complete <context> is deprecated ' +
              'and will be removed in future library versions'
            ));

            return {
              warnings: data.warnings,
              references: data.references,
              elementsById: data.elementsById
            };
          }
        });

        return event;
      }

      let aggregatedWarnings = [];
      try {

        // hook in pre-parse listeners +
        // allow xml manipulation

        /**
         * A `import.parse.start` event.
         *
         * @event BaseViewer#ImportParseStartEvent
         * @type {ImportParseStartEvent}
         */
        xml = this._emit('import.parse.start', { xml: xml }) || xml;

        let parseResult;
        try {
          parseResult = await this._moddle.fromXML(xml, 'bpmn:Definitions');
        } catch (error) {
          this._emit('import.parse.complete', {
            error
          });

          throw error;
        }

        let definitions = parseResult.rootElement;
        const references = parseResult.references;
        const parseWarnings = parseResult.warnings;
        const elementsById = parseResult.elementsById;

        aggregatedWarnings = aggregatedWarnings.concat(parseWarnings);

        // hook in post parse listeners +
        // allow definitions manipulation

        /**
         * A `import.parse.complete` event.
         *
         * @event BaseViewer#ImportParseCompleteEvent
         * @type {ImportParseCompleteEvent}
         */
        definitions = this._emit('import.parse.complete', ParseCompleteEvent({
          error: null,
          definitions: definitions,
          elementsById: elementsById,
          references: references,
          warnings: aggregatedWarnings
        })) || definitions;

        const importResult = await this.importDefinitions(definitions, bpmnDiagram);

        aggregatedWarnings = aggregatedWarnings.concat(importResult.warnings);

        /**
         * A `import.parse.complete` event.
         *
         * @event BaseViewer#ImportDoneEvent
         * @type {ImportDoneEvent}
         */
        this._emit('import.done', { error: null, warnings: aggregatedWarnings });

        return { warnings: aggregatedWarnings };
      } catch (err) {
        let error = err;
        aggregatedWarnings = aggregatedWarnings.concat(error.warnings || []);
        addWarningsToError(error, aggregatedWarnings);

        error = checkValidationError(error);

        this._emit('import.done', { error, warnings: error.warnings });

        throw error;
      }
    };

    BaseViewer.prototype.importXML = wrapForCompatibility(BaseViewer.prototype.importXML);


    /**
     * Import parsed definitions and render a BPMN 2.0 diagram.
     *
     * Once finished the viewer reports back the result to the
     * provided callback function with (err, warnings).
     *
     * ## Life-Cycle Events
     *
     * During import the viewer will fire life-cycle events:
     *
     *   * import.render.start (graphical import start)
     *   * import.render.complete (graphical import finished)
     *
     * You can use these events to hook into the life-cycle.
     *
     * @throws {ImportDefinitionsError} An error thrown during the import of the definitions.
     *
     * @param {ModdleElement} definitions The definitions.
     * @param {ModdleElement|string} [bpmnDiagram] The optional diagram or ID of the BPMN diagram to open.
     *
     * @return {Promise<ImportDefinitionsResult>} A promise resolving with warnings that were produced during the import.
     */
    BaseViewer.prototype.importDefinitions = async function importDefinitions(definitions, bpmnDiagram) {
      this._setDefinitions(definitions);
      const result = await this.open(bpmnDiagram);

      return { warnings: result.warnings };
    };

    BaseViewer.prototype.importDefinitions = wrapForCompatibility(BaseViewer.prototype.importDefinitions);


    /**
     * Open diagram of previously imported XML.
     *
     * Once finished the viewer reports back the result to the
     * provided callback function with (err, warnings).
     *
     * ## Life-Cycle Events
     *
     * During switch the viewer will fire life-cycle events:
     *
     *   * import.render.start (graphical import start)
     *   * import.render.complete (graphical import finished)
     *
     * You can use these events to hook into the life-cycle.
     *
     * @throws {OpenError} An error thrown during opening.
     *
     * @param {ModdleElement|string} bpmnDiagramOrId The diagram or Id of the BPMN diagram to open.
     *
     * @return {Promise<OpenResult>} A promise resolving with warnings that were produced during opening.
     */
    BaseViewer.prototype.open = async function open(bpmnDiagramOrId) {

      const definitions = this._definitions;
      let bpmnDiagram = bpmnDiagramOrId;

      if (!definitions) {
        const error = new Error('no XML imported');
        addWarningsToError(error, []);

        throw error;
      }

      if (typeof bpmnDiagramOrId === 'string') {
        bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);

        if (!bpmnDiagram) {
          const error = new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found');
          addWarningsToError(error, []);

          throw error;
        }
      }

      // clear existing rendered diagram
      // catch synchronous exceptions during #clear()
      try {
        this.clear();
      } catch (error) {
        addWarningsToError(error, []);

        throw error;
      }

      // perform graphical import
      const { warnings } = await importBpmnDiagram(this, definitions, bpmnDiagram);

      return { warnings };
    };

    BaseViewer.prototype.open = wrapForCompatibility(BaseViewer.prototype.open);

    /**
     * Export the currently displayed BPMN 2.0 diagram as
     * a BPMN 2.0 XML document.
     *
     * ## Life-Cycle Events
     *
     * During XML saving the viewer will fire life-cycle events:
     *
     *   * saveXML.start (before serialization)
     *   * saveXML.serialized (after xml generation)
     *   * saveXML.done (everything done)
     *
     * You can use these events to hook into the life-cycle.
     *
     * @throws {Error} An error thrown during export.
     *
     * @fires BaseViewer#SaveXMLStart
     * @fires BaseViewer#SaveXMLDone
     *
     * @param {SaveXMLOptions} [options] The options.
     *
     * @return {Promise<SaveXMLResult>} A promise resolving with the XML.
     */
    BaseViewer.prototype.saveXML = async function saveXML(options) {

      options = options || {};

      let definitions = this._definitions,
          error, xml;

      try {
        if (!definitions) {
          throw new Error('no definitions loaded');
        }

        // allow to fiddle around with definitions

        /**
         * A `saveXML.start` event.
         *
         * @event BaseViewer#SaveXMLStartEvent
         * @type {SaveXMLStartEvent}
         */
        definitions = this._emit('saveXML.start', {
          definitions
        }) || definitions;

        const result = await this._moddle.toXML(definitions, options);
        xml = result.xml;

        xml = this._emit('saveXML.serialized', {
          xml
        }) || xml;
      } catch (err) {
        error = err;
      }

      const result = error ? { error } : { xml };

      /**
       * A `saveXML.done` event.
       *
       * @event BaseViewer#SaveXMLDoneEvent
       * @type {SaveXMLDoneEvent}
       */
      this._emit('saveXML.done', result);

      if (error) {
        throw error;
      }

      return result;
    };

    BaseViewer.prototype.saveXML = wrapForCompatibility(BaseViewer.prototype.saveXML);


    /**
     * Export the currently displayed BPMN 2.0 diagram as
     * an SVG image.
     *
     * ## Life-Cycle Events
     *
     * During SVG saving the viewer will fire life-cycle events:
     *
     *   * saveSVG.start (before serialization)
     *   * saveSVG.done (everything done)
     *
     * You can use these events to hook into the life-cycle.
     *
     * @throws {Error} An error thrown during export.
     *
     * @fires BaseViewer#SaveSVGDone
     *
     * @return {Promise<SaveSVGResult>} A promise resolving with the SVG.
     */
    BaseViewer.prototype.saveSVG = async function saveSVG() {
      this._emit('saveSVG.start');

      let svg, err;

      try {
        const canvas = this.get('canvas');

        const contentNode = canvas.getActiveLayer(),
              defsNode = query('defs', canvas._svg);

        const contents = innerSVG(contentNode),
              defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';

        const bbox = contentNode.getBBox();

        svg =
          '<?xml version="1.0" encoding="utf-8"?>\n' +
          '<!-- created with bpmn-js / http://bpmn.io -->\n' +
          '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' +
          '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ' +
          'width="' + bbox.width + '" height="' + bbox.height + '" ' +
          'viewBox="' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '" version="1.1">' +
          defs + contents +
          '</svg>';
      } catch (e) {
        err = e;
      }

      /**
       * A `saveSVG.done` event.
       *
       * @event BaseViewer#SaveSVGDoneEvent
       * @type {SaveSVGDoneEvent}
       */
      this._emit('saveSVG.done', {
        error: err,
        svg: svg
      });

      if (err) {
        throw err;
      }

      return { svg };
    };

    BaseViewer.prototype.saveSVG = wrapForCompatibility(BaseViewer.prototype.saveSVG);

    /**
     * Get a named diagram service.
     *
     * @example
     *
     * const elementRegistry = viewer.get('elementRegistry');
     * const startEventShape = elementRegistry.get('StartEvent_1');
     *
     * @param {string} name
     *
     * @return {Object} diagram service instance
     *
     * @method BaseViewer#get
     */

    /**
     * Invoke a function in the context of this viewer.
     *
     * @example
     *
     * viewer.invoke(function(elementRegistry) {
     *   const startEventShape = elementRegistry.get('StartEvent_1');
     * });
     *
     * @param {Function} fn to be invoked
     *
     * @return {Object} the functions return value
     *
     * @method BaseViewer#invoke
     */


    BaseViewer.prototype._setDefinitions = function(definitions) {
      this._definitions = definitions;
    };

    /**
     * Return modules to instantiate with.
     *
     * @return {ModuleDeclaration[]} The modules.
     */
    BaseViewer.prototype.getModules = function() {
      return this._modules;
    };

    /**
     * Remove all drawn elements from the viewer.
     *
     * After calling this method the viewer can still be reused for opening another
     * diagram.
     */
    BaseViewer.prototype.clear = function() {
      if (!this.getDefinitions()) {

        // no diagram to clear
        return;
      }

      // remove drawn elements
      Diagram.prototype.clear.call(this);
    };

    /**
     * Destroy the viewer instance and remove all its remainders from the document
     * tree.
     */
    BaseViewer.prototype.destroy = function() {

      // diagram destroy
      Diagram.prototype.destroy.call(this);

      // dom detach
      remove$1(this._container);
    };

    /**
     * Register an event listener.
     *
     * Remove an event listener via {@link BaseViewer#off}.
     *
     * @template T
     *
     * @param {string|string[]} events The event(s) to listen to.
     * @param {number} [priority] The priority with which to listen.
     * @param {EventBusEventCallback<T>} callback The callback.
     * @param {any} [that] Value of `this` the callback will be called with.
     */
    BaseViewer.prototype.on = function(events, priority, callback, that) {
      return this.get('eventBus').on(events, priority, callback, that);
    };

    /**
     * Remove an event listener.
     *
     * @param {string|string[]} events The event(s).
     * @param {Function} [callback] The callback.
     */
    BaseViewer.prototype.off = function(events, callback) {
      this.get('eventBus').off(events, callback);
    };

    /**
     * Attach the viewer to an HTML element.
     *
     * @param {HTMLElement} parentNode The parent node to attach to.
     */
    BaseViewer.prototype.attachTo = function(parentNode) {

      if (!parentNode) {
        throw new Error('parentNode required');
      }

      // ensure we detach from the
      // previous, old parent
      this.detach();

      // unwrap jQuery if provided
      if (parentNode.get && parentNode.constructor.prototype.jquery) {
        parentNode = parentNode.get(0);
      }

      if (typeof parentNode === 'string') {
        parentNode = query(parentNode);
      }

      parentNode.appendChild(this._container);

      this._emit('attach', {});

      this.get('canvas').resized();
    };

    /**
     * Get the definitions model element.
     *
     * @return {ModdleElement} The definitions model element.
     */
    BaseViewer.prototype.getDefinitions = function() {
      return this._definitions;
    };

    /**
     * Detach the viewer.
     *
     * @fires BaseViewer#DetachEvent
     */
    BaseViewer.prototype.detach = function() {

      const container = this._container,
            parentNode = container.parentNode;

      if (!parentNode) {
        return;
      }

      /**
       * A `detach` event.
       *
       * @event BaseViewer#DetachEvent
       * @type {Object}
       */
      this._emit('detach', {});

      parentNode.removeChild(container);
    };

    BaseViewer.prototype._init = function(container, moddle, options) {

      const baseModules = options.modules || this.getModules(options),
            additionalModules = options.additionalModules || [],
            staticModules = [
              {
                bpmnjs: [ 'value', this ],
                moddle: [ 'value', moddle ]
              }
            ];

      const diagramModules = [].concat(staticModules, baseModules, additionalModules);

      const diagramOptions = assign$1(omit(options, [ 'additionalModules' ]), {
        canvas: assign$1({}, options.canvas, { container: container }),
        modules: diagramModules
      });

      // invoke diagram constructor
      Diagram.call(this, diagramOptions);

      if (options && options.container) {
        this.attachTo(options.container);
      }
    };

    /**
     * Emit an event on the underlying {@link EventBus}
     *
     * @param  {string} type
     * @param  {Object} event
     *
     * @return {Object} The return value after calling all event listeners.
     */
    BaseViewer.prototype._emit = function(type, event) {
      return this.get('eventBus').fire(type, event);
    };

    /**
     * @param {BaseViewerOptions} options
     *
     * @return {HTMLElement}
     */
    BaseViewer.prototype._createContainer = function(options) {

      const container = domify$1('<div class="bjs-container"></div>');

      assign(container, {
        width: ensureUnit(options.width),
        height: ensureUnit(options.height),
        position: options.position
      });

      return container;
    };

    /**
     * @param {BaseViewerOptions} options
     *
     * @return {Moddle}
     */
    BaseViewer.prototype._createModdle = function(options) {
      const moddleOptions = assign$1({}, this._moddleExtensions, options.moddleExtensions);

      return new simple(moddleOptions);
    };

    BaseViewer.prototype._modules = [];

    // helpers ///////////////

    function addWarningsToError(err, warningsAry) {
      err.warnings = warningsAry;
      return err;
    }

    function checkValidationError(err) {

      // check if we can help the user by indicating wrong BPMN 2.0 xml
      // (in case he or the exporting tool did not get that right)

      const pattern = /unparsable content <([^>]+)> detected([\s\S]*)$/;
      const match = pattern.exec(err.message);

      if (match) {
        err.message =
          'unparsable content <' + match[1] + '> detected; ' +
          'this may indicate an invalid BPMN 2.0 diagram file' + match[2];
      }

      return err;
    }

    const DEFAULT_OPTIONS = {
      width: '100%',
      height: '100%',
      position: 'relative'
    };


    /**
     * Ensure the passed argument is a proper unit (defaulting to px)
     */
    function ensureUnit(val) {
      return val + (isNumber$3(val) ? 'px' : '');
    }


    /**
     * Find BPMNDiagram in definitions by ID
     *
     * @param {ModdleElement<Definitions>} definitions
     * @param {string} diagramId
     *
     * @return {ModdleElement<BPMNDiagram>|null}
     */
    function findBPMNDiagram(definitions, diagramId) {
      if (!diagramId) {
        return null;
      }

      return find$1(definitions.diagrams, function(element) {
        return element.id === diagramId;
      }) || null;
    }

    /**
     * Adds the project logo to the diagram container as
     * required by the bpmn.io license.
     *
     * @see http://bpmn.io/license
     *
     * @param {Element} container
     */
    function addProjectLogo(container) {
      const img = BPMNIO_IMG;

      const linkMarkup =
        '<a href="http://bpmn.io" ' +
        'target="_blank" ' +
        'class="bjs-powered-by" ' +
        'title="Powered by bpmn.io" ' +
        '>' +
        img +
        '</a>';

      const linkElement = domify$1(linkMarkup);

      assign(query('svg', linkElement), LOGO_STYLES);
      assign(linkElement, LINK_STYLES, {
        position: 'absolute',
        bottom: '15px',
        right: '15px',
        zIndex: '100'
      });

      container.appendChild(linkElement);

      event.bind(linkElement, 'click', function(event) {
        open();

        event.preventDefault();
      });
    }

    /* </project-logo> */

    /**
     * @typedef { import('./BaseViewer').BaseViewerOptions } BaseViewerOptions
     */

    /**
     * A viewer for BPMN 2.0 diagrams.
     *
     * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include
     * additional features.
     *
     *
     * ## Extending the Viewer
     *
     * In order to extend the viewer pass extension modules to bootstrap via the
     * `additionalModules` option. An extension module is an object that exposes
     * named services.
     *
     * The following example depicts the integration of a simple
     * logging component that integrates with interaction events:
     *
     *
     * ```javascript
     *
     * // logging component
     * function InteractionLogger(eventBus) {
     *   eventBus.on('element.hover', function(event) {
     *     console.log()
     *   })
     * }
     *
     * InteractionLogger.$inject = [ 'eventBus' ]; // minification save
     *
     * // extension module
     * var extensionModule = {
     *   __init__: [ 'interactionLogger' ],
     *   interactionLogger: [ 'type', InteractionLogger ]
     * };
     *
     * // extend the viewer
     * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });
     * bpmnViewer.importXML(...);
     * ```
     *
     * @param {BaseViewerOptions} [options] The options to configure the viewer.
     */
    function Viewer(options) {
      BaseViewer.call(this, options);
    }

    e(Viewer, BaseViewer);

    // modules the viewer is composed of
    Viewer.prototype._modules = [
      CoreModule$1,
      TranslateModule,
      SelectionModule,
      OverlaysModule,
      DrilldownModdule
    ];

    // default moddle extensions the viewer is composed of
    Viewer.prototype._moddleExtensions = {};

    /**
     * @typedef {import('../../core/EventBus').default} EventBus
     */

    var KEYDOWN_EVENT = 'keyboard.keydown',
        KEYUP_EVENT = 'keyboard.keyup';

    var HANDLE_MODIFIER_ATTRIBUTE = 'input-handle-modified-keys';

    var DEFAULT_PRIORITY = 1000;

    /**
     * A keyboard abstraction that may be activated and
     * deactivated by users at will, consuming global key events
     * and triggering diagram actions.
     *
     * For keys pressed down, keyboard fires `keyboard.keydown` event.
     * The event context contains one field which is `KeyboardEvent` event.
     *
     * The implementation fires the following key events that allow
     * other components to hook into key handling:
     *
     *  - keyboard.bind
     *  - keyboard.unbind
     *  - keyboard.init
     *  - keyboard.destroy
     *
     * All events contain one field which is node.
     *
     * A default binding for the keyboard may be specified via the
     * `keyboard.bindTo` configuration option.
     *
     * @param {Object} config
     * @param {EventBus} eventBus
     */
    function Keyboard(config, eventBus) {
      var self = this;

      this._config = config || {};
      this._eventBus = eventBus;

      this._keydownHandler = this._keydownHandler.bind(this);
      this._keyupHandler = this._keyupHandler.bind(this);

      // properly clean dom registrations
      eventBus.on('diagram.destroy', function() {
        self._fire('destroy');

        self.unbind();
      });

      eventBus.on('diagram.init', function() {
        self._fire('init');
      });

      eventBus.on('attach', function() {
        if (config && config.bindTo) {
          self.bind(config.bindTo);
        }
      });

      eventBus.on('detach', function() {
        self.unbind();
      });
    }

    Keyboard.$inject = [
      'config.keyboard',
      'eventBus'
    ];

    Keyboard.prototype._keydownHandler = function(event) {
      this._keyHandler(event, KEYDOWN_EVENT);
    };

    Keyboard.prototype._keyupHandler = function(event) {
      this._keyHandler(event, KEYUP_EVENT);
    };

    Keyboard.prototype._keyHandler = function(event, type) {
      var eventBusResult;

      if (this._isEventIgnored(event)) {
        return;
      }

      var context = {
        keyEvent: event
      };

      eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);

      if (eventBusResult) {
        event.preventDefault();
      }
    };

    Keyboard.prototype._isEventIgnored = function(event) {
      if (event.defaultPrevented) {
        return true;
      }

      return isInput(event.target) && this._isModifiedKeyIgnored(event);
    };

    Keyboard.prototype._isModifiedKeyIgnored = function(event) {
      if (!isCmd(event)) {
        return true;
      }

      var allowedModifiers = this._getAllowedModifiers(event.target);
      return allowedModifiers.indexOf(event.key) === -1;
    };

    Keyboard.prototype._getAllowedModifiers = function(element) {
      var modifierContainer = closest(element, '[' + HANDLE_MODIFIER_ATTRIBUTE + ']', true);

      if (!modifierContainer || (this._node && !this._node.contains(modifierContainer))) {
        return [];
      }

      return modifierContainer.getAttribute(HANDLE_MODIFIER_ATTRIBUTE).split(',');
    };

    Keyboard.prototype.bind = function(node) {

      // make sure that the keyboard is only bound once to the DOM
      this.unbind();

      this._node = node;

      // bind key events
      event.bind(node, 'keydown', this._keydownHandler);
      event.bind(node, 'keyup', this._keyupHandler);

      this._fire('bind');
    };

    Keyboard.prototype.getBinding = function() {
      return this._node;
    };

    Keyboard.prototype.unbind = function() {
      var node = this._node;

      if (node) {
        this._fire('unbind');

        // unbind key events
        event.unbind(node, 'keydown', this._keydownHandler);
        event.unbind(node, 'keyup', this._keyupHandler);
      }

      this._node = null;
    };

    Keyboard.prototype._fire = function(event) {
      this._eventBus.fire('keyboard.' + event, { node: this._node });
    };

    /**
     * Add a listener function that is notified with `KeyboardEvent` whenever
     * the keyboard is bound and the user presses a key. If no priority is
     * provided, the default value of 1000 is used.
     *
     * @param {number} [priority]
     * @param {Function} listener
     * @param {string} type
     */
    Keyboard.prototype.addListener = function(priority, listener, type) {
      if (isFunction(priority)) {
        type = listener;
        listener = priority;
        priority = DEFAULT_PRIORITY;
      }

      this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);
    };

    Keyboard.prototype.removeListener = function(listener, type) {
      this._eventBus.off(type || KEYDOWN_EVENT, listener);
    };

    Keyboard.prototype.hasModifier = hasModifier;
    Keyboard.prototype.isCmd = isCmd;
    Keyboard.prototype.isShift = isShift;
    Keyboard.prototype.isKey = isKey;



    // helpers ///////

    function isInput(target) {
      return target && (matches(target, 'input, textarea') || target.contentEditable === 'true');
    }

    var LOW_PRIORITY = 500;


    /**
     * Adds default keyboard bindings.
     *
     * This does not pull in any features will bind only actions that
     * have previously been registered against the editorActions component.
     *
     * @param {EventBus} eventBus
     * @param {Keyboard} keyboard
     */
    function KeyboardBindings(eventBus, keyboard) {

      var self = this;

      eventBus.on('editorActions.init', LOW_PRIORITY, function(event) {

        var editorActions = event.editorActions;

        self.registerBindings(keyboard, editorActions);
      });
    }

    KeyboardBindings.$inject = [
      'eventBus',
      'keyboard'
    ];


    /**
     * Register available keyboard bindings.
     *
     * @param {Keyboard} keyboard
     * @param {EditorActions} editorActions
     */
    KeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {

      /**
       * Add keyboard binding if respective editor action
       * is registered.
       *
       * @param {string} action name
       * @param {Function} fn that implements the key binding
       */
      function addListener(action, fn) {

        if (editorActions.isRegistered(action)) {
          keyboard.addListener(fn);
        }
      }


      // undo
      // (CTRL|CMD) + Z
      addListener('undo', function(context) {

        var event = context.keyEvent;

        if (isUndo(event)) {
          editorActions.trigger('undo');

          return true;
        }
      });

      // redo
      // CTRL + Y
      // CMD + SHIFT + Z
      addListener('redo', function(context) {

        var event = context.keyEvent;

        if (isRedo(event)) {
          editorActions.trigger('redo');

          return true;
        }
      });

      // copy
      // CTRL/CMD + C
      addListener('copy', function(context) {

        var event = context.keyEvent;

        if (isCopy(event)) {
          editorActions.trigger('copy');

          return true;
        }
      });

      // paste
      // CTRL/CMD + V
      addListener('paste', function(context) {

        var event = context.keyEvent;

        if (isPaste(event)) {
          editorActions.trigger('paste');

          return true;
        }
      });

      // zoom in one step
      // CTRL/CMD + +
      addListener('stepZoom', function(context) {

        var event = context.keyEvent;

        // quirk: it has to be triggered by `=` as well to work on international keyboard layout
        // cf: https://github.com/bpmn-io/bpmn-js/issues/1362#issuecomment-722989754
        if (isKey([ '+', 'Add', '=' ], event) && isCmd(event)) {
          editorActions.trigger('stepZoom', { value: 1 });

          return true;
        }
      });

      // zoom out one step
      // CTRL + -
      addListener('stepZoom', function(context) {

        var event = context.keyEvent;

        if (isKey([ '-', 'Subtract' ], event) && isCmd(event)) {
          editorActions.trigger('stepZoom', { value: -1 });

          return true;
        }
      });

      // zoom to the default level
      // CTRL + 0
      addListener('zoom', function(context) {

        var event = context.keyEvent;

        if (isKey('0', event) && isCmd(event)) {
          editorActions.trigger('zoom', { value: 1 });

          return true;
        }
      });

      // delete selected element
      // DEL
      addListener('removeSelection', function(context) {

        var event = context.keyEvent;

        if (isKey([ 'Backspace', 'Delete', 'Del' ], event)) {
          editorActions.trigger('removeSelection');

          return true;
        }
      });
    };

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var KeyboardModule = {
      __init__: [ 'keyboard', 'keyboardBindings' ],
      keyboard: [ 'type', Keyboard ],
      keyboardBindings: [ 'type', KeyboardBindings ]
    };

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../features/keyboard/Keyboard').default} Keyboard
     */

    var DEFAULT_CONFIG = {
      moveSpeed: 50,
      moveSpeedAccelerated: 200
    };


    /**
     * A feature that allows users to move the canvas using the keyboard.
     *
     * @param {Object} config
     * @param {number} [config.moveSpeed=50]
     * @param {number} [config.moveSpeedAccelerated=200]
     * @param {Keyboard} keyboard
     * @param {Canvas} canvas
     */
    function KeyboardMove(
        config,
        keyboard,
        canvas
    ) {

      var self = this;

      this._config = assign$1({}, DEFAULT_CONFIG, config || {});

      keyboard.addListener(arrowsListener);


      function arrowsListener(context) {

        var event = context.keyEvent,
            config = self._config;

        if (!keyboard.isCmd(event)) {
          return;
        }

        if (keyboard.isKey([
          'ArrowLeft', 'Left',
          'ArrowUp', 'Up',
          'ArrowDown', 'Down',
          'ArrowRight', 'Right'
        ], event)) {

          var speed = (
            keyboard.isShift(event) ?
              config.moveSpeedAccelerated :
              config.moveSpeed
          );

          var direction;

          switch (event.key) {
          case 'ArrowLeft':
          case 'Left':
            direction = 'left';
            break;
          case 'ArrowUp':
          case 'Up':
            direction = 'up';
            break;
          case 'ArrowRight':
          case 'Right':
            direction = 'right';
            break;
          case 'ArrowDown':
          case 'Down':
            direction = 'down';
            break;
          }

          self.moveCanvas({
            speed: speed,
            direction: direction
          });

          return true;
        }
      }

      this.moveCanvas = function(opts) {

        var dx = 0,
            dy = 0,
            speed = opts.speed;

        var actualSpeed = speed / Math.min(Math.sqrt(canvas.viewbox().scale), 1);

        switch (opts.direction) {
        case 'left': // Left
          dx = actualSpeed;
          break;
        case 'up': // Up
          dy = actualSpeed;
          break;
        case 'right': // Right
          dx = -actualSpeed;
          break;
        case 'down': // Down
          dy = -actualSpeed;
          break;
        }

        canvas.scroll({
          dx: dx,
          dy: dy
        });
      };

    }


    KeyboardMove.$inject = [
      'config.keyboardMove',
      'keyboard',
      'canvas'
    ];

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var KeyboardMoveModule = {
      __depends__: [
        KeyboardModule
      ],
      __init__: [ 'keyboardMove' ],
      keyboardMove: [ 'type', KeyboardMove ]
    };

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/EventBus').default} EventBus
     */

    var THRESHOLD = 15;


    /**
     * Move the canvas via mouse.
     *
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     */
    function MoveCanvas(eventBus, canvas) {

      var context;


      // listen for move on element mouse down;
      // allow others to hook into the event before us though
      // (dragging / element moving will do this)
      eventBus.on('element.mousedown', 500, function(e) {
        return handleStart(e.originalEvent);
      });


      function handleMove(event) {

        var start = context.start,
            button = context.button,
            position = toPoint(event),
            delta$1 = delta(position, start);

        if (!context.dragging && length(delta$1) > THRESHOLD) {
          context.dragging = true;

          if (button === 0) {
            install(eventBus);
          }

          set('grab');
        }

        if (context.dragging) {

          var lastPosition = context.last || context.start;

          delta$1 = delta(position, lastPosition);

          canvas.scroll({
            dx: delta$1.x,
            dy: delta$1.y
          });

          context.last = position;
        }

        // prevent select
        event.preventDefault();
      }


      function handleEnd(event$1) {
        event.unbind(document, 'mousemove', handleMove);
        event.unbind(document, 'mouseup', handleEnd);

        context = null;

        unset();
      }

      function handleStart(event$1) {

        // event is already handled by '.djs-draggable'
        if (closest(event$1.target, '.djs-draggable')) {
          return;
        }

        var button = event$1.button;

        // reject right mouse button or modifier key
        if (button >= 2 || event$1.ctrlKey || event$1.shiftKey || event$1.altKey) {
          return;
        }

        context = {
          button: button,
          start: toPoint(event$1)
        };

        event.bind(document, 'mousemove', handleMove);
        event.bind(document, 'mouseup', handleEnd);

        // we've handled the event
        return true;
      }

      this.isActive = function() {
        return !!context;
      };

    }


    MoveCanvas.$inject = [
      'eventBus',
      'canvas'
    ];



    // helpers ///////

    function length(point) {
      return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
    }

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var MoveCanvasModule = {
      __init__: [ 'moveCanvas' ],
      moveCanvas: [ 'type', MoveCanvas ]
    };

    /**
     * Get step size for given range and number of steps.
     *
     * @param {Object} range
     * @param {number} range.min
     * @param {number} range.max
     */
    function getStepSize(range, steps) {

      var minLinearRange = log10(range.min),
          maxLinearRange = log10(range.max);

      var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);

      return absoluteLinearRange / steps;
    }

    function cap(range, scale) {
      return Math.max(range.min, Math.min(range.max, scale));
    }

    /**
     * @typedef {import('../../core/Canvas').default} Canvas
     * @typedef {import('../../core/EventBus').default} EventBus
     *
     * @typedef {import('../../util/Types').Point} Point
     */

    var sign = Math.sign || function(n) {
      return n >= 0 ? 1 : -1;
    };

    var RANGE = { min: 0.2, max: 4 },
        NUM_STEPS = 10;

    var DELTA_THRESHOLD = 0.1;

    var DEFAULT_SCALE = 0.75;

    /**
     * An implementation of zooming and scrolling within the
     * {@link Canvas} via the mouse wheel.
     *
     * Mouse wheel zooming / scrolling may be disabled using
     * the {@link toggle(enabled)} method.
     *
     * @param {Object} [config]
     * @param {boolean} [config.enabled=true] default enabled state
     * @param {number} [config.scale=.75] scroll sensivity
     * @param {EventBus} eventBus
     * @param {Canvas} canvas
     */
    function ZoomScroll(config, eventBus, canvas) {

      config = config || {};

      this._enabled = false;

      this._canvas = canvas;
      this._container = canvas._container;

      this._handleWheel = bind$2(this._handleWheel, this);

      this._totalDelta = 0;
      this._scale = config.scale || DEFAULT_SCALE;

      var self = this;

      eventBus.on('canvas.init', function(e) {
        self._init(config.enabled !== false);
      });
    }

    ZoomScroll.$inject = [
      'config.zoomScroll',
      'eventBus',
      'canvas'
    ];

    /**
     * @param {Point} delta
     */
    ZoomScroll.prototype.scroll = function scroll(delta) {
      this._canvas.scroll(delta);
    };


    ZoomScroll.prototype.reset = function reset() {
      this._canvas.zoom('fit-viewport');
    };

    /**
     * Zoom depending on delta.
     *
     * @param {number} delta
     * @param {Point} position
     */
    ZoomScroll.prototype.zoom = function zoom(delta, position) {

      // zoom with half the step size of stepZoom
      var stepSize = getStepSize(RANGE, NUM_STEPS * 2);

      // add until threshold reached
      this._totalDelta += delta;

      if (Math.abs(this._totalDelta) > DELTA_THRESHOLD) {
        this._zoom(delta, position, stepSize);

        // reset
        this._totalDelta = 0;
      }
    };


    ZoomScroll.prototype._handleWheel = function handleWheel(event) {

      // event is already handled by '.djs-scrollable'
      if (closest(event.target, '.djs-scrollable', true)) {
        return;
      }

      var element = this._container;

      event.preventDefault();

      // pinch to zoom is mapped to wheel + ctrlKey = true
      // in modern browsers (!)

      var isZoom = event.ctrlKey;

      var isHorizontalScroll = event.shiftKey;

      var factor = -1 * this._scale,
          delta;

      if (isZoom) {
        factor *= event.deltaMode === 0 ? 0.020 : 0.32;
      } else {
        factor *= event.deltaMode === 0 ? 1.0 : 16.0;
      }

      if (isZoom) {
        var elementRect = element.getBoundingClientRect();

        var offset = {
          x: event.clientX - elementRect.left,
          y: event.clientY - elementRect.top
        };

        delta = (
          Math.sqrt(
            Math.pow(event.deltaY, 2) +
            Math.pow(event.deltaX, 2)
          ) * sign(event.deltaY) * factor
        );

        // zoom in relative to diagram {x,y} coordinates
        this.zoom(delta, offset);
      } else {

        if (isHorizontalScroll) {
          delta = {
            dx: factor * event.deltaY,
            dy: 0
          };
        } else {
          delta = {
            dx: factor * event.deltaX,
            dy: factor * event.deltaY
          };
        }

        this.scroll(delta);
      }
    };

    /**
     * Zoom with fixed step size.
     *
     * @param {number} delta Zoom delta (1 for zooming in, -1 for zooming out).
     * @param {Point} position
     */
    ZoomScroll.prototype.stepZoom = function stepZoom(delta, position) {

      var stepSize = getStepSize(RANGE, NUM_STEPS);

      this._zoom(delta, position, stepSize);
    };


    /**
     * Zoom in/out given a step size.
     *
     * @param {number} delta
     * @param {Point} position
     * @param {number} stepSize
     */
    ZoomScroll.prototype._zoom = function(delta, position, stepSize) {
      var canvas = this._canvas;

      var direction = delta > 0 ? 1 : -1;

      var currentLinearZoomLevel = log10(canvas.zoom());

      // snap to a proximate zoom step
      var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;

      // increase or decrease one zoom step in the given direction
      newLinearZoomLevel += stepSize * direction;

      // calculate the absolute logarithmic zoom level based on the linear zoom level
      // (e.g. 2 for an absolute x2 zoom)
      var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);

      canvas.zoom(cap(RANGE, newLogZoomLevel), position);
    };


    /**
     * Toggle the zoom scroll ability via mouse wheel.
     *
     * @param {boolean} [newEnabled] new enabled state
     */
    ZoomScroll.prototype.toggle = function toggle(newEnabled) {

      var element = this._container;
      var handleWheel = this._handleWheel;

      var oldEnabled = this._enabled;

      if (typeof newEnabled === 'undefined') {
        newEnabled = !oldEnabled;
      }

      // only react on actual changes
      if (oldEnabled !== newEnabled) {

        // add or remove wheel listener based on
        // changed enabled state
        event[newEnabled ? 'bind' : 'unbind'](element, 'wheel', handleWheel, false);
      }

      this._enabled = newEnabled;

      return newEnabled;
    };


    ZoomScroll.prototype._init = function(newEnabled) {
      this.toggle(newEnabled);
    };

    /**
     * @type { import('didi').ModuleDeclaration }
     */
    var ZoomScrollModule = {
      __init__: [ 'zoomScroll' ],
      zoomScroll: [ 'type', ZoomScroll ]
    };

    /**
     * @typedef { import('./BaseViewer').BaseViewerOptions } BaseViewerOptions
     */

    /**
     * A viewer with mouse and keyboard navigation features.
     *
     * @param {BaseViewerOptions} [options]
     */
    function NavigatedViewer(options) {
      Viewer.call(this, options);
    }

    e(NavigatedViewer, Viewer);


    NavigatedViewer.prototype._navigationModules = [
      KeyboardMoveModule,
      MoveCanvasModule,
      ZoomScrollModule
    ];

    NavigatedViewer.prototype._modules = [].concat(
      Viewer.prototype._modules,
      NavigatedViewer.prototype._navigationModules
    );

    var ready = function (fn) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (document.readyState != "loading") {
                setTimeout(function () { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, fn()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); }, 0);
            }
            else {
                document.addEventListener("DOMContentLoaded", fn);
            }
            return [2 /*return*/];
        });
    }); };
    ready(function () { return __awaiter(void 0, void 0, void 0, function () {
        var inputForm, submitForm, submitInput, form, schema, data, diagram, viewer, canvas, modeling, registry, element, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    inputForm = document.getElementById("collective-bpmproxy-form");
                    submitForm = document.getElementById("collective-bpmproxy-form-submit");
                    submitInput = document.getElementById("collective-bpmproxy-form-data");
                    if (!(!!inputForm && !!submitForm && !!submitInput)) return [3 /*break*/, 2];
                    form = new Form({ container: inputForm });
                    schema = JSON.parse(inputForm.dataset.schema);
                    data = JSON.parse(inputForm.dataset.data || "{}");
                    return [4 /*yield*/, form.importSchema(schema, data)];
                case 1:
                    _a.sent();
                    form.on("submit", function (event) {
                        if (Object.keys(event.errors).length === 0) {
                            submitInput.value = JSON.stringify(event.data);
                            submitForm.submit();
                        }
                    });
                    _a.label = 2;
                case 2:
                    diagram = document.getElementById("collective-bpmproxy-diagram");
                    if (!(diagram && diagram.dataset.bpmn20_xml)) return [3 /*break*/, 6];
                    viewer = new NavigatedViewer({
                        additionalModules: [ModelingModule],
                        container: "#collective-bpmproxy-diagram",
                    });
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, viewer.importXML(diagram.dataset.bpmn20_xml)];
                case 4:
                    (_a.sent()).warnings;
                    canvas = viewer.get("canvas");
                    modeling = viewer.get("modeling");
                    registry = viewer.get("elementRegistry");
                    canvas.zoom("fit-viewport");
                    if (!!diagram.dataset.element) {
                        element = registry.get(diagram.dataset.element);
                        modeling.setColor(element, { stroke: "#000000", fill: "#FFFF00" });
                    }
                    return [3 /*break*/, 6];
                case 5:
                    err_1 = _a.sent();
                    console.log("error rendering", err_1);
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/];
            }
        });
    }); });

})();
